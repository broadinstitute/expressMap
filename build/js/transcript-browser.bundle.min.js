var TranscriptBrowser=function(t){"use strict";var e="http://www.w3.org/1999/xhtml",n={svg:"http://www.w3.org/2000/svg",xhtml:e,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},r=function(t){var e=t+="",r=e.indexOf(":");return r>=0&&"xmlns"!==(e=t.slice(0,r))&&(t=t.slice(r+1)),n.hasOwnProperty(e)?{space:n[e],local:t}:t};var a=function(t){var n=r(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,r=this.namespaceURI;return r===e&&n.documentElement.namespaceURI===e?n.createElement(t):n.createElementNS(r,t)}})(n)};function i(){}var o=function(t){return null==t?i:function(){return this.querySelector(t)}};function c(){return[]}var s=function(t){return null==t?c:function(){return this.querySelectorAll(t)}},f=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var l=document.documentElement;if(!l.matches){var u=l.webkitMatchesSelector||l.msMatchesSelector||l.mozMatchesSelector||l.oMatchesSelector;f=function(t){return function(){return u.call(this,t)}}}}var h=f,b=function(t){return new Array(t.length)};function p(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}p.prototype={constructor:p,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var g="$";function m(t,e,n,r,a,i){for(var o,c=0,s=e.length,f=i.length;c<f;++c)(o=e[c])?(o.__data__=i[c],r[c]=o):n[c]=new p(t,i[c]);for(;c<s;++c)(o=e[c])&&(a[c]=o)}function y(t,e,n,r,a,i,o){var c,s,f,l={},u=e.length,d=i.length,h=new Array(u);for(c=0;c<u;++c)(s=e[c])&&(h[c]=f=g+o.call(s,s.__data__,c,e),f in l?a[c]=s:l[f]=s);for(c=0;c<d;++c)(s=l[f=g+o.call(t,i[c],c,i)])?(r[c]=s,s.__data__=i[c],l[f]=null):n[c]=new p(t,i[c]);for(c=0;c<u;++c)(s=e[c])&&l[h[c]]===s&&(a[c]=s)}function v(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var x=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function w(t,e){return t.style.getPropertyValue(e)||x(t).getComputedStyle(t,null).getPropertyValue(e)}function _(t){return t.trim().split(/^|\s+/)}function M(t){return t.classList||new S(t)}function S(t){this._node=t,this._names=_(t.getAttribute("class")||"")}function E(t,e){for(var n=M(t),r=-1,a=e.length;++r<a;)n.add(e[r])}function A(t,e){for(var n=M(t),r=-1,a=e.length;++r<a;)n.remove(e[r])}S.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function T(){this.textContent=""}function I(){this.innerHTML=""}function N(){this.nextSibling&&this.parentNode.appendChild(this)}function k(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function C(){return null}function D(){var t=this.parentNode;t&&t.removeChild(this)}function j(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function P(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var L={},U=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(L={mouseenter:"mouseover",mouseleave:"mouseout"}));function O(t,e,n){return t=F(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function F(t,e,n){return function(r){var a=U;U=r;try{t.call(this,this.__data__,e,n)}finally{U=a}}}function Y(t){return function(){var e=this.__on;if(e){for(var n,r=0,a=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++a]=n:this.removeEventListener(n.type,n.listener,n.capture);++a?e.length=a:delete this.__on}}}function B(t,e,n){var r=L.hasOwnProperty(t.type)?O:F;return function(a,i,o){var c,s=this.__on,f=r(e,i,o);if(s)for(var l=0,u=s.length;l<u;++l)if((c=s[l]).type===t.type&&c.name===t.name)return this.removeEventListener(c.type,c.listener,c.capture),this.addEventListener(c.type,c.listener=f,c.capture=n),void(c.value=e);this.addEventListener(t.type,f,n),c={type:t.type,name:t.name,value:e,listener:f,capture:n},s?s.push(c):this.__on=[c]}}function H(t,e,n){var r=x(t),a=r.CustomEvent;"function"==typeof a?a=new a(e,n):(a=r.document.createEvent("Event"),n?(a.initEvent(e,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(e,!1,!1)),t.dispatchEvent(a)}var q=[null];function X(t,e){this._groups=t,this._parents=e}function V(){return new X([[document.documentElement]],q)}X.prototype=V.prototype={constructor:X,select:function(t){"function"!=typeof t&&(t=o(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,c,s=e[a],f=s.length,l=r[a]=new Array(f),u=0;u<f;++u)(i=s[u])&&(c=t.call(i,i.__data__,u,s))&&("__data__"in i&&(c.__data__=i.__data__),l[u]=c);return new X(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=s(t));for(var e=this._groups,n=e.length,r=[],a=[],i=0;i<n;++i)for(var o,c=e[i],f=c.length,l=0;l<f;++l)(o=c[l])&&(r.push(t.call(o,o.__data__,l,c)),a.push(o));return new X(r,a)},filter:function(t){"function"!=typeof t&&(t=h(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],c=o.length,s=r[a]=[],f=0;f<c;++f)(i=o[f])&&t.call(i,i.__data__,f,o)&&s.push(i);return new X(r,this._parents)},data:function(t,e){if(!t)return b=new Array(this.size()),l=-1,this.each(function(t){b[++l]=t}),b;var n,r=e?y:m,a=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var o=i.length,c=new Array(o),s=new Array(o),f=new Array(o),l=0;l<o;++l){var u=a[l],d=i[l],h=d.length,b=t.call(u,u&&u.__data__,l,a),p=b.length,g=s[l]=new Array(p),v=c[l]=new Array(p);r(u,d,g,v,f[l]=new Array(h),b,e);for(var x,w,_=0,M=0;_<p;++_)if(x=g[_]){for(_>=M&&(M=_+1);!(w=v[M])&&++M<p;);x._next=w||null}}return(c=new X(c,a))._enter=s,c._exit=f,c},enter:function(){return new X(this._enter||this._groups.map(b),this._parents)},exit:function(){return new X(this._exit||this._groups.map(b),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),c=0;c<i;++c)for(var s,f=e[c],l=n[c],u=f.length,d=o[c]=new Array(u),h=0;h<u;++h)(s=f[h]||l[h])&&(d[h]=s);for(;c<r;++c)o[c]=e[c];return new X(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,a=t[e],i=a.length-1,o=a[i];--i>=0;)(r=a[i])&&(o&&o!==r.nextSibling&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=v);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var o,c=n[i],s=c.length,f=a[i]=new Array(s),l=0;l<s;++l)(o=c[l])&&(f[l]=o);f.sort(e)}return new X(a,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],a=0,i=r.length;a<i;++a){var o=r[a];if(o)return o}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var a,i=e[n],o=0,c=i.length;o<c;++o)(a=i[o])&&t.call(a,a.__data__,o,i);return this},attr:function(t,e){var n=r(t);if(arguments.length<2){var a=this.node();return n.local?a.getAttributeNS(n.space,n.local):a.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):w(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=_(t+"");if(arguments.length<2){for(var r=M(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?E:A)(this,t)}}:e?function(t){return function(){E(this,t)}}:function(t){return function(){A(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?T:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?I:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(N)},lower:function(){return this.each(k)},append:function(t){var e="function"==typeof t?t:a(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:a(t),r=null==e?C:"function"==typeof e?e:o(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(D)},clone:function(t){return this.select(t?P:j)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,a,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),o=i.length;if(!(arguments.length<2)){for(c=e?B:Y,null==n&&(n=!1),r=0;r<o;++r)this.each(c(i[r],e,n));return this}var c=this.node().__on;if(c)for(var s,f=0,l=c.length;f<l;++f)for(r=0,s=c[f];r<o;++r)if((a=i[r]).type===s.type&&a.name===s.name)return s.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return H(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return H(this,t,e)}})(t,e))}};var z=function(t){return"string"==typeof t?new X([[document.querySelector(t)]],[document.documentElement]):new X([[t]],q)},R=function(t){return"string"==typeof t?new X([document.querySelectorAll(t)],[document.documentElement]):new X([null==t?[]:t],q)},W={},G={},J=34,Z=10,Q=13;function K(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}var tt=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,a=[],i=t.length,o=0,c=0,s=i<=0,f=!1;function l(){if(s)return G;if(f)return f=!1,W;var e,r,a=o;if(t.charCodeAt(a)===J){for(;o++<i&&t.charCodeAt(o)!==J||t.charCodeAt(++o)===J;);return(e=o)>=i?s=!0:(r=t.charCodeAt(o++))===Z?f=!0:r===Q&&(f=!0,t.charCodeAt(o)===Z&&++o),t.slice(a+1,e-1).replace(/""/g,'"')}for(;o<i;){if((r=t.charCodeAt(e=o++))===Z)f=!0;else if(r===Q)f=!0,t.charCodeAt(o)===Z&&++o;else if(r!==n)continue;return t.slice(a,e)}return s=!0,t.slice(a,i)}for(t.charCodeAt(i-1)===Z&&--i,t.charCodeAt(i-1)===Q&&--i;(r=l())!==G;){for(var u=[];r!==W&&r!==G;)u.push(r),r=l();e&&null==(u=e(u,c++))||a.push(u)}return a}function a(e){return e.map(i).join(t)}function i(t){return null==t?"":e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,a,i=r(t,function(t,r){if(n)return n(t,r-1);a=t,n=e?function(t,e){var n=K(t);return function(r,a){return e(n(r),a,t)}}(t,e):K(t)});return i.columns=a||[],i},parseRows:r,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}(e)),[n.map(i).join(t)].concat(e.map(function(e){return n.map(function(t){return i(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(a).join("\n")}}};tt(","),tt("\t");function et(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var nt=function(t,e){return fetch(t,e).then(et)},rt=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN};var at,it,ot=(1===(at=rt).length&&(it=at,at=function(t,e){return rt(it(t),e)}),{left:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var a=n+r>>>1;at(t[a],e)<0?n=a+1:r=a}return n},right:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var a=n+r>>>1;at(t[a],e)>0?r=a:n=a+1}return n}}).right,ct=function(t,e,n){t=+t,e=+e,n=(a=arguments.length)<2?(e=t,t=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(a);++r<a;)i[r]=t+r*n;return i},st=Math.sqrt(50),ft=Math.sqrt(10),lt=Math.sqrt(2),ut=function(t,e,n){var r,a,i,o,c=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(a=t,t=e,e=a),0===(o=dt(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),i=new Array(a=Math.ceil(e-t+1));++c<a;)i[c]=(t+c)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),i=new Array(a=Math.ceil(t-e+1));++c<a;)i[c]=(t-c)/o;return r&&i.reverse(),i};function dt(t,e,n){var r=(e-t)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=st?10:i>=ft?5:i>=lt?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=st?10:i>=ft?5:i>=lt?2:1)}var ht=function(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&n>r&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&n>r&&(r=n);return r},bt=function(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&r>n&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&r>n&&(r=n);return r},pt=function(t,e){var n,r=t.length,a=-1,i=0;if(null==e)for(;++a<r;)(n=+t[a])&&(i+=n);else for(;++a<r;)(n=+e(t[a],a,t))&&(i+=n);return i};function gt(){}function mt(t,e){var n=new gt;if(t instanceof gt)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,a=-1,i=t.length;if(null==e)for(;++a<i;)n.set(a,t[a]);else for(;++a<i;)n.set(e(r=t[a],a,t),r)}else if(t)for(var o in t)n.set(o,t[o]);return n}gt.prototype=mt.prototype={constructor:gt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var yt=function(){var t,e,n,r=[],a=[];function i(n,a,o,c){if(a>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var s,f,l,u=-1,d=n.length,h=r[a++],b=mt(),p=o();++u<d;)(l=b.get(s=h(f=n[u])+""))?l.push(f):b.set(s,[f]);return b.each(function(t,e){c(p,e,i(t,a,o,c))}),p}return n={object:function(t){return i(t,0,vt,xt)},map:function(t){return i(t,0,wt,_t)},entries:function(t){return function t(n,i){if(++i>r.length)return n;var o,c=a[i-1];return null!=e&&i>=r.length?o=n.entries():(o=[],n.each(function(e,n){o.push({key:n,values:t(e,i)})})),null!=c?o.sort(function(t,e){return c(t.key,e.key)}):o}(i(t,0,wt,_t),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return a[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}};function vt(){return{}}function xt(t,e,n){t[e]=n}function wt(){return mt()}function _t(t,e,n){t.set(e,n)}var Mt=Array.prototype,St=Mt.map,Et=Mt.slice,At={name:"implicit"};function Tt(){var t,e,n=function t(e){var n=mt(),r=[],a=At;function i(t){var i=t+"",o=n.get(i);if(!o){if(a!==At)return a;n.set(i,o=r.push(t))}return e[(o-1)%e.length]}return e=null==e?[]:Et.call(e),i.domain=function(t){if(!arguments.length)return r.slice();r=[],n=mt();for(var e,a,o=-1,c=t.length;++o<c;)n.has(a=(e=t[o])+"")||n.set(a,r.push(e));return i},i.range=function(t){return arguments.length?(e=Et.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(a=t,i):a},i.copy=function(){return t().domain(r).range(e).unknown(a)},i}().unknown(void 0),r=n.domain,a=n.range,i=[0,1],o=!1,c=0,s=0,f=.5;function l(){var n=r().length,l=i[1]<i[0],u=i[l-0],d=i[1-l];t=(d-u)/Math.max(1,n-c+2*s),o&&(t=Math.floor(t)),u+=(d-u-t*(n-c))*f,e=t*(1-c),o&&(u=Math.round(u),e=Math.round(e));var h=ct(n).map(function(e){return u+t*e});return a(l?h.reverse():h)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),l()):r()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],l()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],o=!0,l()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(o=!!t,l()):o},n.padding=function(t){return arguments.length?(c=s=Math.max(0,Math.min(1,t)),l()):c},n.paddingInner=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),l()):c},n.paddingOuter=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),l()):s},n.align=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),l()):f},n.copy=function(){return Tt().domain(r()).range(i).round(o).paddingInner(c).paddingOuter(s).align(f)},l()}var It=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function Nt(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function $t(){}var kt="\\s*([+-]?\\d+)\\s*",Ct="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Dt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",jt=/^#([0-9a-f]{3})$/,Pt=/^#([0-9a-f]{6})$/,Lt=new RegExp("^rgb\\("+[kt,kt,kt]+"\\)$"),Ut=new RegExp("^rgb\\("+[Dt,Dt,Dt]+"\\)$"),Ot=new RegExp("^rgba\\("+[kt,kt,kt,Ct]+"\\)$"),Ft=new RegExp("^rgba\\("+[Dt,Dt,Dt,Ct]+"\\)$"),Yt=new RegExp("^hsl\\("+[Ct,Dt,Dt]+"\\)$"),Bt=new RegExp("^hsla\\("+[Ct,Dt,Dt,Ct]+"\\)$"),Ht={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function qt(t){var e;return t=(t+"").trim().toLowerCase(),(e=jt.exec(t))?new Wt((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=Pt.exec(t))?Xt(parseInt(e[1],16)):(e=Lt.exec(t))?new Wt(e[1],e[2],e[3],1):(e=Ut.exec(t))?new Wt(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Ot.exec(t))?Vt(e[1],e[2],e[3],e[4]):(e=Ft.exec(t))?Vt(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Yt.exec(t))?Jt(e[1],e[2]/100,e[3]/100,1):(e=Bt.exec(t))?Jt(e[1],e[2]/100,e[3]/100,e[4]):Ht.hasOwnProperty(t)?Xt(Ht[t]):"transparent"===t?new Wt(NaN,NaN,NaN,0):null}function Xt(t){return new Wt(t>>16&255,t>>8&255,255&t,1)}function Vt(t,e,n,r){return r<=0&&(t=e=n=NaN),new Wt(t,e,n,r)}function zt(t){return t instanceof $t||(t=qt(t)),t?new Wt((t=t.rgb()).r,t.g,t.b,t.opacity):new Wt}function Rt(t,e,n,r){return 1===arguments.length?zt(t):new Wt(t,e,n,null==r?1:r)}function Wt(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Gt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Jt(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Zt(t,e,n,r)}function Zt(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Qt(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}It($t,qt,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),It(Wt,Rt,Nt($t,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Wt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Wt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Gt(this.r)+Gt(this.g)+Gt(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),It(Zt,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Zt)return new Zt(t.h,t.s,t.l,t.opacity);if(t instanceof $t||(t=qt(t)),!t)return new Zt;if(t instanceof Zt)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,a=Math.min(e,n,r),i=Math.max(e,n,r),o=NaN,c=i-a,s=(i+a)/2;return c?(o=e===i?(n-r)/c+6*(n<r):n===i?(r-e)/c+2:(e-n)/c+4,c/=s<.5?i+a:2-i-a,o*=60):c=s>0&&s<1?0:o,new Zt(o,c,s,t.opacity)}(t):new Zt(t,e,n,null==r?1:r)},Nt($t,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Zt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Zt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,a=2*n-r;return new Wt(Qt(t>=240?t-240:t+120,a,r),Qt(t,a,r),Qt(t<120?t+240:t-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Kt=Math.PI/180,te=180/Math.PI,ee=.96422,ne=1,re=.82521,ae=4/29,ie=6/29,oe=3*ie*ie,ce=ie*ie*ie;function se(t){if(t instanceof fe)return new fe(t.l,t.a,t.b,t.opacity);if(t instanceof be){if(isNaN(t.h))return new fe(t.l,0,0,t.opacity);var e=t.h*Kt;return new fe(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof Wt||(t=zt(t));var n,r,a=he(t.r),i=he(t.g),o=he(t.b),c=le((.2225045*a+.7168786*i+.0606169*o)/ne);return a===i&&i===o?n=r=c:(n=le((.4360747*a+.3850649*i+.1430804*o)/ee),r=le((.0139322*a+.0971045*i+.7141733*o)/re)),new fe(116*c-16,500*(n-c),200*(c-r),t.opacity)}function fe(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function le(t){return t>ce?Math.pow(t,1/3):t/oe+ae}function ue(t){return t>ie?t*t*t:oe*(t-ae)}function de(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function he(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function be(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}It(fe,function(t,e,n,r){return 1===arguments.length?se(t):new fe(t,e,n,null==r?1:r)},Nt($t,{brighter:function(t){return new fe(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new fe(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Wt(de(3.1338561*(e=ee*ue(e))-1.6168667*(t=ne*ue(t))-.4906146*(n=re*ue(n))),de(-.9787684*e+1.9161415*t+.033454*n),de(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),It(be,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof be)return new be(t.h,t.c,t.l,t.opacity);if(t instanceof fe||(t=se(t)),0===t.a&&0===t.b)return new be(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*te;return new be(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new be(t,e,n,null==r?1:r)},Nt($t,{brighter:function(t){return new be(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new be(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return se(this).rgb()}}));var pe=-.14861,ge=1.78277,me=-.29227,ye=-.90649,ve=1.97294,xe=ve*ye,we=ve*ge,_e=ge*me-ye*pe;function Me(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Se)return new Se(t.h,t.s,t.l,t.opacity);t instanceof Wt||(t=zt(t));var e=t.r/255,n=t.g/255,r=t.b/255,a=(_e*r+xe*e-we*n)/(_e+xe-we),i=r-a,o=(ve*(n-a)-me*i)/ye,c=Math.sqrt(o*o+i*i)/(ve*a*(1-a)),s=c?Math.atan2(o,i)*te-120:NaN;return new Se(s<0?s+360:s,c,a,t.opacity)}(t):new Se(t,e,n,null==r?1:r)}function Se(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Ee(t,e,n,r,a){var i=t*t,o=i*t;return((1-3*t+3*i-o)*e+(4-6*i+3*o)*n+(1+3*t+3*i-3*o)*r+o*a)/6}It(Se,Me,Nt($t,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Se(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Se(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Kt,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),a=Math.sin(t);return new Wt(255*(e+n*(pe*r+ge*a)),255*(e+n*(me*r+ye*a)),255*(e+n*(ve*r)),this.opacity)}}));var Ae=function(t){return function(){return t}};function Te(t,e){return function(n){return t+n*e}}function Ie(t){return 1==(t=+t)?Ne:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Ae(isNaN(e)?n:e)}}function Ne(t,e){var n=e-t;return n?Te(t,n):Ae(isNaN(t)?e:t)}var $e=function t(e){var n=Ie(e);function r(t,e){var r=n((t=Rt(t)).r,(e=Rt(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),o=Ne(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function ke(t){return function(e){var n,r,a=e.length,i=new Array(a),o=new Array(a),c=new Array(a);for(n=0;n<a;++n)r=Rt(e[n]),i[n]=r.r||0,o[n]=r.g||0,c[n]=r.b||0;return i=t(i),o=t(o),c=t(c),r.opacity=1,function(t){return r.r=i(t),r.g=o(t),r.b=c(t),r+""}}}var Ce=ke(function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),a=t[r],i=t[r+1],o=r>0?t[r-1]:2*a-i,c=r<e-1?t[r+2]:2*i-a;return Ee((n-r/e)*e,o,a,i,c)}}),De=(ke(function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),a=t[(r+e-1)%e],i=t[r%e],o=t[(r+1)%e],c=t[(r+2)%e];return Ee((n-r/e)*e,a,i,o,c)}}),function(t,e){return e-=t=+t,function(n){return t+e*n}}),je=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Pe=new RegExp(je.source,"g");var Le,Ue,Oe,Fe,Ye=function(t,e){var n,r,a,i=je.lastIndex=Pe.lastIndex=0,o=-1,c=[],s=[];for(t+="",e+="";(n=je.exec(t))&&(r=Pe.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),c[o]?c[o]+=a:c[++o]=a),(n=n[0])===(r=r[0])?c[o]?c[o]+=r:c[++o]=r:(c[++o]=null,s.push({i:o,x:De(n,r)})),i=Pe.lastIndex;return i<e.length&&(a=e.slice(i),c[o]?c[o]+=a:c[++o]=a),c.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)c[(n=s[r]).i]=n.x(t);return c.join("")})},Be=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?Ae(e):("number"===r?De:"string"===r?(n=qt(e))?(e=n,$e):Ye:e instanceof qt?$e:e instanceof Date?function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}}:Array.isArray(e)?function(t,e){var n,r=e?e.length:0,a=t?Math.min(r,t.length):0,i=new Array(a),o=new Array(r);for(n=0;n<a;++n)i[n]=Be(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<a;++n)o[n]=i[n](t);return o}}:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?function(t,e){var n,r={},a={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Be(t[n],e[n]):a[n]=e[n];return function(t){for(n in r)a[n]=r[n](t);return a}}:De)(t,e)},He=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},qe=180/Math.PI,Xe={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Ve=function(t,e,n,r,a,i){var o,c,s;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(s=t*n+e*r)&&(n-=t*s,r-=e*s),(c=Math.sqrt(n*n+r*r))&&(n/=c,r/=c,s/=c),t*r<e*n&&(t=-t,e=-e,s=-s,o=-o),{translateX:a,translateY:i,rotate:Math.atan2(e,t)*qe,skewX:Math.atan(s)*qe,scaleX:o,scaleY:c}};function ze(t,e,n,r){function a(t){return t.length?t.pop()+" ":""}return function(i,o){var c=[],s=[];return i=t(i),o=t(o),function(t,r,a,i,o,c){if(t!==a||r!==i){var s=o.push("translate(",null,e,null,n);c.push({i:s-4,x:De(t,a)},{i:s-2,x:De(r,i)})}else(a||i)&&o.push("translate("+a+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,c,s),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:De(t,e)})):e&&n.push(a(n)+"rotate("+e+r)}(i.rotate,o.rotate,c,s),function(t,e,n,i){t!==e?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:De(t,e)}):e&&n.push(a(n)+"skewX("+e+r)}(i.skewX,o.skewX,c,s),function(t,e,n,r,i,o){if(t!==n||e!==r){var c=i.push(a(i)+"scale(",null,",",null,")");o.push({i:c-4,x:De(t,n)},{i:c-2,x:De(e,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,c,s),i=o=null,function(t){for(var e,n=-1,r=s.length;++n<r;)c[(e=s[n]).i]=e.x(t);return c.join("")}}}var Re=ze(function(t){return"none"===t?Xe:(Le||(Le=document.createElement("DIV"),Ue=document.documentElement,Oe=document.defaultView),Le.style.transform=t,t=Oe.getComputedStyle(Ue.appendChild(Le),null).getPropertyValue("transform"),Ue.removeChild(Le),t=t.slice(7,-1).split(","),Ve(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),We=ze(function(t){return null==t?Xe:(Fe||(Fe=document.createElementNS("http://www.w3.org/2000/svg","g")),Fe.setAttribute("transform",t),(t=Fe.transform.baseVal.consolidate())?(t=t.matrix,Ve(t.a,t.b,t.c,t.d,t.e,t.f)):Xe)},", ",")",")");function Ge(t){return function e(n){function r(e,r){var a=t((e=Me(e)).h,(r=Me(r)).h),i=Ne(e.s,r.s),o=Ne(e.l,r.l),c=Ne(e.opacity,r.opacity);return function(t){return e.h=a(t),e.s=i(t),e.l=o(Math.pow(t,n)),e.opacity=c(t),e+""}}return n=+n,r.gamma=e,r}(1)}Ge(function(t,e){var n=e-t;return n?Te(t,n>180||n<-180?n-360*Math.round(n/360):n):Ae(isNaN(t)?e:t)});var Je=Ge(Ne),Ze=function(t){return function(){return t}},Qe=function(t){return+t},Ke=[0,1];function tn(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:Ze(e)}function en(t,e,n,r){var a=t[0],i=t[1],o=e[0],c=e[1];return i<a?(a=n(i,a),o=r(c,o)):(a=n(a,i),o=r(o,c)),function(t){return o(a(t))}}function nn(t,e,n,r){var a=Math.min(t.length,e.length)-1,i=new Array(a),o=new Array(a),c=-1;for(t[a]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++c<a;)i[c]=n(t[c],t[c+1]),o[c]=r(e[c],e[c+1]);return function(e){var n=ot(t,e,1,a)-1;return o[n](i[n](e))}}var rn=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},an=function(t){return(t=rn(Math.abs(t)))?t[1]:NaN},on=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function cn(t){return new sn(t)}function sn(t){if(!(e=on.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}cn.prototype=sn.prototype,sn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var fn,ln,un,dn,hn=function(t){t:for(var e,n=t.length,r=1,a=-1;r<n;++r)switch(t[r]){case".":a=e=r;break;case"0":0===a&&(a=r),e=r;break;default:if(a>0){if(!+t[r])break t;a=0}}return a>0?t.slice(0,a)+t.slice(e+1):t},bn=function(t,e){var n=rn(t,e);if(!n)return t+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")},pn={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return bn(100*t,e)},r:bn,s:function(t,e){var n=rn(t,e);if(!n)return t+"";var r=n[0],a=n[1],i=a-(fn=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,o=r.length;return i===o?r:i>o?r+new Array(i-o+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+rn(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},gn=function(t){return t},mn=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];ln=function(t){var e,n,r=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,r){for(var a=t.length,i=[],o=0,c=e[0],s=0;a>0&&c>0&&(s+c+1>r&&(c=Math.max(1,r-s)),i.push(t.substring(a-=c,a+c)),!((s+=c+1)>r));)c=e[o=(o+1)%e.length];return i.reverse().join(n)}):gn,a=t.currency,i=t.decimal,o=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):gn,c=t.percent||"%";function s(t){var e=(t=cn(t)).fill,n=t.align,s=t.sign,f=t.symbol,l=t.zero,u=t.width,d=t.comma,h=t.precision,b=t.trim,p=t.type;"n"===p?(d=!0,p="g"):pn[p]||(null==h&&(h=12),b=!0,p="g"),(l||"0"===e&&"="===n)&&(l=!0,e="0",n="=");var g="$"===f?a[0]:"#"===f&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",m="$"===f?a[1]:/[%p]/.test(p)?c:"",y=pn[p],v=/[defgprs%]/.test(p);function x(t){var a,c,f,x=g,w=m;if("c"===p)w=y(t)+w,t="";else{var _=(t=+t)<0;if(t=y(Math.abs(t),h),b&&(t=hn(t)),_&&0==+t&&(_=!1),x=(_?"("===s?s:"-":"-"===s||"("===s?"":s)+x,w=("s"===p?mn[8+fn/3]:"")+w+(_&&"("===s?")":""),v)for(a=-1,c=t.length;++a<c;)if(48>(f=t.charCodeAt(a))||f>57){w=(46===f?i+t.slice(a+1):t.slice(a))+w,t=t.slice(0,a);break}}d&&!l&&(t=r(t,1/0));var M=x.length+t.length+w.length,S=M<u?new Array(u-M+1).join(e):"";switch(d&&l&&(t=r(S+t,S.length?u-w.length:1/0),S=""),n){case"<":t=x+t+w+S;break;case"=":t=x+S+t+w;break;case"^":t=S.slice(0,M=S.length>>1)+x+t+w+S.slice(M);break;default:t=S+x+t+w}return o(t)}return h=null==h?6:/[gprs]/.test(p)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),x.toString=function(){return t+""},x}return{format:s,formatPrefix:function(t,e){var n=s(((t=cn(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(an(e)/3))),a=Math.pow(10,-r),i=mn[8+r/3];return function(t){return n(a*t)+i}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),un=ln.format,dn=ln.formatPrefix;var yn=function(t,e,n){var r,a=t[0],i=t[t.length-1],o=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=st?a*=10:i>=ft?a*=5:i>=lt&&(a*=2),e<t?-a:a}(a,i,null==e?10:e);switch((n=cn(null==n?",f":n)).type){case"s":var c=Math.max(Math.abs(a),Math.abs(i));return null!=n.precision||isNaN(r=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(an(e)/3)))-an(Math.abs(t)))}(o,c))||(n.precision=r),dn(n,c);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(r=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,an(e)-an(t))+1}(o,Math.max(Math.abs(a),Math.abs(i))))||(n.precision=r-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(r=function(t){return Math.max(0,-an(Math.abs(t)))}(o))||(n.precision=r-2*("%"===n.type))}return un(n)};function vn(t){var e=t.domain;return t.ticks=function(t){var n=e();return ut(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return yn(e(),t,n)},t.nice=function(n){null==n&&(n=10);var r,a=e(),i=0,o=a.length-1,c=a[i],s=a[o];return s<c&&(r=c,c=s,s=r,r=i,i=o,o=r),(r=dt(c,s,n))>0?r=dt(c=Math.floor(c/r)*r,s=Math.ceil(s/r)*r,n):r<0&&(r=dt(c=Math.ceil(c*r)/r,s=Math.floor(s*r)/r,n)),r>0?(a[i]=Math.floor(c/r)*r,a[o]=Math.ceil(s/r)*r,e(a)):r<0&&(a[i]=Math.ceil(c*r)/r,a[o]=Math.floor(s*r)/r,e(a)),t},t}function xn(){var t=function(t,e){var n,r,a,i=Ke,o=Ke,c=Be,s=!1;function f(){return n=Math.min(i.length,o.length)>2?nn:en,r=a=null,l}function l(e){return(r||(r=n(i,o,s?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:r(t)}}}(t):t,c)))(+e)}return l.invert=function(t){return(a||(a=n(o,i,tn,s?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:r(t)}}}(e):e)))(+t)},l.domain=function(t){return arguments.length?(i=St.call(t,Qe),f()):i.slice()},l.range=function(t){return arguments.length?(o=Et.call(t),f()):o.slice()},l.rangeRound=function(t){return o=Et.call(t),c=He,f()},l.clamp=function(t){return arguments.length?(s=!!t,f()):s},l.interpolate=function(t){return arguments.length?(c=t,f()):c},f()}(tn,De);return t.copy=function(){return e=t,xn().domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp());var e},vn(t)}var wn=new Date,_n=new Date;function Mn(t,e,n,r){function a(e){return t(e=new Date(+e)),e}return a.floor=a,a.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},a.round=function(t){var e=a(t),n=a.ceil(t);return t-e<n-t?e:n},a.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},a.range=function(n,r,i){var o,c=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return c;do{c.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<r);return c},a.filter=function(n){return Mn(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(a.count=function(e,r){return wn.setTime(+e),_n.setTime(+r),t(wn),t(_n),Math.floor(n(wn,_n))},a.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?a.filter(r?function(e){return r(e)%t==0}:function(e){return a.count(0,e)%t==0}):a:null}),a}var Sn=Mn(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});Sn.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Mn(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):Sn:null};var En=6e4,An=6048e5,Tn=(Mn(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),Mn(function(t){t.setTime(Math.floor(t/En)*En)},function(t,e){t.setTime(+t+e*En)},function(t,e){return(e-t)/En},function(t){return t.getMinutes()}),Mn(function(t){var e=t.getTimezoneOffset()*En%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),Mn(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*En)/864e5},function(t){return t.getDate()-1}));function In(t){return Mn(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*En)/An})}var Nn=In(0),$n=In(1),kn=(In(2),In(3),In(4)),Cn=(In(5),In(6),Mn(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Mn(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Cn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Mn(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};Mn(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*En)},function(t,e){return(e-t)/En},function(t){return t.getUTCMinutes()}),Mn(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()});var Dn=Mn(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1});function jn(t){return Mn(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/An})}var Pn=jn(0),Ln=jn(1),Un=(jn(2),jn(3),jn(4)),On=(jn(5),jn(6),Mn(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Mn(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function Fn(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Yn(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Bn(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}On.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Mn(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var Hn,qn,Xn,Vn={"-":"",_:" ",0:"0"},zn=/^\s*\d+/,Rn=/^%/,Wn=/[\\^$*+?|[\]().{}]/g;function Gn(t,e,n){var r=t<0?"-":"",a=(r?-t:t)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(e)+a:a)}function Jn(t){return t.replace(Wn,"\\$&")}function Zn(t){return new RegExp("^(?:"+t.map(Jn).join("|")+")","i")}function Qn(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function Kn(t,e,n){var r=zn.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function tr(t,e,n){var r=zn.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function er(t,e,n){var r=zn.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function nr(t,e,n){var r=zn.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function rr(t,e,n){var r=zn.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function ar(t,e,n){var r=zn.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function ir(t,e,n){var r=zn.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function or(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function cr(t,e,n){var r=zn.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function sr(t,e,n){var r=zn.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function fr(t,e,n){var r=zn.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function lr(t,e,n){var r=zn.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function ur(t,e,n){var r=zn.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function dr(t,e,n){var r=zn.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function hr(t,e,n){var r=zn.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function br(t,e,n){var r=zn.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function pr(t,e,n){var r=Rn.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function gr(t,e,n){var r=zn.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function mr(t,e,n){var r=zn.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function yr(t,e){return Gn(t.getDate(),e,2)}function vr(t,e){return Gn(t.getHours(),e,2)}function xr(t,e){return Gn(t.getHours()%12||12,e,2)}function wr(t,e){return Gn(1+Tn.count(Cn(t),t),e,3)}function _r(t,e){return Gn(t.getMilliseconds(),e,3)}function Mr(t,e){return _r(t,e)+"000"}function Sr(t,e){return Gn(t.getMonth()+1,e,2)}function Er(t,e){return Gn(t.getMinutes(),e,2)}function Ar(t,e){return Gn(t.getSeconds(),e,2)}function Tr(t){var e=t.getDay();return 0===e?7:e}function Ir(t,e){return Gn(Nn.count(Cn(t),t),e,2)}function Nr(t,e){var n=t.getDay();return t=n>=4||0===n?kn(t):kn.ceil(t),Gn(kn.count(Cn(t),t)+(4===Cn(t).getDay()),e,2)}function $r(t){return t.getDay()}function kr(t,e){return Gn($n.count(Cn(t),t),e,2)}function Cr(t,e){return Gn(t.getFullYear()%100,e,2)}function Dr(t,e){return Gn(t.getFullYear()%1e4,e,4)}function jr(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Gn(e/60|0,"0",2)+Gn(e%60,"0",2)}function Pr(t,e){return Gn(t.getUTCDate(),e,2)}function Lr(t,e){return Gn(t.getUTCHours(),e,2)}function Ur(t,e){return Gn(t.getUTCHours()%12||12,e,2)}function Or(t,e){return Gn(1+Dn.count(On(t),t),e,3)}function Fr(t,e){return Gn(t.getUTCMilliseconds(),e,3)}function Yr(t,e){return Fr(t,e)+"000"}function Br(t,e){return Gn(t.getUTCMonth()+1,e,2)}function Hr(t,e){return Gn(t.getUTCMinutes(),e,2)}function qr(t,e){return Gn(t.getUTCSeconds(),e,2)}function Xr(t){var e=t.getUTCDay();return 0===e?7:e}function Vr(t,e){return Gn(Pn.count(On(t),t),e,2)}function zr(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Un(t):Un.ceil(t),Gn(Un.count(On(t),t)+(4===On(t).getUTCDay()),e,2)}function Rr(t){return t.getUTCDay()}function Wr(t,e){return Gn(Ln.count(On(t),t),e,2)}function Gr(t,e){return Gn(t.getUTCFullYear()%100,e,2)}function Jr(t,e){return Gn(t.getUTCFullYear()%1e4,e,4)}function Zr(){return"+0000"}function Qr(){return"%"}function Kr(t){return+t}function ta(t){return Math.floor(+t/1e3)}!function(t){Hn=function(t){var e=t.dateTime,n=t.date,r=t.time,a=t.periods,i=t.days,o=t.shortDays,c=t.months,s=t.shortMonths,f=Zn(a),l=Qn(a),u=Zn(i),d=Qn(i),h=Zn(o),b=Qn(o),p=Zn(c),g=Qn(c),m=Zn(s),y=Qn(s),v={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return c[t.getMonth()]},c:null,d:yr,e:yr,f:Mr,H:vr,I:xr,j:wr,L:_r,m:Sr,M:Er,p:function(t){return a[+(t.getHours()>=12)]},Q:Kr,s:ta,S:Ar,u:Tr,U:Ir,V:Nr,w:$r,W:kr,x:null,X:null,y:Cr,Y:Dr,Z:jr,"%":Qr},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return c[t.getUTCMonth()]},c:null,d:Pr,e:Pr,f:Yr,H:Lr,I:Ur,j:Or,L:Fr,m:Br,M:Hr,p:function(t){return a[+(t.getUTCHours()>=12)]},Q:Kr,s:ta,S:qr,u:Xr,U:Vr,V:zr,w:Rr,W:Wr,x:null,X:null,y:Gr,Y:Jr,Z:Zr,"%":Qr},w={a:function(t,e,n){var r=h.exec(e.slice(n));return r?(t.w=b[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=u.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=m.exec(e.slice(n));return r?(t.m=y[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=g[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return S(t,e,n,r)},d:sr,e:sr,f:br,H:lr,I:lr,j:fr,L:hr,m:cr,M:ur,p:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.p=l[r[0].toLowerCase()],n+r[0].length):-1},Q:gr,s:mr,S:dr,u:tr,U:er,V:nr,w:Kn,W:rr,x:function(t,e,r){return S(t,n,e,r)},X:function(t,e,n){return S(t,r,e,n)},y:ir,Y:ar,Z:or,"%":pr};function _(t,e){return function(n){var r,a,i,o=[],c=-1,s=0,f=t.length;for(n instanceof Date||(n=new Date(+n));++c<f;)37===t.charCodeAt(c)&&(o.push(t.slice(s,c)),null!=(a=Vn[r=t.charAt(++c)])?r=t.charAt(++c):a="e"===r?" ":"0",(i=e[r])&&(r=i(n,a)),o.push(r),s=c+1);return o.push(t.slice(s,c)),o.join("")}}function M(t,e){return function(n){var r,a,i=Bn(1900);if(S(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(r=(a=(r=Yn(Bn(i.y))).getUTCDay())>4||0===a?Ln.ceil(r):Ln(r),r=Dn.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(r=(a=(r=e(Bn(i.y))).getDay())>4||0===a?$n.ceil(r):$n(r),r=Tn.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?Yn(Bn(i.y)).getUTCDay():e(Bn(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Yn(i)):e(i)}}function S(t,e,n,r){for(var a,i,o=0,c=e.length,s=n.length;o<c;){if(r>=s)return-1;if(37===(a=e.charCodeAt(o++))){if(a=e.charAt(o++),!(i=w[a in Vn?e.charAt(o++):a])||(r=i(t,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return v.x=_(n,v),v.X=_(r,v),v.c=_(e,v),x.x=_(n,x),x.X=_(r,x),x.c=_(e,x),{format:function(t){var e=_(t+="",v);return e.toString=function(){return t},e},parse:function(t){var e=M(t+="",Fn);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=M(t,Yn);return e.toString=function(){return t},e}}}(t),qn=Hn.utcFormat,Xn=Hn.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||qn("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Xn("%Y-%m-%dT%H:%M:%S.%LZ");function ea(t){const e="collapsedGeneModelExon";if(!t.hasOwnProperty(e))throw console.error(t),"Parsing Error: Required json attribute is missing: "+e;return["start","end"].forEach(n=>{if(!t[e][0].hasOwnProperty(n))throw"Parsing Error: Required json attribute is missing: "+n}),t[e].map(t=>(t.chromStart=t.start,t.chromEnd=t.end,t))}var na=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n};na("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),na("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),na("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),na("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),na("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),na("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),na("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),na("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),na("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");var ra=function(t){return Ce(t[t.length-1])};ra(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(na)),ra(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(na));var aa=ra(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(na)),ia=ra(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(na)),oa=ra(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(na)),ca=ra(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(na)),sa=ra(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(na));ra(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(na)),ra(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(na));var fa=ra(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(na));ra(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(na)),ra(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(na));var la=ra(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(na));ra(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(na));var ua=ra(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(na));ra(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(na)),ra(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(na));var da=ra(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(na));ra(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(na)),ra(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(na)),ra(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(na));var ha=ra(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(na)),ba=ra(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(na)),pa=ra(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(na)),ga=ra(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(na)),ma=ra(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(na)),ya=ra(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(na));Je(Me(300,.5,0),Me(-240,.5,1));Je(Me(-100,.75,.35),Me(80,1.5,.8)),Je(Me(260,.75,.35),Me(80,1.5,.8)),Me(),Rt();function va(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}va(na("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));va(na("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),va(na("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),va(na("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function xa(t,e="YlGnBu",n,r,a=!1){r=void 0===r?ht(t):r,n=void 0===n?bt(t):n;const i=function t(e){var n=0,r=1,a=1,i=!1;function o(t){var r=(t-n)*a;return e(i?Math.max(0,Math.min(1,r)):r)}return o.domain=function(t){return arguments.length?(n=+t[0],r=+t[1],a=n===r?0:1/(r-n),o):[n,r]},o.clamp=function(t){return arguments.length?(i=!!t,o):i},o.interpolator=function(t){return arguments.length?(e=t,o):e},o.copy=function(){return t(e).domain([n,r]).clamp(i)},vn(o)}(function(t){const e={BuGn:fa,OrRd:la,PuBu:ua,YlGnBu:da,Blues:ha,Oranges:ya,Greens:ba,Purples:ga,Reds:ma,Greys:pa,Grays:pa,RdBu:oa,RdGy:ca,PiYG:aa,PuOr:ia,RdYlBu:sa};if(!e.hasOwnProperty(t)){const e="Unrecognized color: "+t;throw alert(e),e}return e[t]}(e));return a?i.domain([r,n]):i.domain([n,r]),i}function wa(t,e,n,r,a,i=10,o=10,c={h:10,w:40},s="h",f=!1){let l=[];if(f){let t=[...Array(i+1).keys()],e=n.domain()[1]/i;l=(l=t.map(t=>t*e)).concat(t.filter(t=>0!=t).map(t=>0-t*e)).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}else{let t=[...Array(i+1).keys()],e=n.domain()[1]/i;l=t.map(t=>t*e)}const u=e.append("g").attr("transform",`translate(${r.x}, ${r.y})`).selectAll(".legend").data(l).enter().append("g").classed("legend",!0);"h"==s?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",c.h).attr("transform",`translate(${r.x}, ${r.y})`),u.append("rect").attr("x",(t,e)=>c.w*e).attr("y",5).attr("width",c.w).attr("height",c.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>a?Math.pow(o,t).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>c.w*e).attr("y",0)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${r.x}, ${r.y+c.h*l.length})rotate(90)`),u.append("rect").attr("x",0).attr("y",(t,e)=>c.h*e).attr("width",c.w).attr("height",c.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>a?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",15).attr("y",(t,e)=>c.h*e+c.h/2))}class _a{constructor(t=window.innerWidth,e=100,n=100,r={top:50,right:250,bottom:170,left:10},a=12,i=10){this.margin=r,this.rootW=t,this.leftTreePanel={x:r.left,y:r.top+n,h:void 0,w:e-i,id:"leftTree"},this.cell={w:void 0,h:a},this.topTreePanel={x:r.left+e,y:r.top,h:n-i,w:this.rootW-(r.left+e+r.right),id:"topTree"},this.heatmapPanel={x:r.left+e,y:r.top+n,h:this.leftTreePanel.h,w:this.topTreePanel.w,id:"heatmap"},this.legendPanel={x:r.left+e,y:0,h:r.top/2,w:this.topTreePanel.w,cell:{w:60},id:"legend"}}get(){return{margin:this.margin,cell:this.cell,w:this.rootW,h:this.margin.top+this.topTreePanel.h+this.legendPanel.h+this.margin.bottom,panels:{top:this.topTreePanel,left:this.leftTreePanel,main:this.heatmapPanel,legend:this.legendPanel}}}}function Ma(t,e,n,r,a,i="relative"){return function(t){if(0==$(`#${t}`).length){let e=`Input Error: DOM ID ${t} is not found.`;throw console.warn(e),e}}(t),void 0===a&&(a=`${t}-svg`),z("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",a).append("g").attr("transform",`translate(${r.left}, ${r.top})`)}function Sa(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function Ea(t,e){var n,r,a,i,o,c=new Na(t),s=+t.value&&(c.value=t.value),f=[c];for(null==e&&(e=Aa);n=f.pop();)if(s&&(n.value=+n.data.value),(a=e(n.data))&&(o=a.length))for(n.children=new Array(o),i=o-1;i>=0;--i)f.push(r=n.children[i]=new Na(a[i])),r.parent=n,r.depth=n.depth+1;return c.eachBefore(Ia)}function Aa(t){return t.children}function Ta(t){t.data=t.data.data}function Ia(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function Na(t){this.data=t,this.depth=this.height=0,this.parent=null}Na.prototype=Ea.prototype={constructor:Na,count:function(){return this.eachAfter(Sa)},each:function(t){var e,n,r,a,i=this,o=[i];do{for(e=o.reverse(),o=[];i=e.pop();)if(t(i),n=i.children)for(r=0,a=n.length;r<a;++r)o.push(n[r])}while(o.length);return this},eachAfter:function(t){for(var e,n,r,a=this,i=[a],o=[];a=i.pop();)if(o.push(a),e=a.children)for(n=0,r=e.length;n<r;++n)i.push(e[n]);for(;a=o.pop();)t(a);return this},eachBefore:function(t){for(var e,n,r=this,a=[r];r=a.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)a.push(e[n]);return this},sum:function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,r=e.children,a=r&&r.length;--a>=0;)n+=r[a].value;e.value=n})},sort:function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),a=null;for(t=n.pop(),e=r.pop();t===e;)a=t,t=n.pop(),e=r.pop();return a}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var a=r.length;t!==n;)r.splice(a,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each(function(e){t.push(e)}),t},leaves:function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},links:function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e},copy:function(){return Ea(this).eachBefore(Ta)}};var $a=Array.prototype.slice,ka=function(t){return t},Ca=1,Da=2,ja=3,Pa=4,La=1e-6;function Ua(t){return"translate("+(t+.5)+",0)"}function Oa(t){return"translate(0,"+(t+.5)+")"}function Fa(){return!this.__axis}function Ya(t,e){var n=[],r=null,a=null,i=6,o=6,c=3,s=t===Ca||t===Pa?-1:1,f=t===Pa||t===Da?"x":"y",l=t===Ca||t===ja?Ua:Oa;function u(u){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,h=null==a?e.tickFormat?e.tickFormat.apply(e,n):ka:a,b=Math.max(i,0)+c,p=e.range(),g=+p[0]+.5,m=+p[p.length-1]+.5,y=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),v=u.selection?u.selection():u,x=v.selectAll(".domain").data([null]),w=v.selectAll(".tick").data(d,e).order(),_=w.exit(),M=w.enter().append("g").attr("class","tick"),S=w.select("line"),E=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(M),S=S.merge(M.append("line").attr("stroke","currentColor").attr(f+"2",s*i)),E=E.merge(M.append("text").attr("fill","currentColor").attr(f,s*b).attr("dy",t===Ca?"0em":t===ja?"0.71em":"0.32em")),u!==v&&(x=x.transition(u),w=w.transition(u),S=S.transition(u),E=E.transition(u),_=_.transition(u).attr("opacity",La).attr("transform",function(t){return isFinite(t=y(t))?l(t):this.getAttribute("transform")}),M.attr("opacity",La).attr("transform",function(t){var e=this.parentNode.__axis;return l(e&&isFinite(e=e(t))?e:y(t))})),_.remove(),x.attr("d",t===Pa||t==Da?o?"M"+s*o+","+g+"H0.5V"+m+"H"+s*o:"M0.5,"+g+"V"+m:o?"M"+g+","+s*o+"V0.5H"+m+"V"+s*o:"M"+g+",0.5H"+m),w.attr("opacity",1).attr("transform",function(t){return l(y(t))}),S.attr(f+"2",s*i),E.attr(f,s*b).text(h),v.filter(Fa).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Da?"start":t===Pa?"end":"middle"),v.each(function(){this.__axis=y})}return u.scale=function(t){return arguments.length?(e=t,u):e},u.ticks=function(){return n=$a.call(arguments),u},u.tickArguments=function(t){return arguments.length?(n=null==t?[]:$a.call(t),u):n.slice()},u.tickValues=function(t){return arguments.length?(r=null==t?null:$a.call(t),u):r&&r.slice()},u.tickFormat=function(t){return arguments.length?(a=t,u):a},u.tickSize=function(t){return arguments.length?(i=o=+t,u):i},u.tickSizeInner=function(t){return arguments.length?(i=+t,u):i},u.tickSizeOuter=function(t){return arguments.length?(o=+t,u):o},u.tickPadding=function(t){return arguments.length?(c=+t,u):c},u}const Ba=!1;class Ha{constructor(t,e="h"){this.newick=t,this.orientation=e,this.postorder=[],this.root=Ea(function(t){for(var e=[],n={},r=t.split(/\s*(;|\(|\)|,|:)\s*/),a=0;a<r.length;a++){var i=r[a];switch(i){case"(":var o={};n.branchset=[o],e.push(n),n=o;break;case",":o={},e[e.length-1].branchset.push(o),n=o;break;case")":n=e.pop();break;case":":break;default:var c=r[a-1];")"==c||"("==c||","==c?n.name=i:":"==c&&(n.length=parseFloat(i))}}return n}(t),t=>t.branchset).sum(t=>t.branchset?0:1).sort((t,e)=>t.value-e.value||t.data.length-e.data.length),this.leaves=this.root.leaves().sort((t,e)=>t.value-e.value||rt(t.data.length,e.data.length)),this.width=void 0,this.height=void 0,this.xScale=void 0,this.yScale=void 0}draw(t,e,n){this.width=e,this.height=n,this._setXScale(),this._setYScale(),"h"==this.orientation?this._drawHTree(t):this._drawVTree(t)}_drawHTree(t){const e=t=>{void 0===t.children?t.y=this.yScale(t.data.name):t.y=t.children.reduce((t,e)=>t+e.y,0)/t.children.length},n=t=>{t.x=this.xScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach(t=>{n(t),e(t)}),t.selectAll(".branch").data(r).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.data.length?t.x-this.xScale(t.data.length):t.x).attr("y1",t=>t.y+this.yScale.bandwidth()/2).attr("y2",t=>t.y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const a=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);var i;t.selectAll(".arm").data(a).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.x).attr("y1",t=>t.children[0].y+this.yScale.bandwidth()/2).attr("y2",t=>t.children[1].y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(a).enter().append("circle").attr("cx",t=>t.x).attr("cy",t=>t.y+this.yScale.bandwidth()/2).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",function(t){d3.select(this).attr("r",3),console.log(t.leaves())}).on("mouseout",function(t){d3.select(this).attr("r",2)}),t.append("g").attr("class","dendrogram-axis").attr("transform","translate(0,"+this.height+")").call((i=this.xScale,Ya(ja,i)).ticks(3))}_sortNodesByLevel(){return this.root.descendants().sort((t,e)=>t.height-e.height||rt(t.data.length,e.data.length))}_drawVTree(t){const e=t=>{void 0===t.children?t.x=this.xScale(t.data.name):t.x=t.children.reduce((t,e)=>t+e.x,0)/t.children.length},n=t=>{t.y=this.yScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach(t=>{e(t),n(t)}),t.selectAll(".branch").data(r).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.data.length?t.y-this.yScale(t.data.length):t.y).attr("x1",t=>t.x+this.xScale.bandwidth()/2).attr("x2",t=>t.x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const a=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);var i;t.selectAll(".arm").data(a).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.y).attr("x1",t=>t.children[0].x+this.xScale.bandwidth()/2).attr("x2",t=>t.children[1].x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(a).enter().append("circle").attr("cx",t=>t.x+this.xScale.bandwidth()/2).attr("cy",t=>t.y).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",function(t){d3.select(this).attr("r",3),console.log(t.leaves())}).on("mouseout",function(t){d3.select(this).attr("r",2)}),t.append("g").attr("class","dendrogram-axis").call((i=this.yScale,Ya(Pa,i)).ticks(3))}_getBranchLengthToRoot(t){return t.path(this.root).reduce((t,e)=>e.data.length?t+e.data.length:t,0)}_getMaxBranchLength(){let t=this.leaves[0];return this._getBranchLengthToRoot(t)}_assignPostorder(t){return void 0===t.children?void this.postorder.push(t):(this._assignPostorder(t.children[0]),void this._assignPostorder(t.children[1]))}_setXScale(){"h"==this.orientation?this.xScale=xn().domain([0,this._getMaxBranchLength()]).range([0,this.width]):(this._assignPostorder(this.root),Ba&&console.log(this.postorder),this.xScale=Tt().domain(this.postorder.map(t=>t.data.name)).range([0,this.width]).padding(.05))}_setYScale(){"h"==this.orientation?(this._assignPostorder(this.root),Ba&&console.log(this.postorder),this.yScale=Tt().domain(this.postorder.map(t=>t.data.name)).range([0,this.height]).padding(.05)):this.yScale=xn().domain([0,this._getMaxBranchLength()]).range([0,this.height])}}var qa={value:function(){}};function Xa(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new Va(r)}function Va(t){this._=t}function za(t,e){for(var n,r=0,a=t.length;r<a;++r)if((n=t[r]).name===e)return n.value}function Ra(t,e,n){for(var r=0,a=t.length;r<a;++r)if(t[r].name===e){t[r]=qa,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}Va.prototype=Xa.prototype={constructor:Va,on:function(t,e){var n,r,a=this._,i=(r=a,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),o=-1,c=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<c;)if(n=(t=i[o]).type)a[n]=Ra(a[n],t.name,e);else if(null==e)for(n in a)a[n]=Ra(a[n],t.name,null);return this}for(;++o<c;)if((n=(t=i[o]).type)&&(n=za(a[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Va(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,a)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],a=0,i=r.length;a<i;++a)r[a].value.apply(e,n)}};var Wa,Ga,Ja=0,Za=0,Qa=0,Ka=1e3,ti=0,ei=0,ni=0,ri="object"==typeof performance&&performance.now?performance:Date,ai="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function ii(){return ei||(ai(oi),ei=ri.now()+ni)}function oi(){ei=0}function ci(){this._call=this._time=this._next=null}function si(t,e,n){var r=new ci;return r.restart(t,e,n),r}function fi(){ei=(ti=ri.now())+ni,Ja=Za=0;try{!function(){ii(),++Ja;for(var t,e=Wa;e;)(t=ei-e._time)>=0&&e._call.call(null,t),e=e._next;--Ja}()}finally{Ja=0,function(){var t,e,n=Wa,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Wa=e);Ga=t,ui(r)}(),ei=0}}function li(){var t=ri.now(),e=t-ti;e>Ka&&(ni-=e,ti=t)}function ui(t){Ja||(Za&&(Za=clearTimeout(Za)),t-ei>24?(t<1/0&&(Za=setTimeout(fi,t-ri.now()-ni)),Qa&&(Qa=clearInterval(Qa))):(Qa||(ti=ri.now(),Qa=setInterval(li,Ka)),Ja=1,ai(fi)))}ci.prototype=si.prototype={constructor:ci,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?ii():+n)+(null==e?0:+e),this._next||Ga===this||(Ga?Ga._next=this:Wa=this,Ga=this),this._call=t,this._time=n,ui()},stop:function(){this._call&&(this._call=null,this._time=1/0,ui())}};var di=function(t,e,n){var r=new ci;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r},hi=Xa("start","end","interrupt"),bi=[],pi=0,gi=1,mi=2,yi=3,vi=4,xi=5,wi=6,_i=function(t,e,n,r,a,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,a=t.__transition;function i(s){var f,l,u,d;if(n.state!==gi)return c();for(f in a)if((d=a[f]).name===n.name){if(d.state===yi)return di(i);d.state===vi?(d.state=wi,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete a[f]):+f<e&&(d.state=wi,d.timer.stop(),delete a[f])}if(di(function(){n.state===yi&&(n.state=vi,n.timer.restart(o,n.delay,n.time),o(s))}),n.state=mi,n.on.call("start",t,t.__data__,n.index,n.group),n.state===mi){for(n.state=yi,r=new Array(u=n.tween.length),f=0,l=-1;f<u;++f)(d=n.tween[f].value.call(t,t.__data__,n.index,n.group))&&(r[++l]=d);r.length=l+1}}function o(e){for(var a=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(c),n.state=xi,1),i=-1,o=r.length;++i<o;)r[i].call(null,a);n.state===xi&&(n.on.call("end",t,t.__data__,n.index,n.group),c())}function c(){for(var r in n.state=wi,n.timer.stop(),delete a[e],a)return;delete t.__transition}a[e]=n,n.timer=si(function(t){n.state=gi,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)},0,n.time)}(t,n,{name:e,index:r,group:a,on:hi,tween:bi,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:pi})};function Mi(t,e){var n=Ei(t,e);if(n.state>pi)throw new Error("too late; already scheduled");return n}function Si(t,e){var n=Ei(t,e);if(n.state>mi)throw new Error("too late; already started");return n}function Ei(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function Ai(t,e,n){var r=t._id;return t.each(function(){var t=Si(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return Ei(t,r).value[e]}}var Ti=function(t,e){var n;return("number"==typeof e?De:e instanceof qt?$e:(n=qt(e))?(e=n,$e):Ye)(t,e)};var Ii=V.prototype.constructor;var Ni=0;function $i(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function ki(){return++Ni}var Ci=V.prototype;$i.prototype=function(t){return V().transition(t)}.prototype={constructor:$i,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=o(t));for(var r=this._groups,a=r.length,i=new Array(a),c=0;c<a;++c)for(var s,f,l=r[c],u=l.length,d=i[c]=new Array(u),h=0;h<u;++h)(s=l[h])&&(f=t.call(s,s.__data__,h,l))&&("__data__"in s&&(f.__data__=s.__data__),d[h]=f,_i(d[h],e,n,h,d,Ei(s,n)));return new $i(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=s(t));for(var r=this._groups,a=r.length,i=[],o=[],c=0;c<a;++c)for(var f,l=r[c],u=l.length,d=0;d<u;++d)if(f=l[d]){for(var h,b=t.call(f,f.__data__,d,l),p=Ei(f,n),g=0,m=b.length;g<m;++g)(h=b[g])&&_i(h,e,n,g,b,p);i.push(b),o.push(f)}return new $i(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=h(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],c=o.length,s=r[a]=[],f=0;f<c;++f)(i=o[f])&&t.call(i,i.__data__,f,o)&&s.push(i);return new $i(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),c=0;c<i;++c)for(var s,f=e[c],l=n[c],u=f.length,d=o[c]=new Array(u),h=0;h<u;++h)(s=f[h]||l[h])&&(d[h]=s);for(;c<r;++c)o[c]=e[c];return new $i(o,this._parents,this._name,this._id)},selection:function(){return new Ii(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=ki(),r=this._groups,a=r.length,i=0;i<a;++i)for(var o,c=r[i],s=c.length,f=0;f<s;++f)if(o=c[f]){var l=Ei(o,e);_i(o,t,n,f,c,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new $i(r,this._parents,t,n)},call:Ci.call,nodes:Ci.nodes,node:Ci.node,size:Ci.size,empty:Ci.empty,each:Ci.each,on:function(t,e){var n=this._id;return arguments.length<2?Ei(this.node(),n).on.on(t):this.each(function(t,e,n){var r,a,i=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?Mi:Si;return function(){var o=i(this,t),c=o.on;c!==r&&(a=(r=c).copy()).on(e,n),o.on=a}}(n,t,e))},attr:function(t,e){var n=r(t),a="transform"===n?We:Ti;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var r,a,i;return function(){var o,c=n(this);if(null!=c)return(o=this.getAttributeNS(t.space,t.local))===c?null:o===r&&c===a?i:i=e(r=o,a=c);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var r,a,i;return function(){var o,c=n(this);if(null!=c)return(o=this.getAttribute(t))===c?null:o===r&&c===a?i:i=e(r=o,a=c);this.removeAttribute(t)}})(n,a,Ai(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var r,a;return function(){var i=this.getAttributeNS(t.space,t.local);return i===n?null:i===r?a:a=e(r=i,n)}}:function(t,e,n){var r,a;return function(){var i=this.getAttribute(t);return i===n?null:i===r?a:a=e(r=i,n)}})(n,a,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var a=r(t);return this.tween(n,(a.local?function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttributeNS(t.space,t.local,r(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttribute(t,r(e))}}return n._value=e,n})(a,e))},style:function(t,e,n){var r="transform"==(t+="")?Re:Ti;return null==e?this.styleTween(t,function(t,e){var n,r,a;return function(){var i=w(this,t),o=(this.style.removeProperty(t),w(this,t));return i===o?null:i===n&&o===r?a:a=e(n=i,r=o)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var r,a,i;return function(){var o=w(this,t),c=n(this);return null==c&&(this.style.removeProperty(t),c=w(this,t)),o===c?null:o===r&&c===a?i:i=e(r=o,a=c)}}(t,r,Ai(this,"style."+t,e)):function(t,e,n){var r,a;return function(){var i=w(this,t);return i===n?null:i===r?a:a=e(r=i,n)}}(t,r,e+""),n)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){function r(){var r=this,a=e.apply(r,arguments);return a&&function(e){r.style.setProperty(t,a(e),n)}}return r._value=e,r}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Ai(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,a=Ei(this.node(),n).tween,i=0,o=a.length;i<o;++i)if((r=a[i]).name===t)return r.value;return null}return this.each((null==e?function(t,e){var n,r;return function(){var a=Si(this,t),i=a.tween;if(i!==n)for(var o=0,c=(r=n=i).length;o<c;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}a.tween=r}}:function(t,e,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=Si(this,t),o=i.tween;if(o!==r){a=(r=o).slice();for(var c={name:e,value:n},s=0,f=a.length;s<f;++s)if(a[s].name===e){a[s]=c;break}s===f&&a.push(c)}i.tween=a}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){Mi(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){Mi(this,t).delay=e}})(e,t)):Ei(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){Si(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){Si(this,t).duration=e}})(e,t)):Ei(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){Si(this,t).ease=e}}(e,t)):Ei(this.node(),e).ease}};var Di={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function ji(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Di.time=ii(),Di;return n}V.prototype.interrupt=function(t){return this.each(function(){!function(t,e){var n,r,a,i=t.__transition,o=!0;if(i){for(a in e=null==e?null:e+"",i)(n=i[a]).name===e?(r=n.state>mi&&n.state<xi,n.state=wi,n.timer.stop(),r&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete i[a]):o=!1;o&&delete t.__transition}}(this,t)})},V.prototype.transition=function(t){var e,n;t instanceof $i?(e=t._id,t=t._name):(e=ki(),(n=Di).time=ii(),t=null==t?null:t+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var o,c=r[i],s=c.length,f=0;f<s;++f)(o=c[f])&&_i(o,t,e,f,c,n||ji(o,e));return new $i(r,this._parents,t,e)};class Pi{constructor(t,e,n=!1){$(`#${t}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,r,a="fa-download"){this.createButton(t,a);z(`#${t}`).on("click",()=>{this.downloadSvg(e,n,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);z(`#${t}`).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download"){const n=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${e}`).appendTo(n),this.buttons[t]=n,n}attachTooltip(t){this.tooltip=t}downloadSvg(t,e,n){let r=$($($(`${"#"+t}`))[0]),a=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),i=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var a=n[r].cssRules,i=0;i<a.length;i++){var o=a[i];if(void 0!==o.style){var c,s=void 0===o.selectorText?o.selectorText:o.selectorText.replace(`#${t[0].id} `,"");try{c=$(t).find(s)}catch(t){c=[]}c.length>0&&(e+=o.selectorText+" { "+o.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var f=document.createElement("style");return f.setAttribute("type","text/css"),f.innerHTML="<![CDATA[\n"+e+"\n]]>",f}(r.get());a.prepend(i),$("#"+n).html("").hide();let o=$(`#${n}`).append(a).html(),c=new Blob([o],{type:"image/svg+xml"});saveAs(c,e),$(`#${n}`).html("").hide()}}class Li{constructor(t,e=!1,n=30,r=-40,a=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=r,this.duration=a}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),z("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){z("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=U.pageX,e=U.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;z("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){z("#"+this.id).html(t)}}class Ui{constructor(t,e=!0,n=10,r="YlGnBu",a=2,i="heatmapTooltip"){this.data=t,this.useLog=e,this.logBase=n,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=a,this.colorScheme=r,0==$(`#${i}`).length&&$("<div/>").attr("id",i).appendTo($("body")),this.tooltip=new Li(i),z(`#${i}`).classed("heatmap-tooltip",!0),this.toolbar=void 0}createToolbar(t,e){return this.toolbar=new Pi(t,e),this.toolbar}drawColorLegend(t,e={x:0,y:0},n=5){wa(this.data[0].unit||"Value",t,this.colorScale,e,this.useLog,n,this.logBase)}redraw(t,e,n,r={w:1e3,h:1e3},a=30){this._setXScale(r.w,e),this._setYScale(r.h,n),this.draw(t,r,a)}draw(t,e={w:1e3,h:600},n=30,r=!1,a=null){void 0===this.xList&&this._setXScale(e.w),void 0===this.yList&&this._setYScale(e.h),void 0===this.colorScale&&this._setColorScale();const i=t.selectAll(".exp-map-xlabel").data(this.xList),o=null==a?this.yScale.range()[1]+2*this.yScale.bandwidth():this.yScale.range()[1]+a;i.attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${o}) rotate(${n})`}),i.enter().append("text").attr("class",(t,e)=>`exp-map-xlabel x${e}`).attr("x",0).attr("y",0).attr("text-anchor","start").style("cursor","default").attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${o}) rotate(${n})`}).merge(i).text(t=>t),i.exit().remove();t.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text(t=>t).attr("x",this.xScale.range()[1]+5).attr("y",t=>this.yScale(t)+10).attr("class",(t,e)=>`exp-map-ylabel y${e}`).attr("text-anchor","start").style("cursor","default").on("click",t=>{alert(`${t} is clicked. To be implemented`)}).on("mouseover",function(t){z(this).classed("normal",!1).classed("highlighted",!0)}).on("mouseout",function(t){z(this).classed("normal",!0).classed("highlighted",!1)});const c=t.selectAll(".exp-map-cell").data(this.data,t=>t.value);c.attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`);const s=this;c.enter().append("rect").attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("rx",this.r).attr("ry",this.r).attr("class","exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill","#eeeeee").on("mouseover",function(e){const n=z(this);s.cellMouseover(e,t,n)}).on("mouseout",function(t){z(this);s.cellMouseout()}).merge(c).style("fill",t=>r&&0==t.value?"#DDDDDD":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value)),c.exit().remove()}cellMouseout(t){R("*").classed("highlighted",!1),this.tooltip.hide()}cellMouseover(t,e,n){const r=n.attr("row"),a=n.attr("col");e.selectAll(".exp-map-xlabel").filter(`.${r}`).classed("highlighted",!0),e.selectAll(".exp-map-ylabel").filter(`.${a}`).classed("highlighted",!0),n.classed("highlighted",!0);const i=void 0===t.displayValue?parseFloat(t.value.toExponential()).toPrecision(4):t.displayValue;this.tooltip.show(`Column: ${t.x} <br/> Row: ${t.y}<br/> Value: ${i}`)}_setXScale(t,e){this.xList=void 0!==e?e:yt().key(t=>t.x).entries(this.data).map(t=>t.key),this.xScale=Tt().domain(this.xList).range([0,t]).padding(.05)}_setYScale(t,e){this.yList=void 0!==e?e:yt().key(t=>t.y).entries(this.data).map(t=>t.key),this.yScale=Tt().domain(this.yList).range([0,t]).padding(.05)}_setColorScale(){let t=this.useLog,e=this.data.map(e=>t?this._log(e.value):e.value);this.colorScale=xa(e,this.colorScheme,0)}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class Oi{constructor(t,e,n,r="YlGnBu",a=2,i=new _a,o="dmapTooltip",c=!0,s=10,f=""){this.config=i.get(),t=void 0===t||t.startsWith("Not enough data")?void 0:t,e=void 0===e||e.startsWith("Not enough data")?void 0:e,this.data={columnTree:t,rowTree:e,heatmap:n,external:void 0},this.objects={columnTree:void 0===this.data.columnTree?void 0:new Ha(this.data.columnTree,"v"),rowTree:void 0===this.data.rowTree?void 0:new Ha(this.data.rowTree,"h"),heatmap:new Ui(this.data.heatmap,c,s,r,a,o)},this.visualComponents={svg:void 0,columnTree:void 0,rowTree:void 0},this.title=f,this.toolbar=void 0,this.tooltip=this.objects.heatmap.tooltip}createToolbar(t,e){return this.toolbar=new Pi(t,e),this.toolbar}render(t,e,n=!0,r=!0,a="top",i=5){this._updateConfig(a),this.visualComponents.svg=Ma(t,this.config.w,this.config.h,this.config.margin,e);let o=void 0,c=void 0;n&&void 0!==this.objects.columnTree&&(this.visualComponents.columnTree=this._renderTree("column",this.objects.columnTree,this.config.panels.top),o=this.objects.columnTree.xScale.domain()),r&&void 0!==this.objects.rowTree&&(this.visualComponents.rowTree=this._renderTree("row",this.objects.rowTree,this.config.panels.left),c=this.objects.rowTree.yScale.domain()),""!=this.title&&z(`#${t}-svg`).append("text").attr("x",0).attr("y",20).text(this.title),this._renderHeatmap(this.objects.heatmap,o,c,i)}_renderTree(t,e,n){let r=this.visualComponents.svg;const a="row"==t?".exp-map-ylabel":".exp-map-xlabel",i=r.append("g").attr("id",n.id).attr("transform",`translate(${n.x}, ${n.y})`);e.draw(i,n.w,n.h);return i.selectAll(".dendrogram-node").on("mouseover",function(t){z(this).attr("r",6).attr("fill","red");let e=t.leaves().map(t=>t.data.name);r.selectAll(a).filter(t=>e.includes(t)).classed("highlighted",!0),r.selectAll(".leaf-color").filter(t=>e.includes(t)).classed("highlighted",!0)}).on("mouseout",function(){z(this).attr("r",2).attr("fill","#333"),r.selectAll(a).classed("highlighted",!1),r.selectAll(".leaf-color").classed("highlighted",!1)}),i}_renderHeatmap(t,e,n,r=5){let a=this.visualComponents.svg;const i=this.config.panels.main,o=a.append("g").attr("id",i.id).attr("transform",`translate(${i.x}, ${i.y})`);t.redraw(o,e,n,{w:i.w,h:i.h}),t.drawColorLegend(a,this.config.panels.legend,r)}_updateConfig(t){const e=void 0===this.objects.rowTree?1:this.objects.rowTree.leaves.length;this.config.panels.left.h=this.config.cell.h*e<20?20:this.config.cell.h*e,this.config.h+=this.config.panels.left.h,this.config.panels.main.h=this.config.panels.left.h,"bottom"==t&&(this.config.panels.legend.y+=this.config.panels.main.h+this.config.panels.main.x+50)}}var Fi=Math.PI,Yi=2*Fi,Bi=Yi-1e-6;function Hi(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function qi(){return new Hi}Hi.prototype=qi.prototype={constructor:Hi,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,a,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(t,e,n,r,a){t=+t,e=+e,n=+n,r=+r,a=+a;var i=this._x1,o=this._y1,c=n-t,s=r-e,f=i-t,l=o-e,u=f*f+l*l;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(u>1e-6)if(Math.abs(l*c-s*f)>1e-6&&a){var d=n-i,h=r-o,b=c*c+s*s,p=d*d+h*h,g=Math.sqrt(b),m=Math.sqrt(u),y=a*Math.tan((Fi-Math.acos((b+u-p)/(2*g*m)))/2),v=y/m,x=y/g;Math.abs(v-1)>1e-6&&(this._+="L"+(t+v*f)+","+(e+v*l)),this._+="A"+a+","+a+",0,0,"+ +(l*d>f*h)+","+(this._x1=t+x*c)+","+(this._y1=e+x*s)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,a,i){t=+t,e=+e;var o=(n=+n)*Math.cos(r),c=n*Math.sin(r),s=t+o,f=e+c,l=1^i,u=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+s+","+f:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+s+","+f),n&&(u<0&&(u=u%Yi+Yi),u>Bi?this._+="A"+n+","+n+",0,1,"+l+","+(t-o)+","+(e-c)+"A"+n+","+n+",0,1,"+l+","+(this._x1=s)+","+(this._y1=f):u>1e-6&&(this._+="A"+n+","+n+",0,"+ +(u>=Fi)+","+l+","+(this._x1=t+n*Math.cos(a))+","+(this._y1=e+n*Math.sin(a))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Xi=function(t){return function(){return t}};function Vi(t){this._context=t}Vi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var zi=function(t){return new Vi(t)};function Ri(t){return t[0]}function Wi(t){return t[1]}var Gi=function(){var t=Ri,e=Wi,n=Xi(!0),r=null,a=zi,i=null;function o(o){var c,s,f,l=o.length,u=!1;for(null==r&&(i=a(f=qi())),c=0;c<=l;++c)!(c<l&&n(s=o[c],c,o))===u&&((u=!u)?i.lineStart():i.lineEnd()),u&&i.point(+t(s,c,o),+e(s,c,o));if(f)return i=null,f+""||null}return o.x=function(e){return arguments.length?(t="function"==typeof e?e:Xi(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:Xi(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:Xi(!!t),o):n},o.curve=function(t){return arguments.length?(a=t,null!=r&&(i=a(r)),o):a},o.context=function(t){return arguments.length?(null==t?r=i=null:i=a(r=t),o):r},o};function Ji(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function Zi(t,e){this._context=t,this._k=(1-e)/6}Zi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Ji(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:Ji(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Qi=function t(e){function n(t){return new Zi(t,e)}return n.tension=function(e){return t(+e)},n}(0);function Ki(t){return t<0?-1:1}function to(t,e,n){var r=t._x1-t._x0,a=e-t._x1,i=(t._y1-t._y0)/(r||a<0&&-0),o=(n-t._y1)/(a||r<0&&-0),c=(i*a+o*r)/(r+a);return(Ki(i)+Ki(o))*Math.min(Math.abs(i),Math.abs(o),.5*Math.abs(c))||0}function eo(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function no(t,e,n){var r=t._x0,a=t._y0,i=t._x1,o=t._y1,c=(i-r)/3;t._context.bezierCurveTo(r+c,a+c*e,i-c,o-c*n,i,o)}function ro(t){this._context=t}function ao(t){this._context=t}ro.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:no(this,this._t0,eo(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,no(this,eo(this,n=to(this,t,e)),n);break;default:no(this,this._t0,n=to(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new ao(t)}.prototype=Object.create(ro.prototype)).point=function(t,e){ro.prototype.point.call(this,e,t)},ao.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,a,i){this._context.bezierCurveTo(e,t,r,n,i,a)}};class io{constructor(t,e,n,r,a=!1,i=1e3,o=0){this.gene=t,this.exons=e,"+"==this.gene.strand?this.exons.sort((t,e)=>Number(t.exonNumber)-Number(e.exonNumber)):this.exons.sort((t,e)=>Number(e.exonNumber)-Number(t.exonNumber)),this.exonsCurated=n.sort((t,e)=>Number(t.exonNumber)-Number(e.exonNumber)),this.junctions=r.sort((t,e)=>t.junctionId<e.junctionId?-1:t.junctionId>e.junctionId?1:0),this.isIsoform=a,this.maxIntronLength=i,this.intronLength=0,this.minExonWidth=o,this.nullColor="#DDDDDD"}changeTextlabel(t,e){t.selectAll("#modelInfo").text(e)}addData(t,e,n,r,a){void 0!==e&&t.selectAll(".junc").style("fill",n=>{const a=e.filter(t=>t.junctionId==n.junctionId)[0],i=0==a.value?this.nullColor:r(a.value);return t.selectAll(".junc-curve").filter(`.junc${n.junctionId}`).style("stroke",i),i}),t.selectAll(".exon-curated").style("fill",t=>{const e=n.filter(e=>e.exonId==t.exonId)[0];if(void 0===e)throw`${t.exonId} has no data`;return 0==e.value?this.nullColor:a(e.value)})}render(t,e){this.setXscale(e.w);const n=e.h/2;if(this.exons.forEach((t,e)=>{t.x=0==e?0:this.exons[e-1].x+this.exons[e-1].w+this.xScale(t.intronLength>this.maxIntronLength?this.maxIntronLength:t.intronLength),t.w=this.xScale(t.length)<this.minExonWidth?this.minExonWidth:this.xScale(t.length)}),this.exonsCurated.forEach((t,e)=>{if(t.oriExon=this._findExon(t.chromStart)||this._findExon(t.chromEnd),void 0!==t.oriExon){if(Number(t.oriExon.chromStart)==Number(t.chromStart))t.x=t.oriExon.x;else{const e=Number(t.chromStart)-Number(t.oriExon.chromStart)+1;t.x=t.oriExon.x+this.xScale(e)}void 0===t.length&&(t.length=Number(t.chromEnd)-Number(t.chromStart)+1),t.w=this.xScale(t.length)<this.minExonWidth?this.minExonWidth:this.xScale(t.length)}else console.warn(`${this.gene.transcriptId}-${t.exonId} can't map to full gene model`)}),this.isIsoform){t.append("line").attr("x1",this.exonsCurated[0].x).attr("x2",this.exonsCurated[this.exonsCurated.length-1].x).attr("y1",n+7.5).attr("y2",n+7.5).classed("intron",!0)}else{this.junctions=this.junctions.filter(t=>(t.startExon=this._findExon(t.chromStart),t.endExon=this._findExon(t.chromEnd),void 0!==t.startExon&&void 0!==t.endExon)),this.junctions.sort((t,e)=>+t.chromStart<+e.chromStart?-1:+t.chromStart>+e.chromStart?1:+t.chromEnd<+e.chromEnd?-1:+t.chromEnd>+e.chromEnd?1:0),this.junctions.forEach((t,e)=>{t.displayName=`Junction ${e+1}`;const r=Number(t.chromStart)-Number(t.startExon.chromStart)+1,a=Number(t.chromEnd)-Number(t.endExon.chromStart)+1;t.startX=t.startExon.x+this.xScale(r),t.endX=t.endExon.x+this.xScale(a),t.cx=t.startX+(t.endX-t.startX+1)/2,t.cy=n-15*(Math.abs(Number(t.endExon.exonNumber)-Number(t.startExon.exonNumber))+.5),t.cy<0&&(t.cy=0)});const e=this.junctions.reduce((t,e)=>(t[e.displayName]=1+t[e.displayName]||1,t),{});this.junctions.forEach(t=>{e[t.displayName]>1&&(t.cy-=15*Math.random())});const r=Gi().x(t=>t.x).y(t=>t.y).curve(Qi);this.junctions.forEach((e,a)=>{t.append("path").datum([{x:e.startX,y:n},{x:e.cx,y:e.cy},{x:e.endX,y:n}]).attr("class",`junc-curve junc${e.junctionId}`).attr("d",r).style("stroke","#92bcc9")});const a=t.selectAll(".junc").data(this.junctions);a.attr("cx",t=>t.cx),a.attr("cy",t=>t.cy),a.enter().append("circle").attr("class",t=>`junc junc${t.junctionId}`).attr("cx",t=>t.cx).attr("cy",t=>t.cy).merge(a).attr("r",4).style("fill","rgb(86, 98, 107)");const i=t.selectAll(".exon").data(this.exons);i.attr("x",t=>t.x),i.attr("y",n),i.enter().append("rect").attr("class",t=>`exon exon${t.exonNumber}`).attr("y",n).attr("rx",2).attr("ry",2).attr("width",t=>t.w).attr("height",15).attr("x",t=>t.x).merge(i).style("cursor","default"),t.append("text").attr("id","modelInfo").attr("text-anchor","end").attr("x",this.xScale(0)).attr("y",n-10).style("font-size",12).text("Gene Model")}const r=t.selectAll(".exon-curated").data(this.exonsCurated);r.attr("x",t=>t.x),r.attr("y",n),r.enter().append("rect").attr("class",t=>this.isIsoform?"exon-curated":`exon-curated exon-curated${t.exonNumber}`).attr("y",n).attr("width",t=>t.w).attr("height",15).attr("x",t=>t.x).merge(r).style("fill","#eee").style("cursor","default"),"left"!=e.labelOn&&"both"!=e.labelOn||t.append("text").attr("id","modelLabel").attr("text-anchor","end").attr("x",this.xScale.range()[0]-5).attr("y",n+7.5).style("font-size","9px").text(void 0===this.gene.transcriptId?`${this.gene.geneSymbol}`:this.gene.transcriptId),"right"!=e.labelOn&&"both"!=e.labelOn||t.append("text").attr("id","modelLabelRight").attr("text-anchor","start").attr("x",this.xScale.range()[1]+50).attr("y",n+7.5).style("font-size","9px").text(void 0===this.gene.transcriptId?`${this.gene.geneSymbol}`:this.gene.transcriptId)}setXscale(t){this.exons.sort((t,e)=>Number(t.chromStart)<Number(e.chromStart)?-1:Number(t.chromStart)>Number(e.chromStart)?1:0);let e=0;this.exons.forEach((t,n)=>{if(t.length=Number(t.chromEnd)-Number(t.chromStart)+1,0==n)e+=t.length;else{let r=this.exons[n-1];t.intronLength=Number(t.chromStart)-Number(r.chromEnd)+1,e+=t.length+(t.intronLength>this.maxIntronLength?this.maxIntronLength:t.intronLength)}});const n=[0,e],r=[0,t];this.xScale=xn().domain(n).range(r)}setXscaleFixIntron(t){this.exons.forEach(t=>{t.length=Number(t.chromEnd)-Number(t.chromStart)+1});const e=ht(this.exons,t=>t.length),n=[0,e*this.exons.length],r=[0,t];this.xScale=xn().domain(n).range(r);const a=this.xScale.invert(this.minExonWidth),i=pt(this.exons,t=>t.length>a?t.length:a);this.intronLength=(e*this.exons.length-i)/(this.exons.length-1)}_findExon(t){t=Number(t);const e=this.exons.filter(e=>Number(e.chromStart)-1<=t&&Number(e.chromEnd)+1>=t);return 1==e.length?e[0]:0==e.length?void console.warn("No exon found for: "+t):void console.warn("More than one exons found for: "+t)}}class oo{constructor(t,e,n,r){this.isoforms=t,this.isoformExons=e,this.modelExons=n,this.visualDom=void 0,this.config=r,this.nullColor="#DDDDDD"}showData(t,e,n,r,a=!0){if(a){t.sort((t,e)=>-(t.displayValue-e.displayValue));const e=t.map(t=>t.transcriptId);this.sortTracks(e)}t.forEach(t=>{this.visualDom.select(`#${t.transcriptId.replace(".","_")}`).selectAll(".exon-curated").style("fill",0==t.value?this.nullColor:e(t.value))}),this.visualDom.select(".lollipopGraph").remove();const i=this.visualDom.append("g").classed("lollipopGraph",!0).attr("transform","translate(-100, 13)"),o=i.selectAll(".lollipop").data(t).enter().append("g").classed("lollipop",!0);var c;o.append("line").attr("x1",0).attr("y1",t=>this.yScale(t.transcriptId)).attr("y2",t=>this.yScale(t.transcriptId)).style("stroke",t=>0==t.value?this.nullColor:e(t.value)).style("stroke-width",2).transition().duration(1e3).attr("x2",t=>0==t.value?0:n(t.value)),o.append("circle").attr("cx",0).attr("cy",t=>this.yScale(t.transcriptId)).attr("r",5).style("fill",t=>0==t.value?this.nullColor:e(t.value)).transition().duration(1e3).attr("cx",t=>n(t.value)),i.append("g").attr("class","lollipop-axis").attr("transform",`translate(0,-${this.yScale.bandwidth()/2})`).call((c=n,Ya(Ca,c)).ticks(3)),i.append("text").attr("id","lolliLabel").attr("x",0).attr("y",-40).attr("text-anchor","end").style("font-size",9).text("log10(TPM)"),i.append("g").attr("class","lollipop-axis").attr("transform",`translate(0,-${this.yScale.bandwidth()/2})`).call(function(t){return Ya(Da,t)}(this.yScale).tickValues([])),i.append("text").attr("id","lolliLabel").attr("x",10).attr("y",-20).text(`Transcript Expression in ${r}`).attr("text-anchor","start").style("font-size","12px")}sortTracks(t){this.setYscale(this.config.h,t),this.render(!0)}render(t=!1,e,n="left",r=1e3){if(void 0===e&&void 0===this.visualDom)throw"Fatal Error: must provide a dom element";void 0===e?e=this.visualDom:this.visualDom=e,void 0===this.yScale&&this.setYscale(this.config.h);const a=e.selectAll(".isotrack").data(this.isoforms.map(t=>t.transcriptId));a.transition().duration(r).attr("transform",t=>`translate(0, ${this.yScale(t)})`),a.enter().append("g").attr("id",t=>t.replace(".","_")).attr("class","isotrack").attr("transform",t=>"translate(0, 0)").transition().duration(r/2).attr("transform",t=>`translate(0, ${this.yScale(t)})`),t||this._renderModels(this.config.w,n)}_renderModels(t,e="left"){this.isoforms.forEach(n=>{let r=void 0===this.modelExons||null===this.modelExons?this.isoformExons[n.transcriptId]:this.modelExons;const a=new io(n,r,this.isoformExons[n.transcriptId],[],!0),i=z(`#${n.transcriptId.replace(".","_")}`);a.render(i,{w:t,h:this.yScale.bandwidth(),labelOn:e})})}setYscale(t,e){void 0===e&&(e=this.isoforms.map(t=>t.transcriptId)),this.yScale=Tt().domain(e).range([0,t]).padding(.05)}}function co(t,e,n,r,a,i,o,c,s,f){const l=n.visualComponents.svg,u=t.reduce((t,e)=>(t[e.tissueSiteDetailId]=e,t),{});l.selectAll(".exp-map-ylabel").text(t=>void 0!==u[t]?u[t].tissueSiteDetail:t).style("cursor","pointer").attr("x",n.objects.heatmap.xScale.range()[1]+15),l.select("#heatmap").selectAll(".exp-map-ycolor").data(n.objects.heatmap.yScale.domain()).enter().append("rect").attr("x",n.objects.heatmap.xScale.range()[1]+5).attr("y",t=>n.objects.heatmap.yScale(t)).attr("width",5).attr("height",n.objects.heatmap.yScale.bandwidth()).classed("exp-map-ycolor",!0).style("fill",t=>`#${u[t].colorHex}`),n.objects.heatmap.xScale.domain().length>15&&l.select("#heatmap").selectAll(".leaf-color").data(n.objects.heatmap.yScale.domain()).enter().append("rect").attr("x",n.objects.heatmap.xScale.range()[0]-5).attr("y",t=>n.objects.heatmap.yScale(t)).attr("width",5).attr("height",n.objects.heatmap.yScale.bandwidth()).classed("leaf-color",!0).style("fill",t=>`#${u[t].colorHex}`),l.selectAll(".exp-map-ylabel").on("mouseover",function(){z(this).classed("highlighted",!0)}).on("click",function(t){l.selectAll(".exp-map-ylabel").classed("clicked",!1),z(this).classed("clicked",!0);const n=t;let d;void 0!==c&&(d=c.filter(t=>t.tissueSiteDetailId==n));const h=s.filter(t=>t.tissueSiteDetailId==n);e.addData(l.select("#geneModel"),d,h,a,i);const b=xn().domain([bt(f.map(t=>t.value)),ht(f.map(t=>t.value))]).range([0,-100]),p=f.filter(t=>t.tissueSiteDetailId==n);r.showData(p,o,b,u[n].tissueSiteDetail)})}function so(t,e,n){const r=n.visualComponents.svg,a=n.tooltip,i=r.select("#geneModel");t.reduce((t,e)=>(t[e.tissueSiteDetailId]=e,t),{});r.selectAll(".junc").on("mouseover",function(t){R(`.junc${t.junctionId}`).classed("highlighted",!0),a.show(`${t.displayName}<br/>Junction ${t.junctionId} (${Number(t.chromEnd)-Number(t.chromStart)+1} bp)`),void 0!==t.startExon&&(i.selectAll(".exon").filter(`.exon${t.startExon.exonNumber}`).classed("highlighted",!0),i.selectAll(".exon").filter(`.exon${t.endExon.exonNumber}`).classed("highlighted",!0)),i.select(`.junc${t.junctionId}`).classed("highlighted",!0).classed("normal",!1)}).on("mouseout",function(t){R(`.junc${t.junctionId}`).classed("highlighted",!1),i.selectAll(".exon").classed("highlighted",!1),i.selectAll(".xLabel").classed("highlighted",!1).classed("normal",!0),a.hide()}),i.selectAll(".exon-curated").on("mouseover",function(t){z(this).classed("highlighted",!0),a.show(`Exon ${t.exonNumber}: ${t.chromStart} - ${t.chromEnd} (${t.chromEnd-t.chromStart+1} bp)`)}).on("mouseout",function(t){z(this).classed("highlighted",!1),a.hide()})}function fo(t){const e=t.visualComponents.svg,n=t.tooltip;e.selectAll(".isotrack").selectAll(".exon-curated").on("mouseover",function(t){z(this).classed("highlighted",!0),n.show(`Exon ${t.oriExon.exonNumber}: ${t.chromStart} - ${t.chromEnd} (${Number(t.chromEnd)-Number(t.chromStart)+1} bp)`)}).on("mouseout",function(){z(this).classed("highlighted",!1),e.selectAll(".exon-curated").classed("highlighted",!1),n.hide()})}return t.render=function(t,e,n,r=function(){const t="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:t+"association/singleTissueEqtl?format=json&datasetId=gtex_v7&gencodeId=",ld:t+"dataset/ld?format=json&datasetId=gtex_v7&gencodeId=",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v7&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v7&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?datasetId=gtex_v7&boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v7&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v7&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v19&genomeBuild=GRCh37%2Fhg19&geneId=",tissue:t+"dataset/tissueInfo?format=json&datasetId=gtex_v7",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}()){nt(r.geneId+e).then(function(a){const i=function(t,e=!1,n=null){if(!t.hasOwnProperty("gene"))throw"Parsing Error: attribute gene doesn't exist.";if(0==t.gene.length)throw alert("No gene is found"),"Fatal Error: gene(s) not found";if(e){if(null===n)throw"Please provide a gene ID for search results validation";if(t.gene.length>1){let e=t.gene.filter(t=>t.geneSymbolUpper==n.toUpperCase()||t.gencodeId==n.toUpperCase());if(e.length>1)throw alert("Fatal Error: input gene ID is not unique."),"Fatal Error: input gene ID is not unique.";if(0==e.length)throw alert("No gene is found with "+n),"Fatal Error: gene not found";t.gene=e}return t.gene[0]}return t.gene}(a,!0,e),o=i.gencodeId,c=[nt(r.tissue),nt(r.geneModelUnfiltered+o),nt(r.geneModel+o),nt(r.transcript+o),nt(r.junctionExp+o),nt(r.exonExp+o),nt(r.transcriptExp+o),nt(r.exon+o)];Promise.all(c).then(function(e){const r=function(t){const e="tissueInfo";if(!t.hasOwnProperty(e))throw"Parsing Error: required json attr is missing: "+e;const n=t[e];return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach(t=>{if(!n[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t}),n}(e[0]),a=ea(e[1]),o=ea(e[2]),c=function(t){const e="transcript";if(!t.hasOwnProperty(e))throw"parseIsoforms input error";return["transcriptId","start","end"].forEach(n=>{if(!t[e][0].hasOwnProperty(n))throw console.error(d),"Parsing Error: required json attribute is missing: "+n}),t[e].sort((t,e)=>-(Math.abs(t.end-t.start)+1-(Math.abs(e.end-e.start)+1)))}(e[3]),s=function(t){if(!t.hasOwnProperty("exon"))throw"Parsing Error: required json attribute is missing: exon";return t.exon.reduce((t,e)=>(["transcriptId","chromosome","start","end","exonNumber","exonId"].forEach(t=>{if(!e.hasOwnProperty(t))throw console.error(e),"Parsing Error: required json attribute is missing: "+t}),void 0===t[e.transcriptId]&&(t[e.transcriptId]=[]),e.chrom=e.chromosome,e.chromStart=e.start,e.chromEnd=e.end,t[e.transcriptId].push(e),t),{})}(e[7]),f=function(t){const e="medianJunctionExpression";if(!t.hasOwnProperty(e))throw"Parsing Error: parseJunctions input error. "+e;return["tissueSiteDetailId","junctionId"].forEach(n=>{if(!t[e][0].hasOwnProperty(n))throw console.error(t[e][0]),"Parsing Error: required junction attribute is missing: "+n}),t[e].filter(t=>"Liver"==t.tissueSiteDetailId).map(t=>{let e=t.junctionId.split("_");return{chrom:e[0],chromStart:e[1],chromEnd:e[2],junctionId:t.junctionId}})}(e[4]),l=function(t){const e="medianJunctionExpression";if(!t.hasOwnProperty(e))throw"parseJunctionExpression input error";const n=t[e];if(void 0!==n&&0!=n.length)return n.forEach(t=>{["tissueSiteDetailId","junctionId","median","gencodeId"].forEach(e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parsingr Error: parseJunctionExpression attr not found: "+e});let e=t.median,n=t.tissueSiteDetailId;t.tissueId=n,t.id=t.gencodeId,t.x=t.junctionId,t.y=n,t.value=Number(e),t.displayValue=Number(e)}),n.sort((t,e)=>t.junctionId>e.junctionId?1:t.junctionId<e.junctionId?-1:0);console.warn("No junction data found")}(e[4]),u=function(t,e){const n=e.reduce((t,e)=>(t[e.exonId]=e,t),{}),r="medianExonExpression";if(!t.hasOwnProperty(r))throw"parseExonExpression input error";const a=t[r];return["median","exonId","tissueSiteDetailId"].forEach(t=>{if(!a[0].hasOwnProperty(t))throw"Fatal Error: parseExonExpression attr not found: "+t}),a.forEach(t=>{const e=n[t.exonId];["end","start"].forEach(t=>{if(!e.hasOwnProperty(t))throw"Fatal Error: parseExonExpression position attr not found: "+t}),t.l=e.end-e.start+1,t.value=Number(t.median)/t.l,t.displayValue=Number(t.median)/t.l,t.x=t.exonId,t.y=t.tissueSiteDetailId,t.id=t.gencodeId,t.chromStart=e.start,t.chromEnd=e.end,t.unit="median "+t.unit+" per base",t.tissueId=t.tissueSiteDetailId}),a.sort((t,e)=>t.chromStart<e.chromStart?-1:t.chromStart>e.chromStart?1:0)}(e[5],o);let h,b,p,g=function(t){const e="medianTranscriptExpression";if(!t.hasOwnProperty(e))throw"Parsing Error: parseTranscriptExpression input error";return t[e].forEach(t=>{["median","transcriptId","tissueSiteDetailId","gencodeId"].forEach(e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parsing Error: required transcipt attribute is missing: "+e}),t.value=Number(t.median),t.displayValue=Number(t.median),t.x=t.transcriptId,t.y=t.tissueSiteDetailId,t.id=t.gencodeId,t.tissueId=t.tissueSiteDetailId}),t[e]}(e[6]);f.length>=0&&void 0!==l&&(p=xa(l.map(t=>Math.log10(t.value+1)),"Reds",0)),h=xa(u.map(t=>Math.log2(t.value+1)),"Blues",0),b=xa(g.map(t=>Math.log10(t.value+1)),"Purples",0);let m=void 0;const y={root:n,svg:`${n}-svg`,tooltip:"isoformTooltip",toolbar:"isoformToolbar",clone:"isoformClone",buttons:{save:"isoformSave"}};["toolbar","clone"].forEach(t=>{$("<div/>").attr("id",y[t]).appendTo($(`#${y.root}`))});const v=`${i.geneSymbol}: ${i.gencodeId} ${i.description}`,x=$(`#${n}`).innerWidth()||window.innerWidth;switch(t){case"isoformTransposed":{const t=new _a(x,150,100,{top:60,right:350,bottom:200,left:50},12,10);["tissue","transcript"].forEach(t=>{if(!e[6].clusters.hasOwnProperty(t))throw console.error(e[6].clusters),"Parse Error: Required cluster attribute is missing: "+t});let n=e[6].clusters.tissue,r=e[6].clusters.transcript,a=function(t){const e="medianTranscriptExpression";if(!t.hasOwnProperty(e))throw console.error(t),"Parsing Error: parseTranscriptExpressionTranspose input error.";return t[e].forEach(t=>{["median","transcriptId","tissueSiteDetailId","gencodeId"].forEach(e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parsing Error: Required transcript attribute is missing: "+e});const e=t.median,n=t.tissueSiteDetailId;t.value=Number(e),t.displayValue=Number(e),t.y=t.transcriptId,t.x=n,t.id=t.gencodeId,t.tissueId=n}),t[e]}(e[6]);if((m=new Oi(n,r,a,"Purples",5,t,y.tooltip,!0,10,`Isoform Expression of ${v}`)).render(y.root,y.svg,!0,!0,top,5),!r.startsWith("Not enough data")){const t=m.objects.rowTree.yScale.domain();c.sort((e,n)=>t.indexOf(e.transcriptId)<t.indexOf(n.transcriptId)?-1:t.indexOf(e.transcriptId)>t.indexOf(n.transcriptId)?1:0)}break}case"junction":{if(0==f.length){$(`#${n}`).text("This gene has no junctions available.");break}const t=new _a(x,150,0,{top:60,right:350,bottom:200,left:50},12,10);let r=e[4].clusters.tissue;(m=new Oi(void 0,r,l,"Reds",5,t,y.tooltip,!0,10,`Junction Expression of ${v}`)).render(y.root,y.svg,!1,!0,top,5);break}case"exon":{const t=new _a(x,150,0,{top:60,right:350,bottom:200,left:50},12,10);let n=e[5].clusters.tissue;(m=new Oi(void 0,n,u,"Blues",5,t,y.tooltip,!0,2,`Exon Expression of ${v}`)).render(y.root,y.svg,!1,!0,top,5);break}default:throw"Input type is not recognized"}$("#spinner").hide();const w=t.startsWith("isoform")?60:80,_={x:m.config.panels.main.x,y:m.config.panels.main.h+m.config.panels.main.y+w,w:m.config.panels.main.w,h:100},M={x:_.x,y:_.y+_.h,w:_.w,h:20*c.length,labelOn:"left"};let S=+z(`#${y.svg}`).attr("height")+_.h+M.h;t.startsWith("isoform")||(S=S<1200?1200:S),z(`#${y.svg}`).attr("height",S);const E=new io(i,a,o,f),A=m.visualComponents.svg.append("g").attr("id","geneModel").attr("transform",`translate(${_.x}, ${_.y})`);t.startsWith("isoform")||E.render(A,_);const T=new oo(c,s,a,M),I=m.visualComponents.svg.append("g").attr("transform",`translate(${M.x}, ${M.y})`),N=t.startsWith("isoform")?"both":"left";switch(T.render(!1,I,N),t.startsWith("isoform")||function(t,e,n){const r=t.visualComponents.svg;let a=t.objects.heatmap.xScale.range()[1]+50;wa("Exon read counts per base",r.select("#geneModel"),n,{x:a,y:30},!0,5,2,{h:20,w:10},"v"),a+=50,void 0!==e&&wa("Junction read counts",r.select("#geneModel"),e,{x:a,y:30},!0,5,10,{h:20,w:10},"v")}(m,p,h),function(t,e){t.createToolbar(e.toolbar,t.tooltip).createDownloadSvgButton(e.buttons.save,e.svg,`${e.root}-save.svg`,e.clone)}(m,y),t){case"isoformTransposed":!function(t,e,n,r,a,i,o,c,s){const f=e.visualComponents.svg,l=t.reduce((t,e)=>(t[e.tissueSiteDetailId]=e,t),{}),u=e.tooltip;f.selectAll(".exp-map-xlabel").text(t=>void 0!==l[t]?l[t].tissueSiteDetail:t).style("cursor","pointer"),f.select("#heatmap").selectAll(".exp-map-xcolor").data(e.objects.heatmap.xScale.domain()).enter().append("rect").attr("x",t=>e.objects.heatmap.xScale(t)).attr("y",e.objects.heatmap.yScale.range()[1]+5).attr("width",e.objects.heatmap.xScale.bandwidth()).attr("height",5).classed("exp-map-xcolor",!0).style("fill",t=>`#${l[t].colorHex}`),e.objects.heatmap.yScale.domain().length>15&&f.select("#heatmap").selectAll(".leaf-color").data(e.objects.heatmap.xScale.domain()).enter().append("rect").attr("x",t=>e.objects.heatmap.xScale(t)).attr("y",e.objects.heatmap.yScale.range()[0]-10).attr("width",e.objects.heatmap.xScale.bandwidth()).attr("height",5).classed("leaf-color",!0).style("fill",t=>`#${l[t].colorHex}`),f.selectAll(".exp-map-xlabel").on("mouseover",function(){z(this).classed("highlighted",!0)}).on("mouseout",function(){z(this).classed("highlighted",!1)}).on("click",function(t){f.selectAll(".exp-map-xlabel").classed("clicked",!1),z(this).classed("clicked",!0);const e=t;let r;void 0!==o&&(r=o.filter(t=>t.tissueSiteDetailId==e)),c.filter(t=>t.tissueSiteDetailId==e);const a=xn().domain([bt(s.map(t=>t.value)),ht(s.map(t=>t.value))]).range([0,-100]),u=s.filter(t=>t.tissueSiteDetailId==e);n.showData(u,i,a,l[e].tissueSiteDetail,!1)}),f.selectAll(".exp-map-cell").on("mouseover",function(t){const n=z(this);e.objects.heatmap.cellMouseover(t,f,n);const r=void 0===l[t.x]?t.x:l[t.x].tissueSiteDetail,a=parseFloat(t.displayValue.toExponential()).toPrecision(3);u.show(`Tissue: ${r}<br/> Isoform: ${t.transcriptId}<br/> ${t.unit}: ${a}`);const i=t.transcriptId.replace(".","_");f.select(`#${i}`).selectAll(".exon-curated").classed("highlighted",!0),f.select(`#${i}`).selectAll(".intron").classed("highlighted",!0)}).on("mouseout",function(t){f.selectAll("*").classed("highlighted",!1),u.hide()}),f.selectAll(".exp-map-ylabel").on("mouseover",function(t){z(this).classed("highlighted",!0);const e=t.replace(".","_");f.select(`#${e}`).selectAll(".exon-curated").classed("highlighted",!0),f.select(`#${e}`).selectAll(".intron").classed("highlighted",!0)}).on("mouseout",function(){z(this).classed("highlighted",!1),f.selectAll(".exon-curated").classed("highlighted",!1),f.selectAll(".intron").classed("highlighted",!1)}).on("click",function(){})}(r,m,T,0,0,b,l,u,g),fo(m);break;case"junction":if(0==f.length)break;co(r,E,m,T,p,h,b,l,u,g),function(t,e,n){const r=n.visualComponents.svg,a=n.tooltip,i=t.reduce((t,e)=>(t[e.tissueSiteDetailId]=e,t),{});r.selectAll(".exp-map-cell").on("mouseover",function(t){const o=z(this);n.objects.heatmap.cellMouseover(t,r,o);const c=void 0===i[t.y]?t.x:i[t.y].tissueSiteDetail,s=e.junctions.filter(e=>e.junctionId==t.x&&!e.filtered)[0],f=parseFloat(t.displayValue.toExponential()).toPrecision(3);a.show(`Tissue: ${c}<br/> Junction: ${s.displayName} (${Number(s.chromEnd)-Number(s.chromStart)} bp)<br/> ${t.unit}: ${f}`),r.selectAll(`.junc${s.junctionId}`).classed("highlighted",!0),void 0!==s&&(r.selectAll(`.exon${s.startExon.exonNumber}`).classed("highlighted",!0),r.selectAll(`.exon${s.endExon.exonNumber}`).classed("highlighted",!0))}).on("mouseout",function(t){r.selectAll("*").classed("highlighted",!1),a.hide()}),r.selectAll(".exp-map-xlabel").each(function(){const t=z(this),n=t.text();t.attr("id",`${n}`),t.classed(`junc${n}`,!0);const r=e.junctions.filter(t=>t.junctionId==`${n}`&&!t.filtered)[0];void 0!==r&&t.text(r.displayName)}).on("mouseover",function(){const t=z(this).attr("id");z(this).classed("highlighted",!0),r.selectAll(`.junc${t}`).classed("highlighted",!0);const n=e.junctions.filter(e=>e.junctionId==t&&!e.filtered)[0];void 0!==n&&(r.selectAll(`.exon${n.startExon.exonNumber}`).classed("highlighted",!0),r.selectAll(`.exon${n.endExon.exonNumber}`).classed("highlighted",!0))}).on("mouseout",function(){z(this).classed("highlighted",!1),R(".junc").classed("highlighted",!1),R(".junc-curve").classed("highlighted",!1),r.selectAll(".exon").classed("highlighted",!1)})}(r,E,m),so(r,0,m),fo(m);break;case"exon":co(r,E,m,T,p,h,b,l,u,g),function(t,e,n){const r=n.visualComponents.svg,a=n.tooltip,i=t.reduce((t,e)=>(t[e.tissueSiteDetailId]=e,t),{});r.selectAll(".exp-map-cell").on("mouseover",function(t){const e=z(this);n.objects.heatmap.cellMouseover(t,r,e);const o=void 0===i[t.y]?t.x:i[t.y].tissueSiteDetail,c=parseFloat(t.displayValue.toExponential()).toPrecision(3);a.show(`Tissue: ${o}<br/> Exon: ${t.exonId}<br/> ${t.chromStart} - ${t.chromEnd} (${Number(t.chromEnd)-Number(t.chromStart)+1}bp) <br/>${t.unit}: ${c}`);const s=t.exonId.split("_")[1];r.selectAll(`.exon-curated${s}`).classed("highlighted",!0)}).on("mouseout",function(t){r.selectAll("*").classed("highlighted",!1),a.hide()}),r.selectAll(".exp-map-xlabel").each(function(t){const e=t.split("_")[1];z(this).text(`Exon ${e}`)}).on("mouseover",function(t){z(this).classed("highlighted",!0);const e=t.split("_")[1];r.selectAll(`.exon-curated${e}`).classed("highlighted",!0)}).on("mouseout",function(){z(this).classed("highlighted",!1),r.selectAll(".exon-curated").classed("highlighted",!1)})}(r,0,m),so(r,0,m),fo(m);break;default:throw"unrecognized type"}}).catch(function(t){console.error(t),$("#spinner").hide()})}).catch(function(t){console.error(t),$("#spinner").hide()})},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
