var GeneExpressionBoxplot=function(t){"use strict";var n={},e={},r=34,i=10,o=13;function a(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function u(t){var u=new RegExp('["'+t+"\n\r]"),s=t.charCodeAt(0);function l(t,a){var u,l=[],c=t.length,f=0,h=0,p=c<=0,d=!1;function g(){if(p)return e;if(d)return d=!1,n;var a,u,l=f;if(t.charCodeAt(l)===r){for(;f++<c&&t.charCodeAt(f)!==r||t.charCodeAt(++f)===r;);return(a=f)>=c?p=!0:(u=t.charCodeAt(f++))===i?d=!0:u===o&&(d=!0,t.charCodeAt(f)===i&&++f),t.slice(l+1,a-1).replace(/""/g,'"')}for(;f<c;){if((u=t.charCodeAt(a=f++))===i)d=!0;else if(u===o)d=!0,t.charCodeAt(f)===i&&++f;else if(u!==s)continue;return t.slice(l,a)}return p=!0,t.slice(l,c)}for(t.charCodeAt(c-1)===i&&--c,t.charCodeAt(c-1)===o&&--c;(u=g())!==e;){for(var m=[];u!==n&&u!==e;)m.push(u),u=g();a&&null==(m=a(m,h++))||l.push(m)}return l}function c(n){return n.map(f).join(t)}function f(t){return null==t?"":u.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,r,i=l(t,function(t,i){if(e)return e(t,i-1);r=t,e=n?function(t,n){var e=a(t);return function(r,i){return n(e(r),i,t)}}(t,n):a(t)});return i.columns=r||[],i},parseRows:l,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}(n)),[e.map(f).join(t)].concat(n.map(function(n){return e.map(function(t){return f(n[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(c).join("\n")}}}u(","),u("\t");function s(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function l(t,n){return fetch(t,n).then(s)}function c(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var f,h,p=(1===(f=c).length&&(h=f,f=function(t,n){return c(h(t),n)}),{left:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;f(t[i],n)<0?e=i+1:r=i}return e},right:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;f(t[i],n)>0?r=i:e=i+1}return e}}).right;function d(t){return null===t?NaN:+t}function g(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e>=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}var m=Math.sqrt(50),v=Math.sqrt(10),y=Math.sqrt(2);function w(t,n,e){var r,i,o,a,u=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=x(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++u<i;)o[u]=(t+u)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++u<i;)o[u]=(t-u)/a;return r&&o.reverse(),o}function x(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=m?10:o>=v?5:o>=y?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=m?10:o>=v?5:o>=y?2:1)}function _(t,n,e){if(null==e&&(e=d),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(i-o)}}var b="http://www.w3.org/1999/xhtml",M={svg:"http://www.w3.org/2000/svg",xhtml:b,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function A(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),M.hasOwnProperty(n)?{space:M[n],local:t}:t}function T(t){var n=A(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===b&&n.documentElement.namespaceURI===b?n.createElement(t):n.createElementNS(e,t)}})(n)}function k(){}function C(t){return null==t?k:function(){return this.querySelector(t)}}function S(){return[]}function D(t){return null==t?S:function(){return this.querySelectorAll(t)}}var N=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var E=document.documentElement;if(!E.matches){var U=E.webkitMatchesSelector||E.msMatchesSelector||E.mozMatchesSelector||E.oMatchesSelector;N=function(t){return function(){return U.call(this,t)}}}}var I=N;function F(t){return new Array(t.length)}function L(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}L.prototype={constructor:L,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var q="$";function Y(t,n,e,r,i,o){for(var a,u=0,s=n.length,l=o.length;u<l;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new L(t,o[u]);for(;u<s;++u)(a=n[u])&&(i[u]=a)}function P(t,n,e,r,i,o,a){var u,s,l,c={},f=n.length,h=o.length,p=new Array(f);for(u=0;u<f;++u)(s=n[u])&&(p[u]=l=q+a.call(s,s.__data__,u,n),l in c?i[u]=s:c[l]=s);for(u=0;u<h;++u)(s=c[l=q+a.call(t,o[u],u,o)])?(r[u]=s,s.__data__=o[u],c[l]=null):e[u]=new L(t,o[u]);for(u=0;u<f;++u)(s=n[u])&&c[p[u]]===s&&(i[u]=s)}function j(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function H(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function B(t,n){return t.style.getPropertyValue(n)||H(t).getComputedStyle(t,null).getPropertyValue(n)}function z(t){return t.trim().split(/^|\s+/)}function O(t){return t.classList||new V(t)}function V(t){this._node=t,this._names=z(t.getAttribute("class")||"")}function X(t,n){for(var e=O(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function R(t,n){for(var e=O(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function Z(){this.textContent=""}function G(){this.innerHTML=""}function W(){this.nextSibling&&this.parentNode.appendChild(this)}function J(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Q(){return null}function K(){var t=this.parentNode;t&&t.removeChild(this)}function tt(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function nt(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}V.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var et={},rt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(et={mouseenter:"mouseover",mouseleave:"mouseout"}));function it(t,n,e){return t=ot(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function ot(t,n,e){return function(r){var i=rt;rt=r;try{t.call(this,this.__data__,n,e)}finally{rt=i}}}function at(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function ut(t,n,e){var r=et.hasOwnProperty(t.type)?it:ot;return function(i,o,a){var u,s=this.__on,l=r(n,o,a);if(s)for(var c=0,f=s.length;c<f;++c)if((u=s[c]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=l,u.capture=e),void(u.value=n);this.addEventListener(t.type,l,e),u={type:t.type,name:t.name,value:n,listener:l,capture:e},s?s.push(u):this.__on=[u]}}function st(t,n,e){var r=H(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var lt=[null];function ct(t,n){this._groups=t,this._parents=n}function ft(){return new ct([[document.documentElement]],lt)}function ht(t){return"string"==typeof t?new ct([[document.querySelector(t)]],[document.documentElement]):new ct([[t]],lt)}ct.prototype=ft.prototype={constructor:ct,select:function(t){"function"!=typeof t&&(t=C(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],s=u.length,l=r[i]=new Array(s),c=0;c<s;++c)(o=u[c])&&(a=t.call(o,o.__data__,c,u))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new ct(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=D(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],s=u.length,l=0;l<s;++l)(a=u[l])&&(r.push(t.call(a,a.__data__,l,u)),i.push(a));return new ct(r,i)},filter:function(t){"function"!=typeof t&&(t=I(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],l=0;l<u;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&s.push(o);return new ct(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),c=-1,this.each(function(t){d[++c]=t}),d;var e,r=n?P:Y,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,u=new Array(a),s=new Array(a),l=new Array(a),c=0;c<a;++c){var f=i[c],h=o[c],p=h.length,d=t.call(f,f&&f.__data__,c,i),g=d.length,m=s[c]=new Array(g),v=u[c]=new Array(g);r(f,h,m,v,l[c]=new Array(p),d,n);for(var y,w,x=0,_=0;x<g;++x)if(y=m[x]){for(x>=_&&(_=x+1);!(w=v[_])&&++_<g;);y._next=w||null}}return(u=new ct(u,i))._enter=s,u._exit=l,u},enter:function(){return new ct(this._enter||this._groups.map(F),this._parents)},exit:function(){return new ct(this._exit||this._groups.map(F),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,l=n[u],c=e[u],f=l.length,h=a[u]=new Array(f),p=0;p<f;++p)(s=l[p]||c[p])&&(h[p]=s);for(;u<r;++u)a[u]=n[u];return new ct(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=j);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],s=u.length,l=i[o]=new Array(s),c=0;c<s;++c)(a=u[c])&&(l[c]=a);l.sort(n)}return new ct(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=A(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):B(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=z(t+"");if(arguments.length<2){for(var r=O(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?X:R)(this,t)}}:n?function(t){return function(){X(this,t)}}:function(t){return function(){R(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?Z:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?G:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(W)},lower:function(){return this.each(J)},append:function(t){var n="function"==typeof t?t:T(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:T(t),r=null==n?Q:"function"==typeof n?n:C(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(K)},clone:function(t){return this.select(t?nt:tt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?ut:at,null==e&&(e=!1),r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var s,l=0,c=u.length;l<c;++l)for(r=0,s=u[l];r<a;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return st(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return st(this,t,n)}})(t,n))}};function pt(){}function dt(t,n){var e=new pt;if(t instanceof pt)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}function gt(){}pt.prototype=dt.prototype={constructor:pt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var mt=dt.prototype;gt.prototype=function(t,n){var e=new gt;if(t instanceof gt)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}.prototype={constructor:gt,has:mt.has,add:function(t){return this["$"+(t+="")]=t,this},remove:mt.remove,clear:mt.clear,values:mt.keys,size:mt.size,empty:mt.empty,each:mt.each};var vt=Array.prototype,yt=vt.map,wt=vt.slice,xt={name:"implicit"};function _t(){var t,n,e=function t(n){var e=dt(),r=[],i=xt;function o(t){var o=t+"",a=e.get(o);if(!a){if(i!==xt)return i;e.set(o,a=r.push(t))}return n[(a-1)%n.length]}return n=null==n?[]:wt.call(n),o.domain=function(t){if(!arguments.length)return r.slice();r=[],e=dt();for(var n,i,a=-1,u=t.length;++a<u;)e.has(i=(n=t[a])+"")||e.set(i,r.push(n));return o},o.range=function(t){return arguments.length?(n=wt.call(t),o):n.slice()},o.unknown=function(t){return arguments.length?(i=t,o):i},o.copy=function(){return t().domain(r).range(n).unknown(i)},o}().unknown(void 0),r=e.domain,i=e.range,o=[0,1],a=!1,u=0,s=0,l=.5;function c(){var e=r().length,c=o[1]<o[0],f=o[c-0],h=o[1-c];t=(h-f)/Math.max(1,e-u+2*s),a&&(t=Math.floor(t)),f+=(h-f-t*(e-u))*l,n=t*(1-u),a&&(f=Math.round(f),n=Math.round(n));var p=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}(e).map(function(n){return f+t*n});return i(c?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),c()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],c()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,c()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(a=!!t,c()):a},e.padding=function(t){return arguments.length?(u=s=Math.max(0,Math.min(1,t)),c()):u},e.paddingInner=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),c()):u},e.paddingOuter=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),c()):s},e.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),c()):l},e.copy=function(){return _t().domain(r()).range(o).round(a).paddingInner(u).paddingOuter(s).align(l)},c()}function bt(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function Mt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function At(){}var Tt="\\s*([+-]?\\d+)\\s*",kt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ct="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",St=/^#([0-9a-f]{3})$/,Dt=/^#([0-9a-f]{6})$/,Nt=new RegExp("^rgb\\("+[Tt,Tt,Tt]+"\\)$"),Et=new RegExp("^rgb\\("+[Ct,Ct,Ct]+"\\)$"),Ut=new RegExp("^rgba\\("+[Tt,Tt,Tt,kt]+"\\)$"),It=new RegExp("^rgba\\("+[Ct,Ct,Ct,kt]+"\\)$"),$t=new RegExp("^hsl\\("+[kt,Ct,Ct]+"\\)$"),Ft=new RegExp("^hsla\\("+[kt,Ct,Ct,kt]+"\\)$"),Lt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function qt(t){var n;return t=(t+"").trim().toLowerCase(),(n=St.exec(t))?new Bt((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=Dt.exec(t))?Yt(parseInt(n[1],16)):(n=Nt.exec(t))?new Bt(n[1],n[2],n[3],1):(n=Et.exec(t))?new Bt(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Ut.exec(t))?Pt(n[1],n[2],n[3],n[4]):(n=It.exec(t))?Pt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=$t.exec(t))?Ot(n[1],n[2]/100,n[3]/100,1):(n=Ft.exec(t))?Ot(n[1],n[2]/100,n[3]/100,n[4]):Lt.hasOwnProperty(t)?Yt(Lt[t]):"transparent"===t?new Bt(NaN,NaN,NaN,0):null}function Yt(t){return new Bt(t>>16&255,t>>8&255,255&t,1)}function Pt(t,n,e,r){return r<=0&&(t=n=e=NaN),new Bt(t,n,e,r)}function jt(t){return t instanceof At||(t=qt(t)),t?new Bt((t=t.rgb()).r,t.g,t.b,t.opacity):new Bt}function Ht(t,n,e,r){return 1===arguments.length?jt(t):new Bt(t,n,e,null==r?1:r)}function Bt(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function zt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Ot(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Vt(t,n,e,r)}function Vt(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Xt(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}bt(At,qt,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),bt(Bt,Ht,Mt(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Bt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Bt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+zt(this.r)+zt(this.g)+zt(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),bt(Vt,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof Vt)return new Vt(t.h,t.s,t.l,t.opacity);if(t instanceof At||(t=qt(t)),!t)return new Vt;if(t instanceof Vt)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,s=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=s<.5?o+i:2-o-i,a*=60):u=s>0&&s<1?0:a,new Vt(a,u,s,t.opacity)}(t):new Vt(t,n,e,null==r?1:r)},Mt(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Vt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Vt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Bt(Xt(t>=240?t-240:t+120,i,r),Xt(t,i,r),Xt(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Rt=Math.PI/180,Zt=180/Math.PI,Gt=.96422,Wt=1,Jt=.82521,Qt=4/29,Kt=6/29,tn=3*Kt*Kt,nn=Kt*Kt*Kt;function en(t){if(t instanceof rn)return new rn(t.l,t.a,t.b,t.opacity);if(t instanceof ln){if(isNaN(t.h))return new rn(t.l,0,0,t.opacity);var n=t.h*Rt;return new rn(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof Bt||(t=jt(t));var e,r,i=sn(t.r),o=sn(t.g),a=sn(t.b),u=on((.2225045*i+.7168786*o+.0606169*a)/Wt);return i===o&&o===a?e=r=u:(e=on((.4360747*i+.3850649*o+.1430804*a)/Gt),r=on((.0139322*i+.0971045*o+.7141733*a)/Jt)),new rn(116*u-16,500*(e-u),200*(u-r),t.opacity)}function rn(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function on(t){return t>nn?Math.pow(t,1/3):t/tn+Qt}function an(t){return t>Kt?t*t*t:tn*(t-Qt)}function un(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function sn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function ln(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}bt(rn,function(t,n,e,r){return 1===arguments.length?en(t):new rn(t,n,e,null==r?1:r)},Mt(At,{brighter:function(t){return new rn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new rn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Bt(un(3.1338561*(n=Gt*an(n))-1.6168667*(t=Wt*an(t))-.4906146*(e=Jt*an(e))),un(-.9787684*n+1.9161415*t+.033454*e),un(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),bt(ln,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof ln)return new ln(t.h,t.c,t.l,t.opacity);if(t instanceof rn||(t=en(t)),0===t.a&&0===t.b)return new ln(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*Zt;return new ln(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new ln(t,n,e,null==r?1:r)},Mt(At,{brighter:function(t){return new ln(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new ln(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return en(this).rgb()}}));var cn=-.14861,fn=1.78277,hn=-.29227,pn=-.90649,dn=1.97294,gn=dn*pn,mn=dn*fn,vn=fn*hn-pn*cn;function yn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function wn(t){return function(){return t}}function xn(t){return 1==(t=+t)?_n:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):wn(isNaN(n)?e:n)}}function _n(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):wn(isNaN(t)?n:t)}bt(yn,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof yn)return new yn(t.h,t.s,t.l,t.opacity);t instanceof Bt||(t=jt(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(vn*r+gn*n-mn*e)/(vn+gn-mn),o=r-i,a=(dn*(e-i)-hn*o)/pn,u=Math.sqrt(a*a+o*o)/(dn*i*(1-i)),s=u?Math.atan2(a,o)*Zt-120:NaN;return new yn(s<0?s+360:s,u,i,t.opacity)}(t):new yn(t,n,e,null==r?1:r)},Mt(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new yn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new yn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Rt,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Bt(255*(n+e*(cn*r+fn*i)),255*(n+e*(hn*r+pn*i)),255*(n+e*(dn*r)),this.opacity)}}));var bn=function t(n){var e=xn(n);function r(t,n){var r=e((t=Ht(t)).r,(n=Ht(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=_n(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function Mn(t,n){return n-=t=+t,function(e){return t+n*e}}var An=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Tn=new RegExp(An.source,"g");function kn(t,n){var e,r,i,o=An.lastIndex=Tn.lastIndex=0,a=-1,u=[],s=[];for(t+="",n+="";(e=An.exec(t))&&(r=Tn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:Mn(e,r)})),o=Tn.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})}function Cn(t,n){var e,r=typeof n;return null==n||"boolean"===r?wn(n):("number"===r?Mn:"string"===r?(e=qt(n))?(n=e,bn):kn:n instanceof qt?bn:n instanceof Date?function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}:Array.isArray(n)?function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=Cn(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Cn(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}:Mn)(t,n)}function Sn(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}}var Dn,Nn,En,Un,In=180/Math.PI,$n={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Fn(t,n,e,r,i,o){var a,u,s;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*In,skewX:Math.atan(s)*In,scaleX:a,scaleY:u}}function Ln(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],s=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var s=a.push("translate(",null,n,null,e);u.push({i:s-4,x:Mn(t,i)},{i:s-2,x:Mn(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,s),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Mn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,s),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Mn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,s),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Mn(t,e)},{i:u-2,x:Mn(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,s),o=a=null,function(t){for(var n,e=-1,r=s.length;++e<r;)u[(n=s[e]).i]=n.x(t);return u.join("")}}}var qn=Ln(function(t){return"none"===t?$n:(Dn||(Dn=document.createElement("DIV"),Nn=document.documentElement,En=document.defaultView),Dn.style.transform=t,t=En.getComputedStyle(Nn.appendChild(Dn),null).getPropertyValue("transform"),Nn.removeChild(Dn),Fn(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Yn=Ln(function(t){return null==t?$n:(Un||(Un=document.createElementNS("http://www.w3.org/2000/svg","g")),Un.setAttribute("transform",t),(t=Un.transform.baseVal.consolidate())?Fn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):$n)},", ",")",")");Math.SQRT2;function Pn(t){return function(){return t}}function jn(t){return+t}var Hn=[0,1];function Bn(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:Pn(n)}function zn(t,n,e,r){var i=t[0],o=t[1],a=n[0],u=n[1];return o<i?(i=e(o,i),a=r(u,a)):(i=e(i,o),a=r(a,u)),function(t){return a(i(t))}}function On(t,n,e,r){var i=Math.min(t.length,n.length)-1,o=new Array(i),a=new Array(i),u=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<i;)o[u]=e(t[u],t[u+1]),a[u]=r(n[u],n[u+1]);return function(n){var e=p(t,n,1,i)-1;return a[e](o[e](n))}}function Vn(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function Xn(t,n){var e,r,i,o=Hn,a=Hn,u=Cn,s=!1;function l(){return e=Math.min(o.length,a.length)>2?On:zn,r=i=null,c}function c(n){return(r||(r=e(o,a,s?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,u)))(+n)}return c.invert=function(t){return(i||(i=e(a,o,Bn,s?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},c.domain=function(t){return arguments.length?(o=yt.call(t,jn),l()):o.slice()},c.range=function(t){return arguments.length?(a=wt.call(t),l()):a.slice()},c.rangeRound=function(t){return a=wt.call(t),u=Sn,l()},c.clamp=function(t){return arguments.length?(s=!!t,l()):s},c.interpolate=function(t){return arguments.length?(u=t,l()):u},l()}function Rn(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function Zn(t){return(t=Rn(Math.abs(t)))?t[1]:NaN}var Gn,Wn=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Jn(t){return new Qn(t)}function Qn(t){if(!(n=Wn.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}function Kn(t,n){var e=Rn(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}Jn.prototype=Qn.prototype,Qn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var te={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Kn(100*t,n)},r:Kn,s:function(t,n){var e=Rn(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(Gn=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Rn(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function ne(t){return t}var ee,re,ie,oe=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function ae(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],a=0,u=n[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),o.push(t.substring(i-=u,i+u)),!((s+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}):ne,i=t.currency,o=t.decimal,a=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):ne,u=t.percent||"%";function s(t){var n=(t=Jn(t)).fill,e=t.align,s=t.sign,l=t.symbol,c=t.zero,f=t.width,h=t.comma,p=t.precision,d=t.trim,g=t.type;"n"===g?(h=!0,g="g"):te[g]||(null==p&&(p=12),d=!0,g="g"),(c||"0"===n&&"="===e)&&(c=!0,n="0",e="=");var m="$"===l?i[0]:"#"===l&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",v="$"===l?i[1]:/[%p]/.test(g)?u:"",y=te[g],w=/[defgprs%]/.test(g);function x(t){var i,u,l,x=m,_=v;if("c"===g)_=y(t)+_,t="";else{var b=(t=+t)<0;if(t=y(Math.abs(t),p),d&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),b&&0==+t&&(b=!1),x=(b?"("===s?s:"-":"-"===s||"("===s?"":s)+x,_=("s"===g?oe[8+Gn/3]:"")+_+(b&&"("===s?")":""),w)for(i=-1,u=t.length;++i<u;)if(48>(l=t.charCodeAt(i))||l>57){_=(46===l?o+t.slice(i+1):t.slice(i))+_,t=t.slice(0,i);break}}h&&!c&&(t=r(t,1/0));var M=x.length+t.length+_.length,A=M<f?new Array(f-M+1).join(n):"";switch(h&&c&&(t=r(A+t,A.length?f-_.length:1/0),A=""),e){case"<":t=x+t+_+A;break;case"=":t=x+A+t+_;break;case"^":t=A.slice(0,M=A.length>>1)+x+t+_+A.slice(M);break;default:t=A+x+t+_}return a(t)}return p=null==p?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),x.toString=function(){return t+""},x}return{format:s,formatPrefix:function(t,n){var e=s(((t=Jn(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Zn(n)/3))),i=Math.pow(10,-r),o=oe[8+r/3];return function(t){return e(i*t)+o}}}}function ue(t,n,e){var r,i=t[0],o=t[t.length-1],a=function(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=m?i*=10:o>=v?i*=5:o>=y&&(i*=2),n<t?-i:i}(i,o,null==n?10:n);switch((e=Jn(null==e?",f":e)).type){case"s":var u=Math.max(Math.abs(i),Math.abs(o));return null!=e.precision||isNaN(r=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Zn(n)/3)))-Zn(Math.abs(t)))}(a,u))||(e.precision=r),ie(e,u);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(r=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Zn(n)-Zn(t))+1}(a,Math.max(Math.abs(i),Math.abs(o))))||(e.precision=r-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(r=function(t){return Math.max(0,-Zn(Math.abs(t)))}(a))||(e.precision=r-2*("%"===e.type))}return re(e)}function se(){var t=Xn(Bn,Mn);return t.copy=function(){return Vn(t,se())},function(t){var n=t.domain;return t.ticks=function(t){var e=n();return w(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return ue(n(),t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,a=i.length-1,u=i[o],s=i[a];return s<u&&(r=u,u=s,s=r,r=o,o=a,a=r),(r=x(u,s,e))>0?r=x(u=Math.floor(u/r)*r,s=Math.ceil(s/r)*r,e):r<0&&(r=x(u=Math.ceil(u*r)/r,s=Math.floor(s*r)/r,e)),r>0?(i[o]=Math.floor(u/r)*r,i[a]=Math.ceil(s/r)*r,n(i)):r<0&&(i[o]=Math.ceil(u*r)/r,i[a]=Math.floor(s*r)/r,n(i)),t},t}(t)}function le(t,n){return(n=Math.log(n/t))?function(e){return Math.log(e/t)/n}:Pn(n)}function ce(t,n){return t<0?function(e){return-Math.pow(-n,e)*Math.pow(-t,1-e)}:function(e){return Math.pow(n,e)*Math.pow(t,1-e)}}function fe(t){return isFinite(t)?+("1e"+t):t<0?0:t}function he(t){return 10===t?fe:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}function pe(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}function de(t){return function(n){return-t(-n)}}ee=ae({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),re=ee.format,ie=ee.formatPrefix;var ge=new Date,me=new Date;function ve(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return u},i.filter=function(e){return ve(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return ge.setTime(+n),me.setTime(+r),t(ge),t(me),Math.floor(e(ge,me))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var ye=ve(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});ye.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ve(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):ye:null};var we=6e4,xe=6048e5,_e=(ve(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),ve(function(t){t.setTime(Math.floor(t/we)*we)},function(t,n){t.setTime(+t+n*we)},function(t,n){return(n-t)/we},function(t){return t.getMinutes()}),ve(function(t){var n=t.getTimezoneOffset()*we%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()}),ve(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*we)/864e5},function(t){return t.getDate()-1}));function be(t){return ve(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*we)/xe})}var Me=be(0),Ae=be(1),Te=(be(2),be(3),be(4)),ke=(be(5),be(6),ve(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),ve(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));ke.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ve(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};ve(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*we)},function(t,n){return(n-t)/we},function(t){return t.getUTCMinutes()}),ve(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()});var Ce=ve(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1});function Se(t){return ve(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/xe})}var De=Se(0),Ne=Se(1),Ee=(Se(2),Se(3),Se(4)),Ue=(Se(5),Se(6),ve(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),ve(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function Ie(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function $e(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Fe(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}Ue.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ve(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var Le,qe,Ye,Pe={"-":"",_:" ",0:"0"},je=/^\s*\d+/,He=/^%/,Be=/[\\^$*+?|[\]().{}]/g;function ze(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Oe(t){return t.replace(Be,"\\$&")}function Ve(t){return new RegExp("^(?:"+t.map(Oe).join("|")+")","i")}function Xe(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Re(t,n,e){var r=je.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Ze(t,n,e){var r=je.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Ge(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function We(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Je(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function Qe(t,n,e){var r=je.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Ke(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function tr(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function nr(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function er(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function rr(t,n,e){var r=je.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function ir(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function or(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function ar(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function ur(t,n,e){var r=je.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function sr(t,n,e){var r=je.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function lr(t,n,e){var r=He.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function cr(t,n,e){var r=je.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function fr(t,n,e){var r=je.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function hr(t,n){return ze(t.getDate(),n,2)}function pr(t,n){return ze(t.getHours(),n,2)}function dr(t,n){return ze(t.getHours()%12||12,n,2)}function gr(t,n){return ze(1+_e.count(ke(t),t),n,3)}function mr(t,n){return ze(t.getMilliseconds(),n,3)}function vr(t,n){return mr(t,n)+"000"}function yr(t,n){return ze(t.getMonth()+1,n,2)}function wr(t,n){return ze(t.getMinutes(),n,2)}function xr(t,n){return ze(t.getSeconds(),n,2)}function _r(t){var n=t.getDay();return 0===n?7:n}function br(t,n){return ze(Me.count(ke(t),t),n,2)}function Mr(t,n){var e=t.getDay();return t=e>=4||0===e?Te(t):Te.ceil(t),ze(Te.count(ke(t),t)+(4===ke(t).getDay()),n,2)}function Ar(t){return t.getDay()}function Tr(t,n){return ze(Ae.count(ke(t),t),n,2)}function kr(t,n){return ze(t.getFullYear()%100,n,2)}function Cr(t,n){return ze(t.getFullYear()%1e4,n,4)}function Sr(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+ze(n/60|0,"0",2)+ze(n%60,"0",2)}function Dr(t,n){return ze(t.getUTCDate(),n,2)}function Nr(t,n){return ze(t.getUTCHours(),n,2)}function Er(t,n){return ze(t.getUTCHours()%12||12,n,2)}function Ur(t,n){return ze(1+Ce.count(Ue(t),t),n,3)}function Ir(t,n){return ze(t.getUTCMilliseconds(),n,3)}function $r(t,n){return Ir(t,n)+"000"}function Fr(t,n){return ze(t.getUTCMonth()+1,n,2)}function Lr(t,n){return ze(t.getUTCMinutes(),n,2)}function qr(t,n){return ze(t.getUTCSeconds(),n,2)}function Yr(t){var n=t.getUTCDay();return 0===n?7:n}function Pr(t,n){return ze(De.count(Ue(t),t),n,2)}function jr(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Ee(t):Ee.ceil(t),ze(Ee.count(Ue(t),t)+(4===Ue(t).getUTCDay()),n,2)}function Hr(t){return t.getUTCDay()}function Br(t,n){return ze(Ne.count(Ue(t),t),n,2)}function zr(t,n){return ze(t.getUTCFullYear()%100,n,2)}function Or(t,n){return ze(t.getUTCFullYear()%1e4,n,4)}function Vr(){return"+0000"}function Xr(){return"%"}function Rr(t){return+t}function Zr(t){return Math.floor(+t/1e3)}!function(t){Le=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,s=t.shortMonths,l=Ve(i),c=Xe(i),f=Ve(o),h=Xe(o),p=Ve(a),d=Xe(a),g=Ve(u),m=Xe(u),v=Ve(s),y=Xe(s),w={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:hr,e:hr,f:vr,H:pr,I:dr,j:gr,L:mr,m:yr,M:wr,p:function(t){return i[+(t.getHours()>=12)]},Q:Rr,s:Zr,S:xr,u:_r,U:br,V:Mr,w:Ar,W:Tr,x:null,X:null,y:kr,Y:Cr,Z:Sr,"%":Xr},x={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Dr,e:Dr,f:$r,H:Nr,I:Er,j:Ur,L:Ir,m:Fr,M:Lr,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:Rr,s:Zr,S:qr,u:Yr,U:Pr,V:jr,w:Hr,W:Br,x:null,X:null,y:zr,Y:Or,Z:Vr,"%":Xr},_={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=m[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return A(t,n,e,r)},d:er,e:er,f:sr,H:ir,I:ir,j:rr,L:ur,m:nr,M:or,p:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.p=c[r[0].toLowerCase()],e+r[0].length):-1},Q:cr,s:fr,S:ar,u:Ze,U:Ge,V:We,w:Re,W:Je,x:function(t,n,r){return A(t,e,n,r)},X:function(t,n,e){return A(t,r,n,e)},y:Ke,Y:Qe,Z:tr,"%":lr};function b(t,n){return function(e){var r,i,o,a=[],u=-1,s=0,l=t.length;for(e instanceof Date||(e=new Date(+e));++u<l;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=Pe[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),s=u+1);return a.push(t.slice(s,u)),a.join("")}}function M(t,n){return function(e){var r,i,o=Fe(1900);if(A(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(r=(i=(r=$e(Fe(o.y))).getUTCDay())>4||0===i?Ne.ceil(r):Ne(r),r=Ce.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(r=(i=(r=n(Fe(o.y))).getDay())>4||0===i?Ae.ceil(r):Ae(r),r=_e.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?$e(Fe(o.y)).getUTCDay():n(Fe(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,$e(o)):n(o)}}function A(t,n,e,r){for(var i,o,a=0,u=n.length,s=e.length;a<u;){if(r>=s)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=_[i in Pe?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return w.x=b(e,w),w.X=b(r,w),w.c=b(n,w),x.x=b(e,x),x.X=b(r,x),x.c=b(n,x),{format:function(t){var n=b(t+="",w);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",Ie);return n.toString=function(){return t},n},utcFormat:function(t){var n=b(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,$e);return n.toString=function(){return t},n}}}(t),Le.format,Le.parse,qe=Le.utcFormat,Ye=Le.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||qe("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Ye("%Y-%m-%dT%H:%M:%S.%LZ");var Gr=Array.prototype.slice;function Wr(t){return t}var Jr=1,Qr=2,Kr=3,ti=4,ni=1e-6;function ei(t){return"translate("+(t+.5)+",0)"}function ri(t){return"translate(0,"+(t+.5)+")"}function ii(){return!this.__axis}function oi(t,n){var e=[],r=null,i=null,o=6,a=6,u=3,s=t===Jr||t===ti?-1:1,l=t===ti||t===Qr?"x":"y",c=t===Jr||t===Kr?ei:ri;function f(f){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):Wr:i,d=Math.max(o,0)+u,g=n.range(),m=+g[0]+.5,v=+g[g.length-1]+.5,y=(n.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}:function(t){return function(n){return+t(n)}})(n.copy()),w=f.selection?f.selection():f,x=w.selectAll(".domain").data([null]),_=w.selectAll(".tick").data(h,n).order(),b=_.exit(),M=_.enter().append("g").attr("class","tick"),A=_.select("line"),T=_.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),_=_.merge(M),A=A.merge(M.append("line").attr("stroke","#000").attr(l+"2",s*o)),T=T.merge(M.append("text").attr("fill","#000").attr(l,s*d).attr("dy",t===Jr?"0em":t===Kr?"0.71em":"0.32em")),f!==w&&(x=x.transition(f),_=_.transition(f),A=A.transition(f),T=T.transition(f),b=b.transition(f).attr("opacity",ni).attr("transform",function(t){return isFinite(t=y(t))?c(t):this.getAttribute("transform")}),M.attr("opacity",ni).attr("transform",function(t){var n=this.parentNode.__axis;return c(n&&isFinite(n=n(t))?n:y(t))})),b.remove(),x.attr("d",t===ti||t==Qr?"M"+s*a+","+m+"H0.5V"+v+"H"+s*a:"M"+m+","+s*a+"V0.5H"+v+"V"+s*a),_.attr("opacity",1).attr("transform",function(t){return c(y(t))}),A.attr(l+"2",s*o),T.attr(l,s*d).text(p),w.filter(ii).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Qr?"start":t===ti?"end":"middle"),w.each(function(){this.__axis=y})}return f.scale=function(t){return arguments.length?(n=t,f):n},f.ticks=function(){return e=Gr.call(arguments),f},f.tickArguments=function(t){return arguments.length?(e=null==t?[]:Gr.call(t),f):e.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:Gr.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(o=a=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(a=+t,f):a},f.tickPadding=function(t){return arguments.length?(u=+t,f):u},f}var ai={value:function(){}};function ui(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new si(r)}function si(t){this._=t}function li(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function ci(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=ai,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}si.prototype=ui.prototype={constructor:si,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),a=-1,u=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<u;)if(e=(t=o[a]).type)i[e]=ci(i[e],t.name,n);else if(null==n)for(e in i)i[e]=ci(i[e],t.name,null);return this}for(;++a<u;)if((e=(t=o[a]).type)&&(e=li(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new si(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var fi,hi,pi=0,di=0,gi=0,mi=1e3,vi=0,yi=0,wi=0,xi="object"==typeof performance&&performance.now?performance:Date,_i="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function bi(){return yi||(_i(Mi),yi=xi.now()+wi)}function Mi(){yi=0}function Ai(){this._call=this._time=this._next=null}function Ti(t,n,e){var r=new Ai;return r.restart(t,n,e),r}function ki(){yi=(vi=xi.now())+wi,pi=di=0;try{!function(){bi(),++pi;for(var t,n=fi;n;)(t=yi-n._time)>=0&&n._call.call(null,t),n=n._next;--pi}()}finally{pi=0,function(){var t,n,e=fi,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:fi=n);hi=t,Si(r)}(),yi=0}}function Ci(){var t=xi.now(),n=t-vi;n>mi&&(wi-=n,vi=t)}function Si(t){pi||(di&&(di=clearTimeout(di)),t-yi>24?(t<1/0&&(di=setTimeout(ki,t-xi.now()-wi)),gi&&(gi=clearInterval(gi))):(gi||(vi=xi.now(),gi=setInterval(Ci,mi)),pi=1,_i(ki)))}function Di(t,n,e){var r=new Ai;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r}Ai.prototype=Ti.prototype={constructor:Ai,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?bi():+e)+(null==n?0:+n),this._next||hi===this||(hi?hi._next=this:fi=this,hi=this),this._call=t,this._time=e,Si()},stop:function(){this._call&&(this._call=null,this._time=1/0,Si())}};var Ni=ui("start","end","interrupt"),Ei=[],Ui=0,Ii=1,$i=2,Fi=3,Li=4,qi=5,Yi=6;function Pi(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(s){var l,c,f,h;if(e.state!==Ii)return u();for(l in i)if((h=i[l]).name===e.name){if(h.state===Fi)return Di(o);h.state===Li?(h.state=Yi,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[l]):+l<n&&(h.state=Yi,h.timer.stop(),delete i[l])}if(Di(function(){e.state===Fi&&(e.state=Li,e.timer.restart(a,e.delay,e.time),a(s))}),e.state=$i,e.on.call("start",t,t.__data__,e.index,e.group),e.state===$i){for(e.state=Fi,r=new Array(f=e.tween.length),l=0,c=-1;l<f;++l)(h=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=h);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=qi,1),o=-1,a=r.length;++o<a;)r[o].call(null,i);e.state===qi&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=Yi,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Ti(function(t){e.state=Ii,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:Ni,tween:Ei,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Ui})}function ji(t,n){var e=Bi(t,n);if(e.state>Ui)throw new Error("too late; already scheduled");return e}function Hi(t,n){var e=Bi(t,n);if(e.state>$i)throw new Error("too late; already started");return e}function Bi(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function zi(t,n,e){var r=t._id;return t.each(function(){var t=Hi(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return Bi(t,r).value[n]}}function Oi(t,n){var e;return("number"==typeof n?Mn:n instanceof qt?bn:(e=qt(n))?(n=e,bn):kn)(t,n)}var Vi=ft.prototype.constructor;var Xi=0;function Ri(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Zi(){return++Xi}var Gi=ft.prototype;Ri.prototype=function(t){return ft().transition(t)}.prototype={constructor:Ri,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=C(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,s,l=r[a],c=l.length,f=o[a]=new Array(c),h=0;h<c;++h)(u=l[h])&&(s=t.call(u,u.__data__,h,l))&&("__data__"in u&&(s.__data__=u.__data__),f[h]=s,Pi(f[h],n,e,h,f,Bi(u,e)));return new Ri(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=D(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var s,l=r[u],c=l.length,f=0;f<c;++f)if(s=l[f]){for(var h,p=t.call(s,s.__data__,f,l),d=Bi(s,e),g=0,m=p.length;g<m;++g)(h=p[g])&&Pi(h,n,e,g,p,d);o.push(p),a.push(s)}return new Ri(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=I(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],l=0;l<u;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&s.push(o);return new Ri(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,l=n[u],c=e[u],f=l.length,h=a[u]=new Array(f),p=0;p<f;++p)(s=l[p]||c[p])&&(h[p]=s);for(;u<r;++u)a[u]=n[u];return new Ri(a,this._parents,this._name,this._id)},selection:function(){return new Vi(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Zi(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,l=0;l<s;++l)if(a=u[l]){var c=Bi(a,n);Pi(a,t,e,l,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Ri(r,this._parents,t,e)},call:Gi.call,nodes:Gi.nodes,node:Gi.node,size:Gi.size,empty:Gi.empty,each:Gi.each,on:function(t,n){var e=this._id;return arguments.length<2?Bi(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?ji:Hi;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}(e,t,n))},attr:function(t,n){var e=A(t),r="transform"===e?Yn:Oi;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,o;return function(){var a,u=e(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===u?null:a===r&&u===i?o:o=n(r=a,i=u);this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,o;return function(){var a,u=e(this);if(null!=u)return(a=this.getAttribute(t))===u?null:a===r&&u===i?o:o=n(r=a,i=u);this.removeAttribute(t)}})(e,r,zi(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===e?null:o===r?i:i=n(r=o,e)}}:function(t,n,e){var r,i;return function(){var o=this.getAttribute(t);return o===e?null:o===r?i:i=n(r=o,e)}})(e,r,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=A(t);return this.tween(e,(r.local?function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}:function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?qn:Oi;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=B(this,t),a=(this.style.removeProperty(t),B(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var r,i,o;return function(){var a=B(this,t),u=e(this);return null==u&&(this.style.removeProperty(t),u=B(this,t)),a===u?null:a===r&&u===i?o:o=n(r=a,i=u)}}(t,r,zi(this,"style."+t,n)):function(t,n,e){var r,i;return function(){var o=B(this,t);return o===e?null:o===r?i:i=n(r=o,e)}}(t,r,n+""),e)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(zi(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Bi(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=Hi(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Hi(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},s=0,l=i.length;s<l;++s)if(i[s].name===n){i[s]=u;break}s===l&&i.push(u)}o.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){ji(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){ji(this,t).delay=n}})(n,t)):Bi(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Hi(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Hi(this,t).duration=n}})(n,t)):Bi(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){Hi(this,t).ease=n}}(n,t)):Bi(this.node(),n).ease}};Math.PI,Math.PI;var Wi={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Ji(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Wi.time=bi(),Wi;return e}ft.prototype.interrupt=function(t){return this.each(function(){!function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>$i&&e.state<qi,e.state=Yi,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)})},ft.prototype.transition=function(t){var n,e;t instanceof Ri?(n=t._id,t=t._name):(n=Zi(),(e=Wi).time=bi(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,l=0;l<s;++l)(a=u[l])&&Pi(a,t,n,l,u,e||Ji(a,n));return new Ri(r,this._parents,t,n)};class Qi{constructor(t,n=!1,e=30,r=-40,i=100){this.id=t,this.verbose=n,this.offsetX=e,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),ht("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){ht("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=rt.pageX,n=rt.pageY){this.verbose&&(console.log(t),console.log(n)),t+=this.offsetX,n=n+this.offsetY<0?10:n+this.offsetY;ht("#"+this.id).style("left",`${t}px`).style("top",`${n}px`)}edit(t){ht("#"+this.id).html(t)}}class Ki{constructor(t,n=!0,e=10,r="boxplot-tooltip"){this.boxplotData=t.sort(function(t,n){return t.label<n.label?-1:t.label>n.label?1:0}),this.allVals=[],this.boxplotData.forEach(t=>{t.data.sort(c),this.allVals=this.allVals.concat(t.data),t.q1=_(t.data,.25),t.median=function(t,n){var e,r=t.length,i=-1,o=[];if(null==n)for(;++i<r;)isNaN(e=d(t[i]))||o.push(e);else for(;++i<r;)isNaN(e=d(n(t[i],i,t)))||o.push(e);return _(o.sort(c),.5)}(t.data),t.q3=_(t.data,.75),t.iqr=t.q3-t.q1,t.upperBound=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r}(t.data.filter(n=>n<=t.q3+1.5*t.iqr)),t.lowerBound=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r}(t.data.filter(n=>n>=t.q1-1.5*t.iqr)),t.outliers=t.data.filter(n=>n<t.lowerBound||n>t.upperBound)}),this.useLog=n,this.logBase=e,this.allVals.sort(c),this.tooltip=void 0,this.createTooltip(r)}render(t,n={}){let e=n.width||1200,r=n.height||800,i=n.marginTop||10,o=n.marginRight||70,a=n.marginBottom||150,u=n.marginLeft||40,s=n.padding||.15,l=n.xAxisFontSize||11,c=n.xAxisLabel||"",f=n.xAxisLabelFontSize||11,h=n.yAxisFontSize||10,p=(this.useLog?`log${this.logBase}(${n.yAxisUnit})`:n.yAxisUnit)||"",d=n.yAxisLabelFontSize||11;const g=this._getLogAdjustment(),m=this._createSvg(t,e,r).append("g").attr("id","gtex-viz-boxplot");let v=this._setScales(e-(u+o),r-(i+a),s),y=(w=v.x,oi(Kr,w));var w;let x=function(t){return oi(ti,t)}(v.y);m.append("g").attr("class","boxplot-x-axis").attr("transform",`translate(${u+v.x.bandwidth()/2}, ${r-a})`).call(y).attr("text-anchor","start").selectAll("text").attr("transform","translate(5,1) rotate(45)").attr("font-size",l),m.append("text").attr("transform",`translate(${u+e/2+v.x.bandwidth()/2}, ${r-f/2})`).attr("text-anchor","middle").style("font-size",f).text(c),m.append("g").attr("class","boxplot-y-axis").attr("transform",`translate(${u}, ${i})`).call(x).attr("font-size",h),m.append("text").attr("transform",`translate(${d}, ${(r-a)/2}) rotate(270)`).attr("text-anchor","middle").style("font-size",d).text(p),m.append("g").attr("class","boxplot-iqr").attr("transform",`translate(${u+v.x.bandwidth()}, ${i})`).selectAll("rect").data(this.boxplotData).enter().append("rect").attr("x",t=>v.x(t.label)-v.x.bandwidth()/2).attr("y",t=>this.useLog?v.y(t.q3+g):v.y(t.q3)).attr("width",t=>v.x.bandwidth()).attr("height",t=>this.useLog?v.y(t.q1+g)-v.y(t.q3+g):v.y(t.q1)-v.y(t.q3)).attr("fill",t=>`#${t.color}`).attr("stroke","#aaa").on("mouseover",(t,n,e)=>{let r=ht(e[n]);this.boxplotMouseover(t,r)}).on("mouseout",(t,n,e)=>{let r=ht(e[n]);this.boxplotMouseout(t,r)}),m.append("g").attr("class","boxplot-median").attr("transform",`translate(${u+v.x.bandwidth()}, ${i})`).selectAll("line").data(this.boxplotData).enter().append("line").attr("x1",t=>v.x(t.label)-v.x.bandwidth()/2).attr("y1",t=>this.useLog?v.y(t.median+g):v.y(t.median)).attr("x2",t=>v.x(t.label)+v.x.bandwidth()/2).attr("y2",t=>this.useLog?v.y(t.median+g):v.y(t.median)).attr("stroke","#000").attr("stroke-width",2);let _=m.append("g").attr("class","boxplot-whisker");_.append("g").attr("transform",`translate(${u+v.x.bandwidth()}, ${i})`).selectAll("line").data(this.boxplotData).enter().append("line").attr("x1",t=>v.x(t.label)).attr("y1",t=>this.useLog?v.y(t.q3+g):v.y(t.q3)).attr("x2",t=>v.x(t.label)).attr("y2",t=>this.useLog?v.y(t.upperBound+g):v.y(t.upperBound)).attr("stroke","#aaa"),_.append("g").attr("transform",`translate(${u+v.x.bandwidth()}, ${i})`).selectAll("line").data(this.boxplotData).enter().append("line").attr("x1",t=>v.x(t.label)-v.x.bandwidth()/4).attr("y1",t=>this.useLog?v.y(t.upperBound+g):v.y(t.upperBound)).attr("x2",t=>v.x(t.label)+v.x.bandwidth()/4).attr("y2",t=>this.useLog?v.y(t.upperBound+g):v.y(t.upperBound)).attr("stroke","#aaa"),_.append("g").attr("transform",`translate(${u+v.x.bandwidth()}, ${i})`).selectAll("line").data(this.boxplotData).enter().append("line").attr("x1",t=>v.x(t.label)).attr("y1",t=>this.useLog?v.y(t.q1+g):v.y(t.q1)).attr("x2",t=>v.x(t.label)).attr("y2",t=>this.useLog?v.y(t.lowerBound+g):v.y(t.lowerBound)).attr("stroke","#aaa"),_.append("g").attr("transform",`translate(${u+v.x.bandwidth()}, ${i})`).selectAll("line").data(this.boxplotData).enter().append("line").attr("x1",t=>v.x(t.label)-v.x.bandwidth()/4).attr("y1",t=>this.useLog?v.y(t.lowerBound+g):v.y(t.lowerBound)).attr("x2",t=>v.x(t.label)+v.x.bandwidth()/4).attr("y2",t=>this.useLog?v.y(t.lowerBound+g):v.y(t.lowerBound)).attr("stroke","#aaa"),m.append("g").attr("class","boxplot-outliers").attr("transform",`translate(${u+v.x.bandwidth()}, ${i})`).selectAll("g").data(this.boxplotData).enter().append("g").selectAll("circle").data(t=>t.outliers.map(n=>({label:t.label,val:n}))).enter().append("circle").attr("cx",t=>v.x(t.label)).attr("cy",t=>this.useLog?v.y(t.val+g):v.y(t.val)).attr("r","2").attr("stroke","#aaa").attr("fill","none")}createTooltip(t){0==$(`#${t}`).length&&$("<div/>").attr("id",t).appendTo($("body")),this.tooltip=new Qi(t),ht(`#${t}`).attr("class","boxplot-tooltip")}boxplotMouseover(t,n){void 0!==this.tooltip&&this.tooltip.show(`${t.label}<br/>\n            ${this.useLog?"Log10(Median TPM)":"Median TPM"}: ${t.median.toPrecision(3)}<br/>\n            Number of Samples: ${t.data.length}`),n.classed("highlighted",!0)}boxplotMouseout(t,n){void 0!==this.tooltip&&this.tooltip.hide(),n.classed("highlighted",!1)}_createSvg(t,n,e){return ht(`#${t}`).append("svg").attr("width",n).attr("height",e)}_setScales(t,n,e=0){let r,i=_t().domain(this.boxplotData.map(t=>t.label)).range([0,t]).paddingInner(e);if(this.useLog){const t=this._getLogAdjustment();r=function t(){var n=Xn(le,ce).domain([1,10]),e=n.domain,r=10,i=pe(10),o=he(10);function a(){return i=pe(r),o=he(r),e()[0]<0&&(i=de(i),o=de(o)),n}return n.base=function(t){return arguments.length?(r=+t,a()):r},n.domain=function(t){return arguments.length?(e(t),a()):e()},n.ticks=function(t){var n,a=e(),u=a[0],s=a[a.length-1];(n=s<u)&&(h=u,u=s,s=h);var l,c,f,h=i(u),p=i(s),d=null==t?10:+t,g=[];if(!(r%1)&&p-h<d){if(h=Math.round(h)-1,p=Math.round(p)+1,u>0){for(;h<p;++h)for(c=1,l=o(h);c<r;++c)if(!((f=l*c)<u)){if(f>s)break;g.push(f)}}else for(;h<p;++h)for(c=r-1,l=o(h);c>=1;--c)if(!((f=l*c)<u)){if(f>s)break;g.push(f)}}else g=w(h,p,Math.min(p-h,d)).map(o);return n?g.reverse():g},n.tickFormat=function(t,e){if(null==e&&(e=10===r?".0e":","),"function"!=typeof e&&(e=re(e)),t===1/0)return e;null==t&&(t=10);var a=Math.max(1,r*t/n.ticks().length);return function(t){var n=t/o(Math.round(i(t)));return n*r<r-.5&&(n*=r),n<=a?e(t):""}},n.nice=function(){return e(function(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(e=r,r=i,i=e,e=o,o=a,a=e),t[r]=n.floor(o),t[i]=n.ceil(a),t}(e(),{floor:function(t){return o(Math.floor(i(t)))},ceil:function(t){return o(Math.ceil(i(t)))}}))},n.copy=function(){return Vn(n,t().base(r))},n}().domain(g(this.allVals).map(n=>n+t)).range([n,0]).base(this.logBase)}else r=se().domain(g(this.allVals)).range([n,0]);return{x:i,y:r}}_getLogAdjustment(){return 1}}return t.launch=function(t,n,e=function(){const t="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:t+"association/singleTissueEqtl?format=json&datasetId=gtex_v7&gencodeId=",ld:t+"dataset/ld?format=json&datasetId=gtex_v7&gencodeId=",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v7&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v7&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?datasetId=gtex_v7&boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v7&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v7&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v19&genomeBuild=GRCh37%2Fhg19&geneId=",tissue:t+"dataset/tissueInfo?format=json&datasetId=gtex_v7",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}()){const r=[l(e.tissue),l(e.geneExp+n)];Promise.all(r).then(function(n){const e={},r={};(function(t){const n="tissueInfo";if(!t.hasOwnProperty(n))throw"Parsing Error: required json attr is missing: "+n;const e=t[n];return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach(t=>{if(!e[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t}),e})(n[0]).forEach(t=>{e[t.tissueSiteDetailId]=t.tissueSiteDetail,r[t.tissueSiteDetailId]=t.colorHex});const i=function(t,n,e){const r="geneExpression";if(!t.hasOwnProperty(r))throw`Parsing error: required JSON attribute ${r} missing.`;return t[r].forEach(t=>{["data","gencodeId","geneSymbol","tissueSiteDetailId"].forEach(n=>{if(!t.hasOwnProperty(n))throw console.error(t),`Parsing error: required JSON attribute ${n} is missing from a record.`}),t.label=void 0===n?t.tissueSiteDetailId:n[t.tissueSiteDetailId],t.color=void 0===e?"#4682b4":e[t.tissueSiteDetailId]}),t[r]}(n[1],e,r);let o={rootId:t,tooltipId:"boxplot-tooltip"};new Ki(i).render(o.rootId,{width:1e3,height:600,marginLeft:50,marginRight:100,marginBottom:160,yAxisUnit:"TPM"})})},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
