var LocusBrowser=function(t){"use strict";var e={},n={},a=34,r=10,i=13;function c(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}var o=function(t){var o=new RegExp('["'+t+"\n\r]"),f=t.charCodeAt(0);function l(t,c){var o,l=[],s=t.length,u=0,d=0,h=s<=0,b=!1;function p(){if(h)return n;if(b)return b=!1,e;var c,o,l=u;if(t.charCodeAt(l)===a){for(;u++<s&&t.charCodeAt(u)!==a||t.charCodeAt(++u)===a;);return(c=u)>=s?h=!0:(o=t.charCodeAt(u++))===r?b=!0:o===i&&(b=!0,t.charCodeAt(u)===r&&++u),t.slice(l+1,c-1).replace(/""/g,'"')}for(;u<s;){if((o=t.charCodeAt(c=u++))===r)b=!0;else if(o===i)b=!0,t.charCodeAt(u)===r&&++u;else if(o!==f)continue;return t.slice(l,c)}return h=!0,t.slice(l,s)}for(t.charCodeAt(s-1)===r&&--s,t.charCodeAt(s-1)===i&&--s;(o=p())!==n;){for(var g=[];o!==e&&o!==n;)g.push(o),o=p();c&&null==(g=c(g,d++))||l.push(g)}return l}function s(e){return e.map(u).join(t)}function u(t){return null==t?"":o.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,a,r=l(t,function(t,r){if(n)return n(t,r-1);a=t,n=e?function(t,e){var n=c(t);return function(a,r){return e(n(a),r,t)}}(t,e):c(t)});return r.columns=a||[],r},parseRows:l,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var a in t)a in e||n.push(e[a]=a)}),n}(e)),[n.map(u).join(t)].concat(e.map(function(e){return n.map(function(t){return u(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(s).join("\n")}}},f=o(",").parse,l=o("\t").parse;function s(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var u=function(t,e){return fetch(t,e).then(s)};function d(t){return function(e,n,a){return 2===arguments.length&&"function"==typeof n&&(a=n,n=void 0),u(e,n).then(function(e){return t(e,a)})}}d(f);var h=d(l);function b(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var p=function(t,e){return fetch(t,e).then(b)},g="http://www.w3.org/1999/xhtml",m={svg:"http://www.w3.org/2000/svg",xhtml:g,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},y=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),m.hasOwnProperty(e)?{space:m[e],local:t}:t};var v=function(t){var e=y(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===g&&e.documentElement.namespaceURI===g?e.createElement(t):e.createElementNS(n,t)}})(e)};function w(){}var x=function(t){return null==t?w:function(){return this.querySelector(t)}};function _(){return[]}var M=function(t){return null==t?_:function(){return this.querySelectorAll(t)}},S=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var k=document.documentElement;if(!k.matches){var A=k.webkitMatchesSelector||k.msMatchesSelector||k.mozMatchesSelector||k.oMatchesSelector;S=function(t){return function(){return A.call(this,t)}}}}var T=S,C=function(t){return new Array(t.length)};function N(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}N.prototype={constructor:N,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var $="$";function D(t,e,n,a,r,i){for(var c,o=0,f=e.length,l=i.length;o<l;++o)(c=e[o])?(c.__data__=i[o],a[o]=c):n[o]=new N(t,i[o]);for(;o<f;++o)(c=e[o])&&(r[o]=c)}function q(t,e,n,a,r,i,c){var o,f,l,s={},u=e.length,d=i.length,h=new Array(u);for(o=0;o<u;++o)(f=e[o])&&(h[o]=l=$+c.call(f,f.__data__,o,e),l in s?r[o]=f:s[l]=f);for(o=0;o<d;++o)(f=s[l=$+c.call(t,i[o],o,i)])?(a[o]=f,f.__data__=i[o],s[l]=null):n[o]=new N(t,i[o]);for(o=0;o<u;++o)(f=e[o])&&s[h[o]]===f&&(r[o]=f)}function E(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var L=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function P(t,e){return t.style.getPropertyValue(e)||L(t).getComputedStyle(t,null).getPropertyValue(e)}function U(t){return t.trim().split(/^|\s+/)}function I(t){return t.classList||new F(t)}function F(t){this._node=t,this._names=U(t.getAttribute("class")||"")}function Y(t,e){for(var n=I(t),a=-1,r=e.length;++a<r;)n.add(e[a])}function z(t,e){for(var n=I(t),a=-1,r=e.length;++a<r;)n.remove(e[a])}F.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function j(){this.textContent=""}function O(){this.innerHTML=""}function V(){this.nextSibling&&this.parentNode.appendChild(this)}function B(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function X(){return null}function H(){var t=this.parentNode;t&&t.removeChild(this)}function G(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function W(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var R={},Z=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(R={mouseenter:"mouseover",mouseleave:"mouseout"}));function Q(t,e,n){return t=J(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function J(t,e,n){return function(a){var r=Z;Z=a;try{t.call(this,this.__data__,e,n)}finally{Z=r}}}function K(t){return function(){var e=this.__on;if(e){for(var n,a=0,r=-1,i=e.length;a<i;++a)n=e[a],t.type&&n.type!==t.type||n.name!==t.name?e[++r]=n:this.removeEventListener(n.type,n.listener,n.capture);++r?e.length=r:delete this.__on}}}function tt(t,e,n){var a=R.hasOwnProperty(t.type)?Q:J;return function(r,i,c){var o,f=this.__on,l=a(e,i,c);if(f)for(var s=0,u=f.length;s<u;++s)if((o=f[s]).type===t.type&&o.name===t.name)return this.removeEventListener(o.type,o.listener,o.capture),this.addEventListener(o.type,o.listener=l,o.capture=n),void(o.value=e);this.addEventListener(t.type,l,n),o={type:t.type,name:t.name,value:e,listener:l,capture:n},f?f.push(o):this.__on=[o]}}function et(t,e,n){var a=L(t),r=a.CustomEvent;"function"==typeof r?r=new r(e,n):(r=a.document.createEvent("Event"),n?(r.initEvent(e,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(e,!1,!1)),t.dispatchEvent(r)}var nt=[null];function at(t,e){this._groups=t,this._parents=e}function rt(){return new at([[document.documentElement]],nt)}at.prototype=rt.prototype={constructor:at,select:function(t){"function"!=typeof t&&(t=x(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,c,o=e[r],f=o.length,l=a[r]=new Array(f),s=0;s<f;++s)(i=o[s])&&(c=t.call(i,i.__data__,s,o))&&("__data__"in i&&(c.__data__=i.__data__),l[s]=c);return new at(a,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=M(t));for(var e=this._groups,n=e.length,a=[],r=[],i=0;i<n;++i)for(var c,o=e[i],f=o.length,l=0;l<f;++l)(c=o[l])&&(a.push(t.call(c,c.__data__,l,o)),r.push(c));return new at(a,r)},filter:function(t){"function"!=typeof t&&(t=T(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,c=e[r],o=c.length,f=a[r]=[],l=0;l<o;++l)(i=c[l])&&t.call(i,i.__data__,l,c)&&f.push(i);return new at(a,this._parents)},data:function(t,e){if(!t)return b=new Array(this.size()),s=-1,this.each(function(t){b[++s]=t}),b;var n,a=e?q:D,r=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var c=i.length,o=new Array(c),f=new Array(c),l=new Array(c),s=0;s<c;++s){var u=r[s],d=i[s],h=d.length,b=t.call(u,u&&u.__data__,s,r),p=b.length,g=f[s]=new Array(p),m=o[s]=new Array(p);a(u,d,g,m,l[s]=new Array(h),b,e);for(var y,v,w=0,x=0;w<p;++w)if(y=g[w]){for(w>=x&&(x=w+1);!(v=m[x])&&++x<p;);y._next=v||null}}return(o=new at(o,r))._enter=f,o._exit=l,o},enter:function(){return new at(this._enter||this._groups.map(C),this._parents)},exit:function(){return new at(this._exit||this._groups.map(C),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,a=e.length,r=n.length,i=Math.min(a,r),c=new Array(a),o=0;o<i;++o)for(var f,l=e[o],s=n[o],u=l.length,d=c[o]=new Array(u),h=0;h<u;++h)(f=l[h]||s[h])&&(d[h]=f);for(;o<a;++o)c[o]=e[o];return new at(c,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var a,r=t[e],i=r.length-1,c=r[i];--i>=0;)(a=r[i])&&(c&&c!==a.nextSibling&&c.parentNode.insertBefore(a,c),c=a);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=E);for(var n=this._groups,a=n.length,r=new Array(a),i=0;i<a;++i){for(var c,o=n[i],f=o.length,l=r[i]=new Array(f),s=0;s<f;++s)(c=o[s])&&(l[s]=c);l.sort(e)}return new at(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var a=t[e],r=0,i=a.length;r<i;++r){var c=a[r];if(c)return c}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,a=e.length;n<a;++n)for(var r,i=e[n],c=0,o=i.length;c<o;++c)(r=i[c])&&t.call(r,r.__data__,c,i);return this},attr:function(t,e){var n=y(t);if(arguments.length<2){var a=this.node();return n.local?a.getAttributeNS(n.space,n.local):a.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var a=e.apply(this,arguments);null==a?this.style.removeProperty(t):this.style.setProperty(t,a,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):P(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=U(t+"");if(arguments.length<2){for(var a=I(this.node()),r=-1,i=n.length;++r<i;)if(!a.contains(n[r]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?Y:z)(this,t)}}:e?function(t){return function(){Y(this,t)}}:function(t){return function(){z(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?j:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?O:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(V)},lower:function(){return this.each(B)},append:function(t){var e="function"==typeof t?t:v(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:v(t),a=null==e?X:"function"==typeof e?e:x(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),a.apply(this,arguments)||null)})},remove:function(){return this.each(H)},clone:function(t){return this.select(t?W:G)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var a,r,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),c=i.length;if(!(arguments.length<2)){for(o=e?tt:K,null==n&&(n=!1),a=0;a<c;++a)this.each(o(i[a],e,n));return this}var o=this.node().__on;if(o)for(var f,l=0,s=o.length;l<s;++l)for(a=0,f=o[l];a<c;++a)if((r=i[a]).type===f.type&&r.name===f.name)return f.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return et(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return et(this,t,e)}})(t,e))}};var it=function(t){return"string"==typeof t?new at([[document.querySelector(t)]],[document.documentElement]):new at([[t]],nt)},ct=function(){for(var t,e=Z;t=e.sourceEvent;)e=t;return e},ot=function(t){var e=ct();return e.changedTouches&&(e=e.changedTouches[0]),function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var a=n.createSVGPoint();return a.x=e.clientX,a.y=e.clientY,[(a=a.matrixTransform(t.getScreenCTM().inverse())).x,a.y]}var r=t.getBoundingClientRect();return[e.clientX-r.left-t.clientLeft,e.clientY-r.top-t.clientTop]}(t,e)},ft=function(t){return"string"==typeof t?new at([document.querySelectorAll(t)],[document.documentElement]):new at([null==t?[]:t],nt)},lt=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN};var st,ut,dt=(1===(st=lt).length&&(ut=st,st=function(t,e){return lt(ut(t),e)}),{left:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){var r=n+a>>>1;st(t[r],e)<0?n=r+1:a=r}return n},right:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){var r=n+a>>>1;st(t[r],e)>0?a=r:n=r+1}return n}}).right,ht=function(t,e,n){t=+t,e=+e,n=(r=arguments.length)<2?(e=t,t=0,1):r<3?1:+n;for(var a=-1,r=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(r);++a<r;)i[a]=t+a*n;return i},bt=Math.sqrt(50),pt=Math.sqrt(10),gt=Math.sqrt(2),mt=function(t,e,n){var a,r,i,c,o=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((a=e<t)&&(r=t,t=e,e=r),0===(c=yt(t,e,n))||!isFinite(c))return[];if(c>0)for(t=Math.ceil(t/c),e=Math.floor(e/c),i=new Array(r=Math.ceil(e-t+1));++o<r;)i[o]=(t+o)*c;else for(t=Math.floor(t*c),e=Math.ceil(e*c),i=new Array(r=Math.ceil(t-e+1));++o<r;)i[o]=(t-o)/c;return a&&i.reverse(),i};function yt(t,e,n){var a=(e-t)/Math.max(0,n),r=Math.floor(Math.log(a)/Math.LN10),i=a/Math.pow(10,r);return r>=0?(i>=bt?10:i>=pt?5:i>=gt?2:1)*Math.pow(10,r):-Math.pow(10,-r)/(i>=bt?10:i>=pt?5:i>=gt?2:1)}var vt=function(t,e){var n,a,r=t.length,i=-1;if(null==e){for(;++i<r;)if(null!=(n=t[i])&&n>=n)for(a=n;++i<r;)null!=(n=t[i])&&n>a&&(a=n)}else for(;++i<r;)if(null!=(n=e(t[i],i,t))&&n>=n)for(a=n;++i<r;)null!=(n=e(t[i],i,t))&&n>a&&(a=n);return a},wt=function(t,e){var n,a,r=t.length,i=-1;if(null==e){for(;++i<r;)if(null!=(n=t[i])&&n>=n)for(a=n;++i<r;)null!=(n=t[i])&&a>n&&(a=n)}else for(;++i<r;)if(null!=(n=e(t[i],i,t))&&n>=n)for(a=n;++i<r;)null!=(n=e(t[i],i,t))&&a>n&&(a=n);return a},xt=Array.prototype.slice,_t=function(t){return t},Mt=1,St=2,kt=3,At=4,Tt=1e-6;function Ct(t){return"translate("+(t+.5)+",0)"}function Nt(t){return"translate(0,"+(t+.5)+")"}function $t(){return!this.__axis}function Dt(t,e){var n=[],a=null,r=null,i=6,c=6,o=3,f=t===Mt||t===At?-1:1,l=t===At||t===St?"x":"y",s=t===Mt||t===kt?Ct:Nt;function u(u){var d=null==a?e.ticks?e.ticks.apply(e,n):e.domain():a,h=null==r?e.tickFormat?e.tickFormat.apply(e,n):_t:r,b=Math.max(i,0)+o,p=e.range(),g=+p[0]+.5,m=+p[p.length-1]+.5,y=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),v=u.selection?u.selection():u,w=v.selectAll(".domain").data([null]),x=v.selectAll(".tick").data(d,e).order(),_=x.exit(),M=x.enter().append("g").attr("class","tick"),S=x.select("line"),k=x.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(M),S=S.merge(M.append("line").attr("stroke","currentColor").attr(l+"2",f*i)),k=k.merge(M.append("text").attr("fill","currentColor").attr(l,f*b).attr("dy",t===Mt?"0em":t===kt?"0.71em":"0.32em")),u!==v&&(w=w.transition(u),x=x.transition(u),S=S.transition(u),k=k.transition(u),_=_.transition(u).attr("opacity",Tt).attr("transform",function(t){return isFinite(t=y(t))?s(t):this.getAttribute("transform")}),M.attr("opacity",Tt).attr("transform",function(t){var e=this.parentNode.__axis;return s(e&&isFinite(e=e(t))?e:y(t))})),_.remove(),w.attr("d",t===At||t==St?c?"M"+f*c+","+g+"H0.5V"+m+"H"+f*c:"M0.5,"+g+"V"+m:c?"M"+g+","+f*c+"V0.5H"+m+"V"+f*c:"M"+g+",0.5H"+m),x.attr("opacity",1).attr("transform",function(t){return s(y(t))}),S.attr(l+"2",f*i),k.attr(l,f*b).text(h),v.filter($t).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===St?"start":t===At?"end":"middle"),v.each(function(){this.__axis=y})}return u.scale=function(t){return arguments.length?(e=t,u):e},u.ticks=function(){return n=xt.call(arguments),u},u.tickArguments=function(t){return arguments.length?(n=null==t?[]:xt.call(t),u):n.slice()},u.tickValues=function(t){return arguments.length?(a=null==t?null:xt.call(t),u):a&&a.slice()},u.tickFormat=function(t){return arguments.length?(r=t,u):r},u.tickSize=function(t){return arguments.length?(i=c=+t,u):i},u.tickSizeInner=function(t){return arguments.length?(i=+t,u):i},u.tickSizeOuter=function(t){return arguments.length?(c=+t,u):c},u.tickPadding=function(t){return arguments.length?(o=+t,u):o},u}function qt(t){return Dt(Mt,t)}function Et(t){return Dt(kt,t)}function Lt(){}function Pt(t,e){var n=new Lt;if(t instanceof Lt)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var a,r=-1,i=t.length;if(null==e)for(;++r<i;)n.set(r,t[r]);else for(;++r<i;)n.set(e(a=t[r],r,t),a)}else if(t)for(var c in t)n.set(c,t[c]);return n}Lt.prototype=Pt.prototype={constructor:Lt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var Ut=function(){var t,e,n,a=[],r=[];function i(n,r,c,o){if(r>=a.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var f,l,s,u=-1,d=n.length,h=a[r++],b=Pt(),p=c();++u<d;)(s=b.get(f=h(l=n[u])+""))?s.push(l):b.set(f,[l]);return b.each(function(t,e){o(p,e,i(t,r,c,o))}),p}return n={object:function(t){return i(t,0,It,Ft)},map:function(t){return i(t,0,Yt,zt)},entries:function(t){return function t(n,i){if(++i>a.length)return n;var c,o=r[i-1];return null!=e&&i>=a.length?c=n.entries():(c=[],n.each(function(e,n){c.push({key:n,values:t(e,i)})})),null!=o?c.sort(function(t,e){return o(t.key,e.key)}):c}(i(t,0,Yt,zt),0)},key:function(t){return a.push(t),n},sortKeys:function(t){return r[a.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}};function It(){return{}}function Ft(t,e,n){t[e]=n}function Yt(){return Pt()}function zt(t,e,n){t.set(e,n)}var jt=Array.prototype,Ot=jt.map,Vt=jt.slice,Bt={name:"implicit"};function Xt(){var t,e,n=function t(e){var n=Pt(),a=[],r=Bt;function i(t){var i=t+"",c=n.get(i);if(!c){if(r!==Bt)return r;n.set(i,c=a.push(t))}return e[(c-1)%e.length]}return e=null==e?[]:Vt.call(e),i.domain=function(t){if(!arguments.length)return a.slice();a=[],n=Pt();for(var e,r,c=-1,o=t.length;++c<o;)n.has(r=(e=t[c])+"")||n.set(r,a.push(e));return i},i.range=function(t){return arguments.length?(e=Vt.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return t().domain(a).range(e).unknown(r)},i}().unknown(void 0),a=n.domain,r=n.range,i=[0,1],c=!1,o=0,f=0,l=.5;function s(){var n=a().length,s=i[1]<i[0],u=i[s-0],d=i[1-s];t=(d-u)/Math.max(1,n-o+2*f),c&&(t=Math.floor(t)),u+=(d-u-t*(n-o))*l,e=t*(1-o),c&&(u=Math.round(u),e=Math.round(e));var h=ht(n).map(function(e){return u+t*e});return r(s?h.reverse():h)}return delete n.unknown,n.domain=function(t){return arguments.length?(a(t),s()):a()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],s()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],c=!0,s()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(c=!!t,s()):c},n.padding=function(t){return arguments.length?(o=f=Math.max(0,Math.min(1,t)),s()):o},n.paddingInner=function(t){return arguments.length?(o=Math.max(0,Math.min(1,t)),s()):o},n.paddingOuter=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),s()):f},n.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),s()):l},n.copy=function(){return Xt().domain(a()).range(i).round(c).paddingInner(o).paddingOuter(f).align(l)},s()}var Ht=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function Gt(t,e){var n=Object.create(t.prototype);for(var a in e)n[a]=e[a];return n}function Wt(){}var Rt="\\s*([+-]?\\d+)\\s*",Zt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Qt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Jt=/^#([0-9a-f]{3})$/,Kt=/^#([0-9a-f]{6})$/,te=new RegExp("^rgb\\("+[Rt,Rt,Rt]+"\\)$"),ee=new RegExp("^rgb\\("+[Qt,Qt,Qt]+"\\)$"),ne=new RegExp("^rgba\\("+[Rt,Rt,Rt,Zt]+"\\)$"),ae=new RegExp("^rgba\\("+[Qt,Qt,Qt,Zt]+"\\)$"),re=new RegExp("^hsl\\("+[Zt,Qt,Qt]+"\\)$"),ie=new RegExp("^hsla\\("+[Zt,Qt,Qt,Zt]+"\\)$"),ce={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function oe(t){var e;return t=(t+"").trim().toLowerCase(),(e=Jt.exec(t))?new de((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=Kt.exec(t))?fe(parseInt(e[1],16)):(e=te.exec(t))?new de(e[1],e[2],e[3],1):(e=ee.exec(t))?new de(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=ne.exec(t))?le(e[1],e[2],e[3],e[4]):(e=ae.exec(t))?le(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=re.exec(t))?be(e[1],e[2]/100,e[3]/100,1):(e=ie.exec(t))?be(e[1],e[2]/100,e[3]/100,e[4]):ce.hasOwnProperty(t)?fe(ce[t]):"transparent"===t?new de(NaN,NaN,NaN,0):null}function fe(t){return new de(t>>16&255,t>>8&255,255&t,1)}function le(t,e,n,a){return a<=0&&(t=e=n=NaN),new de(t,e,n,a)}function se(t){return t instanceof Wt||(t=oe(t)),t?new de((t=t.rgb()).r,t.g,t.b,t.opacity):new de}function ue(t,e,n,a){return 1===arguments.length?se(t):new de(t,e,n,null==a?1:a)}function de(t,e,n,a){this.r=+t,this.g=+e,this.b=+n,this.opacity=+a}function he(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function be(t,e,n,a){return a<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new pe(t,e,n,a)}function pe(t,e,n,a){this.h=+t,this.s=+e,this.l=+n,this.opacity=+a}function ge(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Ht(Wt,oe,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),Ht(de,ue,Gt(Wt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new de(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new de(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+he(this.r)+he(this.g)+he(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Ht(pe,function(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof pe)return new pe(t.h,t.s,t.l,t.opacity);if(t instanceof Wt||(t=oe(t)),!t)return new pe;if(t instanceof pe)return t;var e=(t=t.rgb()).r/255,n=t.g/255,a=t.b/255,r=Math.min(e,n,a),i=Math.max(e,n,a),c=NaN,o=i-r,f=(i+r)/2;return o?(c=e===i?(n-a)/o+6*(n<a):n===i?(a-e)/o+2:(e-n)/o+4,o/=f<.5?i+r:2-i-r,c*=60):o=f>0&&f<1?0:c,new pe(c,o,f,t.opacity)}(t):new pe(t,e,n,null==a?1:a)},Gt(Wt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new pe(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new pe(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,a=n+(n<.5?n:1-n)*e,r=2*n-a;return new de(ge(t>=240?t-240:t+120,r,a),ge(t,r,a),ge(t<120?t+240:t-120,r,a),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var me=Math.PI/180,ye=180/Math.PI,ve=.96422,we=1,xe=.82521,_e=4/29,Me=6/29,Se=3*Me*Me,ke=Me*Me*Me;function Ae(t){if(t instanceof Te)return new Te(t.l,t.a,t.b,t.opacity);if(t instanceof qe){if(isNaN(t.h))return new Te(t.l,0,0,t.opacity);var e=t.h*me;return new Te(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof de||(t=se(t));var n,a,r=De(t.r),i=De(t.g),c=De(t.b),o=Ce((.2225045*r+.7168786*i+.0606169*c)/we);return r===i&&i===c?n=a=o:(n=Ce((.4360747*r+.3850649*i+.1430804*c)/ve),a=Ce((.0139322*r+.0971045*i+.7141733*c)/xe)),new Te(116*o-16,500*(n-o),200*(o-a),t.opacity)}function Te(t,e,n,a){this.l=+t,this.a=+e,this.b=+n,this.opacity=+a}function Ce(t){return t>ke?Math.pow(t,1/3):t/Se+_e}function Ne(t){return t>Me?t*t*t:Se*(t-_e)}function $e(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function De(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function qe(t,e,n,a){this.h=+t,this.c=+e,this.l=+n,this.opacity=+a}Ht(Te,function(t,e,n,a){return 1===arguments.length?Ae(t):new Te(t,e,n,null==a?1:a)},Gt(Wt,{brighter:function(t){return new Te(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Te(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new de($e(3.1338561*(e=ve*Ne(e))-1.6168667*(t=we*Ne(t))-.4906146*(n=xe*Ne(n))),$e(-.9787684*e+1.9161415*t+.033454*n),$e(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Ht(qe,function(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof qe)return new qe(t.h,t.c,t.l,t.opacity);if(t instanceof Te||(t=Ae(t)),0===t.a&&0===t.b)return new qe(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*ye;return new qe(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new qe(t,e,n,null==a?1:a)},Gt(Wt,{brighter:function(t){return new qe(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new qe(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Ae(this).rgb()}}));var Ee=-.14861,Le=1.78277,Pe=-.29227,Ue=-.90649,Ie=1.97294,Fe=Ie*Ue,Ye=Ie*Le,ze=Le*Pe-Ue*Ee;function je(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof Oe)return new Oe(t.h,t.s,t.l,t.opacity);t instanceof de||(t=se(t));var e=t.r/255,n=t.g/255,a=t.b/255,r=(ze*a+Fe*e-Ye*n)/(ze+Fe-Ye),i=a-r,c=(Ie*(n-r)-Pe*i)/Ue,o=Math.sqrt(c*c+i*i)/(Ie*r*(1-r)),f=o?Math.atan2(c,i)*ye-120:NaN;return new Oe(f<0?f+360:f,o,r,t.opacity)}(t):new Oe(t,e,n,null==a?1:a)}function Oe(t,e,n,a){this.h=+t,this.s=+e,this.l=+n,this.opacity=+a}function Ve(t,e,n,a,r){var i=t*t,c=i*t;return((1-3*t+3*i-c)*e+(4-6*i+3*c)*n+(1+3*t+3*i-3*c)*a+c*r)/6}Ht(Oe,je,Gt(Wt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Oe(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Oe(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*me,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),a=Math.cos(t),r=Math.sin(t);return new de(255*(e+n*(Ee*a+Le*r)),255*(e+n*(Pe*a+Ue*r)),255*(e+n*(Ie*a)),this.opacity)}}));var Be=function(t){return function(){return t}};function Xe(t,e){return function(n){return t+n*e}}function He(t){return 1==(t=+t)?Ge:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(a){return Math.pow(t+a*e,n)}}(e,n,t):Be(isNaN(e)?n:e)}}function Ge(t,e){var n=e-t;return n?Xe(t,n):Be(isNaN(t)?e:t)}var We=function t(e){var n=He(e);function a(t,e){var a=n((t=ue(t)).r,(e=ue(e)).r),r=n(t.g,e.g),i=n(t.b,e.b),c=Ge(t.opacity,e.opacity);return function(e){return t.r=a(e),t.g=r(e),t.b=i(e),t.opacity=c(e),t+""}}return a.gamma=t,a}(1);function Re(t){return function(e){var n,a,r=e.length,i=new Array(r),c=new Array(r),o=new Array(r);for(n=0;n<r;++n)a=ue(e[n]),i[n]=a.r||0,c[n]=a.g||0,o[n]=a.b||0;return i=t(i),c=t(c),o=t(o),a.opacity=1,function(t){return a.r=i(t),a.g=c(t),a.b=o(t),a+""}}}var Ze=Re(function(t){var e=t.length-1;return function(n){var a=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),r=t[a],i=t[a+1],c=a>0?t[a-1]:2*r-i,o=a<e-1?t[a+2]:2*i-r;return Ve((n-a/e)*e,c,r,i,o)}}),Qe=(Re(function(t){var e=t.length;return function(n){var a=Math.floor(((n%=1)<0?++n:n)*e),r=t[(a+e-1)%e],i=t[a%e],c=t[(a+1)%e],o=t[(a+2)%e];return Ve((n-a/e)*e,r,i,c,o)}}),function(t,e){return e-=t=+t,function(n){return t+e*n}}),Je=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ke=new RegExp(Je.source,"g");var tn,en,nn,an,rn=function(t,e){var n,a,r,i=Je.lastIndex=Ke.lastIndex=0,c=-1,o=[],f=[];for(t+="",e+="";(n=Je.exec(t))&&(a=Ke.exec(e));)(r=a.index)>i&&(r=e.slice(i,r),o[c]?o[c]+=r:o[++c]=r),(n=n[0])===(a=a[0])?o[c]?o[c]+=a:o[++c]=a:(o[++c]=null,f.push({i:c,x:Qe(n,a)})),i=Ke.lastIndex;return i<e.length&&(r=e.slice(i),o[c]?o[c]+=r:o[++c]=r),o.length<2?f[0]?function(t){return function(e){return t(e)+""}}(f[0].x):function(t){return function(){return t}}(e):(e=f.length,function(t){for(var n,a=0;a<e;++a)o[(n=f[a]).i]=n.x(t);return o.join("")})},cn=function(t,e){var n,a=typeof e;return null==e||"boolean"===a?Be(e):("number"===a?Qe:"string"===a?(n=oe(e))?(e=n,We):rn:e instanceof oe?We:e instanceof Date?function(t,e){var n=new Date;return e-=t=+t,function(a){return n.setTime(t+e*a),n}}:Array.isArray(e)?function(t,e){var n,a=e?e.length:0,r=t?Math.min(a,t.length):0,i=new Array(r),c=new Array(a);for(n=0;n<r;++n)i[n]=cn(t[n],e[n]);for(;n<a;++n)c[n]=e[n];return function(t){for(n=0;n<r;++n)c[n]=i[n](t);return c}}:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?function(t,e){var n,a={},r={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?a[n]=cn(t[n],e[n]):r[n]=e[n];return function(t){for(n in a)r[n]=a[n](t);return r}}:Qe)(t,e)},on=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},fn=180/Math.PI,ln={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},sn=function(t,e,n,a,r,i){var c,o,f;return(c=Math.sqrt(t*t+e*e))&&(t/=c,e/=c),(f=t*n+e*a)&&(n-=t*f,a-=e*f),(o=Math.sqrt(n*n+a*a))&&(n/=o,a/=o,f/=o),t*a<e*n&&(t=-t,e=-e,f=-f,c=-c),{translateX:r,translateY:i,rotate:Math.atan2(e,t)*fn,skewX:Math.atan(f)*fn,scaleX:c,scaleY:o}};function un(t,e,n,a){function r(t){return t.length?t.pop()+" ":""}return function(i,c){var o=[],f=[];return i=t(i),c=t(c),function(t,a,r,i,c,o){if(t!==r||a!==i){var f=c.push("translate(",null,e,null,n);o.push({i:f-4,x:Qe(t,r)},{i:f-2,x:Qe(a,i)})}else(r||i)&&c.push("translate("+r+e+i+n)}(i.translateX,i.translateY,c.translateX,c.translateY,o,f),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(r(n)+"rotate(",null,a)-2,x:Qe(t,e)})):e&&n.push(r(n)+"rotate("+e+a)}(i.rotate,c.rotate,o,f),function(t,e,n,i){t!==e?i.push({i:n.push(r(n)+"skewX(",null,a)-2,x:Qe(t,e)}):e&&n.push(r(n)+"skewX("+e+a)}(i.skewX,c.skewX,o,f),function(t,e,n,a,i,c){if(t!==n||e!==a){var o=i.push(r(i)+"scale(",null,",",null,")");c.push({i:o-4,x:Qe(t,n)},{i:o-2,x:Qe(e,a)})}else 1===n&&1===a||i.push(r(i)+"scale("+n+","+a+")")}(i.scaleX,i.scaleY,c.scaleX,c.scaleY,o,f),i=c=null,function(t){for(var e,n=-1,a=f.length;++n<a;)o[(e=f[n]).i]=e.x(t);return o.join("")}}}var dn=un(function(t){return"none"===t?ln:(tn||(tn=document.createElement("DIV"),en=document.documentElement,nn=document.defaultView),tn.style.transform=t,t=nn.getComputedStyle(en.appendChild(tn),null).getPropertyValue("transform"),en.removeChild(tn),t=t.slice(7,-1).split(","),sn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),hn=un(function(t){return null==t?ln:(an||(an=document.createElementNS("http://www.w3.org/2000/svg","g")),an.setAttribute("transform",t),(t=an.transform.baseVal.consolidate())?(t=t.matrix,sn(t.a,t.b,t.c,t.d,t.e,t.f)):ln)},", ",")",")");function bn(t){return function e(n){function a(e,a){var r=t((e=je(e)).h,(a=je(a)).h),i=Ge(e.s,a.s),c=Ge(e.l,a.l),o=Ge(e.opacity,a.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=c(Math.pow(t,n)),e.opacity=o(t),e+""}}return n=+n,a.gamma=e,a}(1)}bn(function(t,e){var n=e-t;return n?Xe(t,n>180||n<-180?n-360*Math.round(n/360):n):Be(isNaN(t)?e:t)});var pn=bn(Ge),gn=function(t){return function(){return t}},mn=function(t){return+t},yn=[0,1];function vn(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:gn(e)}function wn(t,e,n,a){var r=t[0],i=t[1],c=e[0],o=e[1];return i<r?(r=n(i,r),c=a(o,c)):(r=n(r,i),c=a(c,o)),function(t){return c(r(t))}}function xn(t,e,n,a){var r=Math.min(t.length,e.length)-1,i=new Array(r),c=new Array(r),o=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++o<r;)i[o]=n(t[o],t[o+1]),c[o]=a(e[o],e[o+1]);return function(e){var n=dt(t,e,1,r)-1;return c[n](i[n](e))}}function _n(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function Mn(t,e){var n,a,r,i=yn,c=yn,o=cn,f=!1;function l(){return n=Math.min(i.length,c.length)>2?xn:wn,a=r=null,s}function s(e){return(a||(a=n(i,c,f?function(t){return function(e,n){var a=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:a(t)}}}(t):t,o)))(+e)}return s.invert=function(t){return(r||(r=n(c,i,vn,f?function(t){return function(e,n){var a=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:a(t)}}}(e):e)))(+t)},s.domain=function(t){return arguments.length?(i=Ot.call(t,mn),l()):i.slice()},s.range=function(t){return arguments.length?(c=Vt.call(t),l()):c.slice()},s.rangeRound=function(t){return c=Vt.call(t),o=on,l()},s.clamp=function(t){return arguments.length?(f=!!t,l()):f},s.interpolate=function(t){return arguments.length?(o=t,l()):o},l()}var Sn=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,a=t.slice(0,n);return[a.length>1?a[0]+a.slice(2):a,+t.slice(n+1)]},kn=function(t){return(t=Sn(Math.abs(t)))?t[1]:NaN},An=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Tn(t){return new Cn(t)}function Cn(t){if(!(e=An.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}Tn.prototype=Cn.prototype,Cn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Nn,$n,Dn,qn,En=function(t){t:for(var e,n=t.length,a=1,r=-1;a<n;++a)switch(t[a]){case".":r=e=a;break;case"0":0===r&&(r=a),e=a;break;default:if(r>0){if(!+t[a])break t;r=0}}return r>0?t.slice(0,r)+t.slice(e+1):t},Ln=function(t,e){var n=Sn(t,e);if(!n)return t+"";var a=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+a:a.length>r+1?a.slice(0,r+1)+"."+a.slice(r+1):a+new Array(r-a.length+2).join("0")},Pn={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Ln(100*t,e)},r:Ln,s:function(t,e){var n=Sn(t,e);if(!n)return t+"";var a=n[0],r=n[1],i=r-(Nn=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,c=a.length;return i===c?a:i>c?a+new Array(i-c+1).join("0"):i>0?a.slice(0,i)+"."+a.slice(i):"0."+new Array(1-i).join("0")+Sn(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Un=function(t){return t},In=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];$n=function(t){var e,n,a=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,a){for(var r=t.length,i=[],c=0,o=e[0],f=0;r>0&&o>0&&(f+o+1>a&&(o=Math.max(1,a-f)),i.push(t.substring(r-=o,r+o)),!((f+=o+1)>a));)o=e[c=(c+1)%e.length];return i.reverse().join(n)}):Un,r=t.currency,i=t.decimal,c=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):Un,o=t.percent||"%";function f(t){var e=(t=Tn(t)).fill,n=t.align,f=t.sign,l=t.symbol,s=t.zero,u=t.width,d=t.comma,h=t.precision,b=t.trim,p=t.type;"n"===p?(d=!0,p="g"):Pn[p]||(null==h&&(h=12),b=!0,p="g"),(s||"0"===e&&"="===n)&&(s=!0,e="0",n="=");var g="$"===l?r[0]:"#"===l&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",m="$"===l?r[1]:/[%p]/.test(p)?o:"",y=Pn[p],v=/[defgprs%]/.test(p);function w(t){var r,o,l,w=g,x=m;if("c"===p)x=y(t)+x,t="";else{var _=(t=+t)<0;if(t=y(Math.abs(t),h),b&&(t=En(t)),_&&0==+t&&(_=!1),w=(_?"("===f?f:"-":"-"===f||"("===f?"":f)+w,x=("s"===p?In[8+Nn/3]:"")+x+(_&&"("===f?")":""),v)for(r=-1,o=t.length;++r<o;)if(48>(l=t.charCodeAt(r))||l>57){x=(46===l?i+t.slice(r+1):t.slice(r))+x,t=t.slice(0,r);break}}d&&!s&&(t=a(t,1/0));var M=w.length+t.length+x.length,S=M<u?new Array(u-M+1).join(e):"";switch(d&&s&&(t=a(S+t,S.length?u-x.length:1/0),S=""),n){case"<":t=w+t+x+S;break;case"=":t=w+S+t+x;break;case"^":t=S.slice(0,M=S.length>>1)+w+t+x+S.slice(M);break;default:t=S+w+t+x}return c(t)}return h=null==h?6:/[gprs]/.test(p)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),w.toString=function(){return t+""},w}return{format:f,formatPrefix:function(t,e){var n=f(((t=Tn(t)).type="f",t)),a=3*Math.max(-8,Math.min(8,Math.floor(kn(e)/3))),r=Math.pow(10,-a),i=In[8+a/3];return function(t){return n(r*t)+i}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),Dn=$n.format,qn=$n.formatPrefix;var Fn=function(t,e,n){var a,r=t[0],i=t[t.length-1],c=function(t,e,n){var a=Math.abs(e-t)/Math.max(0,n),r=Math.pow(10,Math.floor(Math.log(a)/Math.LN10)),i=a/r;return i>=bt?r*=10:i>=pt?r*=5:i>=gt&&(r*=2),e<t?-r:r}(r,i,null==e?10:e);switch((n=Tn(null==n?",f":n)).type){case"s":var o=Math.max(Math.abs(r),Math.abs(i));return null!=n.precision||isNaN(a=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(kn(e)/3)))-kn(Math.abs(t)))}(c,o))||(n.precision=a),qn(n,o);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(a=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,kn(e)-kn(t))+1}(c,Math.max(Math.abs(r),Math.abs(i))))||(n.precision=a-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(a=function(t){return Math.max(0,-kn(Math.abs(t)))}(c))||(n.precision=a-2*("%"===n.type))}return Dn(n)};function Yn(t){var e=t.domain;return t.ticks=function(t){var n=e();return mt(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return Fn(e(),t,n)},t.nice=function(n){null==n&&(n=10);var a,r=e(),i=0,c=r.length-1,o=r[i],f=r[c];return f<o&&(a=o,o=f,f=a,a=i,i=c,c=a),(a=yt(o,f,n))>0?a=yt(o=Math.floor(o/a)*a,f=Math.ceil(f/a)*a,n):a<0&&(a=yt(o=Math.ceil(o*a)/a,f=Math.floor(f*a)/a,n)),a>0?(r[i]=Math.floor(o/a)*a,r[c]=Math.ceil(f/a)*a,e(r)):a<0&&(r[i]=Math.ceil(o*a)/a,r[c]=Math.floor(f*a)/a,e(r)),t},t}function zn(t,e){return t<0?-Math.pow(-t,e):Math.pow(t,e)}function jn(){return function t(){var e=1,n=Mn(function(t,n){return(n=zn(n,e)-(t=zn(t,e)))?function(a){return(zn(a,e)-t)/n}:gn(n)},function(t,n){return n=zn(n,e)-(t=zn(t,e)),function(a){return zn(t+n*a,1/e)}}),a=n.domain;return n.exponent=function(t){return arguments.length?(e=+t,a(a())):e},n.copy=function(){return _n(n,t().exponent(e))},Yn(n)}().exponent(.5)}var On=new Date,Vn=new Date;function Bn(t,e,n,a){function r(e){return t(e=new Date(+e)),e}return r.floor=r,r.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},r.round=function(t){var e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},r.range=function(n,a,i){var c,o=[];if(n=r.ceil(n),i=null==i?1:Math.floor(i),!(n<a&&i>0))return o;do{o.push(c=new Date(+n)),e(n,i),t(n)}while(c<n&&n<a);return o},r.filter=function(n){return Bn(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,a){if(t>=t)if(a<0)for(;++a<=0;)for(;e(t,-1),!n(t););else for(;--a>=0;)for(;e(t,1),!n(t););})},n&&(r.count=function(e,a){return On.setTime(+e),Vn.setTime(+a),t(On),t(Vn),Math.floor(n(On,Vn))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(a?function(e){return a(e)%t==0}:function(e){return r.count(0,e)%t==0}):r:null}),r}var Xn=Bn(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});Xn.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Bn(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):Xn:null};var Hn=6e4,Gn=6048e5,Wn=(Bn(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),Bn(function(t){t.setTime(Math.floor(t/Hn)*Hn)},function(t,e){t.setTime(+t+e*Hn)},function(t,e){return(e-t)/Hn},function(t){return t.getMinutes()}),Bn(function(t){var e=t.getTimezoneOffset()*Hn%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),Bn(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Hn)/864e5},function(t){return t.getDate()-1}));function Rn(t){return Bn(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Hn)/Gn})}var Zn=Rn(0),Qn=Rn(1),Jn=(Rn(2),Rn(3),Rn(4)),Kn=(Rn(5),Rn(6),Bn(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Bn(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Kn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Bn(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};Bn(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*Hn)},function(t,e){return(e-t)/Hn},function(t){return t.getUTCMinutes()}),Bn(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()});var ta=Bn(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1});function ea(t){return Bn(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/Gn})}var na=ea(0),aa=ea(1),ra=(ea(2),ea(3),ea(4)),ia=(ea(5),ea(6),Bn(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Bn(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function ca(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function oa(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function fa(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}ia.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Bn(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var la,sa,ua,da={"-":"",_:" ",0:"0"},ha=/^\s*\d+/,ba=/^%/,pa=/[\\^$*+?|[\]().{}]/g;function ga(t,e,n){var a=t<0?"-":"",r=(a?-t:t)+"",i=r.length;return a+(i<n?new Array(n-i+1).join(e)+r:r)}function ma(t){return t.replace(pa,"\\$&")}function ya(t){return new RegExp("^(?:"+t.map(ma).join("|")+")","i")}function va(t){for(var e={},n=-1,a=t.length;++n<a;)e[t[n].toLowerCase()]=n;return e}function wa(t,e,n){var a=ha.exec(e.slice(n,n+1));return a?(t.w=+a[0],n+a[0].length):-1}function xa(t,e,n){var a=ha.exec(e.slice(n,n+1));return a?(t.u=+a[0],n+a[0].length):-1}function _a(t,e,n){var a=ha.exec(e.slice(n,n+2));return a?(t.U=+a[0],n+a[0].length):-1}function Ma(t,e,n){var a=ha.exec(e.slice(n,n+2));return a?(t.V=+a[0],n+a[0].length):-1}function Sa(t,e,n){var a=ha.exec(e.slice(n,n+2));return a?(t.W=+a[0],n+a[0].length):-1}function ka(t,e,n){var a=ha.exec(e.slice(n,n+4));return a?(t.y=+a[0],n+a[0].length):-1}function Aa(t,e,n){var a=ha.exec(e.slice(n,n+2));return a?(t.y=+a[0]+(+a[0]>68?1900:2e3),n+a[0].length):-1}function Ta(t,e,n){var a=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return a?(t.Z=a[1]?0:-(a[2]+(a[3]||"00")),n+a[0].length):-1}function Ca(t,e,n){var a=ha.exec(e.slice(n,n+2));return a?(t.m=a[0]-1,n+a[0].length):-1}function Na(t,e,n){var a=ha.exec(e.slice(n,n+2));return a?(t.d=+a[0],n+a[0].length):-1}function $a(t,e,n){var a=ha.exec(e.slice(n,n+3));return a?(t.m=0,t.d=+a[0],n+a[0].length):-1}function Da(t,e,n){var a=ha.exec(e.slice(n,n+2));return a?(t.H=+a[0],n+a[0].length):-1}function qa(t,e,n){var a=ha.exec(e.slice(n,n+2));return a?(t.M=+a[0],n+a[0].length):-1}function Ea(t,e,n){var a=ha.exec(e.slice(n,n+2));return a?(t.S=+a[0],n+a[0].length):-1}function La(t,e,n){var a=ha.exec(e.slice(n,n+3));return a?(t.L=+a[0],n+a[0].length):-1}function Pa(t,e,n){var a=ha.exec(e.slice(n,n+6));return a?(t.L=Math.floor(a[0]/1e3),n+a[0].length):-1}function Ua(t,e,n){var a=ba.exec(e.slice(n,n+1));return a?n+a[0].length:-1}function Ia(t,e,n){var a=ha.exec(e.slice(n));return a?(t.Q=+a[0],n+a[0].length):-1}function Fa(t,e,n){var a=ha.exec(e.slice(n));return a?(t.Q=1e3*+a[0],n+a[0].length):-1}function Ya(t,e){return ga(t.getDate(),e,2)}function za(t,e){return ga(t.getHours(),e,2)}function ja(t,e){return ga(t.getHours()%12||12,e,2)}function Oa(t,e){return ga(1+Wn.count(Kn(t),t),e,3)}function Va(t,e){return ga(t.getMilliseconds(),e,3)}function Ba(t,e){return Va(t,e)+"000"}function Xa(t,e){return ga(t.getMonth()+1,e,2)}function Ha(t,e){return ga(t.getMinutes(),e,2)}function Ga(t,e){return ga(t.getSeconds(),e,2)}function Wa(t){var e=t.getDay();return 0===e?7:e}function Ra(t,e){return ga(Zn.count(Kn(t),t),e,2)}function Za(t,e){var n=t.getDay();return t=n>=4||0===n?Jn(t):Jn.ceil(t),ga(Jn.count(Kn(t),t)+(4===Kn(t).getDay()),e,2)}function Qa(t){return t.getDay()}function Ja(t,e){return ga(Qn.count(Kn(t),t),e,2)}function Ka(t,e){return ga(t.getFullYear()%100,e,2)}function tr(t,e){return ga(t.getFullYear()%1e4,e,4)}function er(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+ga(e/60|0,"0",2)+ga(e%60,"0",2)}function nr(t,e){return ga(t.getUTCDate(),e,2)}function ar(t,e){return ga(t.getUTCHours(),e,2)}function rr(t,e){return ga(t.getUTCHours()%12||12,e,2)}function ir(t,e){return ga(1+ta.count(ia(t),t),e,3)}function cr(t,e){return ga(t.getUTCMilliseconds(),e,3)}function or(t,e){return cr(t,e)+"000"}function fr(t,e){return ga(t.getUTCMonth()+1,e,2)}function lr(t,e){return ga(t.getUTCMinutes(),e,2)}function sr(t,e){return ga(t.getUTCSeconds(),e,2)}function ur(t){var e=t.getUTCDay();return 0===e?7:e}function dr(t,e){return ga(na.count(ia(t),t),e,2)}function hr(t,e){var n=t.getUTCDay();return t=n>=4||0===n?ra(t):ra.ceil(t),ga(ra.count(ia(t),t)+(4===ia(t).getUTCDay()),e,2)}function br(t){return t.getUTCDay()}function pr(t,e){return ga(aa.count(ia(t),t),e,2)}function gr(t,e){return ga(t.getUTCFullYear()%100,e,2)}function mr(t,e){return ga(t.getUTCFullYear()%1e4,e,4)}function yr(){return"+0000"}function vr(){return"%"}function wr(t){return+t}function xr(t){return Math.floor(+t/1e3)}!function(t){la=function(t){var e=t.dateTime,n=t.date,a=t.time,r=t.periods,i=t.days,c=t.shortDays,o=t.months,f=t.shortMonths,l=ya(r),s=va(r),u=ya(i),d=va(i),h=ya(c),b=va(c),p=ya(o),g=va(o),m=ya(f),y=va(f),v={a:function(t){return c[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return f[t.getMonth()]},B:function(t){return o[t.getMonth()]},c:null,d:Ya,e:Ya,f:Ba,H:za,I:ja,j:Oa,L:Va,m:Xa,M:Ha,p:function(t){return r[+(t.getHours()>=12)]},Q:wr,s:xr,S:Ga,u:Wa,U:Ra,V:Za,w:Qa,W:Ja,x:null,X:null,y:Ka,Y:tr,Z:er,"%":vr},w={a:function(t){return c[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return f[t.getUTCMonth()]},B:function(t){return o[t.getUTCMonth()]},c:null,d:nr,e:nr,f:or,H:ar,I:rr,j:ir,L:cr,m:fr,M:lr,p:function(t){return r[+(t.getUTCHours()>=12)]},Q:wr,s:xr,S:sr,u:ur,U:dr,V:hr,w:br,W:pr,x:null,X:null,y:gr,Y:mr,Z:yr,"%":vr},x={a:function(t,e,n){var a=h.exec(e.slice(n));return a?(t.w=b[a[0].toLowerCase()],n+a[0].length):-1},A:function(t,e,n){var a=u.exec(e.slice(n));return a?(t.w=d[a[0].toLowerCase()],n+a[0].length):-1},b:function(t,e,n){var a=m.exec(e.slice(n));return a?(t.m=y[a[0].toLowerCase()],n+a[0].length):-1},B:function(t,e,n){var a=p.exec(e.slice(n));return a?(t.m=g[a[0].toLowerCase()],n+a[0].length):-1},c:function(t,n,a){return S(t,e,n,a)},d:Na,e:Na,f:Pa,H:Da,I:Da,j:$a,L:La,m:Ca,M:qa,p:function(t,e,n){var a=l.exec(e.slice(n));return a?(t.p=s[a[0].toLowerCase()],n+a[0].length):-1},Q:Ia,s:Fa,S:Ea,u:xa,U:_a,V:Ma,w:wa,W:Sa,x:function(t,e,a){return S(t,n,e,a)},X:function(t,e,n){return S(t,a,e,n)},y:Aa,Y:ka,Z:Ta,"%":Ua};function _(t,e){return function(n){var a,r,i,c=[],o=-1,f=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++o<l;)37===t.charCodeAt(o)&&(c.push(t.slice(f,o)),null!=(r=da[a=t.charAt(++o)])?a=t.charAt(++o):r="e"===a?" ":"0",(i=e[a])&&(a=i(n,r)),c.push(a),f=o+1);return c.push(t.slice(f,o)),c.join("")}}function M(t,e){return function(n){var a,r,i=fa(1900);if(S(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=(a=oa(fa(i.y))).getUTCDay())>4||0===r?aa.ceil(a):aa(a),a=ta.offset(a,7*(i.V-1)),i.y=a.getUTCFullYear(),i.m=a.getUTCMonth(),i.d=a.getUTCDate()+(i.w+6)%7):(a=(r=(a=e(fa(i.y))).getDay())>4||0===r?Qn.ceil(a):Qn(a),a=Wn.offset(a,7*(i.V-1)),i.y=a.getFullYear(),i.m=a.getMonth(),i.d=a.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),r="Z"in i?oa(fa(i.y)).getUTCDay():e(fa(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(r+5)%7:i.w+7*i.U-(r+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,oa(i)):e(i)}}function S(t,e,n,a){for(var r,i,c=0,o=e.length,f=n.length;c<o;){if(a>=f)return-1;if(37===(r=e.charCodeAt(c++))){if(r=e.charAt(c++),!(i=x[r in da?e.charAt(c++):r])||(a=i(t,n,a))<0)return-1}else if(r!=n.charCodeAt(a++))return-1}return a}return v.x=_(n,v),v.X=_(a,v),v.c=_(e,v),w.x=_(n,w),w.X=_(a,w),w.c=_(e,w),{format:function(t){var e=_(t+="",v);return e.toString=function(){return t},e},parse:function(t){var e=M(t+="",ca);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",w);return e.toString=function(){return t},e},utcParse:function(t){var e=M(t,oa);return e.toString=function(){return t},e}}}(t),sa=la.utcFormat,ua=la.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||sa("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||ua("%Y-%m-%dT%H:%M:%S.%LZ");var _r=Math.PI,Mr=2*_r,Sr=Mr-1e-6;function kr(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ar(){return new kr}kr.prototype=Ar.prototype={constructor:kr,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,a){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+a)},bezierCurveTo:function(t,e,n,a,r,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +a+","+(this._x1=+r)+","+(this._y1=+i)},arcTo:function(t,e,n,a,r){t=+t,e=+e,n=+n,a=+a,r=+r;var i=this._x1,c=this._y1,o=n-t,f=a-e,l=i-t,s=c-e,u=l*l+s*s;if(r<0)throw new Error("negative radius: "+r);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(u>1e-6)if(Math.abs(s*o-f*l)>1e-6&&r){var d=n-i,h=a-c,b=o*o+f*f,p=d*d+h*h,g=Math.sqrt(b),m=Math.sqrt(u),y=r*Math.tan((_r-Math.acos((b+u-p)/(2*g*m)))/2),v=y/m,w=y/g;Math.abs(v-1)>1e-6&&(this._+="L"+(t+v*l)+","+(e+v*s)),this._+="A"+r+","+r+",0,0,"+ +(s*d>l*h)+","+(this._x1=t+w*o)+","+(this._y1=e+w*f)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,a,r,i){t=+t,e=+e;var c=(n=+n)*Math.cos(a),o=n*Math.sin(a),f=t+c,l=e+o,s=1^i,u=i?a-r:r-a;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+f+","+l:(Math.abs(this._x1-f)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+f+","+l),n&&(u<0&&(u=u%Mr+Mr),u>Sr?this._+="A"+n+","+n+",0,1,"+s+","+(t-c)+","+(e-o)+"A"+n+","+n+",0,1,"+s+","+(this._x1=f)+","+(this._y1=l):u>1e-6&&(this._+="A"+n+","+n+",0,"+ +(u>=_r)+","+s+","+(this._x1=t+n*Math.cos(r))+","+(this._y1=e+n*Math.sin(r))))},rect:function(t,e,n,a){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +a+"h"+-n+"Z"},toString:function(){return this._}};var Tr=function(t){return function(){return t}},Cr=Math.PI,Nr=2*Cr,$r={draw:function(t,e){var n=Math.sqrt(e/Cr);t.moveTo(n,0),t.arc(0,0,n,0,Nr)}},Dr=Math.sqrt(1/3),qr=2*Dr,Er={draw:function(t,e){var n=Math.sqrt(e/qr),a=n*Dr;t.moveTo(0,-n),t.lineTo(a,0),t.lineTo(0,n),t.lineTo(-a,0),t.closePath()}},Lr={draw:function(t,e){var n=Math.sqrt(e),a=-n/2;t.rect(a,a,n,n)}},Pr=function(){var t=Tr($r),e=Tr(64),n=null;function a(){var a;if(n||(n=a=Ar()),t.apply(this,arguments).draw(n,+e.apply(this,arguments)),a)return n=null,a+""||null}return a.type=function(e){return arguments.length?(t="function"==typeof e?e:Tr(e),a):t},a.size=function(t){return arguments.length?(e="function"==typeof t?t:Tr(+t),a):e},a.context=function(t){return arguments.length?(n=null==t?null:t,a):n},a};function Ur(t){return t<0?-1:1}function Ir(t,e,n){var a=t._x1-t._x0,r=e-t._x1,i=(t._y1-t._y0)/(a||r<0&&-0),c=(n-t._y1)/(r||a<0&&-0),o=(i*r+c*a)/(a+r);return(Ur(i)+Ur(c))*Math.min(Math.abs(i),Math.abs(c),.5*Math.abs(o))||0}function Fr(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function Yr(t,e,n){var a=t._x0,r=t._y0,i=t._x1,c=t._y1,o=(i-a)/3;t._context.bezierCurveTo(a+o,r+o*e,i-o,c-o*n,i,c)}function zr(t){this._context=t}function jr(t){this._context=t}zr.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Yr(this,this._t0,Fr(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,Yr(this,Fr(this,n=Ir(this,t,e)),n);break;default:Yr(this,this._t0,n=Ir(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new jr(t)}.prototype=Object.create(zr.prototype)).point=function(t,e){zr.prototype.point.call(this,e,t)},jr.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,a,r,i){this._context.bezierCurveTo(e,t,a,n,i,r)}};var Or={value:function(){}};function Vr(){for(var t,e=0,n=arguments.length,a={};e<n;++e){if(!(t=arguments[e]+"")||t in a)throw new Error("illegal type: "+t);a[t]=[]}return new Br(a)}function Br(t){this._=t}function Xr(t,e){for(var n,a=0,r=t.length;a<r;++a)if((n=t[a]).name===e)return n.value}function Hr(t,e,n){for(var a=0,r=t.length;a<r;++a)if(t[a].name===e){t[a]=Or,t=t.slice(0,a).concat(t.slice(a+1));break}return null!=n&&t.push({name:e,value:n}),t}Br.prototype=Vr.prototype={constructor:Br,on:function(t,e){var n,a,r=this._,i=(a=r,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!a.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),c=-1,o=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++c<o;)if(n=(t=i[c]).type)r[n]=Hr(r[n],t.name,e);else if(null==e)for(n in r)r[n]=Hr(r[n],t.name,null);return this}for(;++c<o;)if((n=(t=i[c]).type)&&(n=Xr(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Br(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,a,r=new Array(n),i=0;i<n;++i)r[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(a=this._[t]).length;i<n;++i)a[i].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var a=this._[t],r=0,i=a.length;r<i;++r)a[r].value.apply(e,n)}};var Gr=function(){Z.preventDefault(),Z.stopImmediatePropagation()},Wr=function(t){var e=t.document.documentElement,n=it(t).on("dragstart.drag",Gr,!0);"onselectstart"in e?n.on("selectstart.drag",Gr,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")};var Rr,Zr,Qr=0,Jr=0,Kr=0,ti=1e3,ei=0,ni=0,ai=0,ri="object"==typeof performance&&performance.now?performance:Date,ii="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function ci(){return ni||(ii(oi),ni=ri.now()+ai)}function oi(){ni=0}function fi(){this._call=this._time=this._next=null}function li(t,e,n){var a=new fi;return a.restart(t,e,n),a}function si(){ni=(ei=ri.now())+ai,Qr=Jr=0;try{!function(){ci(),++Qr;for(var t,e=Rr;e;)(t=ni-e._time)>=0&&e._call.call(null,t),e=e._next;--Qr}()}finally{Qr=0,function(){var t,e,n=Rr,a=1/0;for(;n;)n._call?(a>n._time&&(a=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Rr=e);Zr=t,di(a)}(),ni=0}}function ui(){var t=ri.now(),e=t-ei;e>ti&&(ai-=e,ei=t)}function di(t){Qr||(Jr&&(Jr=clearTimeout(Jr)),t-ni>24?(t<1/0&&(Jr=setTimeout(si,t-ri.now()-ai)),Kr&&(Kr=clearInterval(Kr))):(Kr||(ei=ri.now(),Kr=setInterval(ui,ti)),Qr=1,ii(si)))}fi.prototype=li.prototype={constructor:fi,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?ci():+n)+(null==e?0:+e),this._next||Zr===this||(Zr?Zr._next=this:Rr=this,Zr=this),this._call=t,this._time=n,di()},stop:function(){this._call&&(this._call=null,this._time=1/0,di())}};var hi=function(t,e,n){var a=new fi;return e=null==e?0:+e,a.restart(function(n){a.stop(),t(n+e)},e,n),a},bi=Vr("start","end","interrupt"),pi=[],gi=0,mi=1,yi=2,vi=3,wi=4,xi=5,_i=6,Mi=function(t,e,n,a,r,i){var c=t.__transition;if(c){if(n in c)return}else t.__transition={};!function(t,e,n){var a,r=t.__transition;function i(f){var l,s,u,d;if(n.state!==mi)return o();for(l in r)if((d=r[l]).name===n.name){if(d.state===vi)return hi(i);d.state===wi?(d.state=_i,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete r[l]):+l<e&&(d.state=_i,d.timer.stop(),delete r[l])}if(hi(function(){n.state===vi&&(n.state=wi,n.timer.restart(c,n.delay,n.time),c(f))}),n.state=yi,n.on.call("start",t,t.__data__,n.index,n.group),n.state===yi){for(n.state=vi,a=new Array(u=n.tween.length),l=0,s=-1;l<u;++l)(d=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(a[++s]=d);a.length=s+1}}function c(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(o),n.state=xi,1),i=-1,c=a.length;++i<c;)a[i].call(null,r);n.state===xi&&(n.on.call("end",t,t.__data__,n.index,n.group),o())}function o(){for(var a in n.state=_i,n.timer.stop(),delete r[e],r)return;delete t.__transition}r[e]=n,n.timer=li(function(t){n.state=mi,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)},0,n.time)}(t,n,{name:e,index:a,group:r,on:bi,tween:pi,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:gi})};function Si(t,e){var n=Ai(t,e);if(n.state>gi)throw new Error("too late; already scheduled");return n}function ki(t,e){var n=Ai(t,e);if(n.state>yi)throw new Error("too late; already started");return n}function Ai(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var Ti=function(t,e){var n,a,r,i=t.__transition,c=!0;if(i){for(r in e=null==e?null:e+"",i)(n=i[r]).name===e?(a=n.state>yi&&n.state<xi,n.state=_i,n.timer.stop(),a&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete i[r]):c=!1;c&&delete t.__transition}};function Ci(t,e,n){var a=t._id;return t.each(function(){var t=ki(this,a);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return Ai(t,a).value[e]}}var Ni=function(t,e){var n;return("number"==typeof e?Qe:e instanceof oe?We:(n=oe(e))?(e=n,We):rn)(t,e)};var $i=rt.prototype.constructor;var Di=0;function qi(t,e,n,a){this._groups=t,this._parents=e,this._name=n,this._id=a}function Ei(){return++Di}var Li=rt.prototype;qi.prototype=function(t){return rt().transition(t)}.prototype={constructor:qi,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=x(t));for(var a=this._groups,r=a.length,i=new Array(r),c=0;c<r;++c)for(var o,f,l=a[c],s=l.length,u=i[c]=new Array(s),d=0;d<s;++d)(o=l[d])&&(f=t.call(o,o.__data__,d,l))&&("__data__"in o&&(f.__data__=o.__data__),u[d]=f,Mi(u[d],e,n,d,u,Ai(o,n)));return new qi(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=M(t));for(var a=this._groups,r=a.length,i=[],c=[],o=0;o<r;++o)for(var f,l=a[o],s=l.length,u=0;u<s;++u)if(f=l[u]){for(var d,h=t.call(f,f.__data__,u,l),b=Ai(f,n),p=0,g=h.length;p<g;++p)(d=h[p])&&Mi(d,e,n,p,h,b);i.push(h),c.push(f)}return new qi(i,c,e,n)},filter:function(t){"function"!=typeof t&&(t=T(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,c=e[r],o=c.length,f=a[r]=[],l=0;l<o;++l)(i=c[l])&&t.call(i,i.__data__,l,c)&&f.push(i);return new qi(a,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,a=e.length,r=n.length,i=Math.min(a,r),c=new Array(a),o=0;o<i;++o)for(var f,l=e[o],s=n[o],u=l.length,d=c[o]=new Array(u),h=0;h<u;++h)(f=l[h]||s[h])&&(d[h]=f);for(;o<a;++o)c[o]=e[o];return new qi(c,this._parents,this._name,this._id)},selection:function(){return new $i(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Ei(),a=this._groups,r=a.length,i=0;i<r;++i)for(var c,o=a[i],f=o.length,l=0;l<f;++l)if(c=o[l]){var s=Ai(c,e);Mi(c,t,n,l,o,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new qi(a,this._parents,t,n)},call:Li.call,nodes:Li.nodes,node:Li.node,size:Li.size,empty:Li.empty,each:Li.each,on:function(t,e){var n=this._id;return arguments.length<2?Ai(this.node(),n).on.on(t):this.each(function(t,e,n){var a,r,i=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?Si:ki;return function(){var c=i(this,t),o=c.on;o!==a&&(r=(a=o).copy()).on(e,n),c.on=r}}(n,t,e))},attr:function(t,e){var n=y(t),a="transform"===n?hn:Ni;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var a,r,i;return function(){var c,o=n(this);if(null!=o)return(c=this.getAttributeNS(t.space,t.local))===o?null:c===a&&o===r?i:i=e(a=c,r=o);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var a,r,i;return function(){var c,o=n(this);if(null!=o)return(c=this.getAttribute(t))===o?null:c===a&&o===r?i:i=e(a=c,r=o);this.removeAttribute(t)}})(n,a,Ci(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var a,r;return function(){var i=this.getAttributeNS(t.space,t.local);return i===n?null:i===a?r:r=e(a=i,n)}}:function(t,e,n){var a,r;return function(){var i=this.getAttribute(t);return i===n?null:i===a?r:r=e(a=i,n)}})(n,a,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var a=y(t);return this.tween(n,(a.local?function(t,e){function n(){var n=this,a=e.apply(n,arguments);return a&&function(e){n.setAttributeNS(t.space,t.local,a(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,a=e.apply(n,arguments);return a&&function(e){n.setAttribute(t,a(e))}}return n._value=e,n})(a,e))},style:function(t,e,n){var a="transform"==(t+="")?dn:Ni;return null==e?this.styleTween(t,function(t,e){var n,a,r;return function(){var i=P(this,t),c=(this.style.removeProperty(t),P(this,t));return i===c?null:i===n&&c===a?r:r=e(n=i,a=c)}}(t,a)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var a,r,i;return function(){var c=P(this,t),o=n(this);return null==o&&(this.style.removeProperty(t),o=P(this,t)),c===o?null:c===a&&o===r?i:i=e(a=c,r=o)}}(t,a,Ci(this,"style."+t,e)):function(t,e,n){var a,r;return function(){var i=P(this,t);return i===n?null:i===a?r:r=e(a=i,n)}}(t,a,e+""),n)},styleTween:function(t,e,n){var a="style."+(t+="");if(arguments.length<2)return(a=this.tween(a))&&a._value;if(null==e)return this.tween(a,null);if("function"!=typeof e)throw new Error;return this.tween(a,function(t,e,n){function a(){var a=this,r=e.apply(a,arguments);return r&&function(e){a.style.setProperty(t,r(e),n)}}return a._value=e,a}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Ci(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var a,r=Ai(this.node(),n).tween,i=0,c=r.length;i<c;++i)if((a=r[i]).name===t)return a.value;return null}return this.each((null==e?function(t,e){var n,a;return function(){var r=ki(this,t),i=r.tween;if(i!==n)for(var c=0,o=(a=n=i).length;c<o;++c)if(a[c].name===e){(a=a.slice()).splice(c,1);break}r.tween=a}}:function(t,e,n){var a,r;if("function"!=typeof n)throw new Error;return function(){var i=ki(this,t),c=i.tween;if(c!==a){r=(a=c).slice();for(var o={name:e,value:n},f=0,l=r.length;f<l;++f)if(r[f].name===e){r[f]=o;break}f===l&&r.push(o)}i.tween=r}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){Si(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){Si(this,t).delay=e}})(e,t)):Ai(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){ki(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){ki(this,t).duration=e}})(e,t)):Ai(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){ki(this,t).ease=e}}(e,t)):Ai(this.node(),e).ease}};var Pi={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Ui(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Pi.time=ci(),Pi;return n}rt.prototype.interrupt=function(t){return this.each(function(){Ti(this,t)})},rt.prototype.transition=function(t){var e,n;t instanceof qi?(e=t._id,t=t._name):(e=Ei(),(n=Pi).time=ci(),t=null==t?null:t+"");for(var a=this._groups,r=a.length,i=0;i<r;++i)for(var c,o=a[i],f=o.length,l=0;l<f;++l)(c=o[l])&&Mi(c,t,e,l,o,n||Ui(c,e));return new qi(a,this._parents,t,e)};var Ii=function(t){return function(){return t}},Fi=function(t,e,n){this.target=t,this.type=e,this.selection=n};function Yi(){Z.stopImmediatePropagation()}var zi=function(){Z.preventDefault(),Z.stopImmediatePropagation()},ji={name:"drag"},Oi={name:"space"},Vi={name:"handle"},Bi={name:"center"},Xi={name:"x",handles:["e","w"].map(Ji),input:function(t,e){return t&&[[t[0],e[0][1]],[t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Hi={name:"y",handles:["n","s"].map(Ji),input:function(t,e){return t&&[[e[0][0],t[0]],[e[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Gi=(["n","e","s","w","nw","ne","se","sw"].map(Ji),{overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"}),Wi={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Ri={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Zi={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Qi={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Ji(t){return{type:t}}function Ki(){return!Z.button}function tc(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function ec(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function nc(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function ac(){return function(t){var e,n=tc,a=Ki,r=Vr(c,"start","brush","end"),i=6;function c(e){var n=e.property("__brush",u).selectAll(".overlay").data([Ji("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Gi.overlay).merge(n).each(function(){var t=ec(this).extent;it(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),e.selectAll(".selection").data([Ji("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Gi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var a=e.selectAll(".handle").data(t.handles,function(t){return t.type});a.exit().remove(),a.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Gi[t.type]}),e.each(o).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",s)}function o(){var t=it(this),e=ec(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?e[1][0]-i/2:e[0][0]-i/2}).attr("y",function(t){return"s"===t.type[0]?e[1][1]-i/2:e[0][1]-i/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+i:i}).attr("height",function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+i:i})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function f(t,e){return t.__brush.emitter||new l(t,e)}function l(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function s(){if(Z.touches){if(Z.changedTouches.length<Z.touches.length)return zi()}else if(e)return;if(a.apply(this,arguments)){var n,r,i,c,l,s,u,d,h,b,p,g,m,y=this,v=Z.target.__data__.type,w="selection"===(Z.metaKey?v="overlay":v)?ji:Z.altKey?Bi:Vi,x=t===Hi?null:Zi[v],_=t===Xi?null:Qi[v],M=ec(y),S=M.extent,k=M.selection,A=S[0][0],T=S[0][1],C=S[1][0],N=S[1][1],$=x&&_&&Z.shiftKey,D=ot(y),q=D,E=f(y,arguments).beforestart();"overlay"===v?M.selection=k=[[n=t===Hi?A:D[0],i=t===Xi?T:D[1]],[l=t===Hi?C:n,u=t===Xi?N:i]]:(n=k[0][0],i=k[0][1],l=k[1][0],u=k[1][1]),r=n,c=i,s=l,d=u;var L=it(y).attr("pointer-events","none"),P=L.selectAll(".overlay").attr("cursor",Gi[v]);if(Z.touches)L.on("touchmove.brush",I,!0).on("touchend.brush touchcancel.brush",Y,!0);else{var U=it(Z.view).on("keydown.brush",function(){switch(Z.keyCode){case 16:$=x&&_;break;case 18:w===Vi&&(x&&(l=s-h*x,n=r+h*x),_&&(u=d-b*_,i=c+b*_),w=Bi,F());break;case 32:w!==Vi&&w!==Bi||(x<0?l=s-h:x>0&&(n=r-h),_<0?u=d-b:_>0&&(i=c-b),w=Oi,P.attr("cursor",Gi.selection),F());break;default:return}zi()},!0).on("keyup.brush",function(){switch(Z.keyCode){case 16:$&&(g=m=$=!1,F());break;case 18:w===Bi&&(x<0?l=s:x>0&&(n=r),_<0?u=d:_>0&&(i=c),w=Vi,F());break;case 32:w===Oi&&(Z.altKey?(x&&(l=s-h*x,n=r+h*x),_&&(u=d-b*_,i=c+b*_),w=Bi):(x<0?l=s:x>0&&(n=r),_<0?u=d:_>0&&(i=c),w=Vi),P.attr("cursor",Gi[v]),F());break;default:return}zi()},!0).on("mousemove.brush",I,!0).on("mouseup.brush",Y,!0);Wr(Z.view)}Yi(),Ti(y),o.call(y),E.start()}function I(){var t=ot(y);!$||g||m||(Math.abs(t[0]-q[0])>Math.abs(t[1]-q[1])?m=!0:g=!0),q=t,p=!0,zi(),F()}function F(){var t;switch(h=q[0]-D[0],b=q[1]-D[1],w){case Oi:case ji:x&&(h=Math.max(A-n,Math.min(C-l,h)),r=n+h,s=l+h),_&&(b=Math.max(T-i,Math.min(N-u,b)),c=i+b,d=u+b);break;case Vi:x<0?(h=Math.max(A-n,Math.min(C-n,h)),r=n+h,s=l):x>0&&(h=Math.max(A-l,Math.min(C-l,h)),r=n,s=l+h),_<0?(b=Math.max(T-i,Math.min(N-i,b)),c=i+b,d=u):_>0&&(b=Math.max(T-u,Math.min(N-u,b)),c=i,d=u+b);break;case Bi:x&&(r=Math.max(A,Math.min(C,n-h*x)),s=Math.max(A,Math.min(C,l+h*x))),_&&(c=Math.max(T,Math.min(N,i-b*_)),d=Math.max(T,Math.min(N,u+b*_)))}s<r&&(x*=-1,t=n,n=l,l=t,t=r,r=s,s=t,v in Wi&&P.attr("cursor",Gi[v=Wi[v]])),d<c&&(_*=-1,t=i,i=u,u=t,t=c,c=d,d=t,v in Ri&&P.attr("cursor",Gi[v=Ri[v]])),M.selection&&(k=M.selection),g&&(r=k[0][0],s=k[1][0]),m&&(c=k[0][1],d=k[1][1]),k[0][0]===r&&k[0][1]===c&&k[1][0]===s&&k[1][1]===d||(M.selection=[[r,c],[s,d]],o.call(y),E.brush())}function Y(){if(Yi(),Z.touches){if(Z.touches.length)return;e&&clearTimeout(e),e=setTimeout(function(){e=null},500),L.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(t,e){var n=t.document.documentElement,a=it(t).on("dragstart.drag",null);e&&(a.on("click.drag",Gr,!0),setTimeout(function(){a.on("click.drag",null)},0)),"onselectstart"in n?a.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(Z.view,p),U.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);L.attr("pointer-events","all"),P.attr("cursor",Gi.overlay),M.selection&&(k=M.selection),nc(k)&&(M.selection=null,o.call(y)),E.end()}}function u(){var e=this.__brush||{selection:null};return e.extent=n.apply(this,arguments),e.dim=t,e}return c.move=function(e,n){e.selection?e.on("start.brush",function(){f(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){f(this,arguments).end()}).tween("brush",function(){var e=this,a=e.__brush,r=f(e,arguments),i=a.selection,c=t.input("function"==typeof n?n.apply(this,arguments):n,a.extent),l=cn(i,c);function s(t){a.selection=1===t&&nc(c)?null:l(t),o.call(e),r.brush()}return i&&c?s:s(1)}):e.each(function(){var e=arguments,a=this.__brush,r=t.input("function"==typeof n?n.apply(this,e):n,a.extent),i=f(this,e).beforestart();Ti(this),a.selection=null==r||nc(r)?null:r,o.call(this),i.start().brush().end()})},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){!function(t,e,n,a){var r=Z;t.sourceEvent=Z,Z=t;try{e.apply(n,a)}finally{Z=r}}(new Fi(c,e,t.output(this.state.selection)),r.apply,r,[e,this.that,this.args])}},c.extent=function(t){return arguments.length?(n="function"==typeof t?t:Ii([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),c):n},c.filter=function(t){return arguments.length?(a="function"==typeof t?t:Ii(!!t),c):a},c.handleSize=function(t){return arguments.length?(i=+t,c):i},c.on=function(){var t=r.on.apply(r,arguments);return t===r?c:t},c}(Xi)}var rc=function(t){for(var e=t.length/6|0,n=new Array(e),a=0;a<e;)n[a]="#"+t.slice(6*a,6*++a);return n};rc("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),rc("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),rc("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),rc("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),rc("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),rc("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),rc("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),rc("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),rc("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");var ic=function(t){return Ze(t[t.length-1])};ic(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(rc)),ic(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(rc));var cc=ic(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(rc)),oc=ic(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(rc)),fc=ic(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(rc)),lc=ic(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(rc)),sc=ic(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(rc));ic(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(rc)),ic(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(rc));var uc=ic(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(rc));ic(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(rc)),ic(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(rc));var dc=ic(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(rc));ic(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(rc));var hc=ic(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(rc));ic(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(rc)),ic(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(rc));var bc=ic(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(rc));ic(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(rc)),ic(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(rc)),ic(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(rc));var pc=ic(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(rc)),gc=ic(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(rc)),mc=ic(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(rc)),yc=ic(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(rc)),vc=ic(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(rc)),wc=ic(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(rc));pn(je(300,.5,0),je(-240,.5,1));pn(je(-100,.75,.35),je(80,1.5,.8)),pn(je(260,.75,.35),je(80,1.5,.8)),je(),ue();function xc(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}xc(rc("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));xc(rc("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),xc(rc("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),xc(rc("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function _c(t,e="YlGnBu",n,a,r=!1){t=t.filter(t=>isFinite(t)),a=void 0===a?vt(t):a,n=void 0===n?wt(t):n;const i=function t(e){var n=0,a=1,r=1,i=!1;function c(t){var a=(t-n)*r;return e(i?Math.max(0,Math.min(1,a)):a)}return c.domain=function(t){return arguments.length?(n=+t[0],a=+t[1],r=n===a?0:1/(a-n),c):[n,a]},c.clamp=function(t){return arguments.length?(i=!!t,c):i},c.interpolator=function(t){return arguments.length?(e=t,c):e},c.copy=function(){return t(e).domain([n,a]).clamp(i)},Yn(c)}(function(t){const e={BuGn:uc,OrRd:dc,PuBu:hc,YlGnBu:bc,Blues:pc,Oranges:wc,Greens:gc,Purples:yc,Reds:vc,Greys:mc,Grays:mc,RdBu:fc,RdGy:lc,PiYG:cc,PuOr:oc,RdYlBu:sc};if(!e.hasOwnProperty(t)){const e="Unrecognized color: "+t;throw alert(e),e}return e[t]}(e));return r?i.domain([a,n]):i.domain([n,a]),i}function Mc(t,e,n,a,r,i=10,c=10,o={h:10,w:40},f="h",l=!1){let s=[];if(l){let t=[...Array(i+1).keys()],e=n.domain()[1]/i;s=(s=t.map(t=>t*e)).concat(t.filter(t=>0!=t).map(t=>0-t*e)).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}else{let t=[...Array(i+1).keys()],e=n.domain()[1]/i;s=t.map(t=>t*e)}const u=e.append("g").attr("transform",`translate(${a.x}, ${a.y})`).selectAll(".legend").data(s).enter().append("g").classed("legend",!0);"h"==f?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",o.h).attr("transform",`translate(${a.x}, ${a.y})`),u.append("rect").attr("x",(t,e)=>o.w*e).attr("y",5).attr("width",o.w).attr("height",o.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>r?(Math.pow(c,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>o.w*e).attr("y",0).style("font-size",10)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${a.x}, ${a.y+o.h*(s.length+1)})`),u.append("rect").attr("x",0).attr("y",(t,e)=>o.h*e).attr("width",o.w).attr("height",o.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>r?(Math.pow(c,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",15).attr("y",(t,e)=>o.h*e+o.h/2))}class Sc{constructor(t,e,n=1e6){this.data=t,this.center=e,this.window=n,this.scale=void 0,this.tooltip=void 0}render(t,e=1500,n=200,a=!1,r="Track",i="#ffffff",c="#ababab",o=!1,f){this.dom=t;this.dom.attr("id");let l=[0,e],s=[this.center-this.window,this.center+this.window];if(this.scale=function t(){var e=Mn(vn,Qe);return e.copy=function(){return _n(e,t())},Yn(e)}().rangeRound(l).domain(s),o){this.colorScale=_c(this.data.map(t=>t.colorValue),"Greys",0,f);const t=void 0===f?this.data.map(t=>t.colorValue):f;this.maxColor=this.colorScale(t)}let u=this.dom.append("g");u.append("rect").attr("x",0).attr("y",n/2).attr("width",e).attr("height",10).style("fill",i).style("stroke","#ababab").style("stroke-width",1);u.append("g").selectAll(".minibrowser-feature").data(this.data.filter(t=>this.scale(t.pos)>0&&this.scale(t.pos)<e)).enter().append("rect").attr("class","minibrowser-feature").attr("x",t=>a?this.scale(t.start):this.scale(t.pos)).attr("y",t=>n/2).attr("width",t=>{if(a){return Math.abs(this.scale(t.start)-this.scale(t.end)+1)||1}return 1}).attr("height",t=>10).style("fill",t=>t.pos==this.center?"red":o?isFinite(t.colorValue)?this.colorScale(t.colorValue):this.maxColor:c);u.append("text").attr("x",-10).attr("y",n/2+5).style("font-size","9px").style("text-anchor","end").text(r)}static renderAxis(t,e,n,a=!0,r=null,i={w:50,h:20},c=0){let o=qt(e).tickValues(e.ticks(7));const f=t.append("g");if(f.attr("transform",`translate(0,${n})`).call(o).selectAll("text"),a){const t=()=>{let t=Z.selection,n=t[0],a=t[1],i=Math.round(e.invert(t[0])),c=Math.round(e.invert(t[1]));r(n,a,i,c)},n=ac().extent([[0,-i.h],[e.range()[1],20]]).on("brush",t);f.append("g").attr("class","brush").call(n).call(n.move,[e(c)-i.w,e(c)+i.w])}}}class kc{constructor(t,e=!1,n=30,a=-40,r=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=a,this.duration=r}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),it("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){it("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=Z.pageX,e=Z.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;it("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){it("#"+this.id).html(t)}}class Ac{constructor(t,e=!0,n=10,a="Reds"){this.data=t,this.useLog=e,this.logBase=n,this.colorScheme=a,this.xScale=void 0,this.yScale=void 0,this.colorScale=void 0,this.bubbleScale=void 0,this.toolbar=void 0,this.tooltip=void 0}addTooltip(t,e="bubblemap-tooltip"){if(it(`#${t}`).empty())throw"DOM ID is missing: "+t;let n=it(`#${t}`),a=t+"-tooltip";it(`#${a}`).empty()&&n.append("div").attr("id",a),this.tooltip=new kc(a),it(`#${a}`).classed(e,!0)}drawCanvas(t,e={w:1e3,h:600,top:20,left:20},n,a={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){this.setScales(e,n);let r=t.node().getContext("2d");r.fillStyle="#ffffff",r.rect(0,0,t.attr("width"),t.attr("height")),r.fill(),this.data.forEach(t=>{r.beginPath(),r.fillStyle=this.colorScale(t.value),r.arc(this.xScale(t.x),this.yScale(t.y),this.bubbleScale(t.r),0,2*Math.PI),r.fill(),r.closePath()});let i=a.column,c=a.row;c.show&&(r.save(),r.textAlign=i.textAlign,r.fillStyle="black",r.font="10px Open Sans",this.yScale.domain().forEach(t=>{r.fillText(t,this.xScale.range()[0]-c.adjust,this.yScale(t)+2)}),r.restore()),i.show&&this.xScale.domain().forEach(t=>{r.save(),r.fillStyle="black",r.font="10px Open Sans",r.textAlign=i.textAlign,r.translate(this.xScale(t)-3,this.yScale.range()[1]+i.adjust),r.rotate(0==i.angle?0:Math.PI/(180/i.angle)),r.fillText(t,0,0),r.restore()})}drawCombo(t,e,n={w:1e3,h:600,top:0,left:0},a,r=!0,i={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){let c={w:n.w,h:n.h2,top:n.top,left:n.left};this.drawSvg(e,c,a,50,i);let o=t.append("g").attr("clip-path","url(#clip)");if(this._setMiniScales(n,a),o.selectAll(".mini-map-cell").data(this.data,t=>t.value).enter().append("circle").attr("class","mini-map-cell").attr("row",t=>`x${this.xScaleMini.domain().indexOf(t.x)}`).attr("col",t=>`y${this.yScaleMini.domain().indexOf(t.y)}`).attr("cx",t=>this.xScaleMini(t.x)).attr("cy",t=>this.yScaleMini(t.y)).attr("r",t=>isFinite(t.r)?this.bubbleScaleMini(t.r):this.bubleScaleMini.range()[1]).style("fill",t=>this.colorScale(t.value)),r){let a=ac().extent([[0,0],[n.w,n.h]]).on("brush",()=>{this.brushed(e,i)});t.append("g").attr("class","brush").call(a).call(a.move,[0,50*this.xScaleMini.bandwidth()])}}drawSvg(t,e={w:1e3,h:600,top:0,left:0},n,a=50,r={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:10,location:"left",textAlign:"right"}}){this.setScales(e,void 0,50);let i=this.tooltip;t.append("g").attr("clip-path","url(#clip)").selectAll(".bubble-map-cell").data(this.data,t=>t.value).enter().append("circle").attr("class","bubble-map-cell").attr("row",t=>`x${this.xScale.domain().indexOf(t.x)}`).attr("col",t=>`y${this.yScale.domain().indexOf(t.y)}`).attr("cx",t=>this.xScale(t.x)).attr("cy",t=>this.yScale(t.y)).attr("r",t=>isFinite(t.r)?this.bubbleScale(t.r):this.bubbleScale.range()[1]).style("fill",t=>this.colorScale(t.value)).on("mouseover",function(e){let n=it(this),a=n.attr("row"),r=n.attr("col");t.selectAll(".bubble-map-xlabel").filter(`.${a}`).classed("highlighted",!0),t.selectAll(".bubble-map-ylabel").filter(`.${r}`).classed("highlighted",!0),n.classed("highlighted",!0);let c=void 0===e.displayValue?parseFloat(e.value.toExponential()).toPrecision(4):e.displayValue,o=void 0===e.rDisplayValue?e.r.toPrecision(4):e.rDisplayValue,f=void 0===e.displayX?e.x:e.displayX,l=void 0===e.displayY?e.y:e.displayY;i.show(`Column: ${f} <br/> Row: ${l}<br/> Value: ${c}<br/> Size: ${o}`)}).on("mouseout",function(){t.selectAll("*").classed("highlighted",!1),i.hide()});let c=r.column,o=r.row;if(c.show){let e={},n=Math.floor(this.xScale.bandwidth()/2)>12?12:Math.floor(this.xScale.bandwidth()/2);Ut().key(t=>t.x).entries(this.data).forEach(t=>{e[t.key]=t.values[0].displayX});t.selectAll(".bubble-map-xlabel").data(this.xScale.domain()).enter().append("text").attr("class",(t,e)=>`bubble-map-xlabel x${e}`).attr("x",0).attr("y",0).attr("text-anchor","left"==c.textAlign?"start":"end").style("cursor","default").style("font-size",()=>`${n}px`).attr("transform",t=>{return`translate(${this.xScale(t)-n/2}, ${this.yScale.range()[1]+c.adjust}) rotate(${c.angle})`}).text(t=>e[t]||t)}if(o.show){let e={},n=Math.floor(this.yScale.bandwidth()/1.5)>14?14:Math.floor(this.yScale.bandwidth()/1.5)<10?10:Math.floor(this.yScale.bandwidth()/1.5);Ut().key(t=>t.y).entries(this.data).forEach(t=>{e[t.key]=t.values[0].displayY});t.selectAll(".bubble-map-ylabel").data(this.yScale.domain()).enter().append("text").attr("class",(t,e)=>`bubble-map-ylabel y${e}`).attr("x",0).attr("y",0).attr("text-anchor","left"==o.textAlign?"start":"end").style("cursor","default").style("font-size",()=>`${n}px`).attr("transform",t=>{return`translate(${this.xScale.range()[0]-o.adjust}, ${this.yScale(t)}) rotate(${o.angle})`}).text(t=>e[t]||t)}}drawColorLegend(t,e={x:0,y:0},n=5,a="",r={h:10,w:40},i="h"){Mc(a,t,this.colorScale,e,this.useLog,n,this.logBase,r,i,!0)}drawBubbleLegend(t,e={x:0,y:0,title:"Bubble legend"},n=5,a="",r="h"){t.selectAll(".bmap-bubble-legend").remove();let i=[...Array(n+1).keys()],c=(this.bubbleScale.domain()[1]-this.bubbleScale.domain()[0])/n,o=i.map(t=>this.bubbleScale.domain()[0]+t*c),f=t.append("g").attr("class","bmap-bubble-legend").attr("transform",`translate(${e.x}, ${e.y})`),l=f.selectAll(".legend").data(o).enter().append("g").classed("legend",!0);if("h"==r){f.append("text").attr("class","color-legend").text(e.title).attr("x",-10).attr("text-anchor","end").attr("y",10);let t=40;l.append("circle").attr("cx",(e,n)=>t*n).attr("cy",10).attr("r",t=>isFinite(t.r)?this.bubbleScale(t.r):this.bubbleScale.range()[1]).style("fill","#ababab"),l.append("text").attr("class","color-legend").text(t=>this.useLog?Math.pow(base,t).toPrecision(2):t.toPrecision(2)).attr("x",(e,n)=>t*n-5).attr("y",0)}else{let t=20;f.append("text").attr("class","color-legend").text(e.title).attr("x",0).attr("text-anchor","start").attr("y",t*o.length),l.append("circle").attr("cx",5).attr("cy",(e,n)=>t*n).attr("r",t=>isFinite(t)?this.bubbleScale(t):this.bubbleScale.range()[1]).style("fill","#ababab"),l.append("text").attr("class","color-legend").attr("text-anchor","start").text(t=>this.useLog?Math.pow(base,t).toPrecision(2):t.toPrecision(2)).attr("x",t).attr("y",(e,n)=>t*n+5)}}renderWithNewDomain(t,e,n={adjust:0,angle:90}){this.xScale.domain(e);let a=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:a,min:2}),t.selectAll(".bubble-map-cell").attr("cx",t=>{let e=this.xScale(t.x);return void 0===e?0:e}).attr("r",t=>{return void 0===this.xScale(t.x)?0:isFinite(t.r)?this.bubbleScale(t.r):this.bubbleScale.range()[1]});let r=Math.floor(this.xScale.bandwidth()/2)>10?10:Math.floor(this.xScale.bandwidth()/2);t.selectAll(".bubble-map-xlabel").attr("transform",t=>{return`translate(${this.xScale(t)-r/2||0}, ${this.yScale.range()[1]+n.adjust}) rotate(${n.angle})`}).style("font-size",()=>`${r}px`).style("display",t=>{return void 0===this.xScale(t)?"none":"block"})}brushed(t,e){let n=Z.selection,a=Math.round(n[0]/this.xScaleMini.step()),r=Math.round(n[1]/this.xScaleMini.step()),i=this.xScaleMini.domain().slice(a,r);return this.renderWithNewDomain(t,i,e.column),i}setScales(t={w:1e3,h:600,top:20,left:20},e){if(void 0===this.xScale&&(this.xScale=this._setXScale(t)),void 0===this.yScale&&(this.yScale=this._setYScale(t)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(e)),void 0===this.bubbleScale){let t=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:t,min:2})}}_setMiniScales(t={w:1e3,h:600,top:20,left:20},e){if(void 0===this.xScaleMini&&(this.xScaleMini=this._setXScaleMini(t)),void 0===this.yScaleMini&&(this.yScaleMini=this._setYScaleMini(t)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(e)),void 0===this.bubbleScaleMini){let t=this._setBubbleMax(!0);this.bubbleScaleMini=this._setBubbleScale({max:t,min:1})}}_parseXList(){return Ut().key(t=>t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}_parseYList(){return Ut().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}_setXScaleMini(t={w:1e3,left:20}){let e=this._parseXList();return this._setXScale(t,e)}_setXScale(t={w:1e3,left:20},e){return e=void 0===e?this._parseXList():e,Xt().domain(e).range([t.left,t.left+t.w]).padding(.05)}_setYScaleMini(t={h:600,top:20}){let e=this._parseYList();return this._setYScale(t,e)}_setYScale(t={h:600,top:20},e){return e=void 0===e?this._parseYList():e,Xt().domain(e).range([t.top,t.top+t.h]).padding(.05)}_setColorScale(t){let e=this.useLog;return _c(void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t,this.colorScheme,void 0,void 0,!0)}_setBubbleMax(t=!1,e=2,n=10){let a=t?this.xScaleMini:this.xScale,r=t?this.yScaleMini:this.yScale,i=vt([a.bandwidth(),r.bandwidth()])/e;return n<i?n:i}_setBubbleScale(t={max:10,min:0}){const e=vt(this.data.filter(t=>isFinite(t.r)).map(t=>t.r));return jn().domain([3,e]).range([t.min,t.max])}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}function Tc(t,e,n,a,r,i="relative"){return function(t){if(it(`#${t}`).empty()){let e=`Input Error: DOM ID ${t} is not found.`;throw console.warn(e),e}}(t),void 0===r&&(r=`${t}-svg`),void 0===a&&(a={top:0,left:0}),it("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",r).append("g").attr("transform",`translate(${a.left}, ${a.top})`)}class Cc{constructor(t,e=0,n=!0,a=10,r="Greys",i=[0,1]){this.data=this._unique(t),this.dataDict={},this.cutoff=e,this.filteredData=this._filter(this.data,this.cutoff),this.dataDict=this._generateDataDict(this.filteredData),this.useLog=n,this.logBase=a,this.colorScheme=r,this.colorScale=this._setColorScale(i),this.xScale=void 0,this.yScale=void 0,this.labelScale=void 0,this.tooltip=void 0}addTooltip(t){if(it(`#${t}`).empty())throw"DOM ID is missing: "+t;let e=t+"-tooltip";it(`#${e}`).empty()&&it(`#${t}`).append("div").attr("id",e),this.tooltip=new kc(e,!1,40,0),it(`#${e}`).classed("half-map-tooltip",!0)}draw(t,e,n={w:600,top:20,left:20},a=[0,1],r=!0,i=90,c,o){this._drawCanvas(t,n,a,c,o);this.drawSvg(e,n,!1,r,i,a,c,o)}drawColorLegend(t,e={x:0,y:0},n=5,a="",r=[0,1]){void 0===this.colorScale&&this._setColorScale(r),Mc(a,t,this.colorScale,e,this.useLog,n,this.logBase,{h:20,w:10},"v")}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}_drawCanvas(t,e={w:600,top:20,left:20},n=[0,1],a,r){this._setScales(e,n,a,r);let i=t.node().getContext("2d");i.save(),i.rotate(-.25*Math.PI),i.clearRect(-e.w,-e.w,2*e.w,2*e.w),this.filteredData.forEach(t=>{let e=this.xScale(t.x)-this.xScale.bandwidth()/2,n=this.yScale(t.y)-this.yScale.bandwidth()/2;void 0!==e&&void 0!==n&&(t.color=0==t.value?"#fff":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value),i.fillStyle=this.colorScale(t.value),i.fillRect(e,n,this.xScale.bandwidth(),this.yScale.bandwidth()))}),i.restore()}drawSvg(t,e,n=!0,a=!0,r=90,i=[0,1],c,o){if(n){this._setScales(e,i,c,o);let n=t.append("g").attr("clip-path","url(#clip)").selectAll(".half-map-cell").data(this.filteredData);n.enter().append("rect").attr("class","half-map-cell").attr("row",t=>`y${this.yScale.domain().indexOf(t.y)}`).attr("column",t=>`x${this.xScale.domain().indexOf(t.x)}`).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("transform","rotate(-45)").merge(n).style("fill",t=>0==t.value?"#fff":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value))}a&&(this._setLabelScale(e),t.selectAll().data(this.labelScale.domain()).enter().append("text").attr("class",(t,e)=>`half-map-label l${e}`).attr("x",0).attr("y",0).attr("text-anchor","start").style("cursor","none").attr("transform",t=>{return`translate(${this.labelScale(t)-this.labelScale.step()/2}, -5) rotate(-${r})`}).text(t=>t));let f=t.append("rect").attr("class","half-map-cursor").attr("x",-this.xScale.bandwidth()/2).attr("y",-this.yScale.bandwidth()/2).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("stroke","#d2111b").style("stroke-width","1px").style("fill","none").style("display","none");t.on("mouseout",()=>{f.style("display","none"),this.tooltip.hide(),t.selectAll(".half-map-label").classed("highlighted",!1)}),it(t.node().parentNode).style("cursor","none").style("position","absolute").on("mousemove",()=>{let e=ot(t.node()),n=e[0],r=e[1],i=.25*Math.PI,c=n*Math.cos(i)-r*Math.sin(i)+this.xScale.bandwidth()/2,o=n*Math.sin(i)+r*Math.cos(i)+this.yScale.bandwidth()/2;if(n<0||r<0||c<0||o<0)return this.tooltip.hide(),void f.style("display","none");let l=Math.floor(c/this.xScale.step()),s=Math.floor(o/this.yScale.step()),u=this.xScale.domain()[l],d=this.yScale.domain()[s],h=this.dataDict[u+d];void 0!==h?(f.attr("transform",`translate(${n},${r}) rotate(-45)`),f.style("display","block"),this.tooltip.show(`${u}<br/> ${d}<br/> Value: ${h.displayValue}`),a&&(t.selectAll(".half-map-label").classed("highlighted",!1),t.select(`.l${l}`).classed("highlighted",!0),t.select(`.l${s}`).classed("highlighted",!0))):(this.tooltip.hide(),f.style("display","none"))})}_unique(t){t.sort((t,e)=>t.x<e.x?-1:t.x>e.x?1:t.y<e.y?-1:t.y>e.y?1:0);let e={};return t.filter(t=>{let n=t.x+t.y,a=t.y+t.x;return!e.hasOwnProperty(n)&&!e.hasOwnProperty(a)&&(e[n]=!0,!0)})}_filter(t,e){return t.filter(t=>!(t.value<e))}_generateDataDict(t){let e={};return t.forEach(t=>{e[t.x+t.y]=t,e[t.y+t.x]=t}),e}_setScales(t={w:600,top:20,left:20},e=[0,1],n,a){(n||void 0===this.xScale)&&this._setXScale(t,n),(a||void 0===this.yScale)&&this._setYScale(t,a),void 0===this.colorScale&&this._setColorScale(e)}_setXScale(t={w:600},e){void 0===e&&(e=Ut().key(t=>t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.xScale=Xt().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setYScale(t={w:600},e){void 0===e&&(e=Ut().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.yScale=Xt().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setLabelScale(t={w:600}){void 0===this.xScale&&this._setXScale();let e=this.xScale.domain();this.labelScale=Xt().domain(e).range([0,t.w]).padding(.05)}_setColorScale(t){let e=this.useLog,n=void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t;this.colorScale=_c(n,this.colorScheme)}}let Nc={queryGene:void 0,genes:void 0,geneModel:void 0,sqtl:void 0,eqtl:void 0};const $c="https://dev.gtexportal.org/rest/v1/";let Dc={queryGene:$c+"reference/gene?format=json&gencodeVersion=v26&genomeBuild=GRCh38%2Fhg38&geneId=",genes:"../tempData/V8.genes.csv",geneExpression:$c+"expression/medianGeneExpression?datasetId=gtex_v8&hcluster=true&pageSize=10000&gencodeId=",geneModel:$c+"dataset/collapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",eqtls:$c+"association/singleTissueEqtl?format=json&datasetId=gtex_v8&gencodeId=",sqtls:$c+"association/singleTissueSqtl?format=json&datasetId=gtex_v8&gencodeId=",ld:$c+"dataset/ld?format=json&datasetId=gtex_v8&gencodeId=",vep:"../tempData/chromosome11.sample.vep.txt"},qc={genes:t=>(t.start=parseInt(t.start),t.end=parseInt(t.end),t.pos=parseInt(t.tss),t.featureLabel=t.geneSymbol,t.featureType=t.geneType,t),geneModel:t=>(t.start=parseInt(t.start),t.end=parseInt(t.end),t.pos=t.start,t.featureLabel=t.exonId,t),geneExpression:t=>(t.x=t.geneSymbol,t.y=t.tissueSiteDetailId,t.value=t.median,t.displayValue=t.value,t),qtlFeatures:t=>(t.chr=t.chromosome,t.start=parseInt(t.pos),t.end=t.start,t.pos=parseInt(t.pos),t.featureType="variant",t.featureLabel=t.snpId||t.variantId,t.colorValue=-Math.log10(parseFloat(t.pValue)),t),qtlBubbles:(t,e)=>(t.x=t.variantId,t.y=e+"-"+t.tissueSiteDetailId,t.value=parseFloat(t.nes),t.r=-Math.log10(parseFloat(t.pValue)),t),ld:t=>{let e=t[0].split(",");return{x:e[0],y:e[1],value:t[1],displayValue:t[1].toPrecision(3)}}};const Ec={genes:(t,e,n)=>{const a=e.tss-n,r=e.tss+n;return t.chromosome==e.chromosome&&t.tss>=a&&t.tss<=r&&("protein coding"==t.geneType||"lincRNA"==t.geneType)},qtls:(t,e,n)=>{const a=e.tss-n,r=e.tss+n;return t.pos>=a&&t.pos<=r}},Lc={genes:(t,e)=>parseInt(t.tss)-parseInt(e.tss),geneExpression:(t,e)=>parseInt(t.pos)-parseInt(e.pos),variants:(t,e)=>parseInt(t.pos)-parseInt(e.pos)};function Pc(t,e=Hc){!function(t=Hc){t.height=Object.keys(t.panels).reduce((e,n,a)=>{let r=t.panels[n];return r.yPos=e,e+r.height},0)}(e);const n=[p(e.urls.queryGene+t,{credentials:"include"}),h(e.urls.genes)];e.svg=Tc(e.id,e.width,e.height,{left:0,top:0}),Promise.all(n).then(n=>{n[0].gene.length>1&&console.warn("More than one gene matching the query:",t),e.data.queryGene=n[0].gene[0],e.data.genes=Uc(n[1],e);const a=["geneModel","eqtls","sqtls","vep"].map(t=>{if("vep"==t)return h(e.urls[t]);const n=e.urls[t]+e.data.queryGene.gencodeId;return p(n,{credentials:"include"})}),r=["ld"].map(t=>{const n=e.urls[t]+e.data.queryGene.gencodeId;return p(n,{credentials:"include"})});Promise.all(a).then(t=>{e.data.geneModel=t[0],e.data.eqtl=t[1],e.data.sqtl=t[2],e.data.vep=void 0===t[3]?void 0:t[3].filter(t=>{let n=e.data.queryGene.gencodeId.split(".")[0];return t.gencodeId==n}).reduce((t,e)=>(t[e.variant]=e.vep,t),{}),Fc(e);const n={eqtl:e.data.eqtl.singleTissueEqtl,sqtl:e.data.sqtl.singleTissueSqtl},a=Yc(e,n);Promise.all(r).then(t=>{e.data.ld=t,function(t=Hc,e,n){let a=function(t=Hc,e){let n=t.data.queryGene,a=t.svg,r=t.panels.qtlMap,i=t.parsers.qtlBubbles;r.data=[],r.data=r.data.concat(e.eqtl.map(t=>i(t,"eQTL"))),r.data=r.data.concat(e.sqtl.map(t=>i(t,"sQTL")));let c=new Ac(r.data,r.useLog,r.logBase,r.colorScheme),o=a.append("g").attr("id",r.id).attr("class","focus").attr("transform",`translate(${r.margin.left}, ${r.margin.top+r.yPos})`),f=r.width-(r.margin.left+r.margin.right),l=r.height-(r.margin.top+r.margin.bottom);return c.setScales({w:f,h:l,top:0,left:0}),c.drawColorLegend(a,{x:r.margin.left+f+20,y:r.yPos+r.margin.top},3,"NES",{h:15,w:10},"v"),c.drawBubbleLegend(a,{x:r.margin.left+f+20,y:r.yPos+r.margin.top+150,title:"-log10(p-value)"},5,"-log10(p-value)","v"),c.fullDomain=c.xScale.domain(),c.addTooltip("locus-browser","locus-browser-tooltip"),c.svg=o,function(t,e){let n="+"==t.strand?t.start:t.end,a="+"==t.strand?t.end:t.start,r=e.fullDomain;const i=t=>r.filter((e,n)=>{let a=parseFloat(e.split("_")[1]);if(a===t)return!0;if(void 0===r[n+1])return!1;let i=parseFloat(r[n+1].split("_")[1])||void 0;return(a-t)*(i-t)<0});let c=i(n),o=i(a);e.tss=c[0],e.tes=o[0]}(n,c),c}(t,e);0==t.ld.data.length&&function(t=Hc){let e=t.data.ld[0].ld.map(t.parsers.ld);const n={};e.forEach(t=>{n[t.x]=!0,n[t.y]=!0}),t.ld.data=e.concat(Object.keys(n).map(t=>({x:t,y:t,value:1,displayValue:"1"})))}(t);t.ldBrush=function(t,e){let n=new Cc(t.data,t.cutoff,!1,void 0,t.colorScheme,[0,1]);n.addTooltip("locus-browser");let a=it(`#${t.id}`).append("canvas").attr("id",t.id+"-ld-canvas").attr("width",t.width).attr("height",t.width).style("position","absolute");a.node().getContext("2d").translate(t.margin.left,t.margin.top);let r=Tc(t.id,t.width,t.width,{top:t.margin.top,left:t.margin.left});r.attr("class","ld").attr("id","ldG");const i=it(r.node().parentNode);n.drawColorLegend(i,{x:t.margin.left,y:100},10,"LD");const c={w:t.width-(t.margin.left+t.margin.right),top:0,left:0};return n.draw(a,r,c,[0,1],!1,void 0,e.xScale.domain(),e.xScale.domain()),()=>{r.selectAll("*").remove(),n.draw(a,r,c,[0,1],!1,void 0,e.xScale.domain(),e.xScale.domain())}}(t.ld,a),a.drawSvg(a.svg,{w:Math.abs(a.xScale.range()[1]-a.xScale.range()[0]),h:Math.abs(a.yScale.range()[1]-a.yScale.range()[0]),top:0,left:0}),Vc(a),jc(t.data.queryGene,n,a,t,t.ldBrush),t.bmap=a}(e,n,a)})})}).catch(t=>{console.error(t)})}function Uc(t,e){let n=t.filter(t=>e.dataFilters.genes(t,e.data.queryGene,e.genomicWindow)).map(e.parsers.genes);return n.sort(e.dataSort.genes),n}function Ic(t){Object.keys(t.panels).forEach(e=>{console.log(e);let n=t.panels[e];"qtl-map"!=n.id&&it(`#${n.id}`).remove()}),it("#zoom-size").text(`genomic range: ${(2*t.genomicWindow).toLocaleString()} bases`),Fc(t);let e=Yc(t);jc(t.data.queryGene,e,t.bmap,t,t.ldBrush)}function Fc(t=Hc){let e=t.data.genes,n=t.data.queryGene,a=t.svg;e.forEach(t=>{});const r=function(t){let e=t.data.queryGene,n=t.svg,a=t.panels.geneMap,r=a.width-(a.margin.left+a.margin.right),i=a.height-(a.margin.top+a.margin.bottom);if(r*i<=0)throw"The inner height and width of the GWAS heatmap panel must both be positive values. Check the height and margin configuration of this panel";let c=Uc(t.data.genes,t),o=Xt().domain(c.map(t=>t.geneSymbol)).range([0,r]).padding(.05),f=Et(o).tickSize(0);const l=n.append("g").attr("id",a.id);return l.attr("transform",`translate(${a.margin.left}, ${a.margin.top+i})`).call(f).selectAll("text").attr("y",0).attr("x",0).attr("dy",".35em").attr("transform","rotate(-90)").style("text-anchor","start").style("color",t=>t==e.geneSymbol?"red":"black"),l.select(".domain").remove(),l.selectAll(".tick").style("cursor","pointer").on("click",e=>{it("#"+t.id).selectAll("*").remove(),it("#"+t.ldId).selectAll("*").remove(),t.data=Nc,t.panels.eqtlTrack.data=null,t.panels.sqtlTrack.data=null,t.ld.data=[],t.genomicWindow=1e6,it("#zoom-size").text(`genomic range: ${(2*t.genomicWindow).toLocaleString()} bases`),Pc(e,t)}),o}(t),i={tssTrack:e,exonTrack:t.data.geneModel.collapsedGeneModelExon},c=function(t,e,n=Hc,a){let r=n.panels.tssTrack;r.data=a.tssTrack;const i=Oc(t.tss,e,n.genomicWindow,r,!1);let c=n.parsers.geneModel,o=a.exonTrack.map(c),f=n.panels.geneModelTrack;return f.data=o,Oc(t.tss,e,n.genomicWindow,f,!0),i}(n,a,t,i);let o=t.panels.geneMap,f=t.panels.tssTrack,l=o.margin.left-f.margin.left+r.bandwidth()/2,s=f.height-(f.margin.top+f.margin.bottom);return c.svg.selectAll(".connect").data(e.filter(t=>r.domain().indexOf(t.geneSymbol)>=0)).enter().append("line").attr("class","connect").attr("x1",t=>r(t.geneSymbol)+l).attr("x2",t=>c.scale(t.tss)).attr("y1",s/2-20).attr("y2",s/2).attr("stroke",t=>t.geneSymbol==n.geneSymbol?"red":"#ababab").attr("stroke-width",.5),c.svg.selectAll(".connect2").data(e.filter(t=>r.domain().indexOf(t.geneSymbol)>=0)).enter().append("line").attr("class","connect2").attr("x1",t=>r(t.geneSymbol)+l).attr("x2",t=>r(t.geneSymbol)+l).attr("y1",s/2-20).attr("y2",s/2-50).attr("stroke",t=>t.geneSymbol==n.geneSymbol?"red":"#ababab").attr("stroke-width",.5),e}function Yc(t=Hc,e,n=30){let a=t.data.queryGene,r=t.svg,i=t.panels.eqtlTrack,c=t.panels.sqtlTrack;return null!==i.data&&null!==c.data||(i.data=zc(e.eqtl,t),c.data=zc(e.sqtl,t)),Oc(a.tss,r,t.genomicWindow,i,!1,!0,n),Oc(a.tss,r,t.genomicWindow,c,!1,!0,n)}function zc(t,e=Hc){const n=e.parsers.qtlFeatures,a=e.dataSort.variants;let r=t.reduce((t,e)=>(t.hasOwnProperty(e.variantId)?t[e.variantId].pValue>e.pValue&&(t[e.variantId]=e):t[e.variantId]=e,t),{}),i=Object.values(r).map(n);return i.sort(a),i}function jc(t,e,n,a=Hc,r){const i=a.panels.qtlMap,c=a.panels.sqtlTrack;let o={w:100,h:Math.abs(a.panels.tssTrack.yPos+a.panels.tssTrack.margin.top-(a.panels.sqtlTrack.yPos+a.panels.sqtlTrack.height+20))};Sc.renderAxis(e.dom,e.scale,c.height+30,!0,(t,e,o,f)=>{let l=n.fullDomain.filter(t=>{let e=parseInt(t.split("_")[1]);return e>=o&&e<=f});n.renderWithNewDomain(n.svg,l),Vc(n),function(t){t.svg.selectAll(".bubble-map-ylabel").remove();let e=t.svg.selectAll(".bubble-map-ylabel").data(t.yScale.domain()).enter().append("g").attr("class",(t,e)=>`bubble-map-ylabel y${e}`).attr("x",0).attr("y",2).attr("transform",e=>`translate(${t.xScale.range()[0]-20}, ${t.yScale(e)})`),n=Math.floor(t.yScale.bandwidth()/1.5)>11?11:Math.floor(t.yScale.bandwidth()/1.5)<8?8:Math.floor(t.yScale.bandwidth()/1.5);e.append("text").attr("text-anchor","end").style("font-size",n).text(t=>t).attr("dx",-5).attr("dy",2);let a=Pr().size(50);e.append("path").attr("d",t=>{let e=t.startsWith("eQTL")?Lr:Er;return a.type(e),a()}).attr("fill",t=>t.startsWith("eQTL")?"#efefef":"#2d54aa").attr("stroke","#ababab").attr("stroke-width",1)}(n),function(t,e){t.svg.selectAll(".bubble-map-xlabel").remove();let n=t.svg.selectAll(".bubble-map-xlabel").data(t.xScale.domain()).enter().append("g").attr("class",(t,e)=>`bubble-map-xlabel x${e}`).attr("x",0).attr("y",0).style("cursor","default").attr("transform",e=>`translate(${t.xScale(e)}, ${t.yScale.range()[1]+2*t.yScale.bandwidth()})`),a=Math.floor(t.xScale.bandwidth()/2)>12?12:Math.floor(t.xScale.bandwidth()/2);n.append("text").style("font-size",a).text(t=>t).attr("dx",0).attr("dy",3).attr("transform","rotate(90)"),n.append("rect").attr("x",-t.xScale.bandwidth()/2).attr("y",-t.yScale.bandwidth()-5).attr("width",t.xScale.bandwidth()).attr("height",t.yScale.bandwidth()).style("fill",t=>{if(void 0===e.data.vep)return"none";let n=e.data.vep[t];return void 0===n?"#ffffff":Xc[n]||"#ababab"}).style("stroke","#eeeeee").style("stoke-width",1),n.on("mouseover",n=>{let a=e.data.vep[n]||"Not available";t.tooltip.show(`Variant: ${n} <br/> VEP: ${a}`)}).on("mouseout",e=>{t.tooltip.hide()})}(n,a),void 0!==r&&r(),ft(".brushLine").remove(),it(".brush").append("line").classed("brushLine",!0).attr("x1",t).attr("x2",n.xScale.range()[0]+i.margin.left-c.margin.left).attr("y1",20).attr("y2",60).style("stroke-width",1).style("stroke","#ababab"),it(".brush").append("line").classed("brushLine",!0).attr("x1",e).attr("x2",n.xScale.range()[1]+i.margin.left-c.margin.left).attr("y1",20).attr("y2",60).style("stroke-width",1).style("stroke","#ababab")},o,t.tss)}function Oc(t,e,n,a=Hc.panels.tssTrack,r,i=!1,c){let o=a.width-(a.margin.left+a.margin.right),f=a.height-(a.margin.top+a.margin.bottom),l=e.append("g").attr("id",a.id).attr("transform",`translate(${a.margin.left}, ${a.margin.top+a.yPos})`),s=new Sc(a.data,t,n);return s.render(l,o,f,r,a.label,a.color.background,a.color.feature,i,c),s.svg=l,s}function Vc(t){let e=t.svg;it("#siteMarkers").selectAll("*").remove(),it("#siteMarkers").remove();let n=e.append("g").attr("id","siteMarkers");t.tss&&t.xScale(t.tss)&&(n.append("line").attr("x1",t.xScale(t.tss)+t.xScale.bandwidth()/2).attr("x2",t.xScale(t.tss)+t.xScale.bandwidth()/2).attr("y1",-10).attr("y2",t.yScale.range()[1]).style("stroke","#94a8b8").style("stroke-width",2),n.append("text").text("TSS").attr("x",t.xScale(t.tss)).attr("y",-12).attr("text-anchor","center").style("font-size","12px")),t.tes&&t.xScale(t.tes)&&(n.append("line").attr("x1",t.xScale(t.tes)+t.xScale.bandwidth()/2).attr("x2",t.xScale(t.tes)+t.xScale.bandwidth()/2).attr("y1",-10).attr("y2",t.yScale.range()[1]).style("stroke","#748797").style("stroke-width",2),n.append("text").text("TES").attr("x",t.xScale(t.tes)).attr("y",-12).attr("text-anchor","center").style("font-size","12px"))}const Bc=window.innerWidth,Xc={splice_acceptor_variant:"#910807",splice_donor_variant:"#910807",splice_region_variant:"#ee974d",transcript_ablation:"#af6563",stop_gained:"#af6563",framshift_variant:"#af6563",stop_lost:"#af6563",start_lost:"#af6563",inframe_insertion:"#f9acb0",infram_deletion:"#f9acb0",missense_variant:"#f9acb0",protein_altering_variant:"#f9acb0"},Hc={id:"locus-browser",ldId:"ld-browser",width:Bc,height:null,genomicWindow:1e6,data:Nc,urls:Dc,parsers:qc,dataFilters:Ec,dataSort:Lc,panels:{geneMap:{id:"gene-map",data:null,useLog:!0,logBase:null,margin:{top:0,right:100,bottom:0,left:80},width:Bc,height:100,colorScheme:"YlGnBu",cornerRadius:2,columnLabel:{angle:90,adjust:10},rowLabel:{width:100}},tssTrack:{id:"tss-track",label:"TSS location",data:null,yPos:null,margin:{top:50,right:50,bottom:0,left:80},width:Bc,height:70,color:{background:"#ffffff",feature:"#ababab"}},geneModelTrack:{id:"gene-model-track",label:"Gene model",yPos:null,margin:{top:0,right:50,bottom:10,left:80},width:Bc,height:30,color:{background:"#ffffff",feature:"#910807"}},eqtlTrack:{id:"eqtl-track",label:"eQTL summary",data:null,yPos:null,margin:{top:0,right:50,bottom:0,left:80},width:Bc,height:20,color:{background:"#ffffff",feature:"#ababab"}},sqtlTrack:{id:"sqtl-track",label:"sQTL summary",data:null,yPos:null,margin:{top:0,right:50,bottom:0,left:80},width:Bc,height:20,color:{background:"#ffffff",feature:"#ababab"}},qtlMap:{id:"qtl-map",width:Bc,data:null,yPos:null,margin:{top:100,right:100,bottom:120,left:200},height:500,colorScheme:"RdBu",colorScaleDomain:[-1,1],useLog:!1,logBase:null,label:{column:{show:!0,angle:90,adjust:10,location:"bottom",textAlign:"left"},row:{show:!0,width:150,angle:0,adjust:0,location:"left",textAlign:"right"}}}},ld:{id:"ld-browser",data:[],cutoff:.1,width:Bc,margin:{top:10,right:100,bottom:0,left:200},colorScheme:"Greys"}};return t.data=Nc,t.dataUrls=Dc,t.dataParsers=qc,t.dataFilters=Ec,t.dataSort=Lc,t.render=Pc,t.setUIEvents=function(t,e){it("#zoom-plus").style("cursor","pointer").on("click",()=>{e.genomicWindow=e.genomicWindow<=5e4?5e4:e.genomicWindow/2,Ic(e)}),it("#zoom-minus").style("cursor","pointer").on("click",()=>{e.genomicWindow=e.genomicWindow>=1e6?1e6:2*e.genomicWindow,Ic(e)}),it("#zoom-reset").style("cursor","pointer").on("click",()=>{e.genomicWindow=1e6,console.log(e.genomicWindow),Ic(e)}),it("#zoom-size").text(`genomic range: ${(2*e.genomicWindow).toLocaleString()} bases`)},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
