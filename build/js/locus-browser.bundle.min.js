var LocusBrowser=function(e){"use strict";var t={},n={},a=34,r=10,i=13;function c(e){return new Function("d","return {"+e.map(function(e,t){return JSON.stringify(e)+": d["+t+"]"}).join(",")+"}")}var o=function(e){var o=new RegExp('["'+e+"\n\r]"),f=e.charCodeAt(0);function l(e,c){var o,l=[],s=e.length,u=0,d=0,h=s<=0,b=!1;function p(){if(h)return n;if(b)return b=!1,t;var c,o,l=u;if(e.charCodeAt(l)===a){for(;u++<s&&e.charCodeAt(u)!==a||e.charCodeAt(++u)===a;);return(c=u)>=s?h=!0:(o=e.charCodeAt(u++))===r?b=!0:o===i&&(b=!0,e.charCodeAt(u)===r&&++u),e.slice(l+1,c-1).replace(/""/g,'"')}for(;u<s;){if((o=e.charCodeAt(c=u++))===r)b=!0;else if(o===i)b=!0,e.charCodeAt(u)===r&&++u;else if(o!==f)continue;return e.slice(l,c)}return h=!0,e.slice(l,s)}for(e.charCodeAt(s-1)===r&&--s,e.charCodeAt(s-1)===i&&--s;(o=p())!==n;){for(var g=[];o!==t&&o!==n;)g.push(o),o=p();c&&null==(g=c(g,d++))||l.push(g)}return l}function s(t){return t.map(u).join(e)}function u(e){return null==e?"":o.test(e+="")?'"'+e.replace(/"/g,'""')+'"':e}return{parse:function(e,t){var n,a,r=l(e,function(e,r){if(n)return n(e,r-1);a=e,n=t?function(e,t){var n=c(e);return function(a,r){return t(n(a),r,e)}}(e,t):c(e)});return r.columns=a||[],r},parseRows:l,format:function(t,n){return null==n&&(n=function(e){var t=Object.create(null),n=[];return e.forEach(function(e){for(var a in e)a in t||n.push(t[a]=a)}),n}(t)),[n.map(u).join(e)].concat(t.map(function(t){return n.map(function(e){return u(t[e])}).join(e)})).join("\n")},formatRows:function(e){return e.map(s).join("\n")}}},f=o(",").parse,l=o("\t").parse;function s(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.text()}var u=function(e,t){return fetch(e,t).then(s)};function d(e){return function(t,n,a){return 2===arguments.length&&"function"==typeof n&&(a=n,n=void 0),u(t,n).then(function(t){return e(t,a)})}}d(f);var h=d(l);function b(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.json()}var p=function(e,t){return fetch(e,t).then(b)},g="http://www.w3.org/1999/xhtml",m={svg:"http://www.w3.org/2000/svg",xhtml:g,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},y=function(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),m.hasOwnProperty(t)?{space:m[t],local:e}:e};var v=function(e){var t=y(e);return(t.local?function(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}:function(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===g&&t.documentElement.namespaceURI===g?t.createElement(e):t.createElementNS(n,e)}})(t)};function w(){}var x=function(e){return null==e?w:function(){return this.querySelector(e)}};function _(){return[]}var M=function(e){return null==e?_:function(){return this.querySelectorAll(e)}},S=function(e){return function(){return this.matches(e)}};if("undefined"!=typeof document){var k=document.documentElement;if(!k.matches){var A=k.webkitMatchesSelector||k.msMatchesSelector||k.mozMatchesSelector||k.oMatchesSelector;S=function(e){return function(){return A.call(this,e)}}}}var T=S,C=function(e){return new Array(e.length)};function N(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}N.prototype={constructor:N,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};var D="$";function $(e,t,n,a,r,i){for(var c,o=0,f=t.length,l=i.length;o<l;++o)(c=t[o])?(c.__data__=i[o],a[o]=c):n[o]=new N(e,i[o]);for(;o<f;++o)(c=t[o])&&(r[o]=c)}function q(e,t,n,a,r,i,c){var o,f,l,s={},u=t.length,d=i.length,h=new Array(u);for(o=0;o<u;++o)(f=t[o])&&(h[o]=l=D+c.call(f,f.__data__,o,t),l in s?r[o]=f:s[l]=f);for(o=0;o<d;++o)(f=s[l=D+c.call(e,i[o],o,i)])?(a[o]=f,f.__data__=i[o],s[l]=null):n[o]=new N(e,i[o]);for(o=0;o<u;++o)(f=t[o])&&s[h[o]]===f&&(r[o]=f)}function E(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}var U=function(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView};function F(e,t){return e.style.getPropertyValue(t)||U(e).getComputedStyle(e,null).getPropertyValue(t)}function L(e){return e.trim().split(/^|\s+/)}function I(e){return e.classList||new P(e)}function P(e){this._node=e,this._names=L(e.getAttribute("class")||"")}function Y(e,t){for(var n=I(e),a=-1,r=t.length;++a<r;)n.add(t[a])}function j(e,t){for(var n=I(e),a=-1,r=t.length;++a<r;)n.remove(t[a])}P.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};function O(){this.textContent=""}function z(){this.innerHTML=""}function V(){this.nextSibling&&this.parentNode.appendChild(this)}function B(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function X(){return null}function H(){var e=this.parentNode;e&&e.removeChild(this)}function G(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function W(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var R={},Z=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(R={mouseenter:"mouseover",mouseleave:"mouseout"}));function Q(e,t,n){return e=J(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function J(e,t,n){return function(a){var r=Z;Z=a;try{e.call(this,this.__data__,t,n)}finally{Z=r}}}function K(e){return function(){var t=this.__on;if(t){for(var n,a=0,r=-1,i=t.length;a<i;++a)n=t[a],e.type&&n.type!==e.type||n.name!==e.name?t[++r]=n:this.removeEventListener(n.type,n.listener,n.capture);++r?t.length=r:delete this.__on}}}function ee(e,t,n){var a=R.hasOwnProperty(e.type)?Q:J;return function(r,i,c){var o,f=this.__on,l=a(t,i,c);if(f)for(var s=0,u=f.length;s<u;++s)if((o=f[s]).type===e.type&&o.name===e.name)return this.removeEventListener(o.type,o.listener,o.capture),this.addEventListener(o.type,o.listener=l,o.capture=n),void(o.value=t);this.addEventListener(e.type,l,n),o={type:e.type,name:e.name,value:t,listener:l,capture:n},f?f.push(o):this.__on=[o]}}function te(e,t,n){var a=U(e),r=a.CustomEvent;"function"==typeof r?r=new r(t,n):(r=a.document.createEvent("Event"),n?(r.initEvent(t,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(t,!1,!1)),e.dispatchEvent(r)}var ne=[null];function ae(e,t){this._groups=e,this._parents=t}function re(){return new ae([[document.documentElement]],ne)}ae.prototype=re.prototype={constructor:ae,select:function(e){"function"!=typeof e&&(e=x(e));for(var t=this._groups,n=t.length,a=new Array(n),r=0;r<n;++r)for(var i,c,o=t[r],f=o.length,l=a[r]=new Array(f),s=0;s<f;++s)(i=o[s])&&(c=e.call(i,i.__data__,s,o))&&("__data__"in i&&(c.__data__=i.__data__),l[s]=c);return new ae(a,this._parents)},selectAll:function(e){"function"!=typeof e&&(e=M(e));for(var t=this._groups,n=t.length,a=[],r=[],i=0;i<n;++i)for(var c,o=t[i],f=o.length,l=0;l<f;++l)(c=o[l])&&(a.push(e.call(c,c.__data__,l,o)),r.push(c));return new ae(a,r)},filter:function(e){"function"!=typeof e&&(e=T(e));for(var t=this._groups,n=t.length,a=new Array(n),r=0;r<n;++r)for(var i,c=t[r],o=c.length,f=a[r]=[],l=0;l<o;++l)(i=c[l])&&e.call(i,i.__data__,l,c)&&f.push(i);return new ae(a,this._parents)},data:function(e,t){if(!e)return b=new Array(this.size()),s=-1,this.each(function(e){b[++s]=e}),b;var n,a=t?q:$,r=this._parents,i=this._groups;"function"!=typeof e&&(n=e,e=function(){return n});for(var c=i.length,o=new Array(c),f=new Array(c),l=new Array(c),s=0;s<c;++s){var u=r[s],d=i[s],h=d.length,b=e.call(u,u&&u.__data__,s,r),p=b.length,g=f[s]=new Array(p),m=o[s]=new Array(p);a(u,d,g,m,l[s]=new Array(h),b,t);for(var y,v,w=0,x=0;w<p;++w)if(y=g[w]){for(w>=x&&(x=w+1);!(v=m[x])&&++x<p;);y._next=v||null}}return(o=new ae(o,r))._enter=f,o._exit=l,o},enter:function(){return new ae(this._enter||this._groups.map(C),this._parents)},exit:function(){return new ae(this._exit||this._groups.map(C),this._parents)},merge:function(e){for(var t=this._groups,n=e._groups,a=t.length,r=n.length,i=Math.min(a,r),c=new Array(a),o=0;o<i;++o)for(var f,l=t[o],s=n[o],u=l.length,d=c[o]=new Array(u),h=0;h<u;++h)(f=l[h]||s[h])&&(d[h]=f);for(;o<a;++o)c[o]=t[o];return new ae(c,this._parents)},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var a,r=e[t],i=r.length-1,c=r[i];--i>=0;)(a=r[i])&&(c&&c!==a.nextSibling&&c.parentNode.insertBefore(a,c),c=a);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=E);for(var n=this._groups,a=n.length,r=new Array(a),i=0;i<a;++i){for(var c,o=n[i],f=o.length,l=r[i]=new Array(f),s=0;s<f;++s)(c=o[s])&&(l[s]=c);l.sort(t)}return new ae(r,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){var e=new Array(this.size()),t=-1;return this.each(function(){e[++t]=this}),e},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var a=e[t],r=0,i=a.length;r<i;++r){var c=a[r];if(c)return c}return null},size:function(){var e=0;return this.each(function(){++e}),e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,a=t.length;n<a;++n)for(var r,i=t[n],c=0,o=i.length;c<o;++c)(r=i[c])&&e.call(r,r.__data__,c,i);return this},attr:function(e,t){var n=y(e);if(arguments.length<2){var a=this.node();return n.local?a.getAttributeNS(n.space,n.local):a.getAttribute(n)}return this.each((null==t?n.local?function(e){return function(){this.removeAttributeNS(e.space,e.local)}}:function(e){return function(){this.removeAttribute(e)}}:"function"==typeof t?n.local?function(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}:function(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}:n.local?function(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}:function(e,t){return function(){this.setAttribute(e,t)}})(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?function(e){return function(){this.style.removeProperty(e)}}:"function"==typeof t?function(e,t,n){return function(){var a=t.apply(this,arguments);null==a?this.style.removeProperty(e):this.style.setProperty(e,a,n)}}:function(e,t,n){return function(){this.style.setProperty(e,t,n)}})(e,t,null==n?"":n)):F(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?function(e){return function(){delete this[e]}}:"function"==typeof t?function(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}:function(e,t){return function(){this[e]=t}})(e,t)):this.node()[e]},classed:function(e,t){var n=L(e+"");if(arguments.length<2){for(var a=I(this.node()),r=-1,i=n.length;++r<i;)if(!a.contains(n[r]))return!1;return!0}return this.each(("function"==typeof t?function(e,t){return function(){(t.apply(this,arguments)?Y:j)(this,e)}}:t?function(e){return function(){Y(this,e)}}:function(e){return function(){j(this,e)}})(n,t))},text:function(e){return arguments.length?this.each(null==e?O:("function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}:function(e){return function(){this.textContent=e}})(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?z:("function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}:function(e){return function(){this.innerHTML=e}})(e)):this.node().innerHTML},raise:function(){return this.each(V)},lower:function(){return this.each(B)},append:function(e){var t="function"==typeof e?e:v(e);return this.select(function(){return this.appendChild(t.apply(this,arguments))})},insert:function(e,t){var n="function"==typeof e?e:v(e),a=null==t?X:"function"==typeof t?t:x(t);return this.select(function(){return this.insertBefore(n.apply(this,arguments),a.apply(this,arguments)||null)})},remove:function(){return this.each(H)},clone:function(e){return this.select(e?W:G)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var a,r,i=function(e){return e.trim().split(/^|\s+/).map(function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}})}(e+""),c=i.length;if(!(arguments.length<2)){for(o=t?ee:K,null==n&&(n=!1),a=0;a<c;++a)this.each(o(i[a],t,n));return this}var o=this.node().__on;if(o)for(var f,l=0,s=o.length;l<s;++l)for(a=0,f=o[l];a<c;++a)if((r=i[a]).type===f.type&&r.name===f.name)return f.value},dispatch:function(e,t){return this.each(("function"==typeof t?function(e,t){return function(){return te(this,e,t.apply(this,arguments))}}:function(e,t){return function(){return te(this,e,t)}})(e,t))}};var ie=function(e){return"string"==typeof e?new ae([[document.querySelector(e)]],[document.documentElement]):new ae([[e]],ne)},ce=function(){for(var e,t=Z;e=t.sourceEvent;)t=e;return t},oe=function(e){var t=ce();return t.changedTouches&&(t=t.changedTouches[0]),function(e,t){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var a=n.createSVGPoint();return a.x=t.clientX,a.y=t.clientY,[(a=a.matrixTransform(e.getScreenCTM().inverse())).x,a.y]}var r=e.getBoundingClientRect();return[t.clientX-r.left-e.clientLeft,t.clientY-r.top-e.clientTop]}(e,t)},fe=function(e){return"string"==typeof e?new ae([document.querySelectorAll(e)],[document.documentElement]):new ae([null==e?[]:e],ne)},le=function(e,t){return e<t?-1:e>t?1:e>=t?0:NaN};var se,ue,de=(1===(se=le).length&&(ue=se,se=function(e,t){return le(ue(e),t)}),{left:function(e,t,n,a){for(null==n&&(n=0),null==a&&(a=e.length);n<a;){var r=n+a>>>1;se(e[r],t)<0?n=r+1:a=r}return n},right:function(e,t,n,a){for(null==n&&(n=0),null==a&&(a=e.length);n<a;){var r=n+a>>>1;se(e[r],t)>0?a=r:n=r+1}return n}}).right,he=function(e,t,n){e=+e,t=+t,n=(r=arguments.length)<2?(t=e,e=0,1):r<3?1:+n;for(var a=-1,r=0|Math.max(0,Math.ceil((t-e)/n)),i=new Array(r);++a<r;)i[a]=e+a*n;return i},be=Math.sqrt(50),pe=Math.sqrt(10),ge=Math.sqrt(2),me=function(e,t,n){var a,r,i,c,o=-1;if(n=+n,(e=+e)===(t=+t)&&n>0)return[e];if((a=t<e)&&(r=e,e=t,t=r),0===(c=ye(e,t,n))||!isFinite(c))return[];if(c>0)for(e=Math.ceil(e/c),t=Math.floor(t/c),i=new Array(r=Math.ceil(t-e+1));++o<r;)i[o]=(e+o)*c;else for(e=Math.floor(e*c),t=Math.ceil(t*c),i=new Array(r=Math.ceil(e-t+1));++o<r;)i[o]=(e-o)/c;return a&&i.reverse(),i};function ye(e,t,n){var a=(t-e)/Math.max(0,n),r=Math.floor(Math.log(a)/Math.LN10),i=a/Math.pow(10,r);return r>=0?(i>=be?10:i>=pe?5:i>=ge?2:1)*Math.pow(10,r):-Math.pow(10,-r)/(i>=be?10:i>=pe?5:i>=ge?2:1)}var ve=function(e,t){var n,a,r=e.length,i=-1;if(null==t){for(;++i<r;)if(null!=(n=e[i])&&n>=n)for(a=n;++i<r;)null!=(n=e[i])&&n>a&&(a=n)}else for(;++i<r;)if(null!=(n=t(e[i],i,e))&&n>=n)for(a=n;++i<r;)null!=(n=t(e[i],i,e))&&n>a&&(a=n);return a},we=function(e,t){var n,a,r=e.length,i=-1;if(null==t){for(;++i<r;)if(null!=(n=e[i])&&n>=n)for(a=n;++i<r;)null!=(n=e[i])&&a>n&&(a=n)}else for(;++i<r;)if(null!=(n=t(e[i],i,e))&&n>=n)for(a=n;++i<r;)null!=(n=t(e[i],i,e))&&a>n&&(a=n);return a},xe=Array.prototype.slice,_e=function(e){return e},Me=1,Se=2,ke=3,Ae=4,Te=1e-6;function Ce(e){return"translate("+(e+.5)+",0)"}function Ne(e){return"translate(0,"+(e+.5)+")"}function De(){return!this.__axis}function $e(e,t){var n=[],a=null,r=null,i=6,c=6,o=3,f=e===Me||e===Ae?-1:1,l=e===Ae||e===Se?"x":"y",s=e===Me||e===ke?Ce:Ne;function u(u){var d=null==a?t.ticks?t.ticks.apply(t,n):t.domain():a,h=null==r?t.tickFormat?t.tickFormat.apply(t,n):_e:r,b=Math.max(i,0)+o,p=t.range(),g=+p[0]+.5,m=+p[p.length-1]+.5,y=(t.bandwidth?function(e){var t=Math.max(0,e.bandwidth()-1)/2;return e.round()&&(t=Math.round(t)),function(n){return+e(n)+t}}:function(e){return function(t){return+e(t)}})(t.copy()),v=u.selection?u.selection():u,w=v.selectAll(".domain").data([null]),x=v.selectAll(".tick").data(d,t).order(),_=x.exit(),M=x.enter().append("g").attr("class","tick"),S=x.select("line"),k=x.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(M),S=S.merge(M.append("line").attr("stroke","currentColor").attr(l+"2",f*i)),k=k.merge(M.append("text").attr("fill","currentColor").attr(l,f*b).attr("dy",e===Me?"0em":e===ke?"0.71em":"0.32em")),u!==v&&(w=w.transition(u),x=x.transition(u),S=S.transition(u),k=k.transition(u),_=_.transition(u).attr("opacity",Te).attr("transform",function(e){return isFinite(e=y(e))?s(e):this.getAttribute("transform")}),M.attr("opacity",Te).attr("transform",function(e){var t=this.parentNode.__axis;return s(t&&isFinite(t=t(e))?t:y(e))})),_.remove(),w.attr("d",e===Ae||e==Se?c?"M"+f*c+","+g+"H0.5V"+m+"H"+f*c:"M0.5,"+g+"V"+m:c?"M"+g+","+f*c+"V0.5H"+m+"V"+f*c:"M"+g+",0.5H"+m),x.attr("opacity",1).attr("transform",function(e){return s(y(e))}),S.attr(l+"2",f*i),k.attr(l,f*b).text(h),v.filter(De).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",e===Se?"start":e===Ae?"end":"middle"),v.each(function(){this.__axis=y})}return u.scale=function(e){return arguments.length?(t=e,u):t},u.ticks=function(){return n=xe.call(arguments),u},u.tickArguments=function(e){return arguments.length?(n=null==e?[]:xe.call(e),u):n.slice()},u.tickValues=function(e){return arguments.length?(a=null==e?null:xe.call(e),u):a&&a.slice()},u.tickFormat=function(e){return arguments.length?(r=e,u):r},u.tickSize=function(e){return arguments.length?(i=c=+e,u):i},u.tickSizeInner=function(e){return arguments.length?(i=+e,u):i},u.tickSizeOuter=function(e){return arguments.length?(c=+e,u):c},u.tickPadding=function(e){return arguments.length?(o=+e,u):o},u}function qe(e){return $e(Me,e)}function Ee(e){return $e(ke,e)}function Ue(){}function Fe(e,t){var n=new Ue;if(e instanceof Ue)e.each(function(e,t){n.set(t,e)});else if(Array.isArray(e)){var a,r=-1,i=e.length;if(null==t)for(;++r<i;)n.set(r,e[r]);else for(;++r<i;)n.set(t(a=e[r],r,e),a)}else if(e)for(var c in e)n.set(c,e[c]);return n}Ue.prototype=Fe.prototype={constructor:Ue,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var Le=function(){var e,t,n,a=[],r=[];function i(n,r,c,o){if(r>=a.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var f,l,s,u=-1,d=n.length,h=a[r++],b=Fe(),p=c();++u<d;)(s=b.get(f=h(l=n[u])+""))?s.push(l):b.set(f,[l]);return b.each(function(e,t){o(p,t,i(e,r,c,o))}),p}return n={object:function(e){return i(e,0,Ie,Pe)},map:function(e){return i(e,0,Ye,je)},entries:function(e){return function e(n,i){if(++i>a.length)return n;var c,o=r[i-1];return null!=t&&i>=a.length?c=n.entries():(c=[],n.each(function(t,n){c.push({key:n,values:e(t,i)})})),null!=o?c.sort(function(e,t){return o(e.key,t.key)}):c}(i(e,0,Ye,je),0)},key:function(e){return a.push(e),n},sortKeys:function(e){return r[a.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}};function Ie(){return{}}function Pe(e,t,n){e[t]=n}function Ye(){return Fe()}function je(e,t,n){e.set(t,n)}var Oe=Array.prototype,ze=Oe.map,Ve=Oe.slice,Be={name:"implicit"};function Xe(){var e,t,n=function e(t){var n=Fe(),a=[],r=Be;function i(e){var i=e+"",c=n.get(i);if(!c){if(r!==Be)return r;n.set(i,c=a.push(e))}return t[(c-1)%t.length]}return t=null==t?[]:Ve.call(t),i.domain=function(e){if(!arguments.length)return a.slice();a=[],n=Fe();for(var t,r,c=-1,o=e.length;++c<o;)n.has(r=(t=e[c])+"")||n.set(r,a.push(t));return i},i.range=function(e){return arguments.length?(t=Ve.call(e),i):t.slice()},i.unknown=function(e){return arguments.length?(r=e,i):r},i.copy=function(){return e().domain(a).range(t).unknown(r)},i}().unknown(void 0),a=n.domain,r=n.range,i=[0,1],c=!1,o=0,f=0,l=.5;function s(){var n=a().length,s=i[1]<i[0],u=i[s-0],d=i[1-s];e=(d-u)/Math.max(1,n-o+2*f),c&&(e=Math.floor(e)),u+=(d-u-e*(n-o))*l,t=e*(1-o),c&&(u=Math.round(u),t=Math.round(t));var h=he(n).map(function(t){return u+e*t});return r(s?h.reverse():h)}return delete n.unknown,n.domain=function(e){return arguments.length?(a(e),s()):a()},n.range=function(e){return arguments.length?(i=[+e[0],+e[1]],s()):i.slice()},n.rangeRound=function(e){return i=[+e[0],+e[1]],c=!0,s()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(c=!!e,s()):c},n.padding=function(e){return arguments.length?(o=f=Math.max(0,Math.min(1,e)),s()):o},n.paddingInner=function(e){return arguments.length?(o=Math.max(0,Math.min(1,e)),s()):o},n.paddingOuter=function(e){return arguments.length?(f=Math.max(0,Math.min(1,e)),s()):f},n.align=function(e){return arguments.length?(l=Math.max(0,Math.min(1,e)),s()):l},n.copy=function(){return Xe().domain(a()).range(i).round(c).paddingInner(o).paddingOuter(f).align(l)},s()}var He=function(e,t,n){e.prototype=t.prototype=n,n.constructor=e};function Ge(e,t){var n=Object.create(e.prototype);for(var a in t)n[a]=t[a];return n}function We(){}var Re="\\s*([+-]?\\d+)\\s*",Ze="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Qe="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Je=/^#([0-9a-f]{3})$/,Ke=/^#([0-9a-f]{6})$/,et=new RegExp("^rgb\\("+[Re,Re,Re]+"\\)$"),tt=new RegExp("^rgb\\("+[Qe,Qe,Qe]+"\\)$"),nt=new RegExp("^rgba\\("+[Re,Re,Re,Ze]+"\\)$"),at=new RegExp("^rgba\\("+[Qe,Qe,Qe,Ze]+"\\)$"),rt=new RegExp("^hsl\\("+[Ze,Qe,Qe]+"\\)$"),it=new RegExp("^hsla\\("+[Ze,Qe,Qe,Ze]+"\\)$"),ct={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function ot(e){var t;return e=(e+"").trim().toLowerCase(),(t=Je.exec(e))?new dt((t=parseInt(t[1],16))>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):(t=Ke.exec(e))?ft(parseInt(t[1],16)):(t=et.exec(e))?new dt(t[1],t[2],t[3],1):(t=tt.exec(e))?new dt(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=nt.exec(e))?lt(t[1],t[2],t[3],t[4]):(t=at.exec(e))?lt(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=rt.exec(e))?bt(t[1],t[2]/100,t[3]/100,1):(t=it.exec(e))?bt(t[1],t[2]/100,t[3]/100,t[4]):ct.hasOwnProperty(e)?ft(ct[e]):"transparent"===e?new dt(NaN,NaN,NaN,0):null}function ft(e){return new dt(e>>16&255,e>>8&255,255&e,1)}function lt(e,t,n,a){return a<=0&&(e=t=n=NaN),new dt(e,t,n,a)}function st(e){return e instanceof We||(e=ot(e)),e?new dt((e=e.rgb()).r,e.g,e.b,e.opacity):new dt}function ut(e,t,n,a){return 1===arguments.length?st(e):new dt(e,t,n,null==a?1:a)}function dt(e,t,n,a){this.r=+e,this.g=+t,this.b=+n,this.opacity=+a}function ht(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function bt(e,t,n,a){return a<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new pt(e,t,n,a)}function pt(e,t,n,a){this.h=+e,this.s=+t,this.l=+n,this.opacity=+a}function gt(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}He(We,ot,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),He(dt,ut,Ge(We,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new dt(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new dt(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+ht(this.r)+ht(this.g)+ht(this.b)},toString:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}})),He(pt,function(e,t,n,a){return 1===arguments.length?function(e){if(e instanceof pt)return new pt(e.h,e.s,e.l,e.opacity);if(e instanceof We||(e=ot(e)),!e)return new pt;if(e instanceof pt)return e;var t=(e=e.rgb()).r/255,n=e.g/255,a=e.b/255,r=Math.min(t,n,a),i=Math.max(t,n,a),c=NaN,o=i-r,f=(i+r)/2;return o?(c=t===i?(n-a)/o+6*(n<a):n===i?(a-t)/o+2:(t-n)/o+4,o/=f<.5?i+r:2-i-r,c*=60):o=f>0&&f<1?0:c,new pt(c,o,f,e.opacity)}(e):new pt(e,t,n,null==a?1:a)},Ge(We,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new pt(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new pt(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,a=n+(n<.5?n:1-n)*t,r=2*n-a;return new dt(gt(e>=240?e-240:e+120,r,a),gt(e,r,a),gt(e<120?e+240:e-120,r,a),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var mt=Math.PI/180,yt=180/Math.PI,vt=.96422,wt=1,xt=.82521,_t=4/29,Mt=6/29,St=3*Mt*Mt,kt=Mt*Mt*Mt;function At(e){if(e instanceof Tt)return new Tt(e.l,e.a,e.b,e.opacity);if(e instanceof qt){if(isNaN(e.h))return new Tt(e.l,0,0,e.opacity);var t=e.h*mt;return new Tt(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}e instanceof dt||(e=st(e));var n,a,r=$t(e.r),i=$t(e.g),c=$t(e.b),o=Ct((.2225045*r+.7168786*i+.0606169*c)/wt);return r===i&&i===c?n=a=o:(n=Ct((.4360747*r+.3850649*i+.1430804*c)/vt),a=Ct((.0139322*r+.0971045*i+.7141733*c)/xt)),new Tt(116*o-16,500*(n-o),200*(o-a),e.opacity)}function Tt(e,t,n,a){this.l=+e,this.a=+t,this.b=+n,this.opacity=+a}function Ct(e){return e>kt?Math.pow(e,1/3):e/St+_t}function Nt(e){return e>Mt?e*e*e:St*(e-_t)}function Dt(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function $t(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function qt(e,t,n,a){this.h=+e,this.c=+t,this.l=+n,this.opacity=+a}He(Tt,function(e,t,n,a){return 1===arguments.length?At(e):new Tt(e,t,n,null==a?1:a)},Ge(We,{brighter:function(e){return new Tt(this.l+18*(null==e?1:e),this.a,this.b,this.opacity)},darker:function(e){return new Tt(this.l-18*(null==e?1:e),this.a,this.b,this.opacity)},rgb:function(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return new dt(Dt(3.1338561*(t=vt*Nt(t))-1.6168667*(e=wt*Nt(e))-.4906146*(n=xt*Nt(n))),Dt(-.9787684*t+1.9161415*e+.033454*n),Dt(.0719453*t-.2289914*e+1.4052427*n),this.opacity)}})),He(qt,function(e,t,n,a){return 1===arguments.length?function(e){if(e instanceof qt)return new qt(e.h,e.c,e.l,e.opacity);if(e instanceof Tt||(e=At(e)),0===e.a&&0===e.b)return new qt(NaN,0,e.l,e.opacity);var t=Math.atan2(e.b,e.a)*yt;return new qt(t<0?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}(e):new qt(e,t,n,null==a?1:a)},Ge(We,{brighter:function(e){return new qt(this.h,this.c,this.l+18*(null==e?1:e),this.opacity)},darker:function(e){return new qt(this.h,this.c,this.l-18*(null==e?1:e),this.opacity)},rgb:function(){return At(this).rgb()}}));var Et=-.14861,Ut=1.78277,Ft=-.29227,Lt=-.90649,It=1.97294,Pt=It*Lt,Yt=It*Ut,jt=Ut*Ft-Lt*Et;function Ot(e,t,n,a){return 1===arguments.length?function(e){if(e instanceof zt)return new zt(e.h,e.s,e.l,e.opacity);e instanceof dt||(e=st(e));var t=e.r/255,n=e.g/255,a=e.b/255,r=(jt*a+Pt*t-Yt*n)/(jt+Pt-Yt),i=a-r,c=(It*(n-r)-Ft*i)/Lt,o=Math.sqrt(c*c+i*i)/(It*r*(1-r)),f=o?Math.atan2(c,i)*yt-120:NaN;return new zt(f<0?f+360:f,o,r,e.opacity)}(e):new zt(e,t,n,null==a?1:a)}function zt(e,t,n,a){this.h=+e,this.s=+t,this.l=+n,this.opacity=+a}function Vt(e,t,n,a,r){var i=e*e,c=i*e;return((1-3*e+3*i-c)*t+(4-6*i+3*c)*n+(1+3*e+3*i-3*c)*a+c*r)/6}He(zt,Ot,Ge(We,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new zt(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new zt(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=isNaN(this.h)?0:(this.h+120)*mt,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),a=Math.cos(e),r=Math.sin(e);return new dt(255*(t+n*(Et*a+Ut*r)),255*(t+n*(Ft*a+Lt*r)),255*(t+n*(It*a)),this.opacity)}}));var Bt=function(e){return function(){return e}};function Xt(e,t){return function(n){return e+n*t}}function Ht(e){return 1==(e=+e)?Gt:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(a){return Math.pow(e+a*t,n)}}(t,n,e):Bt(isNaN(t)?n:t)}}function Gt(e,t){var n=t-e;return n?Xt(e,n):Bt(isNaN(e)?t:e)}var Wt=function e(t){var n=Ht(t);function a(e,t){var a=n((e=ut(e)).r,(t=ut(t)).r),r=n(e.g,t.g),i=n(e.b,t.b),c=Gt(e.opacity,t.opacity);return function(t){return e.r=a(t),e.g=r(t),e.b=i(t),e.opacity=c(t),e+""}}return a.gamma=e,a}(1);function Rt(e){return function(t){var n,a,r=t.length,i=new Array(r),c=new Array(r),o=new Array(r);for(n=0;n<r;++n)a=ut(t[n]),i[n]=a.r||0,c[n]=a.g||0,o[n]=a.b||0;return i=e(i),c=e(c),o=e(o),a.opacity=1,function(e){return a.r=i(e),a.g=c(e),a.b=o(e),a+""}}}var Zt=Rt(function(e){var t=e.length-1;return function(n){var a=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),r=e[a],i=e[a+1],c=a>0?e[a-1]:2*r-i,o=a<t-1?e[a+2]:2*i-r;return Vt((n-a/t)*t,c,r,i,o)}}),Qt=(Rt(function(e){var t=e.length;return function(n){var a=Math.floor(((n%=1)<0?++n:n)*t),r=e[(a+t-1)%t],i=e[a%t],c=e[(a+1)%t],o=e[(a+2)%t];return Vt((n-a/t)*t,r,i,c,o)}}),function(e,t){return t-=e=+e,function(n){return e+t*n}}),Jt=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Kt=new RegExp(Jt.source,"g");var en,tn,nn,an,rn=function(e,t){var n,a,r,i=Jt.lastIndex=Kt.lastIndex=0,c=-1,o=[],f=[];for(e+="",t+="";(n=Jt.exec(e))&&(a=Kt.exec(t));)(r=a.index)>i&&(r=t.slice(i,r),o[c]?o[c]+=r:o[++c]=r),(n=n[0])===(a=a[0])?o[c]?o[c]+=a:o[++c]=a:(o[++c]=null,f.push({i:c,x:Qt(n,a)})),i=Kt.lastIndex;return i<t.length&&(r=t.slice(i),o[c]?o[c]+=r:o[++c]=r),o.length<2?f[0]?function(e){return function(t){return e(t)+""}}(f[0].x):function(e){return function(){return e}}(t):(t=f.length,function(e){for(var n,a=0;a<t;++a)o[(n=f[a]).i]=n.x(e);return o.join("")})},cn=function(e,t){var n,a=typeof t;return null==t||"boolean"===a?Bt(t):("number"===a?Qt:"string"===a?(n=ot(t))?(t=n,Wt):rn:t instanceof ot?Wt:t instanceof Date?function(e,t){var n=new Date;return t-=e=+e,function(a){return n.setTime(e+t*a),n}}:Array.isArray(t)?function(e,t){var n,a=t?t.length:0,r=e?Math.min(a,e.length):0,i=new Array(r),c=new Array(a);for(n=0;n<r;++n)i[n]=cn(e[n],t[n]);for(;n<a;++n)c[n]=t[n];return function(e){for(n=0;n<r;++n)c[n]=i[n](e);return c}}:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?function(e,t){var n,a={},r={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?a[n]=cn(e[n],t[n]):r[n]=t[n];return function(e){for(n in a)r[n]=a[n](e);return r}}:Qt)(e,t)},on=function(e,t){return t-=e=+e,function(n){return Math.round(e+t*n)}},fn=180/Math.PI,ln={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},sn=function(e,t,n,a,r,i){var c,o,f;return(c=Math.sqrt(e*e+t*t))&&(e/=c,t/=c),(f=e*n+t*a)&&(n-=e*f,a-=t*f),(o=Math.sqrt(n*n+a*a))&&(n/=o,a/=o,f/=o),e*a<t*n&&(e=-e,t=-t,f=-f,c=-c),{translateX:r,translateY:i,rotate:Math.atan2(t,e)*fn,skewX:Math.atan(f)*fn,scaleX:c,scaleY:o}};function un(e,t,n,a){function r(e){return e.length?e.pop()+" ":""}return function(i,c){var o=[],f=[];return i=e(i),c=e(c),function(e,a,r,i,c,o){if(e!==r||a!==i){var f=c.push("translate(",null,t,null,n);o.push({i:f-4,x:Qt(e,r)},{i:f-2,x:Qt(a,i)})}else(r||i)&&c.push("translate("+r+t+i+n)}(i.translateX,i.translateY,c.translateX,c.translateY,o,f),function(e,t,n,i){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),i.push({i:n.push(r(n)+"rotate(",null,a)-2,x:Qt(e,t)})):t&&n.push(r(n)+"rotate("+t+a)}(i.rotate,c.rotate,o,f),function(e,t,n,i){e!==t?i.push({i:n.push(r(n)+"skewX(",null,a)-2,x:Qt(e,t)}):t&&n.push(r(n)+"skewX("+t+a)}(i.skewX,c.skewX,o,f),function(e,t,n,a,i,c){if(e!==n||t!==a){var o=i.push(r(i)+"scale(",null,",",null,")");c.push({i:o-4,x:Qt(e,n)},{i:o-2,x:Qt(t,a)})}else 1===n&&1===a||i.push(r(i)+"scale("+n+","+a+")")}(i.scaleX,i.scaleY,c.scaleX,c.scaleY,o,f),i=c=null,function(e){for(var t,n=-1,a=f.length;++n<a;)o[(t=f[n]).i]=t.x(e);return o.join("")}}}var dn=un(function(e){return"none"===e?ln:(en||(en=document.createElement("DIV"),tn=document.documentElement,nn=document.defaultView),en.style.transform=e,e=nn.getComputedStyle(tn.appendChild(en),null).getPropertyValue("transform"),tn.removeChild(en),e=e.slice(7,-1).split(","),sn(+e[0],+e[1],+e[2],+e[3],+e[4],+e[5]))},"px, ","px)","deg)"),hn=un(function(e){return null==e?ln:(an||(an=document.createElementNS("http://www.w3.org/2000/svg","g")),an.setAttribute("transform",e),(e=an.transform.baseVal.consolidate())?(e=e.matrix,sn(e.a,e.b,e.c,e.d,e.e,e.f)):ln)},", ",")",")");function bn(e){return function t(n){function a(t,a){var r=e((t=Ot(t)).h,(a=Ot(a)).h),i=Gt(t.s,a.s),c=Gt(t.l,a.l),o=Gt(t.opacity,a.opacity);return function(e){return t.h=r(e),t.s=i(e),t.l=c(Math.pow(e,n)),t.opacity=o(e),t+""}}return n=+n,a.gamma=t,a}(1)}bn(function(e,t){var n=t-e;return n?Xt(e,n>180||n<-180?n-360*Math.round(n/360):n):Bt(isNaN(e)?t:e)});var pn=bn(Gt),gn=function(e){return function(){return e}},mn=function(e){return+e},yn=[0,1];function vn(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:gn(t)}function wn(e,t,n,a){var r=e[0],i=e[1],c=t[0],o=t[1];return i<r?(r=n(i,r),c=a(o,c)):(r=n(r,i),c=a(c,o)),function(e){return c(r(e))}}function xn(e,t,n,a){var r=Math.min(e.length,t.length)-1,i=new Array(r),c=new Array(r),o=-1;for(e[r]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++o<r;)i[o]=n(e[o],e[o+1]),c[o]=a(t[o],t[o+1]);return function(t){var n=de(e,t,1,r)-1;return c[n](i[n](t))}}function _n(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp())}function Mn(e,t){var n,a,r,i=yn,c=yn,o=cn,f=!1;function l(){return n=Math.min(i.length,c.length)>2?xn:wn,a=r=null,s}function s(t){return(a||(a=n(i,c,f?function(e){return function(t,n){var a=e(t=+t,n=+n);return function(e){return e<=t?0:e>=n?1:a(e)}}}(e):e,o)))(+t)}return s.invert=function(e){return(r||(r=n(c,i,vn,f?function(e){return function(t,n){var a=e(t=+t,n=+n);return function(e){return e<=0?t:e>=1?n:a(e)}}}(t):t)))(+e)},s.domain=function(e){return arguments.length?(i=ze.call(e,mn),l()):i.slice()},s.range=function(e){return arguments.length?(c=Ve.call(e),l()):c.slice()},s.rangeRound=function(e){return c=Ve.call(e),o=on,l()},s.clamp=function(e){return arguments.length?(f=!!e,l()):f},s.interpolate=function(e){return arguments.length?(o=e,l()):o},l()}var Sn=function(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,a=e.slice(0,n);return[a.length>1?a[0]+a.slice(2):a,+e.slice(n+1)]},kn=function(e){return(e=Sn(Math.abs(e)))?e[1]:NaN},An=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Tn(e){return new Cn(e)}function Cn(e){if(!(t=An.exec(e)))throw new Error("invalid format: "+e);var t;this.fill=t[1]||" ",this.align=t[2]||">",this.sign=t[3]||"-",this.symbol=t[4]||"",this.zero=!!t[5],this.width=t[6]&&+t[6],this.comma=!!t[7],this.precision=t[8]&&+t[8].slice(1),this.trim=!!t[9],this.type=t[10]||""}Tn.prototype=Cn.prototype,Cn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Nn,Dn,$n,qn,En=function(e){e:for(var t,n=e.length,a=1,r=-1;a<n;++a)switch(e[a]){case".":r=t=a;break;case"0":0===r&&(r=a),t=a;break;default:if(r>0){if(!+e[a])break e;r=0}}return r>0?e.slice(0,r)+e.slice(t+1):e},Un=function(e,t){var n=Sn(e,t);if(!n)return e+"";var a=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+a:a.length>r+1?a.slice(0,r+1)+"."+a.slice(r+1):a+new Array(r-a.length+2).join("0")},Fn={"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return Math.round(e).toString(2)},c:function(e){return e+""},d:function(e){return Math.round(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return Math.round(e).toString(8)},p:function(e,t){return Un(100*e,t)},r:Un,s:function(e,t){var n=Sn(e,t);if(!n)return e+"";var a=n[0],r=n[1],i=r-(Nn=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,c=a.length;return i===c?a:i>c?a+new Array(i-c+1).join("0"):i>0?a.slice(0,i)+"."+a.slice(i):"0."+new Array(1-i).join("0")+Sn(e,Math.max(0,t+i-1))[0]},X:function(e){return Math.round(e).toString(16).toUpperCase()},x:function(e){return Math.round(e).toString(16)}},Ln=function(e){return e},In=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Dn=function(e){var t,n,a=e.grouping&&e.thousands?(t=e.grouping,n=e.thousands,function(e,a){for(var r=e.length,i=[],c=0,o=t[0],f=0;r>0&&o>0&&(f+o+1>a&&(o=Math.max(1,a-f)),i.push(e.substring(r-=o,r+o)),!((f+=o+1)>a));)o=t[c=(c+1)%t.length];return i.reverse().join(n)}):Ln,r=e.currency,i=e.decimal,c=e.numerals?function(e){return function(t){return t.replace(/[0-9]/g,function(t){return e[+t]})}}(e.numerals):Ln,o=e.percent||"%";function f(e){var t=(e=Tn(e)).fill,n=e.align,f=e.sign,l=e.symbol,s=e.zero,u=e.width,d=e.comma,h=e.precision,b=e.trim,p=e.type;"n"===p?(d=!0,p="g"):Fn[p]||(null==h&&(h=12),b=!0,p="g"),(s||"0"===t&&"="===n)&&(s=!0,t="0",n="=");var g="$"===l?r[0]:"#"===l&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",m="$"===l?r[1]:/[%p]/.test(p)?o:"",y=Fn[p],v=/[defgprs%]/.test(p);function w(e){var r,o,l,w=g,x=m;if("c"===p)x=y(e)+x,e="";else{var _=(e=+e)<0;if(e=y(Math.abs(e),h),b&&(e=En(e)),_&&0==+e&&(_=!1),w=(_?"("===f?f:"-":"-"===f||"("===f?"":f)+w,x=("s"===p?In[8+Nn/3]:"")+x+(_&&"("===f?")":""),v)for(r=-1,o=e.length;++r<o;)if(48>(l=e.charCodeAt(r))||l>57){x=(46===l?i+e.slice(r+1):e.slice(r))+x,e=e.slice(0,r);break}}d&&!s&&(e=a(e,1/0));var M=w.length+e.length+x.length,S=M<u?new Array(u-M+1).join(t):"";switch(d&&s&&(e=a(S+e,S.length?u-x.length:1/0),S=""),n){case"<":e=w+e+x+S;break;case"=":e=w+S+e+x;break;case"^":e=S.slice(0,M=S.length>>1)+w+e+x+S.slice(M);break;default:e=S+w+e+x}return c(e)}return h=null==h?6:/[gprs]/.test(p)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),w.toString=function(){return e+""},w}return{format:f,formatPrefix:function(e,t){var n=f(((e=Tn(e)).type="f",e)),a=3*Math.max(-8,Math.min(8,Math.floor(kn(t)/3))),r=Math.pow(10,-a),i=In[8+a/3];return function(e){return n(r*e)+i}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),$n=Dn.format,qn=Dn.formatPrefix;var Pn=function(e,t,n){var a,r=e[0],i=e[e.length-1],c=function(e,t,n){var a=Math.abs(t-e)/Math.max(0,n),r=Math.pow(10,Math.floor(Math.log(a)/Math.LN10)),i=a/r;return i>=be?r*=10:i>=pe?r*=5:i>=ge&&(r*=2),t<e?-r:r}(r,i,null==t?10:t);switch((n=Tn(null==n?",f":n)).type){case"s":var o=Math.max(Math.abs(r),Math.abs(i));return null!=n.precision||isNaN(a=function(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(kn(t)/3)))-kn(Math.abs(e)))}(c,o))||(n.precision=a),qn(n,o);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(a=function(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,kn(t)-kn(e))+1}(c,Math.max(Math.abs(r),Math.abs(i))))||(n.precision=a-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(a=function(e){return Math.max(0,-kn(Math.abs(e)))}(c))||(n.precision=a-2*("%"===n.type))}return $n(n)};function Yn(e){var t=e.domain;return e.ticks=function(e){var n=t();return me(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){return Pn(t(),e,n)},e.nice=function(n){null==n&&(n=10);var a,r=t(),i=0,c=r.length-1,o=r[i],f=r[c];return f<o&&(a=o,o=f,f=a,a=i,i=c,c=a),(a=ye(o,f,n))>0?a=ye(o=Math.floor(o/a)*a,f=Math.ceil(f/a)*a,n):a<0&&(a=ye(o=Math.ceil(o*a)/a,f=Math.floor(f*a)/a,n)),a>0?(r[i]=Math.floor(o/a)*a,r[c]=Math.ceil(f/a)*a,t(r)):a<0&&(r[i]=Math.ceil(o*a)/a,r[c]=Math.floor(f*a)/a,t(r)),e},e}function jn(e,t){return e<0?-Math.pow(-e,t):Math.pow(e,t)}function On(){return function e(){var t=1,n=Mn(function(e,n){return(n=jn(n,t)-(e=jn(e,t)))?function(a){return(jn(a,t)-e)/n}:gn(n)},function(e,n){return n=jn(n,t)-(e=jn(e,t)),function(a){return jn(e+n*a,1/t)}}),a=n.domain;return n.exponent=function(e){return arguments.length?(t=+e,a(a())):t},n.copy=function(){return _n(n,e().exponent(t))},Yn(n)}().exponent(.5)}var zn=new Date,Vn=new Date;function Bn(e,t,n,a){function r(t){return e(t=new Date(+t)),t}return r.floor=r,r.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},r.round=function(e){var t=r(e),n=r.ceil(e);return e-t<n-e?t:n},r.offset=function(e,n){return t(e=new Date(+e),null==n?1:Math.floor(n)),e},r.range=function(n,a,i){var c,o=[];if(n=r.ceil(n),i=null==i?1:Math.floor(i),!(n<a&&i>0))return o;do{o.push(c=new Date(+n)),t(n,i),e(n)}while(c<n&&n<a);return o},r.filter=function(n){return Bn(function(t){if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)},function(e,a){if(e>=e)if(a<0)for(;++a<=0;)for(;t(e,-1),!n(e););else for(;--a>=0;)for(;t(e,1),!n(e););})},n&&(r.count=function(t,a){return zn.setTime(+t),Vn.setTime(+a),e(zn),e(Vn),Math.floor(n(zn,Vn))},r.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?r.filter(a?function(t){return a(t)%e==0}:function(t){return r.count(0,t)%e==0}):r:null}),r}var Xn=Bn(function(){},function(e,t){e.setTime(+e+t)},function(e,t){return t-e});Xn.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?Bn(function(t){t.setTime(Math.floor(t/e)*e)},function(t,n){t.setTime(+t+n*e)},function(t,n){return(n-t)/e}):Xn:null};var Hn=6e4,Gn=6048e5,Wn=(Bn(function(e){e.setTime(1e3*Math.floor(e/1e3))},function(e,t){e.setTime(+e+1e3*t)},function(e,t){return(t-e)/1e3},function(e){return e.getUTCSeconds()}),Bn(function(e){e.setTime(Math.floor(e/Hn)*Hn)},function(e,t){e.setTime(+e+t*Hn)},function(e,t){return(t-e)/Hn},function(e){return e.getMinutes()}),Bn(function(e){var t=e.getTimezoneOffset()*Hn%36e5;t<0&&(t+=36e5),e.setTime(36e5*Math.floor((+e-t)/36e5)+t)},function(e,t){e.setTime(+e+36e5*t)},function(e,t){return(t-e)/36e5},function(e){return e.getHours()}),Bn(function(e){e.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*Hn)/864e5},function(e){return e.getDate()-1}));function Rn(e){return Bn(function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+7*t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*Hn)/Gn})}var Zn=Rn(0),Qn=Rn(1),Jn=(Rn(2),Rn(3),Rn(4)),Kn=(Rn(5),Rn(6),Bn(function(e){e.setDate(1),e.setHours(0,0,0,0)},function(e,t){e.setMonth(e.getMonth()+t)},function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())},function(e){return e.getMonth()}),Bn(function(e){e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,t){e.setFullYear(e.getFullYear()+t)},function(e,t){return t.getFullYear()-e.getFullYear()},function(e){return e.getFullYear()}));Kn.every=function(e){return isFinite(e=Math.floor(e))&&e>0?Bn(function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n*e)}):null};Bn(function(e){e.setUTCSeconds(0,0)},function(e,t){e.setTime(+e+t*Hn)},function(e,t){return(t-e)/Hn},function(e){return e.getUTCMinutes()}),Bn(function(e){e.setUTCMinutes(0,0,0)},function(e,t){e.setTime(+e+36e5*t)},function(e,t){return(t-e)/36e5},function(e){return e.getUTCHours()});var ea=Bn(function(e){e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+t)},function(e,t){return(t-e)/864e5},function(e){return e.getUTCDate()-1});function ta(e){return Bn(function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+7*t)},function(e,t){return(t-e)/Gn})}var na=ta(0),aa=ta(1),ra=(ta(2),ta(3),ta(4)),ia=(ta(5),ta(6),Bn(function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCMonth(e.getUTCMonth()+t)},function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())},function(e){return e.getUTCMonth()}),Bn(function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)},function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()},function(e){return e.getUTCFullYear()}));function ca(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function oa(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function fa(e){return{y:e,m:0,d:1,H:0,M:0,S:0,L:0}}ia.every=function(e){return isFinite(e=Math.floor(e))&&e>0?Bn(function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)}):null};var la,sa,ua,da={"-":"",_:" ",0:"0"},ha=/^\s*\d+/,ba=/^%/,pa=/[\\^$*+?|[\]().{}]/g;function ga(e,t,n){var a=e<0?"-":"",r=(a?-e:e)+"",i=r.length;return a+(i<n?new Array(n-i+1).join(t)+r:r)}function ma(e){return e.replace(pa,"\\$&")}function ya(e){return new RegExp("^(?:"+e.map(ma).join("|")+")","i")}function va(e){for(var t={},n=-1,a=e.length;++n<a;)t[e[n].toLowerCase()]=n;return t}function wa(e,t,n){var a=ha.exec(t.slice(n,n+1));return a?(e.w=+a[0],n+a[0].length):-1}function xa(e,t,n){var a=ha.exec(t.slice(n,n+1));return a?(e.u=+a[0],n+a[0].length):-1}function _a(e,t,n){var a=ha.exec(t.slice(n,n+2));return a?(e.U=+a[0],n+a[0].length):-1}function Ma(e,t,n){var a=ha.exec(t.slice(n,n+2));return a?(e.V=+a[0],n+a[0].length):-1}function Sa(e,t,n){var a=ha.exec(t.slice(n,n+2));return a?(e.W=+a[0],n+a[0].length):-1}function ka(e,t,n){var a=ha.exec(t.slice(n,n+4));return a?(e.y=+a[0],n+a[0].length):-1}function Aa(e,t,n){var a=ha.exec(t.slice(n,n+2));return a?(e.y=+a[0]+(+a[0]>68?1900:2e3),n+a[0].length):-1}function Ta(e,t,n){var a=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return a?(e.Z=a[1]?0:-(a[2]+(a[3]||"00")),n+a[0].length):-1}function Ca(e,t,n){var a=ha.exec(t.slice(n,n+2));return a?(e.m=a[0]-1,n+a[0].length):-1}function Na(e,t,n){var a=ha.exec(t.slice(n,n+2));return a?(e.d=+a[0],n+a[0].length):-1}function Da(e,t,n){var a=ha.exec(t.slice(n,n+3));return a?(e.m=0,e.d=+a[0],n+a[0].length):-1}function $a(e,t,n){var a=ha.exec(t.slice(n,n+2));return a?(e.H=+a[0],n+a[0].length):-1}function qa(e,t,n){var a=ha.exec(t.slice(n,n+2));return a?(e.M=+a[0],n+a[0].length):-1}function Ea(e,t,n){var a=ha.exec(t.slice(n,n+2));return a?(e.S=+a[0],n+a[0].length):-1}function Ua(e,t,n){var a=ha.exec(t.slice(n,n+3));return a?(e.L=+a[0],n+a[0].length):-1}function Fa(e,t,n){var a=ha.exec(t.slice(n,n+6));return a?(e.L=Math.floor(a[0]/1e3),n+a[0].length):-1}function La(e,t,n){var a=ba.exec(t.slice(n,n+1));return a?n+a[0].length:-1}function Ia(e,t,n){var a=ha.exec(t.slice(n));return a?(e.Q=+a[0],n+a[0].length):-1}function Pa(e,t,n){var a=ha.exec(t.slice(n));return a?(e.Q=1e3*+a[0],n+a[0].length):-1}function Ya(e,t){return ga(e.getDate(),t,2)}function ja(e,t){return ga(e.getHours(),t,2)}function Oa(e,t){return ga(e.getHours()%12||12,t,2)}function za(e,t){return ga(1+Wn.count(Kn(e),e),t,3)}function Va(e,t){return ga(e.getMilliseconds(),t,3)}function Ba(e,t){return Va(e,t)+"000"}function Xa(e,t){return ga(e.getMonth()+1,t,2)}function Ha(e,t){return ga(e.getMinutes(),t,2)}function Ga(e,t){return ga(e.getSeconds(),t,2)}function Wa(e){var t=e.getDay();return 0===t?7:t}function Ra(e,t){return ga(Zn.count(Kn(e),e),t,2)}function Za(e,t){var n=e.getDay();return e=n>=4||0===n?Jn(e):Jn.ceil(e),ga(Jn.count(Kn(e),e)+(4===Kn(e).getDay()),t,2)}function Qa(e){return e.getDay()}function Ja(e,t){return ga(Qn.count(Kn(e),e),t,2)}function Ka(e,t){return ga(e.getFullYear()%100,t,2)}function er(e,t){return ga(e.getFullYear()%1e4,t,4)}function tr(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+ga(t/60|0,"0",2)+ga(t%60,"0",2)}function nr(e,t){return ga(e.getUTCDate(),t,2)}function ar(e,t){return ga(e.getUTCHours(),t,2)}function rr(e,t){return ga(e.getUTCHours()%12||12,t,2)}function ir(e,t){return ga(1+ea.count(ia(e),e),t,3)}function cr(e,t){return ga(e.getUTCMilliseconds(),t,3)}function or(e,t){return cr(e,t)+"000"}function fr(e,t){return ga(e.getUTCMonth()+1,t,2)}function lr(e,t){return ga(e.getUTCMinutes(),t,2)}function sr(e,t){return ga(e.getUTCSeconds(),t,2)}function ur(e){var t=e.getUTCDay();return 0===t?7:t}function dr(e,t){return ga(na.count(ia(e),e),t,2)}function hr(e,t){var n=e.getUTCDay();return e=n>=4||0===n?ra(e):ra.ceil(e),ga(ra.count(ia(e),e)+(4===ia(e).getUTCDay()),t,2)}function br(e){return e.getUTCDay()}function pr(e,t){return ga(aa.count(ia(e),e),t,2)}function gr(e,t){return ga(e.getUTCFullYear()%100,t,2)}function mr(e,t){return ga(e.getUTCFullYear()%1e4,t,4)}function yr(){return"+0000"}function vr(){return"%"}function wr(e){return+e}function xr(e){return Math.floor(+e/1e3)}!function(e){la=function(e){var t=e.dateTime,n=e.date,a=e.time,r=e.periods,i=e.days,c=e.shortDays,o=e.months,f=e.shortMonths,l=ya(r),s=va(r),u=ya(i),d=va(i),h=ya(c),b=va(c),p=ya(o),g=va(o),m=ya(f),y=va(f),v={a:function(e){return c[e.getDay()]},A:function(e){return i[e.getDay()]},b:function(e){return f[e.getMonth()]},B:function(e){return o[e.getMonth()]},c:null,d:Ya,e:Ya,f:Ba,H:ja,I:Oa,j:za,L:Va,m:Xa,M:Ha,p:function(e){return r[+(e.getHours()>=12)]},Q:wr,s:xr,S:Ga,u:Wa,U:Ra,V:Za,w:Qa,W:Ja,x:null,X:null,y:Ka,Y:er,Z:tr,"%":vr},w={a:function(e){return c[e.getUTCDay()]},A:function(e){return i[e.getUTCDay()]},b:function(e){return f[e.getUTCMonth()]},B:function(e){return o[e.getUTCMonth()]},c:null,d:nr,e:nr,f:or,H:ar,I:rr,j:ir,L:cr,m:fr,M:lr,p:function(e){return r[+(e.getUTCHours()>=12)]},Q:wr,s:xr,S:sr,u:ur,U:dr,V:hr,w:br,W:pr,x:null,X:null,y:gr,Y:mr,Z:yr,"%":vr},x={a:function(e,t,n){var a=h.exec(t.slice(n));return a?(e.w=b[a[0].toLowerCase()],n+a[0].length):-1},A:function(e,t,n){var a=u.exec(t.slice(n));return a?(e.w=d[a[0].toLowerCase()],n+a[0].length):-1},b:function(e,t,n){var a=m.exec(t.slice(n));return a?(e.m=y[a[0].toLowerCase()],n+a[0].length):-1},B:function(e,t,n){var a=p.exec(t.slice(n));return a?(e.m=g[a[0].toLowerCase()],n+a[0].length):-1},c:function(e,n,a){return S(e,t,n,a)},d:Na,e:Na,f:Fa,H:$a,I:$a,j:Da,L:Ua,m:Ca,M:qa,p:function(e,t,n){var a=l.exec(t.slice(n));return a?(e.p=s[a[0].toLowerCase()],n+a[0].length):-1},Q:Ia,s:Pa,S:Ea,u:xa,U:_a,V:Ma,w:wa,W:Sa,x:function(e,t,a){return S(e,n,t,a)},X:function(e,t,n){return S(e,a,t,n)},y:Aa,Y:ka,Z:Ta,"%":La};function _(e,t){return function(n){var a,r,i,c=[],o=-1,f=0,l=e.length;for(n instanceof Date||(n=new Date(+n));++o<l;)37===e.charCodeAt(o)&&(c.push(e.slice(f,o)),null!=(r=da[a=e.charAt(++o)])?a=e.charAt(++o):r="e"===a?" ":"0",(i=t[a])&&(a=i(n,r)),c.push(a),f=o+1);return c.push(e.slice(f,o)),c.join("")}}function M(e,t){return function(n){var a,r,i=fa(1900);if(S(i,e,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=(a=oa(fa(i.y))).getUTCDay())>4||0===r?aa.ceil(a):aa(a),a=ea.offset(a,7*(i.V-1)),i.y=a.getUTCFullYear(),i.m=a.getUTCMonth(),i.d=a.getUTCDate()+(i.w+6)%7):(a=(r=(a=t(fa(i.y))).getDay())>4||0===r?Qn.ceil(a):Qn(a),a=Wn.offset(a,7*(i.V-1)),i.y=a.getFullYear(),i.m=a.getMonth(),i.d=a.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),r="Z"in i?oa(fa(i.y)).getUTCDay():t(fa(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(r+5)%7:i.w+7*i.U-(r+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,oa(i)):t(i)}}function S(e,t,n,a){for(var r,i,c=0,o=t.length,f=n.length;c<o;){if(a>=f)return-1;if(37===(r=t.charCodeAt(c++))){if(r=t.charAt(c++),!(i=x[r in da?t.charAt(c++):r])||(a=i(e,n,a))<0)return-1}else if(r!=n.charCodeAt(a++))return-1}return a}return v.x=_(n,v),v.X=_(a,v),v.c=_(t,v),w.x=_(n,w),w.X=_(a,w),w.c=_(t,w),{format:function(e){var t=_(e+="",v);return t.toString=function(){return e},t},parse:function(e){var t=M(e+="",ca);return t.toString=function(){return e},t},utcFormat:function(e){var t=_(e+="",w);return t.toString=function(){return e},t},utcParse:function(e){var t=M(e,oa);return t.toString=function(){return e},t}}}(e),sa=la.utcFormat,ua=la.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||sa("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||ua("%Y-%m-%dT%H:%M:%S.%LZ");var _r={value:function(){}};function Mr(){for(var e,t=0,n=arguments.length,a={};t<n;++t){if(!(e=arguments[t]+"")||e in a)throw new Error("illegal type: "+e);a[e]=[]}return new Sr(a)}function Sr(e){this._=e}function kr(e,t){for(var n,a=0,r=e.length;a<r;++a)if((n=e[a]).name===t)return n.value}function Ar(e,t,n){for(var a=0,r=e.length;a<r;++a)if(e[a].name===t){e[a]=_r,e=e.slice(0,a).concat(e.slice(a+1));break}return null!=n&&e.push({name:t,value:n}),e}Sr.prototype=Mr.prototype={constructor:Sr,on:function(e,t){var n,a,r=this._,i=(a=r,(e+"").trim().split(/^|\s+/).map(function(e){var t="",n=e.indexOf(".");if(n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),e&&!a.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:t}})),c=-1,o=i.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++c<o;)if(n=(e=i[c]).type)r[n]=Ar(r[n],e.name,t);else if(null==t)for(n in r)r[n]=Ar(r[n],e.name,null);return this}for(;++c<o;)if((n=(e=i[c]).type)&&(n=kr(r[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new Sr(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,a,r=new Array(n),i=0;i<n;++i)r[i]=arguments[i+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(i=0,n=(a=this._[e]).length;i<n;++i)a[i].value.apply(t,r)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var a=this._[e],r=0,i=a.length;r<i;++r)a[r].value.apply(t,n)}};var Tr=function(){Z.preventDefault(),Z.stopImmediatePropagation()},Cr=function(e){var t=e.document.documentElement,n=ie(e).on("dragstart.drag",Tr,!0);"onselectstart"in t?n.on("selectstart.drag",Tr,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")};var Nr,Dr,$r=0,qr=0,Er=0,Ur=1e3,Fr=0,Lr=0,Ir=0,Pr="object"==typeof performance&&performance.now?performance:Date,Yr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function jr(){return Lr||(Yr(Or),Lr=Pr.now()+Ir)}function Or(){Lr=0}function zr(){this._call=this._time=this._next=null}function Vr(e,t,n){var a=new zr;return a.restart(e,t,n),a}function Br(){Lr=(Fr=Pr.now())+Ir,$r=qr=0;try{!function(){jr(),++$r;for(var e,t=Nr;t;)(e=Lr-t._time)>=0&&t._call.call(null,e),t=t._next;--$r}()}finally{$r=0,function(){var e,t,n=Nr,a=1/0;for(;n;)n._call?(a>n._time&&(a=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:Nr=t);Dr=e,Hr(a)}(),Lr=0}}function Xr(){var e=Pr.now(),t=e-Fr;t>Ur&&(Ir-=t,Fr=e)}function Hr(e){$r||(qr&&(qr=clearTimeout(qr)),e-Lr>24?(e<1/0&&(qr=setTimeout(Br,e-Pr.now()-Ir)),Er&&(Er=clearInterval(Er))):(Er||(Fr=Pr.now(),Er=setInterval(Xr,Ur)),$r=1,Yr(Br)))}zr.prototype=Vr.prototype={constructor:zr,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?jr():+n)+(null==t?0:+t),this._next||Dr===this||(Dr?Dr._next=this:Nr=this,Dr=this),this._call=e,this._time=n,Hr()},stop:function(){this._call&&(this._call=null,this._time=1/0,Hr())}};var Gr=function(e,t,n){var a=new zr;return t=null==t?0:+t,a.restart(function(n){a.stop(),e(n+t)},t,n),a},Wr=Mr("start","end","interrupt"),Rr=[],Zr=0,Qr=1,Jr=2,Kr=3,ei=4,ti=5,ni=6,ai=function(e,t,n,a,r,i){var c=e.__transition;if(c){if(n in c)return}else e.__transition={};!function(e,t,n){var a,r=e.__transition;function i(f){var l,s,u,d;if(n.state!==Qr)return o();for(l in r)if((d=r[l]).name===n.name){if(d.state===Kr)return Gr(i);d.state===ei?(d.state=ni,d.timer.stop(),d.on.call("interrupt",e,e.__data__,d.index,d.group),delete r[l]):+l<t&&(d.state=ni,d.timer.stop(),delete r[l])}if(Gr(function(){n.state===Kr&&(n.state=ei,n.timer.restart(c,n.delay,n.time),c(f))}),n.state=Jr,n.on.call("start",e,e.__data__,n.index,n.group),n.state===Jr){for(n.state=Kr,a=new Array(u=n.tween.length),l=0,s=-1;l<u;++l)(d=n.tween[l].value.call(e,e.__data__,n.index,n.group))&&(a[++s]=d);a.length=s+1}}function c(t){for(var r=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(o),n.state=ti,1),i=-1,c=a.length;++i<c;)a[i].call(null,r);n.state===ti&&(n.on.call("end",e,e.__data__,n.index,n.group),o())}function o(){for(var a in n.state=ni,n.timer.stop(),delete r[t],r)return;delete e.__transition}r[t]=n,n.timer=Vr(function(e){n.state=Qr,n.timer.restart(i,n.delay,n.time),n.delay<=e&&i(e-n.delay)},0,n.time)}(e,n,{name:t,index:a,group:r,on:Wr,tween:Rr,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:Zr})};function ri(e,t){var n=ci(e,t);if(n.state>Zr)throw new Error("too late; already scheduled");return n}function ii(e,t){var n=ci(e,t);if(n.state>Jr)throw new Error("too late; already started");return n}function ci(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}var oi=function(e,t){var n,a,r,i=e.__transition,c=!0;if(i){for(r in t=null==t?null:t+"",i)(n=i[r]).name===t?(a=n.state>Jr&&n.state<ti,n.state=ni,n.timer.stop(),a&&n.on.call("interrupt",e,e.__data__,n.index,n.group),delete i[r]):c=!1;c&&delete e.__transition}};function fi(e,t,n){var a=e._id;return e.each(function(){var e=ii(this,a);(e.value||(e.value={}))[t]=n.apply(this,arguments)}),function(e){return ci(e,a).value[t]}}var li=function(e,t){var n;return("number"==typeof t?Qt:t instanceof ot?Wt:(n=ot(t))?(t=n,Wt):rn)(e,t)};var si=re.prototype.constructor;var ui=0;function di(e,t,n,a){this._groups=e,this._parents=t,this._name=n,this._id=a}function hi(){return++ui}var bi=re.prototype;di.prototype=function(e){return re().transition(e)}.prototype={constructor:di,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=x(e));for(var a=this._groups,r=a.length,i=new Array(r),c=0;c<r;++c)for(var o,f,l=a[c],s=l.length,u=i[c]=new Array(s),d=0;d<s;++d)(o=l[d])&&(f=e.call(o,o.__data__,d,l))&&("__data__"in o&&(f.__data__=o.__data__),u[d]=f,ai(u[d],t,n,d,u,ci(o,n)));return new di(i,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=M(e));for(var a=this._groups,r=a.length,i=[],c=[],o=0;o<r;++o)for(var f,l=a[o],s=l.length,u=0;u<s;++u)if(f=l[u]){for(var d,h=e.call(f,f.__data__,u,l),b=ci(f,n),p=0,g=h.length;p<g;++p)(d=h[p])&&ai(d,t,n,p,h,b);i.push(h),c.push(f)}return new di(i,c,t,n)},filter:function(e){"function"!=typeof e&&(e=T(e));for(var t=this._groups,n=t.length,a=new Array(n),r=0;r<n;++r)for(var i,c=t[r],o=c.length,f=a[r]=[],l=0;l<o;++l)(i=c[l])&&e.call(i,i.__data__,l,c)&&f.push(i);return new di(a,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,a=t.length,r=n.length,i=Math.min(a,r),c=new Array(a),o=0;o<i;++o)for(var f,l=t[o],s=n[o],u=l.length,d=c[o]=new Array(u),h=0;h<u;++h)(f=l[h]||s[h])&&(d[h]=f);for(;o<a;++o)c[o]=t[o];return new di(c,this._parents,this._name,this._id)},selection:function(){return new si(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=hi(),a=this._groups,r=a.length,i=0;i<r;++i)for(var c,o=a[i],f=o.length,l=0;l<f;++l)if(c=o[l]){var s=ci(c,t);ai(c,e,n,l,o,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new di(a,this._parents,e,n)},call:bi.call,nodes:bi.nodes,node:bi.node,size:bi.size,empty:bi.empty,each:bi.each,on:function(e,t){var n=this._id;return arguments.length<2?ci(this.node(),n).on.on(e):this.each(function(e,t,n){var a,r,i=function(e){return(e+"").trim().split(/^|\s+/).every(function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e})}(t)?ri:ii;return function(){var c=i(this,e),o=c.on;o!==a&&(r=(a=o).copy()).on(t,n),c.on=r}}(n,e,t))},attr:function(e,t){var n=y(e),a="transform"===n?hn:li;return this.attrTween(e,"function"==typeof t?(n.local?function(e,t,n){var a,r,i;return function(){var c,o=n(this);if(null!=o)return(c=this.getAttributeNS(e.space,e.local))===o?null:c===a&&o===r?i:i=t(a=c,r=o);this.removeAttributeNS(e.space,e.local)}}:function(e,t,n){var a,r,i;return function(){var c,o=n(this);if(null!=o)return(c=this.getAttribute(e))===o?null:c===a&&o===r?i:i=t(a=c,r=o);this.removeAttribute(e)}})(n,a,fi(this,"attr."+e,t)):null==t?(n.local?function(e){return function(){this.removeAttributeNS(e.space,e.local)}}:function(e){return function(){this.removeAttribute(e)}})(n):(n.local?function(e,t,n){var a,r;return function(){var i=this.getAttributeNS(e.space,e.local);return i===n?null:i===a?r:r=t(a=i,n)}}:function(e,t,n){var a,r;return function(){var i=this.getAttribute(e);return i===n?null:i===a?r:r=t(a=i,n)}})(n,a,t+""))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var a=y(e);return this.tween(n,(a.local?function(e,t){function n(){var n=this,a=t.apply(n,arguments);return a&&function(t){n.setAttributeNS(e.space,e.local,a(t))}}return n._value=t,n}:function(e,t){function n(){var n=this,a=t.apply(n,arguments);return a&&function(t){n.setAttribute(e,a(t))}}return n._value=t,n})(a,t))},style:function(e,t,n){var a="transform"==(e+="")?dn:li;return null==t?this.styleTween(e,function(e,t){var n,a,r;return function(){var i=F(this,e),c=(this.style.removeProperty(e),F(this,e));return i===c?null:i===n&&c===a?r:r=t(n=i,a=c)}}(e,a)).on("end.style."+e,function(e){return function(){this.style.removeProperty(e)}}(e)):this.styleTween(e,"function"==typeof t?function(e,t,n){var a,r,i;return function(){var c=F(this,e),o=n(this);return null==o&&(this.style.removeProperty(e),o=F(this,e)),c===o?null:c===a&&o===r?i:i=t(a=c,r=o)}}(e,a,fi(this,"style."+e,t)):function(e,t,n){var a,r;return function(){var i=F(this,e);return i===n?null:i===a?r:r=t(a=i,n)}}(e,a,t+""),n)},styleTween:function(e,t,n){var a="style."+(e+="");if(arguments.length<2)return(a=this.tween(a))&&a._value;if(null==t)return this.tween(a,null);if("function"!=typeof t)throw new Error;return this.tween(a,function(e,t,n){function a(){var a=this,r=t.apply(a,arguments);return r&&function(t){a.style.setProperty(e,r(t),n)}}return a._value=t,a}(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(fi(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},remove:function(){return this.on("end.remove",(e=this._id,function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}));var e},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var a,r=ci(this.node(),n).tween,i=0,c=r.length;i<c;++i)if((a=r[i]).name===e)return a.value;return null}return this.each((null==t?function(e,t){var n,a;return function(){var r=ii(this,e),i=r.tween;if(i!==n)for(var c=0,o=(a=n=i).length;c<o;++c)if(a[c].name===t){(a=a.slice()).splice(c,1);break}r.tween=a}}:function(e,t,n){var a,r;if("function"!=typeof n)throw new Error;return function(){var i=ii(this,e),c=i.tween;if(c!==a){r=(a=c).slice();for(var o={name:t,value:n},f=0,l=r.length;f<l;++f)if(r[f].name===t){r[f]=o;break}f===l&&r.push(o)}i.tween=r}})(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?function(e,t){return function(){ri(this,e).delay=+t.apply(this,arguments)}}:function(e,t){return t=+t,function(){ri(this,e).delay=t}})(t,e)):ci(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?function(e,t){return function(){ii(this,e).duration=+t.apply(this,arguments)}}:function(e,t){return t=+t,function(){ii(this,e).duration=t}})(t,e)):ci(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(function(e,t){if("function"!=typeof t)throw new Error;return function(){ii(this,e).ease=t}}(t,e)):ci(this.node(),t).ease}};var pi={time:null,delay:0,duration:250,ease:function(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}};function gi(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))return pi.time=jr(),pi;return n}re.prototype.interrupt=function(e){return this.each(function(){oi(this,e)})},re.prototype.transition=function(e){var t,n;e instanceof di?(t=e._id,e=e._name):(t=hi(),(n=pi).time=jr(),e=null==e?null:e+"");for(var a=this._groups,r=a.length,i=0;i<r;++i)for(var c,o=a[i],f=o.length,l=0;l<f;++l)(c=o[l])&&ai(c,e,t,l,o,n||gi(c,t));return new di(a,this._parents,e,t)};var mi=function(e){return function(){return e}},yi=function(e,t,n){this.target=e,this.type=t,this.selection=n};function vi(){Z.stopImmediatePropagation()}var wi=function(){Z.preventDefault(),Z.stopImmediatePropagation()},xi={name:"drag"},_i={name:"space"},Mi={name:"handle"},Si={name:"center"},ki={name:"x",handles:["e","w"].map(qi),input:function(e,t){return e&&[[e[0],t[0][1]],[e[1],t[1][1]]]},output:function(e){return e&&[e[0][0],e[1][0]]}},Ai={name:"y",handles:["n","s"].map(qi),input:function(e,t){return e&&[[t[0][0],e[0]],[t[1][0],e[1]]]},output:function(e){return e&&[e[0][1],e[1][1]]}},Ti=(["n","e","s","w","nw","ne","se","sw"].map(qi),{overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"}),Ci={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Ni={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Di={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},$i={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function qi(e){return{type:e}}function Ei(){return!Z.button}function Ui(){var e=this.ownerSVGElement||this;return[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]}function Fi(e){for(;!e.__brush;)if(!(e=e.parentNode))return;return e.__brush}function Li(e){return e[0][0]===e[1][0]||e[0][1]===e[1][1]}function Ii(){return function(e){var t,n=Ui,a=Ei,r=Mr(c,"start","brush","end"),i=6;function c(t){var n=t.property("__brush",u).selectAll(".overlay").data([qi("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Ti.overlay).merge(n).each(function(){var e=Fi(this).extent;ie(this).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1])}),t.selectAll(".selection").data([qi("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Ti.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var a=t.selectAll(".handle").data(e.handles,function(e){return e.type});a.exit().remove(),a.enter().append("rect").attr("class",function(e){return"handle handle--"+e.type}).attr("cursor",function(e){return Ti[e.type]}),t.each(o).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",s)}function o(){var e=ie(this),t=Fi(this).selection;t?(e.selectAll(".selection").style("display",null).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1]),e.selectAll(".handle").style("display",null).attr("x",function(e){return"e"===e.type[e.type.length-1]?t[1][0]-i/2:t[0][0]-i/2}).attr("y",function(e){return"s"===e.type[0]?t[1][1]-i/2:t[0][1]-i/2}).attr("width",function(e){return"n"===e.type||"s"===e.type?t[1][0]-t[0][0]+i:i}).attr("height",function(e){return"e"===e.type||"w"===e.type?t[1][1]-t[0][1]+i:i})):e.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function f(e,t){return e.__brush.emitter||new l(e,t)}function l(e,t){this.that=e,this.args=t,this.state=e.__brush,this.active=0}function s(){if(Z.touches){if(Z.changedTouches.length<Z.touches.length)return wi()}else if(t)return;if(a.apply(this,arguments)){var n,r,i,c,l,s,u,d,h,b,p,g,m,y=this,v=Z.target.__data__.type,w="selection"===(Z.metaKey?v="overlay":v)?xi:Z.altKey?Si:Mi,x=e===Ai?null:Di[v],_=e===ki?null:$i[v],M=Fi(y),S=M.extent,k=M.selection,A=S[0][0],T=S[0][1],C=S[1][0],N=S[1][1],D=x&&_&&Z.shiftKey,$=oe(y),q=$,E=f(y,arguments).beforestart();"overlay"===v?M.selection=k=[[n=e===Ai?A:$[0],i=e===ki?T:$[1]],[l=e===Ai?C:n,u=e===ki?N:i]]:(n=k[0][0],i=k[0][1],l=k[1][0],u=k[1][1]),r=n,c=i,s=l,d=u;var U=ie(y).attr("pointer-events","none"),F=U.selectAll(".overlay").attr("cursor",Ti[v]);if(Z.touches)U.on("touchmove.brush",I,!0).on("touchend.brush touchcancel.brush",Y,!0);else{var L=ie(Z.view).on("keydown.brush",function(){switch(Z.keyCode){case 16:D=x&&_;break;case 18:w===Mi&&(x&&(l=s-h*x,n=r+h*x),_&&(u=d-b*_,i=c+b*_),w=Si,P());break;case 32:w!==Mi&&w!==Si||(x<0?l=s-h:x>0&&(n=r-h),_<0?u=d-b:_>0&&(i=c-b),w=_i,F.attr("cursor",Ti.selection),P());break;default:return}wi()},!0).on("keyup.brush",function(){switch(Z.keyCode){case 16:D&&(g=m=D=!1,P());break;case 18:w===Si&&(x<0?l=s:x>0&&(n=r),_<0?u=d:_>0&&(i=c),w=Mi,P());break;case 32:w===_i&&(Z.altKey?(x&&(l=s-h*x,n=r+h*x),_&&(u=d-b*_,i=c+b*_),w=Si):(x<0?l=s:x>0&&(n=r),_<0?u=d:_>0&&(i=c),w=Mi),F.attr("cursor",Ti[v]),P());break;default:return}wi()},!0).on("mousemove.brush",I,!0).on("mouseup.brush",Y,!0);Cr(Z.view)}vi(),oi(y),o.call(y),E.start()}function I(){var e=oe(y);!D||g||m||(Math.abs(e[0]-q[0])>Math.abs(e[1]-q[1])?m=!0:g=!0),q=e,p=!0,wi(),P()}function P(){var e;switch(h=q[0]-$[0],b=q[1]-$[1],w){case _i:case xi:x&&(h=Math.max(A-n,Math.min(C-l,h)),r=n+h,s=l+h),_&&(b=Math.max(T-i,Math.min(N-u,b)),c=i+b,d=u+b);break;case Mi:x<0?(h=Math.max(A-n,Math.min(C-n,h)),r=n+h,s=l):x>0&&(h=Math.max(A-l,Math.min(C-l,h)),r=n,s=l+h),_<0?(b=Math.max(T-i,Math.min(N-i,b)),c=i+b,d=u):_>0&&(b=Math.max(T-u,Math.min(N-u,b)),c=i,d=u+b);break;case Si:x&&(r=Math.max(A,Math.min(C,n-h*x)),s=Math.max(A,Math.min(C,l+h*x))),_&&(c=Math.max(T,Math.min(N,i-b*_)),d=Math.max(T,Math.min(N,u+b*_)))}s<r&&(x*=-1,e=n,n=l,l=e,e=r,r=s,s=e,v in Ci&&F.attr("cursor",Ti[v=Ci[v]])),d<c&&(_*=-1,e=i,i=u,u=e,e=c,c=d,d=e,v in Ni&&F.attr("cursor",Ti[v=Ni[v]])),M.selection&&(k=M.selection),g&&(r=k[0][0],s=k[1][0]),m&&(c=k[0][1],d=k[1][1]),k[0][0]===r&&k[0][1]===c&&k[1][0]===s&&k[1][1]===d||(M.selection=[[r,c],[s,d]],o.call(y),E.brush())}function Y(){if(vi(),Z.touches){if(Z.touches.length)return;t&&clearTimeout(t),t=setTimeout(function(){t=null},500),U.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(e,t){var n=e.document.documentElement,a=ie(e).on("dragstart.drag",null);t&&(a.on("click.drag",Tr,!0),setTimeout(function(){a.on("click.drag",null)},0)),"onselectstart"in n?a.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(Z.view,p),L.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);U.attr("pointer-events","all"),F.attr("cursor",Ti.overlay),M.selection&&(k=M.selection),Li(k)&&(M.selection=null,o.call(y)),E.end()}}function u(){var t=this.__brush||{selection:null};return t.extent=n.apply(this,arguments),t.dim=e,t}return c.move=function(t,n){t.selection?t.on("start.brush",function(){f(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){f(this,arguments).end()}).tween("brush",function(){var t=this,a=t.__brush,r=f(t,arguments),i=a.selection,c=e.input("function"==typeof n?n.apply(this,arguments):n,a.extent),l=cn(i,c);function s(e){a.selection=1===e&&Li(c)?null:l(e),o.call(t),r.brush()}return i&&c?s:s(1)}):t.each(function(){var t=arguments,a=this.__brush,r=e.input("function"==typeof n?n.apply(this,t):n,a.extent),i=f(this,t).beforestart();oi(this),a.selection=null==r||Li(r)?null:r,o.call(this),i.start().brush().end()})},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){!function(e,t,n,a){var r=Z;e.sourceEvent=Z,Z=e;try{t.apply(n,a)}finally{Z=r}}(new yi(c,t,e.output(this.state.selection)),r.apply,r,[t,this.that,this.args])}},c.extent=function(e){return arguments.length?(n="function"==typeof e?e:mi([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),c):n},c.filter=function(e){return arguments.length?(a="function"==typeof e?e:mi(!!e),c):a},c.handleSize=function(e){return arguments.length?(i=+e,c):i},c.on=function(){var e=r.on.apply(r,arguments);return e===r?c:e},c}(ki)}var Pi=function(e){for(var t=e.length/6|0,n=new Array(t),a=0;a<t;)n[a]="#"+e.slice(6*a,6*++a);return n};Pi("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Pi("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Pi("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Pi("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Pi("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Pi("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Pi("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Pi("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Pi("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");var Yi=function(e){return Zt(e[e.length-1])};Yi(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Pi)),Yi(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Pi));var ji=Yi(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Pi)),Oi=Yi(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Pi)),zi=Yi(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Pi)),Vi=Yi(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Pi)),Bi=Yi(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Pi));Yi(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Pi)),Yi(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Pi));var Xi=Yi(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Pi));Yi(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Pi)),Yi(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Pi));var Hi=Yi(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Pi));Yi(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Pi));var Gi=Yi(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Pi));Yi(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Pi)),Yi(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Pi));var Wi=Yi(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Pi));Yi(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Pi)),Yi(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Pi)),Yi(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Pi));var Ri=Yi(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Pi)),Zi=Yi(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Pi)),Qi=Yi(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Pi)),Ji=Yi(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Pi)),Ki=Yi(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Pi)),ec=Yi(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Pi));pn(Ot(300,.5,0),Ot(-240,.5,1));pn(Ot(-100,.75,.35),Ot(80,1.5,.8)),pn(Ot(260,.75,.35),Ot(80,1.5,.8)),Ot(),ut();function tc(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}tc(Pi("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));tc(Pi("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),tc(Pi("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),tc(Pi("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function nc(e,t="YlGnBu",n,a,r=!1){e=e.filter(e=>isFinite(e)),a=void 0===a?ve(e):a,n=void 0===n?we(e):n;const i=function e(t){var n=0,a=1,r=1,i=!1;function c(e){var a=(e-n)*r;return t(i?Math.max(0,Math.min(1,a)):a)}return c.domain=function(e){return arguments.length?(n=+e[0],a=+e[1],r=n===a?0:1/(a-n),c):[n,a]},c.clamp=function(e){return arguments.length?(i=!!e,c):i},c.interpolator=function(e){return arguments.length?(t=e,c):t},c.copy=function(){return e(t).domain([n,a]).clamp(i)},Yn(c)}(function(e){const t={BuGn:Xi,OrRd:Hi,PuBu:Gi,YlGnBu:Wi,Blues:Ri,Oranges:ec,Greens:Zi,Purples:Ji,Reds:Ki,Greys:Qi,Grays:Qi,RdBu:zi,RdGy:Vi,PiYG:ji,PuOr:Oi,RdYlBu:Bi};if(!t.hasOwnProperty(e)){const t="Unrecognized color: "+e;throw alert(t),t}return t[e]}(t));return r?i.domain([a,n]):i.domain([n,a]),i}function ac(e,t,n,a,r,i=10,c=10,o={h:10,w:40},f="h",l=!1){let s=[];if(l){let e=[...Array(i+1).keys()],t=n.domain()[1]/i;s=(s=e.map(e=>e*t)).concat(e.filter(e=>0!=e).map(e=>0-e*t)).sort((e,t)=>e<t?-1:e>t?1:e>=t?0:NaN)}else{let e=[...Array(i+1).keys()],t=n.domain()[1]/i;s=e.map(e=>e*t)}const u=t.append("g").attr("transform",`translate(${a.x}, ${a.y})`).selectAll(".legend").data(s).enter().append("g").classed("legend",!0);"h"==f?(t.append("text").attr("class","color-legend").text(e).attr("x",-10).attr("text-anchor","end").attr("y",o.h).attr("transform",`translate(${a.x}, ${a.y})`),u.append("rect").attr("x",(e,t)=>o.w*t).attr("y",5).attr("width",o.w).attr("height",o.h).style("fill",n),u.append("text").attr("class","color-legend").text(e=>r?Math.pow(c,e).toPrecision(2):e.toPrecision(2)).attr("x",(e,t)=>o.w*t).attr("y",0).style("font-size",10)):(t.append("text").attr("class","color-legend").text(e).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${a.x}, ${a.y+o.h*(s.length+1)})`),u.append("rect").attr("x",0).attr("y",(e,t)=>o.h*t).attr("width",o.w).attr("height",o.h).style("fill",n),u.append("text").attr("class","color-legend").text(e=>r?(Math.pow(c,e)-1).toPrecision(2):e.toPrecision(2)).attr("x",15).attr("y",(e,t)=>o.h*t+o.h/2))}class rc{constructor(e,t,n=1e6){this.data=e,this.center=t,this.window=n,this.scale=void 0,this.tooltip=void 0}render(e,t=1500,n=200,a=!1,r="Track",i="#ffffff",c="#ababab",o=!1,f){this.dom=e;this.dom.attr("id");let l=[0,t],s=[this.center-this.window,this.center+this.window];if(this.scale=function e(){var t=Mn(vn,Qt);return t.copy=function(){return _n(t,e())},Yn(t)}().rangeRound(l).domain(s),o){this.colorScale=nc(this.data.map(e=>e.colorValue),"Greys",0,f);const e=void 0===f?this.data.map(e=>e.colorValue):f;this.maxColor=this.colorScale(e)}let u=this.dom.append("g");u.append("rect").attr("x",0).attr("y",n/2).attr("width",t).attr("height",10).style("fill",i).style("stroke","#ababab").style("stroke-width",1);u.append("g").selectAll(".minibrowser-feature").data(this.data.filter(e=>this.scale(e.pos)>0&&this.scale(e.pos)<t)).enter().append("rect").attr("class","minibrowser-feature").attr("x",e=>a?this.scale(e.start):this.scale(e.pos)).attr("y",e=>n/2).attr("width",e=>{if(a){return Math.abs(this.scale(e.start)-this.scale(e.end)+1)||1}return 1}).attr("height",e=>10).style("fill",e=>e.pos==this.center?"red":o?isFinite(e.colorValue)?this.colorScale(e.colorValue):this.maxColor:c);u.append("text").attr("x",-10).attr("y",n/2+5).style("font-size","9px").style("text-anchor","end").text(r)}static renderAxis(e,t,n,a=!0,r=null,i={w:50,h:20},c=0){let o=qe(t).tickValues(t.ticks(7));const f=e.append("g");if(f.attr("transform",`translate(0,${n})`).call(o).selectAll("text"),a){const e=()=>{let e=Z.selection,n=e[0],a=e[1],i=Math.round(t.invert(e[0])),c=Math.round(t.invert(e[1]));r(n,a,i,c)},n=Ii().extent([[0,-i.h],[t.range()[1],20]]).on("brush",e);f.append("g").attr("class","brush").call(n).call(n.move,[t(c)-i.w,t(c)+i.w])}}}class ic{constructor(e,t=!1,n=30,a=-40,r=100){this.id=e,this.verbose=t,this.offsetX=n,this.offsetY=a,this.duration=r}show(e){this.verbose&&console.log(e),this.edit(e),this.move(),ie("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){ie("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(e=Z.pageX,t=Z.pageY){this.verbose&&(console.log(e),console.log(t)),e+=this.offsetX,t=t+this.offsetY<0?10:t+this.offsetY;ie("#"+this.id).style("left",`${e}px`).style("top",`${t}px`)}edit(e){ie("#"+this.id).html(e)}}class cc{constructor(e,t=!0,n=10,a="Reds"){this.data=e,this.useLog=t,this.logBase=n,this.colorScheme=a,this.xScale=void 0,this.yScale=void 0,this.colorScale=void 0,this.bubbleScale=void 0,this.toolbar=void 0,this.tooltip=void 0}addTooltip(e,t="bubblemap-tooltip"){if(ie(`#${e}`).empty())throw"DOM ID is missing: "+e;let n=ie(`#${e}`),a=e+"-tooltip";ie(`#${a}`).empty()&&n.append("div").attr("id",a),this.tooltip=new ic(a),ie(`#${a}`).classed(t,!0)}drawCanvas(e,t={w:1e3,h:600,top:20,left:20},n,a={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){this.setScales(t,n);let r=e.node().getContext("2d");r.fillStyle="#ffffff",r.rect(0,0,e.attr("width"),e.attr("height")),r.fill(),this.data.forEach(e=>{r.beginPath(),r.fillStyle=this.colorScale(e.value),r.arc(this.xScale(e.x),this.yScale(e.y),this.bubbleScale(e.r),0,2*Math.PI),r.fill(),r.closePath()});let i=a.column,c=a.row;c.show&&(r.save(),r.textAlign=i.textAlign,r.fillStyle="black",r.font="10px Open Sans",this.yScale.domain().forEach(e=>{r.fillText(e,this.xScale.range()[0]-c.adjust,this.yScale(e)+2)}),r.restore()),i.show&&this.xScale.domain().forEach(e=>{r.save(),r.fillStyle="black",r.font="10px Open Sans",r.textAlign=i.textAlign,r.translate(this.xScale(e)-3,this.yScale.range()[1]+i.adjust),r.rotate(0==i.angle?0:Math.PI/(180/i.angle)),r.fillText(e,0,0),r.restore()})}drawCombo(e,t,n={w:1e3,h:600,top:0,left:0},a,r=!0,i={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){let c={w:n.w,h:n.h2,top:n.top,left:n.left};this.drawSvg(t,c,a,50,i);let o=e.append("g").attr("clip-path","url(#clip)");if(this._setMiniScales(n,a),o.selectAll(".mini-map-cell").data(this.data,e=>e.value).enter().append("circle").attr("class","mini-map-cell").attr("row",e=>`x${this.xScaleMini.domain().indexOf(e.x)}`).attr("col",e=>`y${this.yScaleMini.domain().indexOf(e.y)}`).attr("cx",e=>this.xScaleMini(e.x)).attr("cy",e=>this.yScaleMini(e.y)).attr("r",e=>isFinite(e.r)?this.bubbleScaleMini(e.r):this.bubleScaleMini.range()[1]).style("fill",e=>this.colorScale(e.value)),r){let a=Ii().extent([[0,0],[n.w,n.h]]).on("brush",()=>{this.brushed(t,i)});e.append("g").attr("class","brush").call(a).call(a.move,[0,50*this.xScaleMini.bandwidth()])}}drawSvg(e,t={w:1e3,h:600,top:0,left:0},n,a=50,r={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:10,location:"left",textAlign:"right"}}){this.setScales(t,void 0,50);let i=this.tooltip;e.append("g").attr("clip-path","url(#clip)").selectAll(".bubble-map-cell").data(this.data,e=>e.value).enter().append("circle").attr("class","bubble-map-cell").attr("row",e=>`x${this.xScale.domain().indexOf(e.x)}`).attr("col",e=>`y${this.yScale.domain().indexOf(e.y)}`).attr("cx",e=>this.xScale(e.x)).attr("cy",e=>this.yScale(e.y)).attr("r",e=>isFinite(e.r)?this.bubbleScale(e.r):this.bubbleScale.range()[1]).style("fill",e=>this.colorScale(e.value)).on("mouseover",function(t){let n=ie(this),a=n.attr("row"),r=n.attr("col");e.selectAll(".bubble-map-xlabel").filter(`.${a}`).classed("highlighted",!0),e.selectAll(".bubble-map-ylabel").filter(`.${r}`).classed("highlighted",!0),n.classed("highlighted",!0);let c=void 0===t.displayValue?parseFloat(t.value.toExponential()).toPrecision(4):t.displayValue,o=void 0===t.rDisplayValue?t.r.toPrecision(4):t.rDisplayValue,f=void 0===t.displayX?t.x:t.displayX,l=void 0===t.displayY?t.y:t.displayY;i.show(`Column: ${f} <br/> Row: ${l}<br/> Value: ${c}<br/> Size: ${o}`)}).on("mouseout",function(){e.selectAll("*").classed("highlighted",!1),i.hide()});let c=r.column,o=r.row;if(c.show){let t={},n=Math.floor(this.xScale.bandwidth()/2)>12?12:Math.floor(this.xScale.bandwidth()/2);Le().key(e=>e.x).entries(this.data).forEach(e=>{t[e.key]=e.values[0].displayX});e.selectAll(".bubble-map-xlabel").data(this.xScale.domain()).enter().append("text").attr("class",(e,t)=>`bubble-map-xlabel x${t}`).attr("x",0).attr("y",0).attr("text-anchor","left"==c.textAlign?"start":"end").style("cursor","default").style("font-size",()=>`${n}px`).attr("transform",e=>{return`translate(${this.xScale(e)-n/2}, ${this.yScale.range()[1]+c.adjust}) rotate(${c.angle})`}).text(e=>t[e]||e)}if(o.show){let t={},n=Math.floor(this.yScale.bandwidth()/1.5)>14?14:Math.floor(this.yScale.bandwidth()/1.5)<10?10:Math.floor(this.yScale.bandwidth()/1.5);Le().key(e=>e.y).entries(this.data).forEach(e=>{t[e.key]=e.values[0].displayY});e.selectAll(".bubble-map-ylabel").data(this.yScale.domain()).enter().append("text").attr("class",(e,t)=>`bubble-map-ylabel y${t}`).attr("x",0).attr("y",0).attr("text-anchor","left"==o.textAlign?"start":"end").style("cursor","default").style("font-size",()=>`${n}px`).attr("transform",e=>{return`translate(${this.xScale.range()[0]-o.adjust}, ${this.yScale(e)}) rotate(${o.angle})`}).text(e=>t[e]||e)}}drawColorLegend(e,t={x:0,y:0},n=5,a="",r={h:10,w:40},i="h"){ac(a,e,this.colorScale,t,this.useLog,n,this.logBase,r,i,!0)}drawBubbleLegend(e,t={x:0,y:0,title:"Bubble legend"},n=5,a="",r="h"){e.selectAll(".bmap-bubble-legend").remove();let i=[...Array(n+1).keys()],c=(this.bubbleScale.domain()[1]-this.bubbleScale.domain()[0])/n,o=i.map(e=>this.bubbleScale.domain()[0]+e*c),f=e.append("g").attr("class","bmap-bubble-legend").attr("transform",`translate(${t.x}, ${t.y})`),l=f.selectAll(".legend").data(o).enter().append("g").classed("legend",!0);if("h"==r){f.append("text").attr("class","color-legend").text(t.title).attr("x",-10).attr("text-anchor","end").attr("y",10);let e=40;l.append("circle").attr("cx",(t,n)=>e*n).attr("cy",10).attr("r",e=>isFinite(e.r)?this.bubbleScale(e.r):this.bubbleScale.range()[1]).style("fill","#ababab"),l.append("text").attr("class","color-legend").text(e=>this.useLog?Math.pow(base,e).toPrecision(2):e.toPrecision(2)).attr("x",(t,n)=>e*n-5).attr("y",0)}else{let e=20;f.append("text").attr("class","color-legend").text(t.title).attr("x",0).attr("text-anchor","start").attr("y",e*o.length),l.append("circle").attr("cx",5).attr("cy",(t,n)=>e*n).attr("r",e=>isFinite(e)?this.bubbleScale(e):this.bubbleScale.range()[1]).style("fill","#ababab"),l.append("text").attr("class","color-legend").attr("text-anchor","start").text(e=>this.useLog?Math.pow(base,e).toPrecision(2):e.toPrecision(2)).attr("x",e).attr("y",(t,n)=>e*n+5)}}renderWithNewDomain(e,t,n={adjust:0,angle:90}){this.xScale.domain(t);let a=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:a,min:2}),e.selectAll(".bubble-map-cell").attr("cx",e=>{let t=this.xScale(e.x);return void 0===t?0:t}).attr("r",e=>{return void 0===this.xScale(e.x)?0:isFinite(e.r)?this.bubbleScale(e.r):this.bubbleScale.range()[1]});let r=Math.floor(this.xScale.bandwidth()/2)>10?10:Math.floor(this.xScale.bandwidth()/2);e.selectAll(".bubble-map-xlabel").attr("transform",e=>{return`translate(${this.xScale(e)-r/2||0}, ${this.yScale.range()[1]+n.adjust}) rotate(${n.angle})`}).style("font-size",()=>`${r}px`).style("display",e=>{return void 0===this.xScale(e)?"none":"block"})}brushed(e,t){let n=Z.selection,a=Math.round(n[0]/this.xScaleMini.step()),r=Math.round(n[1]/this.xScaleMini.step()),i=this.xScaleMini.domain().slice(a,r);return this.renderWithNewDomain(e,i,t.column),i}setScales(e={w:1e3,h:600,top:20,left:20},t){if(void 0===this.xScale&&(this.xScale=this._setXScale(e)),void 0===this.yScale&&(this.yScale=this._setYScale(e)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(t)),void 0===this.bubbleScale){let e=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:e,min:2})}}_setMiniScales(e={w:1e3,h:600,top:20,left:20},t){if(void 0===this.xScaleMini&&(this.xScaleMini=this._setXScaleMini(e)),void 0===this.yScaleMini&&(this.yScaleMini=this._setYScaleMini(e)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(t)),void 0===this.bubbleScaleMini){let e=this._setBubbleMax(!0);this.bubbleScaleMini=this._setBubbleScale({max:e,min:1})}}_parseXList(){return Le().key(e=>e.x).entries(this.data).map(e=>e.key).sort((e,t)=>e<t?-1:e>t?1:e>=t?0:NaN)}_parseYList(){return Le().key(e=>e.y).entries(this.data).map(e=>e.key).sort((e,t)=>e<t?-1:e>t?1:e>=t?0:NaN)}_setXScaleMini(e={w:1e3,left:20}){let t=this._parseXList();return this._setXScale(e,t)}_setXScale(e={w:1e3,left:20},t){return t=void 0===t?this._parseXList():t,Xe().domain(t).range([e.left,e.left+e.w]).padding(.05)}_setYScaleMini(e={h:600,top:20}){let t=this._parseYList();return this._setYScale(e,t)}_setYScale(e={h:600,top:20},t){return t=void 0===t?this._parseYList():t,Xe().domain(t).range([e.top,e.top+e.h]).padding(.05)}_setColorScale(e){let t=this.useLog;return nc(void 0===e?this.data.map(e=>t?this._log(e.value):e.value):e,this.colorScheme,void 0,void 0,!0)}_setBubbleMax(e=!1,t=2,n=10){let a=e?this.xScaleMini:this.xScale,r=e?this.yScaleMini:this.yScale,i=ve([a.bandwidth(),r.bandwidth()])/t;return n<i?n:i}_setBubbleScale(e={max:10,min:0}){const t=ve(this.data.filter(e=>isFinite(e.r)).map(e=>e.r));return On().domain([3,t]).range([e.min,e.max])}_log(e){return Math.log(Number(e+1))/Math.log(this.logBase)}}function oc(e,t,n,a,r,i="relative"){return function(e){if(ie(`#${e}`).empty()){let t=`Input Error: DOM ID ${e} is not found.`;throw console.warn(t),t}}(e),void 0===r&&(r=`${e}-svg`),void 0===a&&(a={top:0,left:0}),ie("#"+e).append("svg").attr("width",t).attr("height",n).attr("id",r).append("g").attr("transform",`translate(${a.left}, ${a.top})`)}class fc{constructor(e,t=0,n=!0,a=10,r="Greys",i=[0,1]){this.data=this._unique(e),this.dataDict={},this.cutoff=t,this.filteredData=this._filter(this.data,this.cutoff),this.dataDict=this._generateDataDict(this.filteredData),this.useLog=n,this.logBase=a,this.colorScheme=r,this.colorScale=this._setColorScale(i),this.xScale=void 0,this.yScale=void 0,this.labelScale=void 0,this.tooltip=void 0}addTooltip(e){if(ie(`#${e}`).empty())throw"DOM ID is missing: "+e;let t=e+"-tooltip";ie(`#${t}`).empty()&&ie(`#${e}`).append("div").attr("id",t),this.tooltip=new ic(t,!1,40,0),ie(`#${t}`).classed("half-map-tooltip",!0)}draw(e,t,n={w:600,top:20,left:20},a=[0,1],r=!0,i=90,c,o){this._drawCanvas(e,n,a,c,o);this.drawSvg(t,n,!1,r,i,a,c,o)}drawColorLegend(e,t={x:0,y:0},n=5,a="",r=[0,1]){void 0===this.colorScale&&this._setColorScale(r),ac(a,e,this.colorScale,t,this.useLog,n,this.logBase,{h:20,w:10},"v")}_log(e){return Math.log(Number(e+1))/Math.log(this.logBase)}_drawCanvas(e,t={w:600,top:20,left:20},n=[0,1],a,r){this._setScales(t,n,a,r);let i=e.node().getContext("2d");i.save(),i.rotate(-.25*Math.PI),i.clearRect(-t.w,-t.w,2*t.w,2*t.w),this.filteredData.forEach(e=>{let t=this.xScale(e.x)-this.xScale.bandwidth()/2,n=this.yScale(e.y)-this.yScale.bandwidth()/2;void 0!==t&&void 0!==n&&(e.color=0==e.value?"#fff":this.useLog?this.colorScale(this._log(e.value)):this.colorScale(e.value),i.fillStyle=this.colorScale(e.value),i.fillRect(t,n,this.xScale.bandwidth(),this.yScale.bandwidth()))}),i.restore()}drawSvg(e,t,n=!0,a=!0,r=90,i=[0,1],c,o){if(n){this._setScales(t,i,c,o);let n=e.append("g").attr("clip-path","url(#clip)").selectAll(".half-map-cell").data(this.filteredData);n.enter().append("rect").attr("class","half-map-cell").attr("row",e=>`y${this.yScale.domain().indexOf(e.y)}`).attr("column",e=>`x${this.xScale.domain().indexOf(e.x)}`).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).attr("x",e=>this.xScale(e.x)).attr("y",e=>this.yScale(e.y)).attr("transform","rotate(-45)").merge(n).style("fill",e=>0==e.value?"#fff":this.useLog?this.colorScale(this._log(e.value)):this.colorScale(e.value))}a&&(this._setLabelScale(t),e.selectAll().data(this.labelScale.domain()).enter().append("text").attr("class",(e,t)=>`half-map-label l${t}`).attr("x",0).attr("y",0).attr("text-anchor","start").style("cursor","none").attr("transform",e=>{return`translate(${this.labelScale(e)-this.labelScale.step()/2}, -5) rotate(-${r})`}).text(e=>e));let f=e.append("rect").attr("class","half-map-cursor").attr("x",-this.xScale.bandwidth()/2).attr("y",-this.yScale.bandwidth()/2).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("stroke","#d2111b").style("stroke-width","1px").style("fill","none").style("display","none");e.on("mouseout",()=>{f.style("display","none"),this.tooltip.hide(),e.selectAll(".half-map-label").classed("highlighted",!1)}),ie(e.node().parentNode).style("cursor","none").style("position","absolute").on("mousemove",()=>{let t=oe(e.node()),n=t[0],r=t[1],i=.25*Math.PI,c=n*Math.cos(i)-r*Math.sin(i)+this.xScale.bandwidth()/2,o=n*Math.sin(i)+r*Math.cos(i)+this.yScale.bandwidth()/2;if(n<0||r<0||c<0||o<0)return this.tooltip.hide(),void f.style("display","none");let l=Math.floor(c/this.xScale.step()),s=Math.floor(o/this.yScale.step()),u=this.xScale.domain()[l],d=this.yScale.domain()[s],h=this.dataDict[u+d];void 0!==h?(f.attr("transform",`translate(${n},${r}) rotate(-45)`),f.style("display","block"),this.tooltip.show(`${u}<br/> ${d}<br/> Value: ${h.displayValue}`),a&&(e.selectAll(".half-map-label").classed("highlighted",!1),e.select(`.l${l}`).classed("highlighted",!0),e.select(`.l${s}`).classed("highlighted",!0))):(this.tooltip.hide(),f.style("display","none"))})}_unique(e){e.sort((e,t)=>e.x<t.x?-1:e.x>t.x?1:e.y<t.y?-1:e.y>t.y?1:0);let t={};return e.filter(e=>{let n=e.x+e.y,a=e.y+e.x;return!t.hasOwnProperty(n)&&!t.hasOwnProperty(a)&&(t[n]=!0,!0)})}_filter(e,t){return e.filter(e=>!(e.value<t))}_generateDataDict(e){let t={};return e.forEach(e=>{t[e.x+e.y]=e,t[e.y+e.x]=e}),t}_setScales(e={w:600,top:20,left:20},t=[0,1],n,a){(n||void 0===this.xScale)&&this._setXScale(e,n),(a||void 0===this.yScale)&&this._setYScale(e,a),void 0===this.colorScale&&this._setColorScale(t)}_setXScale(e={w:600},t){void 0===t&&(t=Le().key(e=>e.x).entries(this.data).map(e=>e.key).sort((e,t)=>e<t?-1:e>t?1:e>=t?0:NaN)),this.xScale=Xe().domain(t).range([0,e.w/Math.sqrt(2)]).padding(.05)}_setYScale(e={w:600},t){void 0===t&&(t=Le().key(e=>e.y).entries(this.data).map(e=>e.key).sort((e,t)=>e<t?-1:e>t?1:e>=t?0:NaN)),this.yScale=Xe().domain(t).range([0,e.w/Math.sqrt(2)]).padding(.05)}_setLabelScale(e={w:600}){void 0===this.xScale&&this._setXScale();let t=this.xScale.domain();this.labelScale=Xe().domain(t).range([0,e.w]).padding(.05)}_setColorScale(e){let t=this.useLog,n=void 0===e?this.data.map(e=>t?this._log(e.value):e.value):e;this.colorScale=nc(n,this.colorScheme)}}const lc={queryGene:void 0,genes:void 0,geneModel:void 0,sqtl:void 0,eqtl:void 0},sc={genes:(e,t,n)=>{const a=t.tss-n,r=t.tss+n;return e.chromosome==t.chromosome&&e.tss>=a&&e.tss<=r&&("protein coding"==e.geneType||"lincRNA"==e.geneType)},qtls:(e,t,n)=>{const a=t.tss-n,r=t.tss+n;return e.pos>=a&&e.pos<=r}};function uc(e,t){let n=e.filter(e=>t.dataFilters.genes(e,t.data.queryGene,t.genomicWindow)).map(t.parsers.genes);return n.sort(t.dataSort.genes),n}function dc(e,t=_c){!function(e=_c){e.height=Object.keys(e.panels).reduce((t,n,a)=>{let r=e.panels[n];return r.yPos=t,t+r.height},0)}(t);const n=[p(t.urls.queryGene+e,{credentials:"include"}),h(t.urls.genes)];t.svg=oc(t.id,t.width,t.height,{left:0,top:0}),Promise.all(n).then(n=>{n[0].gene.length>1&&console.warn("More than one gene matching the query:",e),t.data.queryGene=n[0].gene[0],t.data.genes=uc(n[1],t);const a=["geneModel","eqtls","sqtls","ld"].map(e=>{const n=t.urls[e]+t.data.queryGene.gencodeId;return p(n,{credentials:"include"})});Promise.all(a).then(e=>{t.data.geneModel=e[0],t.data.eqtl=e[1],t.data.sqtl=e[2],t.data.ld=e[3],bc(t),function(e=_c){const t={eqtl:1e6==e.genomicWindow?e.data.eqtl.singleTissueEqtl:e.data.eqtl.singleTissueEqtl.filter(t=>e.dataFilters.qtls(t,e.data.queryGene,e.genomicWindow)),sqtl:1e6==e.genomicWindow?e.data.sqtl.singleTissueSqtl:e.data.sqtl.singleTissueSqtl.filter(t=>e.dataFilters.qtls(t,e.data.queryGene,e.genomicWindow))},n=gc(e,t);let a=function(e=_c,t){let n=e.data.queryGene,a=e.svg,r=e.panels.qtlMap,i=e.parsers.qtlBubbles;r.data=[],r.data=r.data.concat(t.eqtl.map(e=>i(e,"E"))),r.data=r.data.concat(t.sqtl.map(e=>i(e,"S")));let c=new cc(r.data,r.useLog,r.logBase,r.colorScheme),o=a.append("g").attr("id",r.id).attr("class","focus").attr("transform",`translate(${r.margin.left}, ${r.margin.top+r.yPos})`),f=r.width-(r.margin.left+r.margin.right),l=r.height-(r.margin.top+r.margin.bottom);return c.setScales({w:f,h:l,top:0,left:0}),c.drawColorLegend(a,{x:r.margin.left+f+20,y:r.yPos+r.margin.top},3,"NES",{h:15,w:10},"v"),c.drawBubbleLegend(a,{x:r.margin.left+f+20,y:r.yPos+r.margin.top+150,title:"-log10(p-value)"},5,"-log10(p-value)","v"),c.fullDomain=c.xScale.domain(),c.addTooltip("locus-browser","locus-browser-tooltip"),c.svg=o,function(e,t){let n="+"==e.strand?e.start:e.end,a="+"==e.strand?e.end:e.start,r=t.fullDomain;const i=e=>r.filter((t,n)=>{let a=parseFloat(t.split("_")[1]);if(a===e)return!0;if(void 0===r[n+1])return!1;let i=parseFloat(r[n+1].split("_")[1])||void 0;return(a-e)*(i-e)<0});let c=i(n),o=i(a);t.tss=c[0],t.tes=o[0]}(n,c),c}(e,t);0==e.ld.data.length&&function(e,t,n=_c){t.xScale.domain().forEach(e=>{});let a=e.ld.map(n.parsers.ld);const r={};a.forEach(e=>{r[e.x]=!0,r[e.y]=!0}),n.ld.data=a.concat(Object.keys(r).map(e=>({x:e,y:e,value:1,displayValue:"1"})))}(e.data.ld,a,e);e.ldBrush=function(e,t){let n=new fc(e.data,e.cutoff,!1,void 0,e.colorScheme,[0,1]);n.addTooltip("locus-browser");let a=ie(`#${e.id}`).append("canvas").attr("id",e.id+"-ld-canvas").attr("width",e.width).attr("height",e.width).style("position","absolute");a.node().getContext("2d").translate(e.margin.left,e.margin.top);let r=oc(e.id,e.width,e.width,{top:e.margin.top,left:e.margin.left});r.attr("class","ld").attr("id","ldG");const i=ie(r.node().parentNode);n.drawColorLegend(i,{x:e.margin.left,y:100},10,"LD");const c={w:e.width-(e.margin.left+e.margin.right),top:0,left:0};return n.draw(a,r,c,[0,1],!1,void 0,t.xScale.domain(),t.xScale.domain()),()=>{r.selectAll("*").remove(),n.draw(a,r,c,[0,1],!1,void 0,t.xScale.domain(),t.xScale.domain())}}(e.ld,a),a.drawSvg(a.svg,{w:Math.abs(a.xScale.range()[1]-a.xScale.range()[0]),h:Math.abs(a.yScale.range()[1]-a.yScale.range()[0]),top:0,left:0}),vc(a,a.svg),mc(e.data.queryGene,n,a,e,e.ldBrush),e.bmap=a}(t)}).catch(e=>{console.error(e)})}).catch(e=>{console.error(e)})}function hc(e,t){Object.keys(t.panels).forEach(e=>{console.log(e);let n=t.panels[e];"qtl-map"!=n.id&&ie(`#${n.id}`).remove()}),ie("#zoom-size").text(`genomic range: ${(2*t.genomicWindow).toLocaleString()} bases`),bc(t);let n=gc(t);mc(t.data.queryGene,n,t.bmap,t,t.ldBrush)}function bc(e=_c){let t=e.data.genes,n=e.data.queryGene,a=e.svg;t.forEach(e=>{});const r=function(e){let t=e.data.queryGene,n=e.svg,a=e.panels.geneMap,r=a.width-(a.margin.left+a.margin.right),i=a.height-(a.margin.top+a.margin.bottom);if(r*i<=0)throw"The inner height and width of the GWAS heatmap panel must both be positive values. Check the height and margin configuration of this panel";let c=uc(e.data.genes,e),o=Xe().domain(c.map(e=>e.geneSymbol)).range([0,r]).padding(.05),f=Ee(o).tickSize(0);const l=n.append("g").attr("id",a.id);return l.attr("transform",`translate(${a.margin.left}, ${a.margin.top+i})`).call(f).selectAll("text").attr("y",0).attr("x",0).attr("dy",".35em").attr("transform","rotate(-90)").style("text-anchor","start").style("color",e=>e==t.geneSymbol?"red":"black"),l.select(".domain").remove(),l.selectAll(".tick").style("cursor","pointer").on("click",t=>{ie("#"+e.id).selectAll("*").remove(),ie("#"+e.ldId).selectAll("*").remove(),e.data=lc,e.panels.eqtlTrack.data=null,e.panels.sqtlTrack.data=null,e.ld.data=[],dc(t,e)}),o}(e),i={tssTrack:t,exonTrack:e.data.geneModel.collapsedGeneModelExon},c=function(e,t,n=_c,a){let r=n.panels.tssTrack;r.data=a.tssTrack;const i=yc(e.tss,t,n.genomicWindow,r,!1);let c=n.parsers.geneModel,o=a.exonTrack.map(c),f=n.panels.geneModelTrack;return f.data=o,yc(e.tss,t,n.genomicWindow,f,!0),i}(n,a,e,i);let o=e.panels.geneMap,f=e.panels.tssTrack,l=o.margin.left-f.margin.left+r.bandwidth()/2,s=f.height-(f.margin.top+f.margin.bottom);return c.svg.selectAll(".connect").data(t.filter(e=>r.domain().indexOf(e.geneSymbol)>=0)).enter().append("line").attr("class","connect").attr("x1",e=>r(e.geneSymbol)+l).attr("x2",e=>c.scale(e.tss)).attr("y1",s/2-20).attr("y2",s/2).attr("stroke",e=>e.geneSymbol==n.geneSymbol?"red":"#ababab").attr("stroke-width",.5),c.svg.selectAll(".connect2").data(t.filter(e=>r.domain().indexOf(e.geneSymbol)>=0)).enter().append("line").attr("class","connect2").attr("x1",e=>r(e.geneSymbol)+l).attr("x2",e=>r(e.geneSymbol)+l).attr("y1",s/2-20).attr("y2",s/2-50).attr("stroke",e=>e.geneSymbol==n.geneSymbol?"red":"#ababab").attr("stroke-width",.5),t}function pc(e,t=_c){const n=t.parsers.qtlFeatures,a=t.dataSort.variants;let r=e.reduce((e,t)=>(e.hasOwnProperty(t.variantId)?e[t.variantId].pValue>t.pValue&&(e[t.variantId]=t):e[t.variantId]=t,e),{}),i=Object.values(r).map(n);return i.sort(a),i}function gc(e=_c,t){let n=e.data.queryGene,a=e.svg,r=e.panels.eqtlTrack,i=e.panels.sqtlTrack;null!==r.data&&null!==i.data||(r.data=pc(t.eqtl,e),i.data=pc(t.sqtl,e));return yc(n.tss,a,e.genomicWindow,r,!1,!0,30),yc(n.tss,a,e.genomicWindow,i,!1,!0,30)}function mc(e,t,n,a=_c,r){const i=a.panels.qtlMap,c=a.panels.sqtlTrack;let o={w:1e6/a.genomicWindow*50,h:Math.abs(a.panels.tssTrack.yPos+a.panels.tssTrack.margin.top-(a.panels.sqtlTrack.yPos+a.panels.sqtlTrack.height+20))};rc.renderAxis(t.dom,t.scale,c.height+30,!0,(e,t,a,o)=>{let f=n.fullDomain.filter(e=>{let t=parseInt(e.split("_")[1]);return t>=a&&t<=o});n.renderWithNewDomain(n.svg,f),vc(n,n.svg),void 0!==r&&r(),fe(".brushLine").remove(),ie(".brush").append("line").classed("brushLine",!0).attr("x1",e).attr("x2",n.xScale.range()[0]+i.margin.left-c.margin.left).attr("y1",20).attr("y2",60).style("stroke-width",1).style("stroke","#ababab"),ie(".brush").append("line").classed("brushLine",!0).attr("x1",t).attr("x2",n.xScale.range()[1]+i.margin.left-c.margin.left).attr("y1",20).attr("y2",60).style("stroke-width",1).style("stroke","#ababab")},o,e.tss)}function yc(e,t,n,a=_c.panels.tssTrack,r,i=!1,c){let o=a.width-(a.margin.left+a.margin.right),f=a.height-(a.margin.top+a.margin.bottom),l=t.append("g").attr("id",a.id).attr("transform",`translate(${a.margin.left}, ${a.margin.top+a.yPos})`),s=new rc(a.data,e,n);return s.render(l,o,f,r,a.label,a.color.background,a.color.feature,i,c),s.svg=l,s}function vc(e,t){ie("#siteMarkers").selectAll("*").remove(),ie("#siteMarkers").remove();let n=t.append("g").attr("id","siteMarkers");e.tss&&e.xScale(e.tss)&&(n.append("line").attr("x1",e.xScale(e.tss)+e.xScale.bandwidth()/2).attr("x2",e.xScale(e.tss)+e.xScale.bandwidth()/2).attr("y1",-10).attr("y2",e.yScale.range()[1]).style("stroke","#94a8b8").style("stroke-width",2),n.append("text").text("TSS").attr("x",e.xScale(e.tss)).attr("y",-12).attr("text-anchor","center").style("font-size","12px")),e.tes&&e.xScale(e.tes)&&(n.append("line").attr("x1",e.xScale(e.tes)+e.xScale.bandwidth()/2).attr("x2",e.xScale(e.tes)+e.xScale.bandwidth()/2).attr("y1",-10).attr("y2",e.yScale.range()[1]).style("stroke","#748797").style("stroke-width",2),n.append("text").text("TES").attr("x",e.xScale(e.tes)).attr("y",-12).attr("text-anchor","center").style("font-size","12px"))}const wc=window.innerWidth,xc="https://dev.gtexportal.org/rest/v1/",_c={id:"locus-browser",ldId:"ld-browser",width:wc,height:null,genomicWindow:1e6,data:lc,urls:{queryGene:xc+"reference/gene?format=json&gencodeVersion=v26&genomeBuild=GRCh38%2Fhg38&geneId=",genes:"../tempData/V8.genes.csv",geneExpression:xc+"expression/medianGeneExpression?datasetId=gtex_v8&hcluster=true&pageSize=10000&gencodeId=",geneModel:xc+"dataset/collapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",eqtls:xc+"association/singleTissueEqtl?format=json&datasetId=gtex_v8&gencodeId=",sqtls:xc+"association/singleTissueSqtl?format=json&datasetId=gtex_v8&gencodeId=",ld:xc+"dataset/ld?format=json&datasetId=gtex_v8&gencodeId="},parsers:{genes:e=>(e.start=parseInt(e.start),e.end=parseInt(e.end),e.pos=parseInt(e.tss),e.featureLabel=e.geneSymbol,e.featureType=e.geneType,e),geneModel:e=>(e.start=parseInt(e.start),e.end=parseInt(e.end),e.pos=e.start,e.featureLabel=e.exonId,e),geneExpression:e=>(e.x=e.geneSymbol,e.y=e.tissueSiteDetailId,e.value=e.median,e.displayValue=e.value,e),qtlFeatures:e=>(e.chr=e.chromosome,e.start=parseInt(e.pos),e.end=e.start,e.pos=parseInt(e.pos),e.featureType="variant",e.featureLabel=e.snpId||e.variantId,e.colorValue=-Math.log10(parseFloat(e.pValue)),e),qtlBubbles:(e,t)=>(e.x=e.variantId,e.y=e.tissueSiteDetailId+"-"+t,e.value=parseFloat(e.nes),e.r=-Math.log10(parseFloat(e.pValue)),e),ld:e=>{let t=e[0].split(",");return{x:t[0],y:t[1],value:e[1],displayValue:e[1].toPrecision(3)}}},dataFilters:sc,dataSort:{genes:(e,t)=>parseInt(e.tss)-parseInt(t.tss),geneExpression:(e,t)=>parseInt(e.pos)-parseInt(t.pos),variants:(e,t)=>parseInt(e.pos)-parseInt(t.pos)},panels:{geneMap:{id:"gene-map",data:null,useLog:!0,logBase:null,margin:{top:0,right:100,bottom:0,left:80},width:wc,height:100,colorScheme:"YlGnBu",cornerRadius:2,columnLabel:{angle:90,adjust:10},rowLabel:{width:100}},tssTrack:{id:"tss-track",label:"TSS location",data:null,yPos:null,margin:{top:50,right:50,bottom:0,left:80},width:wc,height:70,color:{background:"#ffffff",feature:"#ababab"}},geneModelTrack:{id:"gene-model-track",label:"Gene model",yPos:null,margin:{top:0,right:50,bottom:10,left:80},width:wc,height:30,color:{background:"#ffffff",feature:"#910807"}},eqtlTrack:{id:"eqtl-track",label:"eQTL summary",data:null,yPos:null,margin:{top:0,right:50,bottom:0,left:80},width:wc,height:20,color:{background:"#ffffff",feature:"#ababab"}},sqtlTrack:{id:"sqtl-track",label:"sQTL summary",data:null,yPos:null,margin:{top:0,right:50,bottom:0,left:80},width:wc,height:20,color:{background:"#ffffff",feature:"#ababab"}},qtlMap:{id:"qtl-map",width:wc,data:null,yPos:null,margin:{top:100,right:100,bottom:120,left:200},height:500,colorScheme:"RdBu",colorScaleDomain:[-1,1],useLog:!1,logBase:null,label:{column:{show:!0,angle:90,adjust:10,location:"bottom",textAlign:"left"},row:{show:!0,width:150,angle:0,adjust:0,location:"left",textAlign:"right"}}}},ld:{id:"ld-browser",data:[],cutoff:.1,width:wc,margin:{top:10,right:100,bottom:0,left:200},colorScheme:"Greys"}};return e.data=lc,e.dataFilters=sc,e.render=dc,e.setUIEvents=function(e,t){ie("#zoom-plus").style("cursor","pointer").on("click",()=>{t.genomicWindow=t.genomicWindow<=1e4?1e4:t.genomicWindow/2,hc(0,t)}),ie("#zoom-minus").style("cursor","pointer").on("click",()=>{t.genomicWindow=t.genomicWindow>=1e6?1e6:2*t.genomicWindow,hc(0,t)}),ie("#zoom-reset").style("cursor","pointer").on("click",()=>{t.genomicWindow=1e6,console.log(t.genomicWindow),hc(0,t)}),ie("#zoom-size").text(`genomic range: ${(2*t.genomicWindow).toLocaleString()} bases`)},e}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
