var LocusBrowser=function(t){"use strict";var e={},n={},a=34,r=10,i=13;function o(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}var c=function(t){var c=new RegExp('["'+t+"\n\r]"),s=t.charCodeAt(0);function l(t,o){var c,l=[],f=t.length,u=0,d=0,h=f<=0,b=!1;function p(){if(h)return n;if(b)return b=!1,e;var o,c,l=u;if(t.charCodeAt(l)===a){for(;u++<f&&t.charCodeAt(u)!==a||t.charCodeAt(++u)===a;);return(o=u)>=f?h=!0:(c=t.charCodeAt(u++))===r?b=!0:c===i&&(b=!0,t.charCodeAt(u)===r&&++u),t.slice(l+1,o-1).replace(/""/g,'"')}for(;u<f;){if((c=t.charCodeAt(o=u++))===r)b=!0;else if(c===i)b=!0,t.charCodeAt(u)===r&&++u;else if(c!==s)continue;return t.slice(l,o)}return h=!0,t.slice(l,f)}for(t.charCodeAt(f-1)===r&&--f,t.charCodeAt(f-1)===i&&--f;(c=p())!==n;){for(var g=[];c!==e&&c!==n;)g.push(c),c=p();o&&null==(g=o(g,d++))||l.push(g)}return l}function f(e){return e.map(u).join(t)}function u(t){return null==t?"":c.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,a,r=l(t,function(t,r){if(n)return n(t,r-1);a=t,n=e?function(t,e){var n=o(t);return function(a,r){return e(n(a),r,t)}}(t,e):o(t)});return r.columns=a||[],r},parseRows:l,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var a in t)a in e||n.push(e[a]=a)}),n}(e)),[n.map(u).join(t)].concat(e.map(function(e){return n.map(function(t){return u(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(f).join("\n")}}},s=c(",").parse,l=c("\t").parse;function f(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var u=function(t,e){return fetch(t,e).then(f)};function d(t){return function(e,n,a){return 2===arguments.length&&"function"==typeof n&&(a=n,n=void 0),u(e,n).then(function(e){return t(e,a)})}}d(s);var h=d(l);function b(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var p=function(t,e){return fetch(t,e).then(b)},g="http://www.w3.org/1999/xhtml",m={svg:"http://www.w3.org/2000/svg",xhtml:g,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},y=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),m.hasOwnProperty(e)?{space:m[e],local:t}:t};var v=function(t){var e=y(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===g&&e.documentElement.namespaceURI===g?e.createElement(t):e.createElementNS(n,t)}})(e)};function w(){}var x=function(t){return null==t?w:function(){return this.querySelector(t)}};function _(){return[]}var S=function(t){return null==t?_:function(){return this.querySelectorAll(t)}},M=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var A=document.documentElement;if(!A.matches){var k=A.webkitMatchesSelector||A.msMatchesSelector||A.mozMatchesSelector||A.oMatchesSelector;M=function(t){return function(){return k.call(this,t)}}}}var T=M,C=function(t){return new Array(t.length)};function D(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}D.prototype={constructor:D,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var N="$";function L(t,e,n,a,r,i){for(var o,c=0,s=e.length,l=i.length;c<l;++c)(o=e[c])?(o.__data__=i[c],a[c]=o):n[c]=new D(t,i[c]);for(;c<s;++c)(o=e[c])&&(r[c]=o)}function E(t,e,n,a,r,i,o){var c,s,l,f={},u=e.length,d=i.length,h=new Array(u);for(c=0;c<u;++c)(s=e[c])&&(h[c]=l=N+o.call(s,s.__data__,c,e),l in f?r[c]=s:f[l]=s);for(c=0;c<d;++c)(s=f[l=N+o.call(t,i[c],c,i)])?(a[c]=s,s.__data__=i[c],f[l]=null):n[c]=new D(t,i[c]);for(c=0;c<u;++c)(s=e[c])&&f[h[c]]===s&&(r[c]=s)}function q(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var I=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function P(t,e){return t.style.getPropertyValue(e)||I(t).getComputedStyle(t,null).getPropertyValue(e)}function U(t){return t.trim().split(/^|\s+/)}function F(t){return t.classList||new Y(t)}function Y(t){this._node=t,this._names=U(t.getAttribute("class")||"")}function G(t,e){for(var n=F(t),a=-1,r=e.length;++a<r;)n.add(e[a])}function z(t,e){for(var n=F(t),a=-1,r=e.length;++a<r;)n.remove(e[a])}Y.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function O(){this.textContent=""}function B(){this.innerHTML=""}function V(){this.nextSibling&&this.parentNode.appendChild(this)}function j(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function W(){return null}function X(){var t=this.parentNode;t&&t.removeChild(this)}function R(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function H(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Z={},Q=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Z={mouseenter:"mouseover",mouseleave:"mouseout"}));function J(t,e,n){return t=K(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function K(t,e,n){return function(a){var r=Q;Q=a;try{t.call(this,this.__data__,e,n)}finally{Q=r}}}function tt(t){return function(){var e=this.__on;if(e){for(var n,a=0,r=-1,i=e.length;a<i;++a)n=e[a],t.type&&n.type!==t.type||n.name!==t.name?e[++r]=n:this.removeEventListener(n.type,n.listener,n.capture);++r?e.length=r:delete this.__on}}}function et(t,e,n){var a=Z.hasOwnProperty(t.type)?J:K;return function(r,i,o){var c,s=this.__on,l=a(e,i,o);if(s)for(var f=0,u=s.length;f<u;++f)if((c=s[f]).type===t.type&&c.name===t.name)return this.removeEventListener(c.type,c.listener,c.capture),this.addEventListener(c.type,c.listener=l,c.capture=n),void(c.value=e);this.addEventListener(t.type,l,n),c={type:t.type,name:t.name,value:e,listener:l,capture:n},s?s.push(c):this.__on=[c]}}function nt(t,e,n){var a=I(t),r=a.CustomEvent;"function"==typeof r?r=new r(e,n):(r=a.document.createEvent("Event"),n?(r.initEvent(e,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(e,!1,!1)),t.dispatchEvent(r)}var at=[null];function rt(t,e){this._groups=t,this._parents=e}function it(){return new rt([[document.documentElement]],at)}rt.prototype=it.prototype={constructor:rt,select:function(t){"function"!=typeof t&&(t=x(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o,c=e[r],s=c.length,l=a[r]=new Array(s),f=0;f<s;++f)(i=c[f])&&(o=t.call(i,i.__data__,f,c))&&("__data__"in i&&(o.__data__=i.__data__),l[f]=o);return new rt(a,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=S(t));for(var e=this._groups,n=e.length,a=[],r=[],i=0;i<n;++i)for(var o,c=e[i],s=c.length,l=0;l<s;++l)(o=c[l])&&(a.push(t.call(o,o.__data__,l,c)),r.push(o));return new rt(a,r)},filter:function(t){"function"!=typeof t&&(t=T(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o=e[r],c=o.length,s=a[r]=[],l=0;l<c;++l)(i=o[l])&&t.call(i,i.__data__,l,o)&&s.push(i);return new rt(a,this._parents)},data:function(t,e){if(!t)return b=new Array(this.size()),f=-1,this.each(function(t){b[++f]=t}),b;var n,a=e?E:L,r=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var o=i.length,c=new Array(o),s=new Array(o),l=new Array(o),f=0;f<o;++f){var u=r[f],d=i[f],h=d.length,b=t.call(u,u&&u.__data__,f,r),p=b.length,g=s[f]=new Array(p),m=c[f]=new Array(p);a(u,d,g,m,l[f]=new Array(h),b,e);for(var y,v,w=0,x=0;w<p;++w)if(y=g[w]){for(w>=x&&(x=w+1);!(v=m[x])&&++x<p;);y._next=v||null}}return(c=new rt(c,r))._enter=s,c._exit=l,c},enter:function(){return new rt(this._enter||this._groups.map(C),this._parents)},exit:function(){return new rt(this._exit||this._groups.map(C),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,a=e.length,r=n.length,i=Math.min(a,r),o=new Array(a),c=0;c<i;++c)for(var s,l=e[c],f=n[c],u=l.length,d=o[c]=new Array(u),h=0;h<u;++h)(s=l[h]||f[h])&&(d[h]=s);for(;c<a;++c)o[c]=e[c];return new rt(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var a,r=t[e],i=r.length-1,o=r[i];--i>=0;)(a=r[i])&&(o&&o!==a.nextSibling&&o.parentNode.insertBefore(a,o),o=a);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=q);for(var n=this._groups,a=n.length,r=new Array(a),i=0;i<a;++i){for(var o,c=n[i],s=c.length,l=r[i]=new Array(s),f=0;f<s;++f)(o=c[f])&&(l[f]=o);l.sort(e)}return new rt(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var a=t[e],r=0,i=a.length;r<i;++r){var o=a[r];if(o)return o}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,a=e.length;n<a;++n)for(var r,i=e[n],o=0,c=i.length;o<c;++o)(r=i[o])&&t.call(r,r.__data__,o,i);return this},attr:function(t,e){var n=y(t);if(arguments.length<2){var a=this.node();return n.local?a.getAttributeNS(n.space,n.local):a.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var a=e.apply(this,arguments);null==a?this.style.removeProperty(t):this.style.setProperty(t,a,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):P(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=U(t+"");if(arguments.length<2){for(var a=F(this.node()),r=-1,i=n.length;++r<i;)if(!a.contains(n[r]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?G:z)(this,t)}}:e?function(t){return function(){G(this,t)}}:function(t){return function(){z(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?O:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?B:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(V)},lower:function(){return this.each(j)},append:function(t){var e="function"==typeof t?t:v(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:v(t),a=null==e?W:"function"==typeof e?e:x(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),a.apply(this,arguments)||null)})},remove:function(){return this.each(X)},clone:function(t){return this.select(t?H:R)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var a,r,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),o=i.length;if(!(arguments.length<2)){for(c=e?et:tt,null==n&&(n=!1),a=0;a<o;++a)this.each(c(i[a],e,n));return this}var c=this.node().__on;if(c)for(var s,l=0,f=c.length;l<f;++l)for(a=0,s=c[l];a<o;++a)if((r=i[a]).type===s.type&&r.name===s.name)return s.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return nt(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return nt(this,t,e)}})(t,e))}};var ot=function(t){return"string"==typeof t?new rt([[document.querySelector(t)]],[document.documentElement]):new rt([[t]],at)},ct=function(){for(var t,e=Q;t=e.sourceEvent;)e=t;return e},st=function(t){var e=ct();return e.changedTouches&&(e=e.changedTouches[0]),function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var a=n.createSVGPoint();return a.x=e.clientX,a.y=e.clientY,[(a=a.matrixTransform(t.getScreenCTM().inverse())).x,a.y]}var r=t.getBoundingClientRect();return[e.clientX-r.left-t.clientLeft,e.clientY-r.top-t.clientTop]}(t,e)},lt=function(t){return"string"==typeof t?new rt([document.querySelectorAll(t)],[document.documentElement]):new rt([null==t?[]:t],at)},ft=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN};var ut,dt,ht=(1===(ut=ft).length&&(dt=ut,ut=function(t,e){return ft(dt(t),e)}),{left:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){var r=n+a>>>1;ut(t[r],e)<0?n=r+1:a=r}return n},right:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){var r=n+a>>>1;ut(t[r],e)>0?a=r:n=r+1}return n}}).right,bt=function(t,e,n){t=+t,e=+e,n=(r=arguments.length)<2?(e=t,t=0,1):r<3?1:+n;for(var a=-1,r=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(r);++a<r;)i[a]=t+a*n;return i},pt=Math.sqrt(50),gt=Math.sqrt(10),mt=Math.sqrt(2),yt=function(t,e,n){var a,r,i,o,c=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((a=e<t)&&(r=t,t=e,e=r),0===(o=vt(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),i=new Array(r=Math.ceil(e-t+1));++c<r;)i[c]=(t+c)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),i=new Array(r=Math.ceil(t-e+1));++c<r;)i[c]=(t-c)/o;return a&&i.reverse(),i};function vt(t,e,n){var a=(e-t)/Math.max(0,n),r=Math.floor(Math.log(a)/Math.LN10),i=a/Math.pow(10,r);return r>=0?(i>=pt?10:i>=gt?5:i>=mt?2:1)*Math.pow(10,r):-Math.pow(10,-r)/(i>=pt?10:i>=gt?5:i>=mt?2:1)}var wt=function(t,e){var n,a,r=t.length,i=-1;if(null==e){for(;++i<r;)if(null!=(n=t[i])&&n>=n)for(a=n;++i<r;)null!=(n=t[i])&&n>a&&(a=n)}else for(;++i<r;)if(null!=(n=e(t[i],i,t))&&n>=n)for(a=n;++i<r;)null!=(n=e(t[i],i,t))&&n>a&&(a=n);return a},xt=function(t,e){var n,a,r=t.length,i=-1;if(null==e){for(;++i<r;)if(null!=(n=t[i])&&n>=n)for(a=n;++i<r;)null!=(n=t[i])&&a>n&&(a=n)}else for(;++i<r;)if(null!=(n=e(t[i],i,t))&&n>=n)for(a=n;++i<r;)null!=(n=e(t[i],i,t))&&a>n&&(a=n);return a},_t=Array.prototype.slice,St=function(t){return t},Mt=1,At=2,kt=3,Tt=4,$t=1e-6;function Ct(t){return"translate("+(t+.5)+",0)"}function Dt(t){return"translate(0,"+(t+.5)+")"}function Nt(){return!this.__axis}function Lt(t,e){var n=[],a=null,r=null,i=6,o=6,c=3,s=t===Mt||t===Tt?-1:1,l=t===Tt||t===At?"x":"y",f=t===Mt||t===kt?Ct:Dt;function u(u){var d=null==a?e.ticks?e.ticks.apply(e,n):e.domain():a,h=null==r?e.tickFormat?e.tickFormat.apply(e,n):St:r,b=Math.max(i,0)+c,p=e.range(),g=+p[0]+.5,m=+p[p.length-1]+.5,y=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),v=u.selection?u.selection():u,w=v.selectAll(".domain").data([null]),x=v.selectAll(".tick").data(d,e).order(),_=x.exit(),S=x.enter().append("g").attr("class","tick"),M=x.select("line"),A=x.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(S),M=M.merge(S.append("line").attr("stroke","currentColor").attr(l+"2",s*i)),A=A.merge(S.append("text").attr("fill","currentColor").attr(l,s*b).attr("dy",t===Mt?"0em":t===kt?"0.71em":"0.32em")),u!==v&&(w=w.transition(u),x=x.transition(u),M=M.transition(u),A=A.transition(u),_=_.transition(u).attr("opacity",$t).attr("transform",function(t){return isFinite(t=y(t))?f(t):this.getAttribute("transform")}),S.attr("opacity",$t).attr("transform",function(t){var e=this.parentNode.__axis;return f(e&&isFinite(e=e(t))?e:y(t))})),_.remove(),w.attr("d",t===Tt||t==At?o?"M"+s*o+","+g+"H0.5V"+m+"H"+s*o:"M0.5,"+g+"V"+m:o?"M"+g+","+s*o+"V0.5H"+m+"V"+s*o:"M"+g+",0.5H"+m),x.attr("opacity",1).attr("transform",function(t){return f(y(t))}),M.attr(l+"2",s*i),A.attr(l,s*b).text(h),v.filter(Nt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===At?"start":t===Tt?"end":"middle"),v.each(function(){this.__axis=y})}return u.scale=function(t){return arguments.length?(e=t,u):e},u.ticks=function(){return n=_t.call(arguments),u},u.tickArguments=function(t){return arguments.length?(n=null==t?[]:_t.call(t),u):n.slice()},u.tickValues=function(t){return arguments.length?(a=null==t?null:_t.call(t),u):a&&a.slice()},u.tickFormat=function(t){return arguments.length?(r=t,u):r},u.tickSize=function(t){return arguments.length?(i=o=+t,u):i},u.tickSizeInner=function(t){return arguments.length?(i=+t,u):i},u.tickSizeOuter=function(t){return arguments.length?(o=+t,u):o},u.tickPadding=function(t){return arguments.length?(c=+t,u):c},u}function Et(t){return Lt(Mt,t)}function qt(t){return Lt(kt,t)}function It(t){return Lt(Tt,t)}function Pt(){}function Ut(t,e){var n=new Pt;if(t instanceof Pt)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var a,r=-1,i=t.length;if(null==e)for(;++r<i;)n.set(r,t[r]);else for(;++r<i;)n.set(e(a=t[r],r,t),a)}else if(t)for(var o in t)n.set(o,t[o]);return n}Pt.prototype=Ut.prototype={constructor:Pt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var Ft=function(){var t,e,n,a=[],r=[];function i(n,r,o,c){if(r>=a.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var s,l,f,u=-1,d=n.length,h=a[r++],b=Ut(),p=o();++u<d;)(f=b.get(s=h(l=n[u])+""))?f.push(l):b.set(s,[l]);return b.each(function(t,e){c(p,e,i(t,r,o,c))}),p}return n={object:function(t){return i(t,0,Yt,Gt)},map:function(t){return i(t,0,zt,Ot)},entries:function(t){return function t(n,i){if(++i>a.length)return n;var o,c=r[i-1];return null!=e&&i>=a.length?o=n.entries():(o=[],n.each(function(e,n){o.push({key:n,values:t(e,i)})})),null!=c?o.sort(function(t,e){return c(t.key,e.key)}):o}(i(t,0,zt,Ot),0)},key:function(t){return a.push(t),n},sortKeys:function(t){return r[a.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}};function Yt(){return{}}function Gt(t,e,n){t[e]=n}function zt(){return Ut()}function Ot(t,e,n){t.set(e,n)}var Bt=Array.prototype,Vt=Bt.map,jt=Bt.slice,Wt={name:"implicit"};function Xt(){var t,e,n=function t(e){var n=Ut(),a=[],r=Wt;function i(t){var i=t+"",o=n.get(i);if(!o){if(r!==Wt)return r;n.set(i,o=a.push(t))}return e[(o-1)%e.length]}return e=null==e?[]:jt.call(e),i.domain=function(t){if(!arguments.length)return a.slice();a=[],n=Ut();for(var e,r,o=-1,c=t.length;++o<c;)n.has(r=(e=t[o])+"")||n.set(r,a.push(e));return i},i.range=function(t){return arguments.length?(e=jt.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return t().domain(a).range(e).unknown(r)},i}().unknown(void 0),a=n.domain,r=n.range,i=[0,1],o=!1,c=0,s=0,l=.5;function f(){var n=a().length,f=i[1]<i[0],u=i[f-0],d=i[1-f];t=(d-u)/Math.max(1,n-c+2*s),o&&(t=Math.floor(t)),u+=(d-u-t*(n-c))*l,e=t*(1-c),o&&(u=Math.round(u),e=Math.round(e));var h=bt(n).map(function(e){return u+t*e});return r(f?h.reverse():h)}return delete n.unknown,n.domain=function(t){return arguments.length?(a(t),f()):a()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],f()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],o=!0,f()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(o=!!t,f()):o},n.padding=function(t){return arguments.length?(c=s=Math.max(0,Math.min(1,t)),f()):c},n.paddingInner=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),f()):c},n.paddingOuter=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),f()):s},n.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),f()):l},n.copy=function(){return Xt().domain(a()).range(i).round(o).paddingInner(c).paddingOuter(s).align(l)},f()}var Rt=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function Ht(t,e){var n=Object.create(t.prototype);for(var a in e)n[a]=e[a];return n}function Zt(){}var Qt="\\s*([+-]?\\d+)\\s*",Jt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Kt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",te=/^#([0-9a-f]{3})$/,ee=/^#([0-9a-f]{6})$/,ne=new RegExp("^rgb\\("+[Qt,Qt,Qt]+"\\)$"),ae=new RegExp("^rgb\\("+[Kt,Kt,Kt]+"\\)$"),re=new RegExp("^rgba\\("+[Qt,Qt,Qt,Jt]+"\\)$"),ie=new RegExp("^rgba\\("+[Kt,Kt,Kt,Jt]+"\\)$"),oe=new RegExp("^hsl\\("+[Jt,Kt,Kt]+"\\)$"),ce=new RegExp("^hsla\\("+[Jt,Kt,Kt,Jt]+"\\)$"),se={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function le(t){var e;return t=(t+"").trim().toLowerCase(),(e=te.exec(t))?new be((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=ee.exec(t))?fe(parseInt(e[1],16)):(e=ne.exec(t))?new be(e[1],e[2],e[3],1):(e=ae.exec(t))?new be(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=re.exec(t))?ue(e[1],e[2],e[3],e[4]):(e=ie.exec(t))?ue(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=oe.exec(t))?ge(e[1],e[2]/100,e[3]/100,1):(e=ce.exec(t))?ge(e[1],e[2]/100,e[3]/100,e[4]):se.hasOwnProperty(t)?fe(se[t]):"transparent"===t?new be(NaN,NaN,NaN,0):null}function fe(t){return new be(t>>16&255,t>>8&255,255&t,1)}function ue(t,e,n,a){return a<=0&&(t=e=n=NaN),new be(t,e,n,a)}function de(t){return t instanceof Zt||(t=le(t)),t?new be((t=t.rgb()).r,t.g,t.b,t.opacity):new be}function he(t,e,n,a){return 1===arguments.length?de(t):new be(t,e,n,null==a?1:a)}function be(t,e,n,a){this.r=+t,this.g=+e,this.b=+n,this.opacity=+a}function pe(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function ge(t,e,n,a){return a<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new me(t,e,n,a)}function me(t,e,n,a){this.h=+t,this.s=+e,this.l=+n,this.opacity=+a}function ye(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Rt(Zt,le,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),Rt(be,he,Ht(Zt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new be(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new be(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+pe(this.r)+pe(this.g)+pe(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Rt(me,function(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof me)return new me(t.h,t.s,t.l,t.opacity);if(t instanceof Zt||(t=le(t)),!t)return new me;if(t instanceof me)return t;var e=(t=t.rgb()).r/255,n=t.g/255,a=t.b/255,r=Math.min(e,n,a),i=Math.max(e,n,a),o=NaN,c=i-r,s=(i+r)/2;return c?(o=e===i?(n-a)/c+6*(n<a):n===i?(a-e)/c+2:(e-n)/c+4,c/=s<.5?i+r:2-i-r,o*=60):c=s>0&&s<1?0:o,new me(o,c,s,t.opacity)}(t):new me(t,e,n,null==a?1:a)},Ht(Zt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new me(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new me(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,a=n+(n<.5?n:1-n)*e,r=2*n-a;return new be(ye(t>=240?t-240:t+120,r,a),ye(t,r,a),ye(t<120?t+240:t-120,r,a),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var ve=Math.PI/180,we=180/Math.PI,xe=.96422,_e=1,Se=.82521,Me=4/29,Ae=6/29,ke=3*Ae*Ae,Te=Ae*Ae*Ae;function $e(t){if(t instanceof Ce)return new Ce(t.l,t.a,t.b,t.opacity);if(t instanceof qe){if(isNaN(t.h))return new Ce(t.l,0,0,t.opacity);var e=t.h*ve;return new Ce(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof be||(t=de(t));var n,a,r=Ee(t.r),i=Ee(t.g),o=Ee(t.b),c=De((.2225045*r+.7168786*i+.0606169*o)/_e);return r===i&&i===o?n=a=c:(n=De((.4360747*r+.3850649*i+.1430804*o)/xe),a=De((.0139322*r+.0971045*i+.7141733*o)/Se)),new Ce(116*c-16,500*(n-c),200*(c-a),t.opacity)}function Ce(t,e,n,a){this.l=+t,this.a=+e,this.b=+n,this.opacity=+a}function De(t){return t>Te?Math.pow(t,1/3):t/ke+Me}function Ne(t){return t>Ae?t*t*t:ke*(t-Me)}function Le(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ee(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function qe(t,e,n,a){this.h=+t,this.c=+e,this.l=+n,this.opacity=+a}Rt(Ce,function(t,e,n,a){return 1===arguments.length?$e(t):new Ce(t,e,n,null==a?1:a)},Ht(Zt,{brighter:function(t){return new Ce(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Ce(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new be(Le(3.1338561*(e=xe*Ne(e))-1.6168667*(t=_e*Ne(t))-.4906146*(n=Se*Ne(n))),Le(-.9787684*e+1.9161415*t+.033454*n),Le(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Rt(qe,function(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof qe)return new qe(t.h,t.c,t.l,t.opacity);if(t instanceof Ce||(t=$e(t)),0===t.a&&0===t.b)return new qe(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*we;return new qe(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new qe(t,e,n,null==a?1:a)},Ht(Zt,{brighter:function(t){return new qe(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new qe(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return $e(this).rgb()}}));var Ie=-.14861,Pe=1.78277,Ue=-.29227,Fe=-.90649,Ye=1.97294,Ge=Ye*Fe,ze=Ye*Pe,Oe=Pe*Ue-Fe*Ie;function Be(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof Ve)return new Ve(t.h,t.s,t.l,t.opacity);t instanceof be||(t=de(t));var e=t.r/255,n=t.g/255,a=t.b/255,r=(Oe*a+Ge*e-ze*n)/(Oe+Ge-ze),i=a-r,o=(Ye*(n-r)-Ue*i)/Fe,c=Math.sqrt(o*o+i*i)/(Ye*r*(1-r)),s=c?Math.atan2(o,i)*we-120:NaN;return new Ve(s<0?s+360:s,c,r,t.opacity)}(t):new Ve(t,e,n,null==a?1:a)}function Ve(t,e,n,a){this.h=+t,this.s=+e,this.l=+n,this.opacity=+a}function je(t,e,n,a,r){var i=t*t,o=i*t;return((1-3*t+3*i-o)*e+(4-6*i+3*o)*n+(1+3*t+3*i-3*o)*a+o*r)/6}Rt(Ve,Be,Ht(Zt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ve(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ve(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*ve,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),a=Math.cos(t),r=Math.sin(t);return new be(255*(e+n*(Ie*a+Pe*r)),255*(e+n*(Ue*a+Fe*r)),255*(e+n*(Ye*a)),this.opacity)}}));var We=function(t){return function(){return t}};function Xe(t,e){return function(n){return t+n*e}}function Re(t){return 1==(t=+t)?He:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(a){return Math.pow(t+a*e,n)}}(e,n,t):We(isNaN(e)?n:e)}}function He(t,e){var n=e-t;return n?Xe(t,n):We(isNaN(t)?e:t)}var Ze=function t(e){var n=Re(e);function a(t,e){var a=n((t=he(t)).r,(e=he(e)).r),r=n(t.g,e.g),i=n(t.b,e.b),o=He(t.opacity,e.opacity);return function(e){return t.r=a(e),t.g=r(e),t.b=i(e),t.opacity=o(e),t+""}}return a.gamma=t,a}(1);function Qe(t){return function(e){var n,a,r=e.length,i=new Array(r),o=new Array(r),c=new Array(r);for(n=0;n<r;++n)a=he(e[n]),i[n]=a.r||0,o[n]=a.g||0,c[n]=a.b||0;return i=t(i),o=t(o),c=t(c),a.opacity=1,function(t){return a.r=i(t),a.g=o(t),a.b=c(t),a+""}}}var Je=Qe(function(t){var e=t.length-1;return function(n){var a=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),r=t[a],i=t[a+1],o=a>0?t[a-1]:2*r-i,c=a<e-1?t[a+2]:2*i-r;return je((n-a/e)*e,o,r,i,c)}}),Ke=(Qe(function(t){var e=t.length;return function(n){var a=Math.floor(((n%=1)<0?++n:n)*e),r=t[(a+e-1)%e],i=t[a%e],o=t[(a+1)%e],c=t[(a+2)%e];return je((n-a/e)*e,r,i,o,c)}}),function(t,e){return e-=t=+t,function(n){return t+e*n}}),tn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,en=new RegExp(tn.source,"g");var nn,an,rn,on,cn=function(t,e){var n,a,r,i=tn.lastIndex=en.lastIndex=0,o=-1,c=[],s=[];for(t+="",e+="";(n=tn.exec(t))&&(a=en.exec(e));)(r=a.index)>i&&(r=e.slice(i,r),c[o]?c[o]+=r:c[++o]=r),(n=n[0])===(a=a[0])?c[o]?c[o]+=a:c[++o]=a:(c[++o]=null,s.push({i:o,x:Ke(n,a)})),i=en.lastIndex;return i<e.length&&(r=e.slice(i),c[o]?c[o]+=r:c[++o]=r),c.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,a=0;a<e;++a)c[(n=s[a]).i]=n.x(t);return c.join("")})},sn=function(t,e){var n,a=typeof e;return null==e||"boolean"===a?We(e):("number"===a?Ke:"string"===a?(n=le(e))?(e=n,Ze):cn:e instanceof le?Ze:e instanceof Date?function(t,e){var n=new Date;return e-=t=+t,function(a){return n.setTime(t+e*a),n}}:Array.isArray(e)?function(t,e){var n,a=e?e.length:0,r=t?Math.min(a,t.length):0,i=new Array(r),o=new Array(a);for(n=0;n<r;++n)i[n]=sn(t[n],e[n]);for(;n<a;++n)o[n]=e[n];return function(t){for(n=0;n<r;++n)o[n]=i[n](t);return o}}:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?function(t,e){var n,a={},r={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?a[n]=sn(t[n],e[n]):r[n]=e[n];return function(t){for(n in a)r[n]=a[n](t);return r}}:Ke)(t,e)},ln=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},fn=180/Math.PI,un={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},dn=function(t,e,n,a,r,i){var o,c,s;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(s=t*n+e*a)&&(n-=t*s,a-=e*s),(c=Math.sqrt(n*n+a*a))&&(n/=c,a/=c,s/=c),t*a<e*n&&(t=-t,e=-e,s=-s,o=-o),{translateX:r,translateY:i,rotate:Math.atan2(e,t)*fn,skewX:Math.atan(s)*fn,scaleX:o,scaleY:c}};function hn(t,e,n,a){function r(t){return t.length?t.pop()+" ":""}return function(i,o){var c=[],s=[];return i=t(i),o=t(o),function(t,a,r,i,o,c){if(t!==r||a!==i){var s=o.push("translate(",null,e,null,n);c.push({i:s-4,x:Ke(t,r)},{i:s-2,x:Ke(a,i)})}else(r||i)&&o.push("translate("+r+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,c,s),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(r(n)+"rotate(",null,a)-2,x:Ke(t,e)})):e&&n.push(r(n)+"rotate("+e+a)}(i.rotate,o.rotate,c,s),function(t,e,n,i){t!==e?i.push({i:n.push(r(n)+"skewX(",null,a)-2,x:Ke(t,e)}):e&&n.push(r(n)+"skewX("+e+a)}(i.skewX,o.skewX,c,s),function(t,e,n,a,i,o){if(t!==n||e!==a){var c=i.push(r(i)+"scale(",null,",",null,")");o.push({i:c-4,x:Ke(t,n)},{i:c-2,x:Ke(e,a)})}else 1===n&&1===a||i.push(r(i)+"scale("+n+","+a+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,c,s),i=o=null,function(t){for(var e,n=-1,a=s.length;++n<a;)c[(e=s[n]).i]=e.x(t);return c.join("")}}}var bn=hn(function(t){return"none"===t?un:(nn||(nn=document.createElement("DIV"),an=document.documentElement,rn=document.defaultView),nn.style.transform=t,t=rn.getComputedStyle(an.appendChild(nn),null).getPropertyValue("transform"),an.removeChild(nn),t=t.slice(7,-1).split(","),dn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),pn=hn(function(t){return null==t?un:(on||(on=document.createElementNS("http://www.w3.org/2000/svg","g")),on.setAttribute("transform",t),(t=on.transform.baseVal.consolidate())?(t=t.matrix,dn(t.a,t.b,t.c,t.d,t.e,t.f)):un)},", ",")",")");function gn(t){return function e(n){function a(e,a){var r=t((e=Be(e)).h,(a=Be(a)).h),i=He(e.s,a.s),o=He(e.l,a.l),c=He(e.opacity,a.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=o(Math.pow(t,n)),e.opacity=c(t),e+""}}return n=+n,a.gamma=e,a}(1)}gn(function(t,e){var n=e-t;return n?Xe(t,n>180||n<-180?n-360*Math.round(n/360):n):We(isNaN(t)?e:t)});var mn=gn(He),yn=function(t){return function(){return t}},vn=function(t){return+t},wn=[0,1];function xn(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:yn(e)}function _n(t,e,n,a){var r=t[0],i=t[1],o=e[0],c=e[1];return i<r?(r=n(i,r),o=a(c,o)):(r=n(r,i),o=a(o,c)),function(t){return o(r(t))}}function Sn(t,e,n,a){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),c=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++c<r;)i[c]=n(t[c],t[c+1]),o[c]=a(e[c],e[c+1]);return function(e){var n=ht(t,e,1,r)-1;return o[n](i[n](e))}}function Mn(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function An(t,e){var n,a,r,i=wn,o=wn,c=sn,s=!1;function l(){return n=Math.min(i.length,o.length)>2?Sn:_n,a=r=null,f}function f(e){return(a||(a=n(i,o,s?function(t){return function(e,n){var a=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:a(t)}}}(t):t,c)))(+e)}return f.invert=function(t){return(r||(r=n(o,i,xn,s?function(t){return function(e,n){var a=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:a(t)}}}(e):e)))(+t)},f.domain=function(t){return arguments.length?(i=Vt.call(t,vn),l()):i.slice()},f.range=function(t){return arguments.length?(o=jt.call(t),l()):o.slice()},f.rangeRound=function(t){return o=jt.call(t),c=ln,l()},f.clamp=function(t){return arguments.length?(s=!!t,l()):s},f.interpolate=function(t){return arguments.length?(c=t,l()):c},l()}var kn=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,a=t.slice(0,n);return[a.length>1?a[0]+a.slice(2):a,+t.slice(n+1)]},Tn=function(t){return(t=kn(Math.abs(t)))?t[1]:NaN},$n=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Cn(t){return new Dn(t)}function Dn(t){if(!(e=$n.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}Cn.prototype=Dn.prototype,Dn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Nn,Ln,En,qn,In=function(t){t:for(var e,n=t.length,a=1,r=-1;a<n;++a)switch(t[a]){case".":r=e=a;break;case"0":0===r&&(r=a),e=a;break;default:if(r>0){if(!+t[a])break t;r=0}}return r>0?t.slice(0,r)+t.slice(e+1):t},Pn=function(t,e){var n=kn(t,e);if(!n)return t+"";var a=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+a:a.length>r+1?a.slice(0,r+1)+"."+a.slice(r+1):a+new Array(r-a.length+2).join("0")},Un={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Pn(100*t,e)},r:Pn,s:function(t,e){var n=kn(t,e);if(!n)return t+"";var a=n[0],r=n[1],i=r-(Nn=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,o=a.length;return i===o?a:i>o?a+new Array(i-o+1).join("0"):i>0?a.slice(0,i)+"."+a.slice(i):"0."+new Array(1-i).join("0")+kn(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Fn=function(t){return t},Yn=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Ln=function(t){var e,n,a=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,a){for(var r=t.length,i=[],o=0,c=e[0],s=0;r>0&&c>0&&(s+c+1>a&&(c=Math.max(1,a-s)),i.push(t.substring(r-=c,r+c)),!((s+=c+1)>a));)c=e[o=(o+1)%e.length];return i.reverse().join(n)}):Fn,r=t.currency,i=t.decimal,o=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):Fn,c=t.percent||"%";function s(t){var e=(t=Cn(t)).fill,n=t.align,s=t.sign,l=t.symbol,f=t.zero,u=t.width,d=t.comma,h=t.precision,b=t.trim,p=t.type;"n"===p?(d=!0,p="g"):Un[p]||(null==h&&(h=12),b=!0,p="g"),(f||"0"===e&&"="===n)&&(f=!0,e="0",n="=");var g="$"===l?r[0]:"#"===l&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",m="$"===l?r[1]:/[%p]/.test(p)?c:"",y=Un[p],v=/[defgprs%]/.test(p);function w(t){var r,c,l,w=g,x=m;if("c"===p)x=y(t)+x,t="";else{var _=(t=+t)<0;if(t=y(Math.abs(t),h),b&&(t=In(t)),_&&0==+t&&(_=!1),w=(_?"("===s?s:"-":"-"===s||"("===s?"":s)+w,x=("s"===p?Yn[8+Nn/3]:"")+x+(_&&"("===s?")":""),v)for(r=-1,c=t.length;++r<c;)if(48>(l=t.charCodeAt(r))||l>57){x=(46===l?i+t.slice(r+1):t.slice(r))+x,t=t.slice(0,r);break}}d&&!f&&(t=a(t,1/0));var S=w.length+t.length+x.length,M=S<u?new Array(u-S+1).join(e):"";switch(d&&f&&(t=a(M+t,M.length?u-x.length:1/0),M=""),n){case"<":t=w+t+x+M;break;case"=":t=w+M+t+x;break;case"^":t=M.slice(0,S=M.length>>1)+w+t+x+M.slice(S);break;default:t=M+w+t+x}return o(t)}return h=null==h?6:/[gprs]/.test(p)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),w.toString=function(){return t+""},w}return{format:s,formatPrefix:function(t,e){var n=s(((t=Cn(t)).type="f",t)),a=3*Math.max(-8,Math.min(8,Math.floor(Tn(e)/3))),r=Math.pow(10,-a),i=Yn[8+a/3];return function(t){return n(r*t)+i}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),En=Ln.format,qn=Ln.formatPrefix;var Gn=function(t,e,n){var a,r=t[0],i=t[t.length-1],o=function(t,e,n){var a=Math.abs(e-t)/Math.max(0,n),r=Math.pow(10,Math.floor(Math.log(a)/Math.LN10)),i=a/r;return i>=pt?r*=10:i>=gt?r*=5:i>=mt&&(r*=2),e<t?-r:r}(r,i,null==e?10:e);switch((n=Cn(null==n?",f":n)).type){case"s":var c=Math.max(Math.abs(r),Math.abs(i));return null!=n.precision||isNaN(a=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Tn(e)/3)))-Tn(Math.abs(t)))}(o,c))||(n.precision=a),qn(n,c);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(a=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Tn(e)-Tn(t))+1}(o,Math.max(Math.abs(r),Math.abs(i))))||(n.precision=a-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(a=function(t){return Math.max(0,-Tn(Math.abs(t)))}(o))||(n.precision=a-2*("%"===n.type))}return En(n)};function zn(t){var e=t.domain;return t.ticks=function(t){var n=e();return yt(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return Gn(e(),t,n)},t.nice=function(n){null==n&&(n=10);var a,r=e(),i=0,o=r.length-1,c=r[i],s=r[o];return s<c&&(a=c,c=s,s=a,a=i,i=o,o=a),(a=vt(c,s,n))>0?a=vt(c=Math.floor(c/a)*a,s=Math.ceil(s/a)*a,n):a<0&&(a=vt(c=Math.ceil(c*a)/a,s=Math.floor(s*a)/a,n)),a>0?(r[i]=Math.floor(c/a)*a,r[o]=Math.ceil(s/a)*a,e(r)):a<0&&(r[i]=Math.ceil(c*a)/a,r[o]=Math.floor(s*a)/a,e(r)),t},t}function On(){var t=An(xn,Ke);return t.copy=function(){return Mn(t,On())},zn(t)}function Bn(t,e){return t<0?-Math.pow(-t,e):Math.pow(t,e)}function Vn(){return function t(){var e=1,n=An(function(t,n){return(n=Bn(n,e)-(t=Bn(t,e)))?function(a){return(Bn(a,e)-t)/n}:yn(n)},function(t,n){return n=Bn(n,e)-(t=Bn(t,e)),function(a){return Bn(t+n*a,1/e)}}),a=n.domain;return n.exponent=function(t){return arguments.length?(e=+t,a(a())):e},n.copy=function(){return Mn(n,t().exponent(e))},zn(n)}().exponent(.5)}var jn=new Date,Wn=new Date;function Xn(t,e,n,a){function r(e){return t(e=new Date(+e)),e}return r.floor=r,r.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},r.round=function(t){var e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},r.range=function(n,a,i){var o,c=[];if(n=r.ceil(n),i=null==i?1:Math.floor(i),!(n<a&&i>0))return c;do{c.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<a);return c},r.filter=function(n){return Xn(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,a){if(t>=t)if(a<0)for(;++a<=0;)for(;e(t,-1),!n(t););else for(;--a>=0;)for(;e(t,1),!n(t););})},n&&(r.count=function(e,a){return jn.setTime(+e),Wn.setTime(+a),t(jn),t(Wn),Math.floor(n(jn,Wn))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(a?function(e){return a(e)%t==0}:function(e){return r.count(0,e)%t==0}):r:null}),r}var Rn=Xn(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});Rn.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Xn(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):Rn:null};var Hn=6e4,Zn=6048e5,Qn=(Xn(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),Xn(function(t){t.setTime(Math.floor(t/Hn)*Hn)},function(t,e){t.setTime(+t+e*Hn)},function(t,e){return(e-t)/Hn},function(t){return t.getMinutes()}),Xn(function(t){var e=t.getTimezoneOffset()*Hn%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),Xn(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Hn)/864e5},function(t){return t.getDate()-1}));function Jn(t){return Xn(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Hn)/Zn})}var Kn=Jn(0),ta=Jn(1),ea=(Jn(2),Jn(3),Jn(4)),na=(Jn(5),Jn(6),Xn(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Xn(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));na.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Xn(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};Xn(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*Hn)},function(t,e){return(e-t)/Hn},function(t){return t.getUTCMinutes()}),Xn(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()});var aa=Xn(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1});function ra(t){return Xn(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/Zn})}var ia=ra(0),oa=ra(1),ca=(ra(2),ra(3),ra(4)),sa=(ra(5),ra(6),Xn(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Xn(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function la(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function fa(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ua(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}sa.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Xn(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var da,ha,ba,pa={"-":"",_:" ",0:"0"},ga=/^\s*\d+/,ma=/^%/,ya=/[\\^$*+?|[\]().{}]/g;function va(t,e,n){var a=t<0?"-":"",r=(a?-t:t)+"",i=r.length;return a+(i<n?new Array(n-i+1).join(e)+r:r)}function wa(t){return t.replace(ya,"\\$&")}function xa(t){return new RegExp("^(?:"+t.map(wa).join("|")+")","i")}function _a(t){for(var e={},n=-1,a=t.length;++n<a;)e[t[n].toLowerCase()]=n;return e}function Sa(t,e,n){var a=ga.exec(e.slice(n,n+1));return a?(t.w=+a[0],n+a[0].length):-1}function Ma(t,e,n){var a=ga.exec(e.slice(n,n+1));return a?(t.u=+a[0],n+a[0].length):-1}function Aa(t,e,n){var a=ga.exec(e.slice(n,n+2));return a?(t.U=+a[0],n+a[0].length):-1}function ka(t,e,n){var a=ga.exec(e.slice(n,n+2));return a?(t.V=+a[0],n+a[0].length):-1}function Ta(t,e,n){var a=ga.exec(e.slice(n,n+2));return a?(t.W=+a[0],n+a[0].length):-1}function $a(t,e,n){var a=ga.exec(e.slice(n,n+4));return a?(t.y=+a[0],n+a[0].length):-1}function Ca(t,e,n){var a=ga.exec(e.slice(n,n+2));return a?(t.y=+a[0]+(+a[0]>68?1900:2e3),n+a[0].length):-1}function Da(t,e,n){var a=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return a?(t.Z=a[1]?0:-(a[2]+(a[3]||"00")),n+a[0].length):-1}function Na(t,e,n){var a=ga.exec(e.slice(n,n+2));return a?(t.m=a[0]-1,n+a[0].length):-1}function La(t,e,n){var a=ga.exec(e.slice(n,n+2));return a?(t.d=+a[0],n+a[0].length):-1}function Ea(t,e,n){var a=ga.exec(e.slice(n,n+3));return a?(t.m=0,t.d=+a[0],n+a[0].length):-1}function qa(t,e,n){var a=ga.exec(e.slice(n,n+2));return a?(t.H=+a[0],n+a[0].length):-1}function Ia(t,e,n){var a=ga.exec(e.slice(n,n+2));return a?(t.M=+a[0],n+a[0].length):-1}function Pa(t,e,n){var a=ga.exec(e.slice(n,n+2));return a?(t.S=+a[0],n+a[0].length):-1}function Ua(t,e,n){var a=ga.exec(e.slice(n,n+3));return a?(t.L=+a[0],n+a[0].length):-1}function Fa(t,e,n){var a=ga.exec(e.slice(n,n+6));return a?(t.L=Math.floor(a[0]/1e3),n+a[0].length):-1}function Ya(t,e,n){var a=ma.exec(e.slice(n,n+1));return a?n+a[0].length:-1}function Ga(t,e,n){var a=ga.exec(e.slice(n));return a?(t.Q=+a[0],n+a[0].length):-1}function za(t,e,n){var a=ga.exec(e.slice(n));return a?(t.Q=1e3*+a[0],n+a[0].length):-1}function Oa(t,e){return va(t.getDate(),e,2)}function Ba(t,e){return va(t.getHours(),e,2)}function Va(t,e){return va(t.getHours()%12||12,e,2)}function ja(t,e){return va(1+Qn.count(na(t),t),e,3)}function Wa(t,e){return va(t.getMilliseconds(),e,3)}function Xa(t,e){return Wa(t,e)+"000"}function Ra(t,e){return va(t.getMonth()+1,e,2)}function Ha(t,e){return va(t.getMinutes(),e,2)}function Za(t,e){return va(t.getSeconds(),e,2)}function Qa(t){var e=t.getDay();return 0===e?7:e}function Ja(t,e){return va(Kn.count(na(t),t),e,2)}function Ka(t,e){var n=t.getDay();return t=n>=4||0===n?ea(t):ea.ceil(t),va(ea.count(na(t),t)+(4===na(t).getDay()),e,2)}function tr(t){return t.getDay()}function er(t,e){return va(ta.count(na(t),t),e,2)}function nr(t,e){return va(t.getFullYear()%100,e,2)}function ar(t,e){return va(t.getFullYear()%1e4,e,4)}function rr(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+va(e/60|0,"0",2)+va(e%60,"0",2)}function ir(t,e){return va(t.getUTCDate(),e,2)}function or(t,e){return va(t.getUTCHours(),e,2)}function cr(t,e){return va(t.getUTCHours()%12||12,e,2)}function sr(t,e){return va(1+aa.count(sa(t),t),e,3)}function lr(t,e){return va(t.getUTCMilliseconds(),e,3)}function fr(t,e){return lr(t,e)+"000"}function ur(t,e){return va(t.getUTCMonth()+1,e,2)}function dr(t,e){return va(t.getUTCMinutes(),e,2)}function hr(t,e){return va(t.getUTCSeconds(),e,2)}function br(t){var e=t.getUTCDay();return 0===e?7:e}function pr(t,e){return va(ia.count(sa(t),t),e,2)}function gr(t,e){var n=t.getUTCDay();return t=n>=4||0===n?ca(t):ca.ceil(t),va(ca.count(sa(t),t)+(4===sa(t).getUTCDay()),e,2)}function mr(t){return t.getUTCDay()}function yr(t,e){return va(oa.count(sa(t),t),e,2)}function vr(t,e){return va(t.getUTCFullYear()%100,e,2)}function wr(t,e){return va(t.getUTCFullYear()%1e4,e,4)}function xr(){return"+0000"}function _r(){return"%"}function Sr(t){return+t}function Mr(t){return Math.floor(+t/1e3)}!function(t){da=function(t){var e=t.dateTime,n=t.date,a=t.time,r=t.periods,i=t.days,o=t.shortDays,c=t.months,s=t.shortMonths,l=xa(r),f=_a(r),u=xa(i),d=_a(i),h=xa(o),b=_a(o),p=xa(c),g=_a(c),m=xa(s),y=_a(s),v={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return c[t.getMonth()]},c:null,d:Oa,e:Oa,f:Xa,H:Ba,I:Va,j:ja,L:Wa,m:Ra,M:Ha,p:function(t){return r[+(t.getHours()>=12)]},Q:Sr,s:Mr,S:Za,u:Qa,U:Ja,V:Ka,w:tr,W:er,x:null,X:null,y:nr,Y:ar,Z:rr,"%":_r},w={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return c[t.getUTCMonth()]},c:null,d:ir,e:ir,f:fr,H:or,I:cr,j:sr,L:lr,m:ur,M:dr,p:function(t){return r[+(t.getUTCHours()>=12)]},Q:Sr,s:Mr,S:hr,u:br,U:pr,V:gr,w:mr,W:yr,x:null,X:null,y:vr,Y:wr,Z:xr,"%":_r},x={a:function(t,e,n){var a=h.exec(e.slice(n));return a?(t.w=b[a[0].toLowerCase()],n+a[0].length):-1},A:function(t,e,n){var a=u.exec(e.slice(n));return a?(t.w=d[a[0].toLowerCase()],n+a[0].length):-1},b:function(t,e,n){var a=m.exec(e.slice(n));return a?(t.m=y[a[0].toLowerCase()],n+a[0].length):-1},B:function(t,e,n){var a=p.exec(e.slice(n));return a?(t.m=g[a[0].toLowerCase()],n+a[0].length):-1},c:function(t,n,a){return M(t,e,n,a)},d:La,e:La,f:Fa,H:qa,I:qa,j:Ea,L:Ua,m:Na,M:Ia,p:function(t,e,n){var a=l.exec(e.slice(n));return a?(t.p=f[a[0].toLowerCase()],n+a[0].length):-1},Q:Ga,s:za,S:Pa,u:Ma,U:Aa,V:ka,w:Sa,W:Ta,x:function(t,e,a){return M(t,n,e,a)},X:function(t,e,n){return M(t,a,e,n)},y:Ca,Y:$a,Z:Da,"%":Ya};function _(t,e){return function(n){var a,r,i,o=[],c=-1,s=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++c<l;)37===t.charCodeAt(c)&&(o.push(t.slice(s,c)),null!=(r=pa[a=t.charAt(++c)])?a=t.charAt(++c):r="e"===a?" ":"0",(i=e[a])&&(a=i(n,r)),o.push(a),s=c+1);return o.push(t.slice(s,c)),o.join("")}}function S(t,e){return function(n){var a,r,i=ua(1900);if(M(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=(a=fa(ua(i.y))).getUTCDay())>4||0===r?oa.ceil(a):oa(a),a=aa.offset(a,7*(i.V-1)),i.y=a.getUTCFullYear(),i.m=a.getUTCMonth(),i.d=a.getUTCDate()+(i.w+6)%7):(a=(r=(a=e(ua(i.y))).getDay())>4||0===r?ta.ceil(a):ta(a),a=Qn.offset(a,7*(i.V-1)),i.y=a.getFullYear(),i.m=a.getMonth(),i.d=a.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),r="Z"in i?fa(ua(i.y)).getUTCDay():e(ua(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(r+5)%7:i.w+7*i.U-(r+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,fa(i)):e(i)}}function M(t,e,n,a){for(var r,i,o=0,c=e.length,s=n.length;o<c;){if(a>=s)return-1;if(37===(r=e.charCodeAt(o++))){if(r=e.charAt(o++),!(i=x[r in pa?e.charAt(o++):r])||(a=i(t,n,a))<0)return-1}else if(r!=n.charCodeAt(a++))return-1}return a}return v.x=_(n,v),v.X=_(a,v),v.c=_(e,v),w.x=_(n,w),w.X=_(a,w),w.c=_(e,w),{format:function(t){var e=_(t+="",v);return e.toString=function(){return t},e},parse:function(t){var e=S(t+="",la);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",w);return e.toString=function(){return t},e},utcParse:function(t){var e=S(t,fa);return e.toString=function(){return t},e}}}(t),ha=da.utcFormat,ba=da.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||ha("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||ba("%Y-%m-%dT%H:%M:%S.%LZ");function Ar(t){return t<0?-1:1}function kr(t,e,n){var a=t._x1-t._x0,r=e-t._x1,i=(t._y1-t._y0)/(a||r<0&&-0),o=(n-t._y1)/(r||a<0&&-0),c=(i*r+o*a)/(a+r);return(Ar(i)+Ar(o))*Math.min(Math.abs(i),Math.abs(o),.5*Math.abs(c))||0}function Tr(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function $r(t,e,n){var a=t._x0,r=t._y0,i=t._x1,o=t._y1,c=(i-a)/3;t._context.bezierCurveTo(a+c,r+c*e,i-c,o-c*n,i,o)}function Cr(t){this._context=t}function Dr(t){this._context=t}Cr.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:$r(this,this._t0,Tr(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,$r(this,Tr(this,n=kr(this,t,e)),n);break;default:$r(this,this._t0,n=kr(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new Dr(t)}.prototype=Object.create(Cr.prototype)).point=function(t,e){Cr.prototype.point.call(this,e,t)},Dr.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,a,r,i){this._context.bezierCurveTo(e,t,a,n,i,r)}};var Nr={value:function(){}};function Lr(){for(var t,e=0,n=arguments.length,a={};e<n;++e){if(!(t=arguments[e]+"")||t in a)throw new Error("illegal type: "+t);a[t]=[]}return new Er(a)}function Er(t){this._=t}function qr(t,e){for(var n,a=0,r=t.length;a<r;++a)if((n=t[a]).name===e)return n.value}function Ir(t,e,n){for(var a=0,r=t.length;a<r;++a)if(t[a].name===e){t[a]=Nr,t=t.slice(0,a).concat(t.slice(a+1));break}return null!=n&&t.push({name:e,value:n}),t}Er.prototype=Lr.prototype={constructor:Er,on:function(t,e){var n,a,r=this._,i=(a=r,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!a.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),o=-1,c=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<c;)if(n=(t=i[o]).type)r[n]=Ir(r[n],t.name,e);else if(null==e)for(n in r)r[n]=Ir(r[n],t.name,null);return this}for(;++o<c;)if((n=(t=i[o]).type)&&(n=qr(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Er(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,a,r=new Array(n),i=0;i<n;++i)r[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(a=this._[t]).length;i<n;++i)a[i].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var a=this._[t],r=0,i=a.length;r<i;++r)a[r].value.apply(e,n)}};var Pr=function(){Q.preventDefault(),Q.stopImmediatePropagation()},Ur=function(t){var e=t.document.documentElement,n=ot(t).on("dragstart.drag",Pr,!0);"onselectstart"in e?n.on("selectstart.drag",Pr,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")};var Fr,Yr,Gr=0,zr=0,Or=0,Br=1e3,Vr=0,jr=0,Wr=0,Xr="object"==typeof performance&&performance.now?performance:Date,Rr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Hr(){return jr||(Rr(Zr),jr=Xr.now()+Wr)}function Zr(){jr=0}function Qr(){this._call=this._time=this._next=null}function Jr(t,e,n){var a=new Qr;return a.restart(t,e,n),a}function Kr(){jr=(Vr=Xr.now())+Wr,Gr=zr=0;try{!function(){Hr(),++Gr;for(var t,e=Fr;e;)(t=jr-e._time)>=0&&e._call.call(null,t),e=e._next;--Gr}()}finally{Gr=0,function(){var t,e,n=Fr,a=1/0;for(;n;)n._call?(a>n._time&&(a=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Fr=e);Yr=t,ei(a)}(),jr=0}}function ti(){var t=Xr.now(),e=t-Vr;e>Br&&(Wr-=e,Vr=t)}function ei(t){Gr||(zr&&(zr=clearTimeout(zr)),t-jr>24?(t<1/0&&(zr=setTimeout(Kr,t-Xr.now()-Wr)),Or&&(Or=clearInterval(Or))):(Or||(Vr=Xr.now(),Or=setInterval(ti,Br)),Gr=1,Rr(Kr)))}Qr.prototype=Jr.prototype={constructor:Qr,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Hr():+n)+(null==e?0:+e),this._next||Yr===this||(Yr?Yr._next=this:Fr=this,Yr=this),this._call=t,this._time=n,ei()},stop:function(){this._call&&(this._call=null,this._time=1/0,ei())}};var ni=function(t,e,n){var a=new Qr;return e=null==e?0:+e,a.restart(function(n){a.stop(),t(n+e)},e,n),a},ai=Lr("start","end","interrupt"),ri=[],ii=0,oi=1,ci=2,si=3,li=4,fi=5,ui=6,di=function(t,e,n,a,r,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var a,r=t.__transition;function i(s){var l,f,u,d;if(n.state!==oi)return c();for(l in r)if((d=r[l]).name===n.name){if(d.state===si)return ni(i);d.state===li?(d.state=ui,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete r[l]):+l<e&&(d.state=ui,d.timer.stop(),delete r[l])}if(ni(function(){n.state===si&&(n.state=li,n.timer.restart(o,n.delay,n.time),o(s))}),n.state=ci,n.on.call("start",t,t.__data__,n.index,n.group),n.state===ci){for(n.state=si,a=new Array(u=n.tween.length),l=0,f=-1;l<u;++l)(d=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(a[++f]=d);a.length=f+1}}function o(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(c),n.state=fi,1),i=-1,o=a.length;++i<o;)a[i].call(null,r);n.state===fi&&(n.on.call("end",t,t.__data__,n.index,n.group),c())}function c(){for(var a in n.state=ui,n.timer.stop(),delete r[e],r)return;delete t.__transition}r[e]=n,n.timer=Jr(function(t){n.state=oi,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)},0,n.time)}(t,n,{name:e,index:a,group:r,on:ai,tween:ri,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:ii})};function hi(t,e){var n=pi(t,e);if(n.state>ii)throw new Error("too late; already scheduled");return n}function bi(t,e){var n=pi(t,e);if(n.state>ci)throw new Error("too late; already started");return n}function pi(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var gi=function(t,e){var n,a,r,i=t.__transition,o=!0;if(i){for(r in e=null==e?null:e+"",i)(n=i[r]).name===e?(a=n.state>ci&&n.state<fi,n.state=ui,n.timer.stop(),a&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete i[r]):o=!1;o&&delete t.__transition}};function mi(t,e,n){var a=t._id;return t.each(function(){var t=bi(this,a);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return pi(t,a).value[e]}}var yi=function(t,e){var n;return("number"==typeof e?Ke:e instanceof le?Ze:(n=le(e))?(e=n,Ze):cn)(t,e)};var vi=it.prototype.constructor;var wi=0;function xi(t,e,n,a){this._groups=t,this._parents=e,this._name=n,this._id=a}function _i(){return++wi}var Si=it.prototype;xi.prototype=function(t){return it().transition(t)}.prototype={constructor:xi,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=x(t));for(var a=this._groups,r=a.length,i=new Array(r),o=0;o<r;++o)for(var c,s,l=a[o],f=l.length,u=i[o]=new Array(f),d=0;d<f;++d)(c=l[d])&&(s=t.call(c,c.__data__,d,l))&&("__data__"in c&&(s.__data__=c.__data__),u[d]=s,di(u[d],e,n,d,u,pi(c,n)));return new xi(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=S(t));for(var a=this._groups,r=a.length,i=[],o=[],c=0;c<r;++c)for(var s,l=a[c],f=l.length,u=0;u<f;++u)if(s=l[u]){for(var d,h=t.call(s,s.__data__,u,l),b=pi(s,n),p=0,g=h.length;p<g;++p)(d=h[p])&&di(d,e,n,p,h,b);i.push(h),o.push(s)}return new xi(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=T(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o=e[r],c=o.length,s=a[r]=[],l=0;l<c;++l)(i=o[l])&&t.call(i,i.__data__,l,o)&&s.push(i);return new xi(a,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,a=e.length,r=n.length,i=Math.min(a,r),o=new Array(a),c=0;c<i;++c)for(var s,l=e[c],f=n[c],u=l.length,d=o[c]=new Array(u),h=0;h<u;++h)(s=l[h]||f[h])&&(d[h]=s);for(;c<a;++c)o[c]=e[c];return new xi(o,this._parents,this._name,this._id)},selection:function(){return new vi(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=_i(),a=this._groups,r=a.length,i=0;i<r;++i)for(var o,c=a[i],s=c.length,l=0;l<s;++l)if(o=c[l]){var f=pi(o,e);di(o,t,n,l,c,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new xi(a,this._parents,t,n)},call:Si.call,nodes:Si.nodes,node:Si.node,size:Si.size,empty:Si.empty,each:Si.each,on:function(t,e){var n=this._id;return arguments.length<2?pi(this.node(),n).on.on(t):this.each(function(t,e,n){var a,r,i=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?hi:bi;return function(){var o=i(this,t),c=o.on;c!==a&&(r=(a=c).copy()).on(e,n),o.on=r}}(n,t,e))},attr:function(t,e){var n=y(t),a="transform"===n?pn:yi;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var a,r,i;return function(){var o,c=n(this);if(null!=c)return(o=this.getAttributeNS(t.space,t.local))===c?null:o===a&&c===r?i:i=e(a=o,r=c);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var a,r,i;return function(){var o,c=n(this);if(null!=c)return(o=this.getAttribute(t))===c?null:o===a&&c===r?i:i=e(a=o,r=c);this.removeAttribute(t)}})(n,a,mi(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var a,r;return function(){var i=this.getAttributeNS(t.space,t.local);return i===n?null:i===a?r:r=e(a=i,n)}}:function(t,e,n){var a,r;return function(){var i=this.getAttribute(t);return i===n?null:i===a?r:r=e(a=i,n)}})(n,a,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var a=y(t);return this.tween(n,(a.local?function(t,e){function n(){var n=this,a=e.apply(n,arguments);return a&&function(e){n.setAttributeNS(t.space,t.local,a(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,a=e.apply(n,arguments);return a&&function(e){n.setAttribute(t,a(e))}}return n._value=e,n})(a,e))},style:function(t,e,n){var a="transform"==(t+="")?bn:yi;return null==e?this.styleTween(t,function(t,e){var n,a,r;return function(){var i=P(this,t),o=(this.style.removeProperty(t),P(this,t));return i===o?null:i===n&&o===a?r:r=e(n=i,a=o)}}(t,a)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var a,r,i;return function(){var o=P(this,t),c=n(this);return null==c&&(this.style.removeProperty(t),c=P(this,t)),o===c?null:o===a&&c===r?i:i=e(a=o,r=c)}}(t,a,mi(this,"style."+t,e)):function(t,e,n){var a,r;return function(){var i=P(this,t);return i===n?null:i===a?r:r=e(a=i,n)}}(t,a,e+""),n)},styleTween:function(t,e,n){var a="style."+(t+="");if(arguments.length<2)return(a=this.tween(a))&&a._value;if(null==e)return this.tween(a,null);if("function"!=typeof e)throw new Error;return this.tween(a,function(t,e,n){function a(){var a=this,r=e.apply(a,arguments);return r&&function(e){a.style.setProperty(t,r(e),n)}}return a._value=e,a}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(mi(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var a,r=pi(this.node(),n).tween,i=0,o=r.length;i<o;++i)if((a=r[i]).name===t)return a.value;return null}return this.each((null==e?function(t,e){var n,a;return function(){var r=bi(this,t),i=r.tween;if(i!==n)for(var o=0,c=(a=n=i).length;o<c;++o)if(a[o].name===e){(a=a.slice()).splice(o,1);break}r.tween=a}}:function(t,e,n){var a,r;if("function"!=typeof n)throw new Error;return function(){var i=bi(this,t),o=i.tween;if(o!==a){r=(a=o).slice();for(var c={name:e,value:n},s=0,l=r.length;s<l;++s)if(r[s].name===e){r[s]=c;break}s===l&&r.push(c)}i.tween=r}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){hi(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){hi(this,t).delay=e}})(e,t)):pi(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){bi(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){bi(this,t).duration=e}})(e,t)):pi(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){bi(this,t).ease=e}}(e,t)):pi(this.node(),e).ease}};var Mi={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Ai(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Mi.time=Hr(),Mi;return n}it.prototype.interrupt=function(t){return this.each(function(){gi(this,t)})},it.prototype.transition=function(t){var e,n;t instanceof xi?(e=t._id,t=t._name):(e=_i(),(n=Mi).time=Hr(),t=null==t?null:t+"");for(var a=this._groups,r=a.length,i=0;i<r;++i)for(var o,c=a[i],s=c.length,l=0;l<s;++l)(o=c[l])&&di(o,t,e,l,c,n||Ai(o,e));return new xi(a,this._parents,t,e)};var ki=function(t){return function(){return t}},Ti=function(t,e,n){this.target=t,this.type=e,this.selection=n};function $i(){Q.stopImmediatePropagation()}var Ci=function(){Q.preventDefault(),Q.stopImmediatePropagation()},Di={name:"drag"},Ni={name:"space"},Li={name:"handle"},Ei={name:"center"},qi={name:"x",handles:["e","w"].map(zi),input:function(t,e){return t&&[[t[0],e[0][1]],[t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Ii={name:"y",handles:["n","s"].map(zi),input:function(t,e){return t&&[[e[0][0],t[0]],[e[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Pi=(["n","e","s","w","nw","ne","se","sw"].map(zi),{overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"}),Ui={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Fi={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Yi={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Gi={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function zi(t){return{type:t}}function Oi(){return!Q.button}function Bi(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Vi(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function ji(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Wi(){return function(t){var e,n=Bi,a=Oi,r=Lr(o,"start","brush","end"),i=6;function o(e){var n=e.property("__brush",u).selectAll(".overlay").data([zi("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Pi.overlay).merge(n).each(function(){var t=Vi(this).extent;ot(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),e.selectAll(".selection").data([zi("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Pi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var a=e.selectAll(".handle").data(t.handles,function(t){return t.type});a.exit().remove(),a.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Pi[t.type]}),e.each(c).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",f)}function c(){var t=ot(this),e=Vi(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?e[1][0]-i/2:e[0][0]-i/2}).attr("y",function(t){return"s"===t.type[0]?e[1][1]-i/2:e[0][1]-i/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+i:i}).attr("height",function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+i:i})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function s(t,e){return t.__brush.emitter||new l(t,e)}function l(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function f(){if(Q.touches){if(Q.changedTouches.length<Q.touches.length)return Ci()}else if(e)return;if(a.apply(this,arguments)){var n,r,i,o,l,f,u,d,h,b,p,g,m,y=this,v=Q.target.__data__.type,w="selection"===(Q.metaKey?v="overlay":v)?Di:Q.altKey?Ei:Li,x=t===Ii?null:Yi[v],_=t===qi?null:Gi[v],S=Vi(y),M=S.extent,A=S.selection,k=M[0][0],T=M[0][1],$=M[1][0],C=M[1][1],D=x&&_&&Q.shiftKey,N=st(y),L=N,E=s(y,arguments).beforestart();"overlay"===v?S.selection=A=[[n=t===Ii?k:N[0],i=t===qi?T:N[1]],[l=t===Ii?$:n,u=t===qi?C:i]]:(n=A[0][0],i=A[0][1],l=A[1][0],u=A[1][1]),r=n,o=i,f=l,d=u;var q=ot(y).attr("pointer-events","none"),I=q.selectAll(".overlay").attr("cursor",Pi[v]);if(Q.touches)q.on("touchmove.brush",U,!0).on("touchend.brush touchcancel.brush",Y,!0);else{var P=ot(Q.view).on("keydown.brush",function(){switch(Q.keyCode){case 16:D=x&&_;break;case 18:w===Li&&(x&&(l=f-h*x,n=r+h*x),_&&(u=d-b*_,i=o+b*_),w=Ei,F());break;case 32:w!==Li&&w!==Ei||(x<0?l=f-h:x>0&&(n=r-h),_<0?u=d-b:_>0&&(i=o-b),w=Ni,I.attr("cursor",Pi.selection),F());break;default:return}Ci()},!0).on("keyup.brush",function(){switch(Q.keyCode){case 16:D&&(g=m=D=!1,F());break;case 18:w===Ei&&(x<0?l=f:x>0&&(n=r),_<0?u=d:_>0&&(i=o),w=Li,F());break;case 32:w===Ni&&(Q.altKey?(x&&(l=f-h*x,n=r+h*x),_&&(u=d-b*_,i=o+b*_),w=Ei):(x<0?l=f:x>0&&(n=r),_<0?u=d:_>0&&(i=o),w=Li),I.attr("cursor",Pi[v]),F());break;default:return}Ci()},!0).on("mousemove.brush",U,!0).on("mouseup.brush",Y,!0);Ur(Q.view)}$i(),gi(y),c.call(y),E.start()}function U(){var t=st(y);!D||g||m||(Math.abs(t[0]-L[0])>Math.abs(t[1]-L[1])?m=!0:g=!0),L=t,p=!0,Ci(),F()}function F(){var t;switch(h=L[0]-N[0],b=L[1]-N[1],w){case Ni:case Di:x&&(h=Math.max(k-n,Math.min($-l,h)),r=n+h,f=l+h),_&&(b=Math.max(T-i,Math.min(C-u,b)),o=i+b,d=u+b);break;case Li:x<0?(h=Math.max(k-n,Math.min($-n,h)),r=n+h,f=l):x>0&&(h=Math.max(k-l,Math.min($-l,h)),r=n,f=l+h),_<0?(b=Math.max(T-i,Math.min(C-i,b)),o=i+b,d=u):_>0&&(b=Math.max(T-u,Math.min(C-u,b)),o=i,d=u+b);break;case Ei:x&&(r=Math.max(k,Math.min($,n-h*x)),f=Math.max(k,Math.min($,l+h*x))),_&&(o=Math.max(T,Math.min(C,i-b*_)),d=Math.max(T,Math.min(C,u+b*_)))}f<r&&(x*=-1,t=n,n=l,l=t,t=r,r=f,f=t,v in Ui&&I.attr("cursor",Pi[v=Ui[v]])),d<o&&(_*=-1,t=i,i=u,u=t,t=o,o=d,d=t,v in Fi&&I.attr("cursor",Pi[v=Fi[v]])),S.selection&&(A=S.selection),g&&(r=A[0][0],f=A[1][0]),m&&(o=A[0][1],d=A[1][1]),A[0][0]===r&&A[0][1]===o&&A[1][0]===f&&A[1][1]===d||(S.selection=[[r,o],[f,d]],c.call(y),E.brush())}function Y(){if($i(),Q.touches){if(Q.touches.length)return;e&&clearTimeout(e),e=setTimeout(function(){e=null},500),q.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(t,e){var n=t.document.documentElement,a=ot(t).on("dragstart.drag",null);e&&(a.on("click.drag",Pr,!0),setTimeout(function(){a.on("click.drag",null)},0)),"onselectstart"in n?a.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(Q.view,p),P.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);q.attr("pointer-events","all"),I.attr("cursor",Pi.overlay),S.selection&&(A=S.selection),ji(A)&&(S.selection=null,c.call(y)),E.end()}}function u(){var e=this.__brush||{selection:null};return e.extent=n.apply(this,arguments),e.dim=t,e}return o.move=function(e,n){e.selection?e.on("start.brush",function(){s(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){s(this,arguments).end()}).tween("brush",function(){var e=this,a=e.__brush,r=s(e,arguments),i=a.selection,o=t.input("function"==typeof n?n.apply(this,arguments):n,a.extent),l=sn(i,o);function f(t){a.selection=1===t&&ji(o)?null:l(t),c.call(e),r.brush()}return i&&o?f:f(1)}):e.each(function(){var e=arguments,a=this.__brush,r=t.input("function"==typeof n?n.apply(this,e):n,a.extent),i=s(this,e).beforestart();gi(this),a.selection=null==r||ji(r)?null:r,c.call(this),i.start().brush().end()})},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){!function(t,e,n,a){var r=Q;t.sourceEvent=Q,Q=t;try{e.apply(n,a)}finally{Q=r}}(new Ti(o,e,t.output(this.state.selection)),r.apply,r,[e,this.that,this.args])}},o.extent=function(t){return arguments.length?(n="function"==typeof t?t:ki([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),o):n},o.filter=function(t){return arguments.length?(a="function"==typeof t?t:ki(!!t),o):a},o.handleSize=function(t){return arguments.length?(i=+t,o):i},o.on=function(){var t=r.on.apply(r,arguments);return t===r?o:t},o}(qi)}var Xi=function(t){for(var e=t.length/6|0,n=new Array(e),a=0;a<e;)n[a]="#"+t.slice(6*a,6*++a);return n};Xi("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Xi("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Xi("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Xi("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Xi("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Xi("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Xi("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Xi("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Xi("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");var Ri=function(t){return Je(t[t.length-1])};Ri(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Xi)),Ri(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Xi));var Hi=Ri(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Xi)),Zi=Ri(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Xi)),Qi=Ri(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Xi)),Ji=Ri(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Xi)),Ki=Ri(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Xi));Ri(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Xi)),Ri(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Xi));var to=Ri(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Xi));Ri(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Xi)),Ri(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Xi));var eo=Ri(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Xi));Ri(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Xi));var no=Ri(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Xi));Ri(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Xi)),Ri(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Xi));var ao=Ri(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Xi));Ri(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Xi)),Ri(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Xi)),Ri(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Xi));var ro=Ri(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Xi)),io=Ri(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Xi)),oo=Ri(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Xi)),co=Ri(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Xi)),so=Ri(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Xi)),lo=Ri(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Xi));mn(Be(300,.5,0),Be(-240,.5,1));mn(Be(-100,.75,.35),Be(80,1.5,.8)),mn(Be(260,.75,.35),Be(80,1.5,.8)),Be(),he();function fo(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}fo(Xi("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));fo(Xi("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),fo(Xi("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),fo(Xi("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function uo(t,e="YlGnBu",n,a,r=!1){t=t.filter(t=>isFinite(t)),a=void 0===a?wt(t):a,n=void 0===n?xt(t):n;const i=function t(e){var n=0,a=1,r=1,i=!1;function o(t){var a=(t-n)*r;return e(i?Math.max(0,Math.min(1,a)):a)}return o.domain=function(t){return arguments.length?(n=+t[0],a=+t[1],r=n===a?0:1/(a-n),o):[n,a]},o.clamp=function(t){return arguments.length?(i=!!t,o):i},o.interpolator=function(t){return arguments.length?(e=t,o):e},o.copy=function(){return t(e).domain([n,a]).clamp(i)},zn(o)}(function(t){const e={BuGn:to,OrRd:eo,PuBu:no,YlGnBu:ao,Blues:ro,Oranges:lo,Greens:io,Purples:co,Reds:so,Greys:oo,Grays:oo,RdBu:Qi,RdGy:Ji,PiYG:Hi,PuOr:Zi,RdYlBu:Ki};if(!e.hasOwnProperty(t)){const e="Unrecognized color: "+t;throw alert(e),e}return e[t]}(e));return r?i.domain([a,n]):i.domain([n,a]),i}function ho(t,e,n,a,r,i=10,o=10,c={h:10,w:40},s="h",l=!1){let f=[];if(l){let t=[...Array(i+1).keys()],e=n.domain()[1]/i;f=(f=t.map(t=>t*e)).concat(t.filter(t=>0!=t).map(t=>0-t*e)).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}else{let t=[...Array(i+1).keys()],e=n.domain()[1]/i;f=t.map(t=>t*e)}const u=e.append("g").attr("transform",`translate(${a.x}, ${a.y})`).selectAll(".legend").data(f).enter().append("g").classed("legend",!0);"h"==s?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",c.h).attr("transform",`translate(${a.x}, ${a.y})`),u.append("rect").attr("x",(t,e)=>c.w*e).attr("y",5).attr("width",c.w).attr("height",c.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>r?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>c.w*e).attr("y",0).style("font-size",10)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${a.x}, ${a.y+c.h*(f.length+1)})`),u.append("rect").attr("x",0).attr("y",(t,e)=>c.h*e).attr("width",c.w).attr("height",c.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>r?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",15).attr("y",(t,e)=>c.h*e+c.h/2))}class bo{constructor(t,e,n=1e6){this.data=t,this.center=e,this.window=n,this.scale=void 0,this.tooltip=void 0}render(t,e=1500,n=200,a=!1,r="Track",i="#ffffff",o="#ababab",c=!1,s){this.dom=t;this.dom.attr("id");let l=[0,e],f=[this.center-this.window,this.center+this.window];if(this.scale=On().rangeRound(l).domain(f),c){this.colorScale=uo(this.data.map(t=>t.colorValue),"Greys",0,s);const t=void 0===s?this.data.map(t=>t.colorValue):s;this.maxColor=this.colorScale(t)}let u=this.dom.append("g");u.append("rect").attr("x",0).attr("y",n/2).attr("width",e).attr("height",10).style("fill",i).style("stroke","#ababab").style("stroke-width",1);u.append("g").selectAll(".minibrowser-feature").data(this.data.filter(t=>this.scale(t.pos)>0&&this.scale(t.pos)<e)).enter().append("rect").attr("class","minibrowser-feature").attr("x",t=>a?this.scale(t.start):this.scale(t.pos)).attr("y",t=>n/2).attr("width",t=>{if(a){return Math.abs(this.scale(t.start)-this.scale(t.end)+1)||1}return 1}).attr("height",t=>10).style("fill",t=>t.pos==this.center?"red":c?isFinite(t.colorValue)?this.colorScale(t.colorValue):this.maxColor:o);u.append("text").attr("x",-10).attr("y",n/2+5).style("font-size","9px").style("text-anchor","end").text(r)}static renderAxis(t,e,n,a=!0,r=null,i={w:50,h:20},o=0){let c=Et(e).tickValues(e.ticks(7));const s=t.append("g");if(s.attr("transform",`translate(0,${n})`).call(c).selectAll("text"),a){const t=()=>{let t=Q.selection,n=t[0],a=t[1],i=Math.round(e.invert(t[0])),o=Math.round(e.invert(t[1]));r(n,a,i,o)},n=Wi().extent([[0,-i.h-5],[e.range()[1],5]]).on("brush",t);s.append("g").attr("class","brush").call(n).call(n.move,[e(o)-i.w,e(o)+i.w])}}}class po{constructor(t,e=!1,n=30,a=-40,r=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=a,this.duration=r}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),ot("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){ot("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=Q.pageX,e=Q.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;ot("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){ot("#"+this.id).html(t)}}class go{constructor(t,e=!0,n=10,a="Reds"){this.data=t,this.useLog=e,this.logBase=n,this.colorScheme=a,this.xScale=void 0,this.yScale=void 0,this.colorScale=void 0,this.bubbleScale=void 0,this.toolbar=void 0,this.tooltip=void 0}addTooltip(t,e="bubblemap-tooltip"){if(ot(`#${t}`).empty())throw"DOM ID is missing: "+t;let n=ot(`#${t}`),a=t+"-tooltip";ot(`#${a}`).empty()&&n.append("div").attr("id",a),this.tooltip=new po(a),ot(`#${a}`).classed(e,!0)}drawCanvas(t,e={w:1e3,h:600,top:20,left:20},n,a={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){this.setScales(e,n);let r=t.node().getContext("2d");r.fillStyle="#ffffff",r.rect(0,0,t.attr("width"),t.attr("height")),r.fill(),this.data.forEach(t=>{r.beginPath(),r.fillStyle=this.colorScale(t.value),r.arc(this.xScale(t.x),this.yScale(t.y),this.bubbleScale(t.r),0,2*Math.PI),r.fill(),r.closePath()});let i=a.column,o=a.row;o.show&&(r.save(),r.textAlign=i.textAlign,r.fillStyle="black",r.font="10px Open Sans",this.yScale.domain().forEach(t=>{r.fillText(t,this.xScale.range()[0]-o.adjust,this.yScale(t)+2)}),r.restore()),i.show&&this.xScale.domain().forEach(t=>{r.save(),r.fillStyle="black",r.font="10px Open Sans",r.textAlign=i.textAlign,r.translate(this.xScale(t)-3,this.yScale.range()[1]+i.adjust),r.rotate(0==i.angle?0:Math.PI/(180/i.angle)),r.fillText(t,0,0),r.restore()})}drawCombo(t,e,n={w:1e3,h:600,top:0,left:0},a,r=!0,i={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){let o={w:n.w,h:n.h2,top:n.top,left:n.left};this.drawSvg(e,o,a,50,i);let c=t.append("g").attr("clip-path","url(#clip)");if(this._setMiniScales(n,a),c.selectAll(".mini-map-cell").data(this.data,t=>t.value).enter().append("circle").attr("class","mini-map-cell").attr("row",t=>`x${this.xScaleMini.domain().indexOf(t.x)}`).attr("col",t=>`y${this.yScaleMini.domain().indexOf(t.y)}`).attr("cx",t=>this.xScaleMini(t.x)).attr("cy",t=>this.yScaleMini(t.y)).attr("r",t=>isFinite(t.r)?this.bubbleScaleMini(t.r):this.bubleScaleMini.range()[1]).style("fill",t=>this.colorScale(t.value)),r){let a=Wi().extent([[0,0],[n.w,n.h]]).on("brush",()=>{this.brushed(e,i)});t.append("g").attr("class","brush").call(a).call(a.move,[0,50*this.xScaleMini.bandwidth()])}}drawSvg(t,e={w:1e3,h:600,top:0,left:0},n,a=50,r={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:10,location:"left",textAlign:"right"}}){this.setScales(e,void 0,50);let i=this.tooltip;t.append("g").attr("clip-path","url(#clip)").selectAll(".bubble-map-cell").data(this.data,t=>t.value).enter().append("circle").attr("class","bubble-map-cell").attr("row",t=>`x${this.xScale.domain().indexOf(t.x)}`).attr("col",t=>`y${this.yScale.domain().indexOf(t.y)}`).attr("cx",t=>this.xScale(t.x)).attr("cy",t=>this.yScale(t.y)).attr("r",t=>isFinite(t.r)?this.bubbleScale(t.r):this.bubbleScale.range()[1]).style("fill",t=>this.colorScale(t.value)).on("mouseover",function(e){let n=ot(this),a=n.attr("row"),r=n.attr("col");t.selectAll(".bubble-map-xlabel").filter(`.${a}`).classed("highlighted",!0),t.selectAll(".bubble-map-ylabel").filter(`.${r}`).classed("highlighted",!0),n.classed("highlighted",!0);let o=void 0===e.displayValue?parseFloat(e.value.toExponential()).toPrecision(4):e.displayValue,c=void 0===e.rDisplayValue?e.r.toPrecision(4):e.rDisplayValue,s=void 0===e.displayX?e.x:e.displayX,l=void 0===e.displayY?e.y:e.displayY;i.show(`Column: ${s} <br/> Row: ${l}<br/> Value: ${o}<br/> Size: ${c}`)}).on("mouseout",function(){t.selectAll("*").classed("highlighted",!1),i.hide()});let o=r.column,c=r.row;if(o.show){let e={},n=Math.floor(this.xScale.bandwidth()/2)>12?12:Math.floor(this.xScale.bandwidth()/2);Ft().key(t=>t.x).entries(this.data).forEach(t=>{e[t.key]=t.values[0].displayX});t.selectAll(".bubble-map-xlabel").data(this.xScale.domain()).enter().append("text").attr("class",(t,e)=>`bubble-map-xlabel x${e}`).attr("x",0).attr("y",0).attr("text-anchor","left"==o.textAlign?"start":"end").style("cursor","default").style("font-size",()=>`${n}px`).attr("transform",t=>{return`translate(${this.xScale(t)-n/2}, ${this.yScale.range()[1]+o.adjust}) rotate(${o.angle})`}).text(t=>e[t]||t)}if(c.show){let e={},n=Math.floor(this.yScale.bandwidth()/1.5)>14?14:Math.floor(this.yScale.bandwidth()/1.5)<10?10:Math.floor(this.yScale.bandwidth()/1.5);Ft().key(t=>t.y).entries(this.data).forEach(t=>{e[t.key]=t.values[0].displayY});t.selectAll(".bubble-map-ylabel").data(this.yScale.domain()).enter().append("text").attr("class",(t,e)=>`bubble-map-ylabel y${e}`).attr("x",0).attr("y",0).attr("text-anchor","left"==c.textAlign?"start":"end").style("cursor","default").style("font-size",()=>`${n}px`).attr("transform",t=>{return`translate(${this.xScale.range()[0]-c.adjust}, ${this.yScale(t)}) rotate(${c.angle})`}).text(t=>e[t]||t)}}drawColorLegend(t,e={x:0,y:0},n=5,a="",r={h:10,w:40},i="h"){ho(a,t,this.colorScale,e,this.useLog,n,this.logBase,r,i,!0)}drawBubbleLegend(t,e={x:0,y:0,title:"Bubble legend"},n=5,a="",r="h"){t.selectAll(".bmap-bubble-legend").remove();let i=[...Array(n+1).keys()],o=(this.bubbleScale.domain()[1]-this.bubbleScale.domain()[0])/n,c=i.map(t=>this.bubbleScale.domain()[0]+t*o),s=t.append("g").attr("class","bmap-bubble-legend").attr("transform",`translate(${e.x}, ${e.y})`),l=s.selectAll(".legend").data(c).enter().append("g").classed("legend",!0);if("h"==r){s.append("text").attr("class","color-legend").text(e.title).attr("x",-10).attr("text-anchor","end").attr("y",10);let t=40;l.append("circle").attr("cx",(e,n)=>t*n).attr("cy",10).attr("r",t=>isFinite(t.r)?this.bubbleScale(t.r):this.bubbleScale.range()[1]).style("fill","#ababab"),l.append("text").attr("class","color-legend").text(t=>this.useLog?Math.pow(base,t).toPrecision(2):t.toPrecision(2)).attr("x",(e,n)=>t*n-5).attr("y",0)}else{let t=20;s.append("text").attr("class","color-legend").text(e.title).attr("x",0).attr("text-anchor","start").attr("y",t*c.length),l.append("circle").attr("cx",5).attr("cy",(e,n)=>t*n).attr("r",t=>isFinite(t)?this.bubbleScale(t):this.bubbleScale.range()[1]).style("fill","#ababab"),l.append("text").attr("class","color-legend").attr("text-anchor","start").text(t=>this.useLog?Math.pow(base,t).toPrecision(2):t.toPrecision(2)).attr("x",t).attr("y",(e,n)=>t*n+5)}}renderWithNewDomain(t,e,n={adjust:0,angle:90}){this.xScale.domain(e);let a=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:a,min:2}),t.selectAll(".bubble-map-cell").attr("cx",t=>{let e=this.xScale(t.x);return void 0===e?0:e}).attr("r",t=>{return void 0===this.xScale(t.x)?0:isFinite(t.r)?this.bubbleScale(t.r):this.bubbleScale.range()[1]});let r=Math.floor(this.xScale.bandwidth()/2)>10?10:Math.floor(this.xScale.bandwidth()/2);t.selectAll(".bubble-map-xlabel").attr("transform",t=>{return`translate(${this.xScale(t)-r/2||0}, ${this.yScale.range()[1]+n.adjust}) rotate(${n.angle})`}).style("font-size",()=>`${r}px`).style("display",t=>{return void 0===this.xScale(t)?"none":"block"})}brushed(t,e){let n=Q.selection,a=Math.round(n[0]/this.xScaleMini.step()),r=Math.round(n[1]/this.xScaleMini.step()),i=this.xScaleMini.domain().slice(a,r);return this.renderWithNewDomain(t,i,e.column),i}setScales(t={w:1e3,h:600,top:20,left:20},e){if(void 0===this.xScale&&(this.xScale=this._setXScale(t)),void 0===this.yScale&&(this.yScale=this._setYScale(t)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(e)),void 0===this.bubbleScale){let t=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:t,min:2})}}_setMiniScales(t={w:1e3,h:600,top:20,left:20},e){if(void 0===this.xScaleMini&&(this.xScaleMini=this._setXScaleMini(t)),void 0===this.yScaleMini&&(this.yScaleMini=this._setYScaleMini(t)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(e)),void 0===this.bubbleScaleMini){let t=this._setBubbleMax(!0);this.bubbleScaleMini=this._setBubbleScale({max:t,min:1})}}_parseXList(){return Ft().key(t=>t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}_parseYList(){return Ft().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}_setXScaleMini(t={w:1e3,left:20}){let e=this._parseXList();return this._setXScale(t,e)}_setXScale(t={w:1e3,left:20},e){return e=void 0===e?this._parseXList():e,Xt().domain(e).range([t.left,t.left+t.w]).padding(.05)}_setYScaleMini(t={h:600,top:20}){let e=this._parseYList();return this._setYScale(t,e)}_setYScale(t={h:600,top:20},e){return e=void 0===e?this._parseYList():e,Xt().domain(e).range([t.top,t.top+t.h]).padding(.05)}_setColorScale(t){let e=this.useLog;return uo(void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t,this.colorScheme,void 0,void 0,!0)}_setBubbleMax(t=!1,e=2,n=10){let a=t?this.xScaleMini:this.xScale,r=t?this.yScaleMini:this.yScale,i=wt([a.bandwidth(),r.bandwidth()])/e;return n<i?n:i}_setBubbleScale(t={max:10,min:0}){const e=wt(this.data.filter(t=>isFinite(t.r)).map(t=>t.r));return Vn().domain([3,e]).range([t.min,t.max])}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class mo{constructor(t,e="Reds"){this.data=t,this.colorScheme=e,this.xScale=void 0,this.yScale=void 0,this.colorScale=void 0,this.tooltip=void 0}addTooltip(t,e="bar-map-tooltip"){if(ot(`#${t}`).empty())throw"DOM ID is missing: "+t;let n=ot(`#${t}`),a=t+"-tooltip";ot(`#${a}`).empty()&&n.append("div").attr("id",a),this.tooltip=new po(a),ot(`#${a}`).classed(e,!0)}renderWithNewDomain(t,e,n=!1){this.xScale.domain(e),n&&this._renderXAxis(t),t.selectAll(".bar-row").selectAll("rect").attr("x",t=>this.xScale(t.x)-this.xScale.bandwidth()/2||0).attr("width",t=>void 0===this.xScale(t.x)?0:this.xScale.bandwidth())}drawSvg(t,e={w:1e3,h:600,top:0,left:0},n=!1){void 0!==this.xScale&&void 0!==this.yScale||this.setScales(e),this._renderAxes(t),this._renderBars(t,n)}setScales(t,e){this._setXScale(t),this._setYScale(t)}_setXScale(t={width:1e3,left:20},e,n=.05){void 0===e&&(e=Ft().key(t=>t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.xScale=Xt().domain(e).range([t.left,t.left+t.width]).padding(n)}_setYScale(t={height:600,top:20},e,n=.3){void 0===e&&(e=Ft().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.yScale=Xt().domain(e).range([t.top,t.top+t.height]).padding(n)}_renderAxes(t){this._renderXAxis(t),this._renderYAxis(t)}_renderXAxis(t){let e=qt(this.xScale).tickSize(0);t.select(".bar-map-x-axis").remove();let n=this.yScale.range()[1];t.append("g").attr("class","bar-map-x-axis").attr("transform",`translate(0, ${n})`).call(e).selectAll("text").attr("y",0).attr("x",9).attr("class","bar-map-x-label").attr("dy",".35em").attr("transform","rotate(90)").style("text-anchor","start")}_renderYAxis(t){let e=It(this.yScale).tickSize(0);t.append("g").attr("class","bar-map-y-axis").call(e).selectAll("text").attr("class","bar-map-y-label")}_renderBars(t,e=!1,n=[-.5,0,.5]){let a=On().domain(n).range(["#129cff","#ffffff","#f53956"]),r=Ft().key(t=>t.y).entries(this.data),i=Ft().key(t=>t.dataType).entries(this.data);var o;r.forEach((n,r)=>{let c=On().rangeRound([0,-this.yScale.bandwidth()]),s=wt(n.values,t=>t.r);if(e){let t=n.values[0].dataType;s=wt(i.filter(e=>e.key==t)[0].values.map(t=>t.r))}c.domain([0,s]);let l=t.append("g").classed("bar-row",!0);l.append("line").attr("x1",this.xScale.range()[0]).attr("x2",this.xScale.range()[1]).attr("y1",0).attr("y2",0).attr("transform",`translate(0, ${this.yScale(n.key)+this.yScale.bandwidth()})`).style("stroke","#efefef");let f=(o=c,Lt(At,o)).ticks(2),u=(l.append("g").attr("class","h-axis").attr("transform",`translate(${this.xScale.range()[1]}, ${this.yScale(n.key)+this.yScale.bandwidth()})`).call(f).selectAll("text").attr("font-size",6),l.selectAll("rect").data(n.values).enter().append("rect").attr("x",t=>this.xScale(t.x)-this.xScale.bandwidth()/2).attr("y",t=>this.yScale(t.y)+this.yScale.bandwidth()+c(t.r)).attr("width",this.xScale.bandwidth()).attr("height",t=>Math.abs(c(t.r))).attr("fill",t=>isNaN(t.value)?"darkgrey":a(t.value)).attr("stroke-width",0).attr("cursor","pointer")),d=this.tooltip;u.on("mouseover",t=>{d.show(`Row: ${t.y}<br/> Column: ${t.x} <br/> Value: ${t.value}<br/> Height: ${t.r}`)}).on("mouseout",t=>{d.hide()})})}}function yo(t,e,n,a,r,i="relative"){return function(t){if(ot(`#${t}`).empty()){let e=`Input Error: DOM ID ${t} is not found.`;throw console.warn(e),e}}(t),void 0===r&&(r=`${t}-svg`),void 0===a&&(a={top:0,left:0}),ot("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",r).append("g").attr("transform",`translate(${a.left}, ${a.top})`)}class vo{constructor(t,e,n=!1){$(`#${t}`).show();const a=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(a).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,a,r="fa-download"){this.createButton(t,r);ot(`#${t}`).on("click",()=>{this.downloadSvg(e,n,a)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);ot(`#${t}`).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download"){const n=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${e}`).appendTo(n),this.buttons[t]=n,n}attachTooltip(t){this.tooltip=t}downloadSvg(t,e,n){let a=$($($(`${"#"+t}`))[0]),r=a.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),i=function(t){for(var e="",n=document.styleSheets,a=0;a<n.length;a++)try{if(null==n[a].cssRules)continue;for(var r=n[a].cssRules,i=0;i<r.length;i++){var o=r[i];if(void 0!==o.style){var c,s=void 0===o.selectorText?o.selectorText:o.selectorText.replace(`#${t[0].id} `,"");try{c=$(t).find(s)}catch(t){c=[]}c.length>0&&(e+=o.selectorText+" { "+o.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var l=document.createElement("style");return l.setAttribute("type","text/css"),l.innerHTML="<![CDATA[\n"+e+"\n]]>",l}(a.get());r.prepend(i),$("#"+n).html("").hide();let o=$(`#${n}`).append(r).html(),c=new Blob([o],{type:"image/svg+xml"});saveAs(c,e),$(`#${n}`).html("").hide()}}class wo{constructor(t,e=!0,n=10,a="YlGnBu",r=2,i="heatmapTooltip",o="heatmap-tooltip"){this.data=t,this.useLog=e,this.logBase=n,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=r,this.colorScheme=a,0==ot(`#${i}`).length&&ot("body").append("div").attr("id",i),this.tooltip=new po(i),ot(`#${i}`).classed(o,!0),this.toolbar=void 0}createToolbar(t,e){return this.toolbar=new vo(t,e),this.toolbar}drawColorLegend(t,e={x:0,y:0},n=5){ho(this.data[0].unit||"Value",t,this.colorScale,e,this.useLog,n,this.logBase)}redraw(t,e,n,a={w:1e3,h:1e3},r=30){this._setXScale(a.w,e),this._setYScale(a.h,n),this.draw(t,a,r)}draw(t,e={w:1e3,h:600},n=30,a=!1,r=null){void 0===this.xList&&this._setXScale(e.w),void 0===this.yList&&this._setYScale(e.h),void 0===this.colorScale&&this._setColorScale();const i=t.selectAll(".exp-map-xlabel").data(this.xList),o=null==r?this.yScale.range()[1]+2*this.yScale.bandwidth():this.yScale.range()[1]+r;i.attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${o}) rotate(${n})`}),i.enter().append("text").attr("class",(t,e)=>`exp-map-xlabel x${e}`).attr("x",0).attr("y",0).style("text-anchor","start").style("cursor","default").style("font-size",this.xScale.bandwidth()>12?12:this.xScale.bandwidth()).attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${o}) rotate(${n})`}).merge(i).text(t=>t),i.exit().remove();t.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text(t=>t).attr("x",this.xScale.range()[1]+5).attr("y",t=>this.yScale(t)+this.yScale.bandwidth()/2).style("font-size",this.yScale.bandwidth()).attr("class",(t,e)=>`exp-map-ylabel y${e}`).attr("text-anchor","start").style("cursor","default").on("click",t=>{alert(`${t} is clicked. To be implemented`)}).on("mouseover",function(t){ot(this).classed("normal",!1).classed("highlighted",!0)}).on("mouseout",function(t){ot(this).classed("normal",!0).classed("highlighted",!1)});const c=t.selectAll(".exp-map-cell").data(this.data,t=>t.value);c.attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`);const s=this;c.enter().append("rect").attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("rx",this.r).attr("ry",this.r).attr("class","exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill","#eeeeee").on("mouseover",function(e){const n=ot(this);s.cellMouseover(e,t,n)}).on("mouseout",function(t){ot(this);s.cellMouseout()}).merge(c).style("fill",t=>a&&0==t.value?"#DDDDDD":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value)),c.exit().remove()}cellMouseout(t){lt("*").classed("highlighted",!1),this.tooltip.hide()}cellMouseover(t,e,n){const a=n.attr("row"),r=n.attr("col");e.selectAll(".exp-map-xlabel").filter(`.${a}`).classed("highlighted",!0),e.selectAll(".exp-map-ylabel").filter(`.${r}`).classed("highlighted",!0),n.classed("highlighted",!0);const i=void 0===t.displayValue?parseFloat(t.value.toExponential()).toPrecision(4):t.displayValue;this.tooltip.show(`Column: ${t.x} <br/> Row: ${t.y}<br/> Value: ${i}`)}_setXScale(t,e){this.xList=void 0!==e?e:Ft().key(t=>t.x).entries(this.data).map(t=>t.key),this.xScale=Xt().domain(this.xList).range([0,t]).padding(.05)}_setYScale(t,e){this.yList=void 0!==e?e:Ft().key(t=>t.y).entries(this.data).map(t=>t.key),this.yScale=Xt().domain(this.yList).range([0,t]).padding(.05)}_setColorScale(){let t=this.useLog,e=this.data.map(e=>t?this._log(e.value):e.value);this.colorScale=uo(e,this.colorScheme,0)}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class xo{constructor(t,e=0,n=!0,a=10,r="Greys",i=[0,1]){this.data=this._unique(t),this.dataDict={},this.cutoff=e,this.filteredData=this._filter(this.data,this.cutoff),this.dataDict=this._generateDataDict(this.filteredData),this.useLog=n,this.logBase=a,this.colorScheme=r,this.colorScale=this._setColorScale(i),this.xScale=void 0,this.yScale=void 0,this.labelScale=void 0,this.tooltip=void 0}addTooltip(t){if(ot(`#${t}`).empty())throw"DOM ID is missing: "+t;let e=t+"-tooltip";ot(`#${e}`).empty()&&ot(`#${t}`).append("div").attr("id",e),this.tooltip=new po(e,!1,40,0),ot(`#${e}`).classed("half-map-tooltip",!0)}draw(t,e,n={w:600,top:20,left:20},a=[0,1],r=!0,i=90,o,c){this._drawCanvas(t,n,a,o,c);this.drawSvg(e,n,!1,r,i,a,o,c)}drawColorLegend(t,e={x:0,y:0},n=5,a="",r=[0,1]){void 0===this.colorScale&&this._setColorScale(r),ho(a,t,this.colorScale,e,this.useLog,n,this.logBase,{h:20,w:10},"v")}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}_drawCanvas(t,e={w:600,top:20,left:20},n=[0,1],a,r){this._setScales(e,n,a,r);let i=t.node().getContext("2d");i.save(),i.rotate(-.25*Math.PI),i.clearRect(-e.w,-e.w,2*e.w,2*e.w),this.filteredData.forEach(t=>{let e=this.xScale(t.x)-this.xScale.bandwidth()/2,n=this.yScale(t.y)-this.yScale.bandwidth()/2;void 0!==e&&void 0!==n&&(t.color=0==t.value?"#fff":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value),i.fillStyle=this.colorScale(t.value),i.fillRect(e,n,this.xScale.bandwidth(),this.yScale.bandwidth()))}),i.restore()}drawSvg(t,e,n=!0,a=!0,r=90,i=[0,1],o,c){if(n){this._setScales(e,i,o,c);let n=t.append("g").attr("clip-path","url(#clip)").selectAll(".half-map-cell").data(this.filteredData);n.enter().append("rect").attr("class","half-map-cell").attr("row",t=>`y${this.yScale.domain().indexOf(t.y)}`).attr("column",t=>`x${this.xScale.domain().indexOf(t.x)}`).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("transform","rotate(-45)").merge(n).style("fill",t=>0==t.value?"#fff":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value))}a&&(this._setLabelScale(e),t.selectAll().data(this.labelScale.domain()).enter().append("text").attr("class",(t,e)=>`half-map-label l${e}`).attr("x",0).attr("y",0).attr("text-anchor","start").style("cursor","none").attr("transform",t=>{return`translate(${this.labelScale(t)-this.labelScale.step()/2}, -5) rotate(-${r})`}).text(t=>t));let s=t.append("rect").attr("class","half-map-cursor").attr("x",-this.xScale.bandwidth()/2).attr("y",-this.yScale.bandwidth()/2).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("stroke","#d2111b").style("stroke-width","1px").style("fill","none").style("display","none");t.on("mouseout",()=>{s.style("display","none"),this.tooltip.hide(),t.selectAll(".half-map-label").classed("highlighted",!1)}),ot(t.node().parentNode).style("cursor","none").style("position","absolute").on("mousemove",()=>{let e=st(t.node()),n=e[0],r=e[1],i=.25*Math.PI,o=n*Math.cos(i)-r*Math.sin(i)+this.xScale.bandwidth()/2,c=n*Math.sin(i)+r*Math.cos(i)+this.yScale.bandwidth()/2;if(n<0||r<0||o<0||c<0)return this.tooltip.hide(),void s.style("display","none");let l=Math.floor(o/this.xScale.step()),f=Math.floor(c/this.yScale.step()),u=this.xScale.domain()[l],d=this.yScale.domain()[f],h=this.dataDict[u+d];void 0!==h?(s.attr("transform",`translate(${n},${r}) rotate(-45)`),s.style("display","block"),this.tooltip.show(`${u}<br/> ${d}<br/> Value: ${h.displayValue}`),a&&(t.selectAll(".half-map-label").classed("highlighted",!1),t.select(`.l${l}`).classed("highlighted",!0),t.select(`.l${f}`).classed("highlighted",!0))):(this.tooltip.hide(),s.style("display","none"))})}_unique(t){t.sort((t,e)=>t.x<e.x?-1:t.x>e.x?1:t.y<e.y?-1:t.y>e.y?1:0);let e={};return t.filter(t=>{let n=t.x+t.y,a=t.y+t.x;return!e.hasOwnProperty(n)&&!e.hasOwnProperty(a)&&(e[n]=!0,!0)})}_filter(t,e){return t.filter(t=>!(t.value<e))}_generateDataDict(t){let e={};return t.forEach(t=>{e[t.x+t.y]=t,e[t.y+t.x]=t}),e}_setScales(t={w:600,top:20,left:20},e=[0,1],n,a){(n||void 0===this.xScale)&&this._setXScale(t,n),(a||void 0===this.yScale)&&this._setYScale(t,a),void 0===this.colorScale&&this._setColorScale(e)}_setXScale(t={w:600},e){void 0===e&&(e=Ft().key(t=>t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.xScale=Xt().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setYScale(t={w:600},e){void 0===e&&(e=Ft().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.yScale=Xt().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setLabelScale(t={w:600}){void 0===this.xScale&&this._setXScale();let e=this.xScale.domain();this.labelScale=Xt().domain(e).range([0,t.w]).padding(.05)}_setColorScale(t){let e=this.useLog,n=void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t;this.colorScale=uo(n,this.colorScheme)}}let _o={queryGene:void 0,genes:void 0,geneModel:void 0,sqtl:void 0,eqtl:void 0,gwasToGene:void 0,gwasImputed:void 0,vepDict:void 0};const So="https://dev.gtexportal.org/rest/v1/";let Mo={queryGene:So+"reference/gene?format=json&gencodeVersion=v26&genomeBuild=GRCh38%2Fhg38&geneId=",genes:"../tempData/V8.genes.csv",geneExpression:So+"expression/medianGeneExpression?datasetId=gtex_v8&hcluster=true&pageSize=10000&gencodeId=",geneModel:So+"dataset/collapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",gwasToGene:"../tempData/GWASVar2Gene_r2_08_sample_file.chr11.tsv",gwasImputed:"../tempData/gwas-traits-v8/imputed_IBD.EUR.Crohns_Disease.chr11.txt",eqtls:So+"association/singleTissueEqtl?format=json&datasetId=gtex_v8&gencodeId=",sqtls:So+"association/singleTissueSqtl?format=json&datasetId=gtex_v8&gencodeId=",ld:So+"dataset/ld?format=json&datasetId=gtex_v8&gencodeId=",vep:"../tempData/chromosome11.sample.vep.txt"},Ao={genes:t=>(t.start=parseInt(t.start),t.end=parseInt(t.end),t.pos=parseInt(t.tss),t.featureLabel=t.geneSymbol,t.featureType=t.geneType,t),geneModel:t=>(t.start=parseInt(t.start),t.end=parseInt(t.end),t.pos=t.start,t.featureLabel=t.exonId,t),geneExpression:t=>(t.x=t.geneSymbol,t.y=t.tissueSiteDetailId,t.value=t.median,t.displayValue=t.value,t),qtlFeatures:t=>(t.chr=t.chromosome,t.start=parseInt(t.pos),t.end=t.start,t.pos=parseInt(t.pos),t.featureType="variant",t.featureLabel=t.snpId||t.variantId,t.colorValue=-Math.log10(parseFloat(t.pValue)),t),qtlBubbles:(t,e)=>(t.x=t.variantId,t.y=e+"-"+t.tissueSiteDetailId,t.value=parseFloat(t.nes),t.r=-Math.log10(parseFloat(t.pValue)),t.dataType=e,t),ld:t=>{let e=t[0].split(",");return{x:e[0],y:e[1],value:t[1],displayValue:t[1].toPrecision(3)}},gwas:t=>({x:t.panel_variant_id,y:"GWAS Crohn's disease",value:parseFloat(parseFloat(t.effect_size).toPrecision(3)),r:-Math.log10(parseFloat(t.pvalue)),dataType:"GWAS"})};const ko={genes:(t,e,n)=>{const a=e.tss-n,r=e.tss+n;return t.chromosome==e.chromosome&&t.tss>=a&&t.tss<=r&&("protein coding"==t.geneType||"lincRNA"==t.geneType)},qtls:(t,e,n)=>{const a=e.tss-n,r=e.tss+n;return t.pos>=a&&t.pos<=r},gwas:(t,e)=>{let n=parseInt(t.panel_variant_id.split("_")[1]);return n<=e+1e6&&n>=e-1e6},vep:(t,e)=>{let n=e.split(".")[0];return t.gencodeId==n}},To={genes:(t,e)=>parseInt(t.tss)-parseInt(e.tss),geneExpression:(t,e)=>parseInt(t.pos)-parseInt(e.pos),variants:(t,e)=>parseInt(t.pos)-parseInt(e.pos)};function $o(t,e=zo){!function(t=zo){t.height=Object.keys(t.panels).reduce((e,n,a)=>{let r=t.panels[n];return r.yPos=e,e+r.height},0)}(e);const n=[p(e.urls.queryGene+t,{credentials:"include"}),h(e.urls.genes),h(e.urls.gwasToGene)];e.svg=yo(e.id,e.width,e.height,{left:0,top:0}),Promise.all(n).then(n=>{n[0].gene.length>1&&console.warn("More than one gene matching the query:",t),e.data.queryGene=n[0].gene[0],e.data.genes=Co(n[1],e),e.data.gwasToGene=function(t,e){let n=e.data.genes.reduce((t,e)=>(t[e.geneSymbol]=e,t),{}),a=t.filter(t=>n.hasOwnProperty(t.eGene_name)).reduce((t,e)=>(t.hasOwnProperty(e.GWAS_trait)||(t[e.GWAS_trait]={}),t[e.GWAS_trait].hasOwnProperty(e.eGene_name)?t[e.GWAS_trait][e.eGene_name]=t[e.GWAS_trait][e.eGene_name]>e.GWAS_p_value_mlog?e.GWAS_p_value_mlog:t[e.GWAS_trait][e.eGene_name]:t[e.GWAS_trait][e.eGene_name]=e.GWAS_p_value_mlog,t),{}),r=[];return console.log(a),Object.keys(a).forEach(t=>{Object.keys(n).forEach(e=>{r.push({x:e,y:t,value:a[t][e]?a[t][e]:0,displayValue:a[t][e]?a[t][e]:0,pos:n[e].pos})})}),r}(n[2],e);const a=["geneModel","eqtls","sqtls","vep","gwasImputed"].map(t=>{if("vep"==t||"gwasImputed"==t)return h(e.urls[t]);const n=e.urls[t]+e.data.queryGene.gencodeId;return p(n,{credentials:"include"})}),r=["ld"].map(t=>{const n=e.urls[t]+e.data.queryGene.gencodeId;return p(n,{credentials:"include"})});Promise.all(a).then(t=>{e.data.geneModel=t[0],e.data.eqtl=t[1],e.data.sqtl=t[2],e.data.vepDict=void 0===t[3]?void 0:t[3].filter(t=>e.dataFilters.vep(t,e.data.queryGene.gencodeId)).reduce((t,e)=>(t[e.variant]=e.vep,t),{}),e.data.gwasDict=t[4].filter(t=>e.dataFilters.gwas(t,e.data.queryGene.tss)).map(e.parsers.gwas).reduce((t,e)=>(t[e.x]=e,t),{}),e.data.gwasImputed=t[4].filter(t=>e.dataFilters.gwas(t,e.data.queryGene.tss)).map(e.parsers.gwas),No(e);const n={eqtl:e.data.eqtl.singleTissueEqtl,sqtl:e.data.sqtl.singleTissueSqtl,gwasImputed:e.data.gwasImputed},a=Eo(e,n);Promise.all(r).then(t=>{e.data.ld=t,function(t=zo,e,n,a="bars"){let r=void 0;0==t.ld.data.length&&function(t=zo){let e=t.data.ld[0].ld.map(t.parsers.ld);const n={};e.forEach(t=>{n[t.x]=!0,n[t.y]=!0}),t.ld.data=e.concat(Object.keys(n).map(t=>({x:t,y:t,value:1,displayValue:"1"})))}(t);switch(a){case"bubbles":r=function(t=zo,e){let n=t.data.queryGene,a=t.svg,r=Lo(t,e),i=new go(r.data,r.useLog,r.logBase,r.colorScheme),o=a.append("g").attr("id",r.id).attr("class","focus").attr("transform",`translate(${r.margin.left}, ${r.margin.top+r.yPos})`),c=r.width-(r.margin.left+r.margin.right),s=r.height-(r.margin.top+r.margin.bottom);return i.setScales({w:c,h:s,top:0,left:0},[-.75,.75]),i.drawColorLegend(a,{x:r.margin.left+c+20,y:r.yPos+r.margin.top},3,"NES",{h:15,w:10},"v"),i.drawBubbleLegend(a,{x:r.margin.left+c+20,y:r.yPos+r.margin.top+150,title:"-log10(p-value)"},5,"-log10(p-value)","v"),i.fullDomain=i.xScale.domain(),i.addTooltip("locus-browser","locus-browser"),i.svg=o,Uo(n,i),i}(t,e);break;case"bars":r=function(t=zo,e){let n=Lo(t,e),a=n.width-(n.margin.left+n.margin.right),r=n.height-(n.margin.top+n.margin.bottom),i=new mo(n.data,n.colorScheme);return i.svg=t.svg.append("g").attr("id",n.id).attr("class","focus").attr("transform",`translate(${n.margin.left}, ${n.margin.top+n.yPos})`),i.setScales({width:a,height:r,top:0,left:0},[-.75,.75]),i.addTooltip("locus-browser","locus-browser"),i.fullDomain=i.xScale.domain(),Uo(t.data.queryGene,i),i}(t,e);break;default:console.error("unrecognized type")}t.ldBrush=function(t,e){let n=new xo(t.data,t.cutoff,!1,void 0,t.colorScheme,[0,1]);n.addTooltip("locus-browser");let a=ot(`#${t.id}`).append("canvas").attr("id",t.id+"-ld-canvas").attr("width",t.width).attr("height",t.width).style("position","absolute");a.node().getContext("2d").translate(t.margin.left,t.margin.top);let r=yo(t.id,t.width,t.width,{top:t.margin.top,left:t.margin.left});r.attr("class","ld").attr("id","ldG");const i=ot(r.node().parentNode);n.drawColorLegend(i,{x:t.margin.left,y:100},10,"LD");const o={w:t.width-(t.margin.left+t.margin.right),top:0,left:0};return n.draw(a,r,o,[0,1],!1,void 0,e.xScale.domain(),e.xScale.domain()),()=>{r.selectAll("*").remove(),n.draw(a,r,o,[0,1],!1,void 0,e.xScale.domain(),e.xScale.domain())}}(t.ld,r);let i={w:Math.abs(r.xScale.range()[1]-r.xScale.range()[0]),h:Math.abs(r.yScale.range()[1]-r.yScale.range()[0]),top:0,left:0};r.drawSvg(r.svg,i,!0),Fo(r),Io(t.data.queryGene,n,r,t,t.ldBrush),t.bmap=r}(e,n,a)})})}).catch(t=>{console.error(t)})}function Co(t,e){let n=t.filter(t=>e.dataFilters.genes(t,e.data.queryGene,e.genomicWindow)).map(e.parsers.genes);return n.sort(e.dataSort.genes),n}function Do(t){Object.keys(t.panels).forEach(e=>{console.log(e);let n=t.panels[e];"qtl-map"!=n.id&&ot(`#${n.id}`).remove()}),ot("#zoom-size").text(`genomic range: ${(2*t.genomicWindow).toLocaleString()} bases`),No(t);let e=Eo(t);Io(t.data.queryGene,e,t.bmap,t,t.ldBrush)}function No(t=zo){const e=function(t=zo){let e=t.panels.geneMap,n=t.data.queryGene,a=t.svg,r=t.data.gwasToGene;e.data=r,e.data.sort((t,e)=>t.pos-e.pos);let i=e.width-(e.margin.left+e.margin.right),o=e.height-(e.margin.top+e.margin.bottom);if(i*o<=0)throw"The inner height and width of the GWAS heatmap panel must be positive values. Check the height and margin configuration of this panel";let c=a.append("g").attr("id",e.id).attr("transform",`translate(${e.margin.left}, ${e.margin.top})`),s=new wo(e.data,e.useLog,10,e.colorScheme,e.cornerRadius,"locus-browser-tooltip","locus-browser-tooltip");return s.draw(c,{w:i,h:o},e.columnLabel.angle,!1,e.columnLabel.adjust),s.drawColorLegend(c,{x:20,y:-20},5),c.selectAll(".exp-map-xlabel").attr("fill",t=>t==n.geneSymbol?"red":"#000000").style("cursor","pointer").on("click",e=>{t.genomicWindow=1e6,Do(e)}),s.svg=c,s}(t);let n=t.data.genes,a=t.data.queryGene,r=t.svg;n.forEach(t=>{});let i=e.xScale;lt(".exp-map-xlabel").on("click",e=>{ot("#"+t.id).selectAll("*").remove(),ot("#"+t.ldId).selectAll("*").remove(),t.data=_o,t.panels.eqtlTrack.data=null,t.panels.sqtlTrack.data=null,t.panels.geneMap.data=null,t.ld.data=[],t.genomicWindow=1e6,ot("#zoom-size").text(`genomic range: ${(2*t.genomicWindow).toLocaleString()} bases`),$o(e,t)});const o={tssTrack:n,exonTrack:t.data.geneModel.collapsedGeneModelExon},c=function(t,e,n=zo,a){let r=n.panels.tssTrack;r.data=a.tssTrack;const i=Po(t.tss,e,n.genomicWindow,r,!1);let o=n.parsers.geneModel,c=a.exonTrack.map(o),s=n.panels.geneModelTrack;return s.data=c,Po(t.tss,e,n.genomicWindow,s,!0),i}(a,r,t,o);let s=t.panels.geneMap,l=t.panels.tssTrack,f=s.margin.left-l.margin.left+i.bandwidth()/2,u=l.height-(l.margin.top+l.margin.bottom),d=Co(t.data.genes,t);return c.svg.selectAll(".connect").remove(),c.svg.selectAll(".connect").data(d).enter().append("line").attr("class","connect").attr("x1",t=>i(t.geneSymbol)+f).attr("x2",t=>c.scale(t.tss)).attr("y1",u/2-20).attr("y2",u/2).attr("stroke",t=>t.geneSymbol==a.geneSymbol?"red":"#ababab").attr("stroke-width",.5),c.svg.selectAll(".connect2").data(d).enter().append("line").attr("class","connect2").attr("x1",t=>i(t.geneSymbol)+f).attr("x2",t=>i(t.geneSymbol)+f).attr("y1",u/2-20).attr("y2",u/2-50).attr("stroke",t=>t.geneSymbol==a.geneSymbol?"red":"#ababab").attr("stroke-width",.5),n}function Lo(t=zo,e){let n=t.panels.qtlMap,a=t.parsers.qtlBubbles;return n.data=e.gwasImputed,n.data=n.data.concat(e.eqtl.map(t=>a(t,"eQTL"))),n.data=n.data.concat(e.sqtl.map(t=>a(t,"sQTL"))),n}function Eo(t=zo,e,n=30){let a=t.data.queryGene,r=t.svg,i=t.panels.eqtlTrack,o=t.panels.sqtlTrack;return null!==i.data&&null!==o.data||(i.data=qo(e.eqtl,t),o.data=qo(e.sqtl,t)),Po(a.tss,r,t.genomicWindow,i,!1,!0,n),Po(a.tss,r,t.genomicWindow,o,!1,!0,n)}function qo(t,e=zo){const n=e.parsers.qtlFeatures,a=e.dataSort.variants;let r=t.reduce((t,e)=>(t.hasOwnProperty(e.variantId)?t[e.variantId].pValue>e.pValue&&(t[e.variantId]=e):t[e.variantId]=e,t),{}),i=Object.values(r).map(n);return i.sort(a),i}function Io(t,e,n,a=zo,r){const i=a.panels.qtlMap,o=a.panels.sqtlTrack;let c={w:100,h:Math.abs(a.panels.tssTrack.yPos+a.panels.tssTrack.margin.top-(a.panels.sqtlTrack.yPos+a.panels.sqtlTrack.height+20))};bo.renderAxis(e.dom,e.scale,o.height+30,!0,(t,e,c,s)=>{let l=n.fullDomain.filter(t=>{let e=parseInt(t.split("_")[1]);return e>=c&&e<=s});n.renderWithNewDomain(n.svg,l),Fo(n),function(t){t.svg.selectAll(".bubble-map-ylabel").remove(),t.svg.select(".bar-map-y-axis").remove(),t.svg.select(".custom-map-y-axis").remove();let e=It(t.yScale).tickSize(0),n=t.svg.append("g").attr("class","custom-map-y-axis").attr("transform",`translate(${-t.xScale.bandwidth()}, ${t.yScale.bandwidth()/3})`).call(e);n.select("path").remove(),n.selectAll("text").attr("class","custom-map-y-label").attr("fill",t=>t.startsWith("GWAS")?"#10b1b8":t.startsWith("sQTL")?"#cc67b1":"#7f7f7f")}(n),function(t,e){t.svg.selectAll(".bubble-map-xlabel").remove(),t.svg.selectAll(".bar-map-x-axis").remove(),t.svg.selectAll(".custom-map-x-axis").remove();let n=qt(t.xScale).tickSize(0),a=t.yScale.range()[1]+t.yScale.step(),r=t.svg.append("g").attr("class","custom-map-x-axis").attr("transform",`translate(${-t.xScale.bandwidth()/2}, ${a})`).call(n);r.select("path").remove(),e.panels.qtlMap.showRowLabel?r.selectAll("text").attr("y",0).attr("x",9).attr("class",(t,e)=>`custom-map-x-label x${e}`).attr("dy",".35em").attr("transform","rotate(90)").style("text-anchor","start").text(t=>(t=t.replace("chr","")).split("_").splice(0,2).join("_")):r.selectAll("text").remove(),r.selectAll(".tick").append("rect").attr("class","vep-box").attr("x",-t.xScale.bandwidth()/2).attr("y",-t.yScale.bandwidth()-5).attr("width",t.xScale.bandwidth()).attr("height",t.yScale.bandwidth()).style("fill",t=>{if(void 0===e.data.vepDict)return"none";let n=e.data.vepDict[t];return void 0===n?"#ffffff":Go[n]||"#ababab"}).style("stroke","#eeeeee").style("stoke-width",1).on("mouseover",function(n){let a=e.data.vepDict[n]||"Not available";t.tooltip.show(`Variant: ${n} <br/> VEP: ${a}`),ot(this).style("stroke","#f53956")}).on("mouseout",function(){t.tooltip.hide(),ot(this).style("stroke","#eeeeee")})}(n,a),void 0!==r&&r(),lt(".brushLine").remove(),ot(".brush").append("line").classed("brushLine",!0).attr("x1",t).attr("x2",n.xScale.range()[0]+i.margin.left-o.margin.left).attr("y1",5).attr("y2",a.panels.qtlMap.margin.top-40).style("stroke-width",1).style("stroke","#ababab"),ot(".brush").append("line").classed("brushLine",!0).attr("x1",e).attr("x2",n.xScale.range()[1]+i.margin.left-o.margin.left).attr("y1",5).attr("y2",a.panels.qtlMap.margin.top-40).style("stroke-width",1).style("stroke","#ababab")},c,t.tss)}function Po(t,e,n,a=zo.panels.tssTrack,r,i=!1,o){let c=a.width-(a.margin.left+a.margin.right),s=a.height-(a.margin.top+a.margin.bottom),l=e.append("g").attr("id",a.id).attr("transform",`translate(${a.margin.left}, ${a.margin.top+a.yPos})`),f=new bo(a.data,t,n);return f.render(l,c,s,r,a.label,a.color.background,a.color.feature,i,o),f.svg=l,f}function Uo(t,e){let n="+"==t.strand?t.start:t.end,a="+"==t.strand?t.end:t.start,r=e.fullDomain;const i=t=>r.filter((e,n)=>{let a=parseFloat(e.split("_")[1]);if(a===t)return!0;if(void 0===r[n+1])return!1;let i=parseFloat(r[n+1].split("_")[1])||void 0;return(a-t)*(i-t)<0});let o=i(n),c=i(a);e.tss=o[0],e.tes=c[0]}function Fo(t){let e=t.svg;ot("#siteMarkers").selectAll("*").remove(),ot("#siteMarkers").remove();let n=e.append("g").attr("id","siteMarkers");t.tss&&t.xScale(t.tss)&&(n.append("line").attr("x1",t.xScale(t.tss)+t.xScale.bandwidth()/2).attr("x2",t.xScale(t.tss)+t.xScale.bandwidth()/2).attr("y1",-10).attr("y2",t.yScale.range()[1]).style("stroke","#94a8b8").style("stroke-width",2),n.append("text").text("TSS").attr("x",t.xScale(t.tss)).attr("y",-12).attr("text-anchor","center").style("font-size","12px")),t.tes&&t.xScale(t.tes)&&(n.append("line").attr("x1",t.xScale(t.tes)+t.xScale.bandwidth()/2).attr("x2",t.xScale(t.tes)+t.xScale.bandwidth()/2).attr("y1",-10).attr("y2",t.yScale.range()[1]).style("stroke","#748797").style("stroke-width",2),n.append("text").text("TES").attr("x",t.xScale(t.tes)).attr("y",-12).attr("text-anchor","center").style("font-size","12px"))}const Yo=window.innerWidth,Go={splice_acceptor_variant:"#910807",splice_donor_variant:"#910807",splice_region_variant:"#ee974d",transcript_ablation:"#af6563",stop_gained:"#af6563",framshift_variant:"#af6563",stop_lost:"#af6563",start_lost:"#af6563",inframe_insertion:"#f9acb0",infram_deletion:"#f9acb0",missense_variant:"#f9acb0",protein_altering_variant:"#f9acb0"},zo={id:"locus-browser",ldId:"ld-browser",width:Yo,height:null,genomicWindow:1e6,data:_o,urls:Mo,parsers:Ao,dataFilters:ko,dataSort:To,panels:{geneMap:{id:"gene-map",data:null,useLog:!0,logBase:null,margin:{top:0,right:100,bottom:0,left:80},width:Yo,height:100,colorScheme:"YlGnBu",cornerRadius:2,columnLabel:{angle:90,adjust:10},rowLabel:{width:100}},tssTrack:{id:"tss-track",label:"TSS location",data:null,yPos:null,margin:{top:50,right:50,bottom:0,left:80},width:Yo,height:70,color:{background:"#ffffff",feature:"#ababab"}},geneModelTrack:{id:"gene-model-track",label:"Gene model",yPos:null,margin:{top:0,right:50,bottom:10,left:80},width:Yo,height:30,color:{background:"#ffffff",feature:"#910807"}},eqtlTrack:{id:"eqtl-track",label:"eQTL summary",data:null,yPos:null,margin:{top:0,right:50,bottom:0,left:80},width:Yo,height:20,color:{background:"#ffffff",feature:"#ababab"}},sqtlTrack:{id:"sqtl-track",label:"sQTL summary",data:null,yPos:null,margin:{top:0,right:50,bottom:0,left:80},width:Yo,height:20,color:{background:"#ffffff",feature:"#ababab"}},qtlMap:{id:"qtl-map",width:Yo,data:null,yPos:null,margin:{top:100,right:100,bottom:120,left:200},height:500,colorScheme:"RdBu",colorScaleDomain:[-1,1],useLog:!1,logBase:null,label:{column:{show:!0,angle:90,adjust:10,location:"bottom",textAlign:"left"},row:{show:!0,width:150,angle:0,adjust:0,location:"left",textAlign:"right"}}}},ld:{id:"ld-browser",data:[],cutoff:.1,width:Yo,margin:{top:10,right:100,bottom:0,left:200},colorScheme:"Greys"}};return t.data=_o,t.dataUrls=Mo,t.dataParsers=Ao,t.dataFilters=ko,t.dataSort=To,t.render=$o,t.setUIEvents=function(t,e){ot("#zoom-plus").style("cursor","pointer").on("click",()=>{e.genomicWindow=e.genomicWindow<=5e4?5e4:e.genomicWindow/2,Do(e)}),ot("#zoom-minus").style("cursor","pointer").on("click",()=>{e.genomicWindow=e.genomicWindow>=1e6?1e6:2*e.genomicWindow,Do(e)}),ot("#zoom-reset").style("cursor","pointer").on("click",()=>{e.genomicWindow=1e6,console.log(e.genomicWindow),Do(e)}),ot("#zoom-size").text(`genomic range: ${(2*e.genomicWindow).toLocaleString()} bases`)},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
