var EqtlViolinPlot=function(e){"use strict";var t={},n={},r=34,a=10,i=13;function f(e){return new Function("d","return {"+e.map(function(e,t){return JSON.stringify(e)+": d["+t+"]"}).join(",")+"}")}function c(e){var c=new RegExp('["'+e+"\n\r]"),o=e.charCodeAt(0);function u(e,f){var c,u=[],s=e.length,l=0,d=0,h=s<=0,b=!1;function p(){if(h)return n;if(b)return b=!1,t;var f,c,u=l;if(e.charCodeAt(u)===r){for(;l++<s&&e.charCodeAt(l)!==r||e.charCodeAt(++l)===r;);return(f=l)>=s?h=!0:(c=e.charCodeAt(l++))===a?b=!0:c===i&&(b=!0,e.charCodeAt(l)===a&&++l),e.slice(u+1,f-1).replace(/""/g,'"')}for(;l<s;){if((c=e.charCodeAt(f=l++))===a)b=!0;else if(c===i)b=!0,e.charCodeAt(l)===a&&++l;else if(c!==o)continue;return e.slice(u,f)}return h=!0,e.slice(u,s)}for(e.charCodeAt(s-1)===a&&--s,e.charCodeAt(s-1)===i&&--s;(c=p())!==n;){for(var g=[];c!==t&&c!==n;)g.push(c),c=p();f&&null==(g=f(g,d++))||u.push(g)}return u}function s(t){return t.map(l).join(e)}function l(e){return null==e?"":c.test(e+="")?'"'+e.replace(/"/g,'""')+'"':e}return{parse:function(e,t){var n,r,a=u(e,function(e,a){if(n)return n(e,a-1);r=e,n=t?function(e,t){var n=f(e);return function(r,a){return t(n(r),a,e)}}(e,t):f(e)});return a.columns=r||[],a},parseRows:u,format:function(t,n){return null==n&&(n=function(e){var t=Object.create(null),n=[];return e.forEach(function(e){for(var r in e)r in t||n.push(t[r]=r)}),n}(t)),[n.map(l).join(e)].concat(t.map(function(t){return n.map(function(e){return l(t[e])}).join(e)})).join("\n")},formatRows:function(e){return e.map(s).join("\n")}}}c(","),c("\t");function o(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.json()}var u="http://www.w3.org/1999/xhtml",s={svg:"http://www.w3.org/2000/svg",xhtml:u,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function l(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),s.hasOwnProperty(t)?{space:s[t],local:e}:e}function d(e){var t=l(e);return(t.local?function(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}:function(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===u&&t.documentElement.namespaceURI===u?t.createElement(e):t.createElementNS(n,e)}})(t)}function h(){}function b(e){return null==e?h:function(){return this.querySelector(e)}}function p(){return[]}function g(e){return null==e?p:function(){return this.querySelectorAll(e)}}var v=function(e){return function(){return this.matches(e)}};if("undefined"!=typeof document){var m=document.documentElement;if(!m.matches){var y=m.webkitMatchesSelector||m.msMatchesSelector||m.mozMatchesSelector||m.oMatchesSelector;v=function(e){return function(){return y.call(this,e)}}}}var w=v;function x(e){return new Array(e.length)}function _(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}_.prototype={constructor:_,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};var M="$";function A(e,t,n,r,a,i){for(var f,c=0,o=t.length,u=i.length;c<u;++c)(f=t[c])?(f.__data__=i[c],r[c]=f):n[c]=new _(e,i[c]);for(;c<o;++c)(f=t[c])&&(a[c]=f)}function T(e,t,n,r,a,i,f){var c,o,u,s={},l=t.length,d=i.length,h=new Array(l);for(c=0;c<l;++c)(o=t[c])&&(h[c]=u=M+f.call(o,o.__data__,c,t),u in s?a[c]=o:s[u]=o);for(c=0;c<d;++c)(o=s[u=M+f.call(e,i[c],c,i)])?(r[c]=o,o.__data__=i[c],s[u]=null):n[c]=new _(e,i[c]);for(c=0;c<l;++c)(o=t[c])&&s[h[c]]===o&&(a[c]=o)}function S(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}function k(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function E(e,t){return e.style.getPropertyValue(t)||k(e).getComputedStyle(e,null).getPropertyValue(t)}function N(e){return e.trim().split(/^|\s+/)}function C(e){return e.classList||new D(e)}function D(e){this._node=e,this._names=N(e.getAttribute("class")||"")}function I(e,t){for(var n=C(e),r=-1,a=t.length;++r<a;)n.add(t[r])}function P(e,t){for(var n=C(e),r=-1,a=t.length;++r<a;)n.remove(t[r])}function z(){this.textContent=""}function U(){this.innerHTML=""}function F(){this.nextSibling&&this.parentNode.appendChild(this)}function Y(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function G(){return null}function L(){var e=this.parentNode;e&&e.removeChild(this)}function V(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function R(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}D.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};var H={},O=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(H={mouseenter:"mouseover",mouseleave:"mouseout"}));function j(e,t,n){return e=q(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function q(e,t,n){return function(r){var a=O;O=r;try{e.call(this,this.__data__,t,n)}finally{O=a}}}function X(e){return function(){var t=this.__on;if(t){for(var n,r=0,a=-1,i=t.length;r<i;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++a]=n:this.removeEventListener(n.type,n.listener,n.capture);++a?t.length=a:delete this.__on}}}function B(e,t,n){var r=H.hasOwnProperty(e.type)?j:q;return function(a,i,f){var c,o=this.__on,u=r(t,i,f);if(o)for(var s=0,l=o.length;s<l;++s)if((c=o[s]).type===e.type&&c.name===e.name)return this.removeEventListener(c.type,c.listener,c.capture),this.addEventListener(c.type,c.listener=u,c.capture=n),void(c.value=t);this.addEventListener(e.type,u,n),c={type:e.type,name:e.name,value:t,listener:u,capture:n},o?o.push(c):this.__on=[c]}}function Z(e,t,n){var r=k(e),a=r.CustomEvent;"function"==typeof a?a=new a(t,n):(a=r.document.createEvent("Event"),n?(a.initEvent(t,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(t,!1,!1)),e.dispatchEvent(a)}var W=[null];function K(e,t){this._groups=e,this._parents=t}function Q(){return new K([[document.documentElement]],W)}function J(e){return"string"==typeof e?new K([[document.querySelector(e)]],[document.documentElement]):new K([[e]],W)}function ee(){for(var e,t=O;e=t.sourceEvent;)t=e;return t}function te(e){var t=ee();return t.changedTouches&&(t=t.changedTouches[0]),function(e,t){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}var a=e.getBoundingClientRect();return[t.clientX-a.left-e.clientLeft,t.clientY-a.top-e.clientTop]}(e,t)}function ne(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}K.prototype=Q.prototype={constructor:K,select:function(e){"function"!=typeof e&&(e=b(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var i,f,c=t[a],o=c.length,u=r[a]=new Array(o),s=0;s<o;++s)(i=c[s])&&(f=e.call(i,i.__data__,s,c))&&("__data__"in i&&(f.__data__=i.__data__),u[s]=f);return new K(r,this._parents)},selectAll:function(e){"function"!=typeof e&&(e=g(e));for(var t=this._groups,n=t.length,r=[],a=[],i=0;i<n;++i)for(var f,c=t[i],o=c.length,u=0;u<o;++u)(f=c[u])&&(r.push(e.call(f,f.__data__,u,c)),a.push(f));return new K(r,a)},filter:function(e){"function"!=typeof e&&(e=w(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var i,f=t[a],c=f.length,o=r[a]=[],u=0;u<c;++u)(i=f[u])&&e.call(i,i.__data__,u,f)&&o.push(i);return new K(r,this._parents)},data:function(e,t){if(!e)return b=new Array(this.size()),s=-1,this.each(function(e){b[++s]=e}),b;var n,r=t?T:A,a=this._parents,i=this._groups;"function"!=typeof e&&(n=e,e=function(){return n});for(var f=i.length,c=new Array(f),o=new Array(f),u=new Array(f),s=0;s<f;++s){var l=a[s],d=i[s],h=d.length,b=e.call(l,l&&l.__data__,s,a),p=b.length,g=o[s]=new Array(p),v=c[s]=new Array(p);r(l,d,g,v,u[s]=new Array(h),b,t);for(var m,y,w=0,x=0;w<p;++w)if(m=g[w]){for(w>=x&&(x=w+1);!(y=v[x])&&++x<p;);m._next=y||null}}return(c=new K(c,a))._enter=o,c._exit=u,c},enter:function(){return new K(this._enter||this._groups.map(x),this._parents)},exit:function(){return new K(this._exit||this._groups.map(x),this._parents)},merge:function(e){for(var t=this._groups,n=e._groups,r=t.length,a=n.length,i=Math.min(r,a),f=new Array(r),c=0;c<i;++c)for(var o,u=t[c],s=n[c],l=u.length,d=f[c]=new Array(l),h=0;h<l;++h)(o=u[h]||s[h])&&(d[h]=o);for(;c<r;++c)f[c]=t[c];return new K(f,this._parents)},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,a=e[t],i=a.length-1,f=a[i];--i>=0;)(r=a[i])&&(f&&f!==r.nextSibling&&f.parentNode.insertBefore(r,f),f=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=S);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var f,c=n[i],o=c.length,u=a[i]=new Array(o),s=0;s<o;++s)(f=c[s])&&(u[s]=f);u.sort(t)}return new K(a,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){var e=new Array(this.size()),t=-1;return this.each(function(){e[++t]=this}),e},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],a=0,i=r.length;a<i;++a){var f=r[a];if(f)return f}return null},size:function(){var e=0;return this.each(function(){++e}),e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var a,i=t[n],f=0,c=i.length;f<c;++f)(a=i[f])&&e.call(a,a.__data__,f,i);return this},attr:function(e,t){var n=l(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?function(e){return function(){this.removeAttributeNS(e.space,e.local)}}:function(e){return function(){this.removeAttribute(e)}}:"function"==typeof t?n.local?function(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}:function(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}:n.local?function(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}:function(e,t){return function(){this.setAttribute(e,t)}})(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?function(e){return function(){this.style.removeProperty(e)}}:"function"==typeof t?function(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}:function(e,t,n){return function(){this.style.setProperty(e,t,n)}})(e,t,null==n?"":n)):E(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?function(e){return function(){delete this[e]}}:"function"==typeof t?function(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}:function(e,t){return function(){this[e]=t}})(e,t)):this.node()[e]},classed:function(e,t){var n=N(e+"");if(arguments.length<2){for(var r=C(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof t?function(e,t){return function(){(t.apply(this,arguments)?I:P)(this,e)}}:t?function(e){return function(){I(this,e)}}:function(e){return function(){P(this,e)}})(n,t))},text:function(e){return arguments.length?this.each(null==e?z:("function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}:function(e){return function(){this.textContent=e}})(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?U:("function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}:function(e){return function(){this.innerHTML=e}})(e)):this.node().innerHTML},raise:function(){return this.each(F)},lower:function(){return this.each(Y)},append:function(e){var t="function"==typeof e?e:d(e);return this.select(function(){return this.appendChild(t.apply(this,arguments))})},insert:function(e,t){var n="function"==typeof e?e:d(e),r=null==t?G:"function"==typeof t?t:b(t);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(L)},clone:function(e){return this.select(e?R:V)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,a,i=function(e){return e.trim().split(/^|\s+/).map(function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}})}(e+""),f=i.length;if(!(arguments.length<2)){for(c=t?B:X,null==n&&(n=!1),r=0;r<f;++r)this.each(c(i[r],t,n));return this}var c=this.node().__on;if(c)for(var o,u=0,s=c.length;u<s;++u)for(r=0,o=c[u];r<f;++r)if((a=i[r]).type===o.type&&a.name===o.name)return o.value},dispatch:function(e,t){return this.each(("function"==typeof t?function(e,t){return function(){return Z(this,e,t.apply(this,arguments))}}:function(e,t){return function(){return Z(this,e,t)}})(e,t))}};var re,ae,ie=(1===(re=ne).length&&(ae=re,re=function(e,t){return ne(ae(e),t)}),{left:function(e,t,n,r){for(null==n&&(n=0),null==r&&(r=e.length);n<r;){var a=n+r>>>1;re(e[a],t)<0?n=a+1:r=a}return n},right:function(e,t,n,r){for(null==n&&(n=0),null==r&&(r=e.length);n<r;){var a=n+r>>>1;re(e[a],t)>0?r=a:n=a+1}return n}}).right;function fe(e){return null===e?NaN:+e}function ce(e,t){var n=function(e,t){var n,r,a=e.length,i=0,f=-1,c=0,o=0;if(null==t)for(;++f<a;)isNaN(n=fe(e[f]))||(o+=(r=n-c)*(n-(c+=r/++i)));else for(;++f<a;)isNaN(n=fe(t(e[f],f,e)))||(o+=(r=n-c)*(n-(c+=r/++i)));if(i>1)return o/(i-1)}(e,t);return n?Math.sqrt(n):n}function oe(e,t){var n,r,a,i=e.length,f=-1;if(null==t){for(;++f<i;)if(null!=(n=e[f])&&n>=n)for(r=a=n;++f<i;)null!=(n=e[f])&&(r>n&&(r=n),a<n&&(a=n))}else for(;++f<i;)if(null!=(n=t(e[f],f,e))&&n>=n)for(r=a=n;++f<i;)null!=(n=t(e[f],f,e))&&(r>n&&(r=n),a<n&&(a=n));return[r,a]}function ue(e,t,n){e=+e,t=+t,n=(a=arguments.length)<2?(t=e,e=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((t-e)/n)),i=new Array(a);++r<a;)i[r]=e+r*n;return i}var se=Math.sqrt(50),le=Math.sqrt(10),de=Math.sqrt(2);function he(e,t,n){var r=(t-e)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=se?10:i>=le?5:i>=de?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=se?10:i>=le?5:i>=de?2:1)}function be(e,t,n){if(null==n&&(n=fe),r=e.length){if((t=+t)<=0||r<2)return+n(e[0],0,e);if(t>=1)return+n(e[r-1],r-1,e);var r,a=(r-1)*t,i=Math.floor(a),f=+n(e[i],i,e);return f+(+n(e[i+1],i+1,e)-f)*(a-i)}}function pe(e,t){var n,r,a=e.length,i=-1;if(null==t){for(;++i<a;)if(null!=(n=e[i])&&n>=n)for(r=n;++i<a;)null!=(n=e[i])&&n>r&&(r=n)}else for(;++i<a;)if(null!=(n=t(e[i],i,e))&&n>=n)for(r=n;++i<a;)null!=(n=t(e[i],i,e))&&n>r&&(r=n);return r}function ge(e,t){var n,r=e.length,a=-1,i=[];if(null==t)for(;++a<r;)isNaN(n=fe(e[a]))||i.push(n);else for(;++a<r;)isNaN(n=fe(t(e[a],a,e)))||i.push(n);return be(i.sort(ne),.5)}function ve(e,t){var n,r,a=e.length,i=-1;if(null==t){for(;++i<a;)if(null!=(n=e[i])&&n>=n)for(r=n;++i<a;)null!=(n=e[i])&&r>n&&(r=n)}else for(;++i<a;)if(null!=(n=t(e[i],i,e))&&n>=n)for(r=n;++i<a;)null!=(n=t(e[i],i,e))&&r>n&&(r=n);return r}function me(e){if(0==$(`#${e}`).length){let t=`Input Error: DOM ID ${e} is not found.`;throw console.warn(t),t}}function ye(e={x:20,y:20,scaleFactor:1,diverging:!1,bubble:!1}){let t=ue(1,e.x+1),n=ue(1,e.y+1),r=[];return t.forEach(t=>{t="x"+t.toString(),n.forEach(n=>{n="y"+n.toString();let a=Math.random()*e.scaleFactor;a=e.diverging&&Math.random()<.5?-a:a,r.push({x:t,y:n,value:a,displayValue:parseFloat(a.toExponential()).toPrecision(3),r:e.bubble?30*Math.random():void 0})})}),r}var we=function e(t){function n(e,n){var r,a;return e=null==e?0:+e,n=null==n?1:+n,function(){var i;if(null!=r)i=r,r=null;else do{r=2*t()-1,i=2*t()-1,a=r*r+i*i}while(!a||a>1);return e+n*i*Math.sqrt(-2*Math.log(a)/a)}}return n.source=e,n}(function(){return Math.random()});function xe(){}function _e(e,t){var n=new xe;if(e instanceof xe)e.each(function(e,t){n.set(t,e)});else if(Array.isArray(e)){var r,a=-1,i=e.length;if(null==t)for(;++a<i;)n.set(a,e[a]);else for(;++a<i;)n.set(t(r=e[a],a,e),r)}else if(e)for(var f in e)n.set(f,e[f]);return n}function Me(){var e,t,n,r=[],a=[];function i(n,a,f,c){if(a>=r.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var o,u,s,l=-1,d=n.length,h=r[a++],b=_e(),p=f();++l<d;)(s=b.get(o=h(u=n[l])+""))?s.push(u):b.set(o,[u]);return b.each(function(e,t){c(p,t,i(e,a,f,c))}),p}return n={object:function(e){return i(e,0,Ae,Te)},map:function(e){return i(e,0,Se,ke)},entries:function(e){return function e(n,i){if(++i>r.length)return n;var f,c=a[i-1];return null!=t&&i>=r.length?f=n.entries():(f=[],n.each(function(t,n){f.push({key:n,values:e(t,i)})})),null!=c?f.sort(function(e,t){return c(e.key,t.key)}):f}(i(e,0,Se,ke),0)},key:function(e){return r.push(e),n},sortKeys:function(e){return a[r.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}}function Ae(){return{}}function Te(e,t,n){e[t]=n}function Se(){return _e()}function ke(e,t,n){e.set(t,n)}function Ee(){}xe.prototype=_e.prototype={constructor:xe,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var Ne=_e.prototype;Ee.prototype=function(e,t){var n=new Ee;if(e instanceof Ee)e.each(function(e){n.add(e)});else if(e){var r=-1,a=e.length;if(null==t)for(;++r<a;)n.add(e[r]);else for(;++r<a;)n.add(t(e[r],r,e))}return n}.prototype={constructor:Ee,has:Ne.has,add:function(e){return this["$"+(e+="")]=e,this},remove:Ne.remove,clear:Ne.clear,values:Ne.keys,size:Ne.size,empty:Ne.empty,each:Ne.each};var Ce=Array.prototype,De=Ce.map,Ie=Ce.slice,Pe={name:"implicit"};function $e(){var e,t,n=function e(t){var n=_e(),r=[],a=Pe;function i(e){var i=e+"",f=n.get(i);if(!f){if(a!==Pe)return a;n.set(i,f=r.push(e))}return t[(f-1)%t.length]}return t=null==t?[]:Ie.call(t),i.domain=function(e){if(!arguments.length)return r.slice();r=[],n=_e();for(var t,a,f=-1,c=e.length;++f<c;)n.has(a=(t=e[f])+"")||n.set(a,r.push(t));return i},i.range=function(e){return arguments.length?(t=Ie.call(e),i):t.slice()},i.unknown=function(e){return arguments.length?(a=e,i):a},i.copy=function(){return e().domain(r).range(t).unknown(a)},i}().unknown(void 0),r=n.domain,a=n.range,i=[0,1],f=!1,c=0,o=0,u=.5;function s(){var n=r().length,s=i[1]<i[0],l=i[s-0],d=i[1-s];e=(d-l)/Math.max(1,n-c+2*o),f&&(e=Math.floor(e)),l+=(d-l-e*(n-c))*u,t=e*(1-c),f&&(l=Math.round(l),t=Math.round(t));var h=ue(n).map(function(t){return l+e*t});return a(s?h.reverse():h)}return delete n.unknown,n.domain=function(e){return arguments.length?(r(e),s()):r()},n.range=function(e){return arguments.length?(i=[+e[0],+e[1]],s()):i.slice()},n.rangeRound=function(e){return i=[+e[0],+e[1]],f=!0,s()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(f=!!e,s()):f},n.padding=function(e){return arguments.length?(c=o=Math.max(0,Math.min(1,e)),s()):c},n.paddingInner=function(e){return arguments.length?(c=Math.max(0,Math.min(1,e)),s()):c},n.paddingOuter=function(e){return arguments.length?(o=Math.max(0,Math.min(1,e)),s()):o},n.align=function(e){return arguments.length?(u=Math.max(0,Math.min(1,e)),s()):u},n.copy=function(){return $e().domain(r()).range(i).round(f).paddingInner(c).paddingOuter(o).align(u)},s()}function ze(e,t,n){e.prototype=t.prototype=n,n.constructor=e}function Ue(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function Fe(){}var Ye="\\s*([+-]?\\d+)\\s*",Ge="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Le="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Ve=/^#([0-9a-f]{3})$/,Re=/^#([0-9a-f]{6})$/,He=new RegExp("^rgb\\("+[Ye,Ye,Ye]+"\\)$"),Oe=new RegExp("^rgb\\("+[Le,Le,Le]+"\\)$"),je=new RegExp("^rgba\\("+[Ye,Ye,Ye,Ge]+"\\)$"),qe=new RegExp("^rgba\\("+[Le,Le,Le,Ge]+"\\)$"),Xe=new RegExp("^hsl\\("+[Ge,Le,Le]+"\\)$"),Be=new RegExp("^hsla\\("+[Ge,Le,Le,Ge]+"\\)$"),Ze={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function We(e){var t;return e=(e+"").trim().toLowerCase(),(t=Ve.exec(e))?new tt((t=parseInt(t[1],16))>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):(t=Re.exec(e))?Ke(parseInt(t[1],16)):(t=He.exec(e))?new tt(t[1],t[2],t[3],1):(t=Oe.exec(e))?new tt(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=je.exec(e))?Qe(t[1],t[2],t[3],t[4]):(t=qe.exec(e))?Qe(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=Xe.exec(e))?rt(t[1],t[2]/100,t[3]/100,1):(t=Be.exec(e))?rt(t[1],t[2]/100,t[3]/100,t[4]):Ze.hasOwnProperty(e)?Ke(Ze[e]):"transparent"===e?new tt(NaN,NaN,NaN,0):null}function Ke(e){return new tt(e>>16&255,e>>8&255,255&e,1)}function Qe(e,t,n,r){return r<=0&&(e=t=n=NaN),new tt(e,t,n,r)}function Je(e){return e instanceof Fe||(e=We(e)),e?new tt((e=e.rgb()).r,e.g,e.b,e.opacity):new tt}function et(e,t,n,r){return 1===arguments.length?Je(e):new tt(e,t,n,null==r?1:r)}function tt(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function nt(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function rt(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new at(e,t,n,r)}function at(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function it(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}ze(Fe,We,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),ze(tt,et,Ue(Fe,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new tt(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new tt(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+nt(this.r)+nt(this.g)+nt(this.b)},toString:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}})),ze(at,function(e,t,n,r){return 1===arguments.length?function(e){if(e instanceof at)return new at(e.h,e.s,e.l,e.opacity);if(e instanceof Fe||(e=We(e)),!e)return new at;if(e instanceof at)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,a=Math.min(t,n,r),i=Math.max(t,n,r),f=NaN,c=i-a,o=(i+a)/2;return c?(f=t===i?(n-r)/c+6*(n<r):n===i?(r-t)/c+2:(t-n)/c+4,c/=o<.5?i+a:2-i-a,f*=60):c=o>0&&o<1?0:f,new at(f,c,o,e.opacity)}(e):new at(e,t,n,null==r?1:r)},Ue(Fe,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new at(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new at(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,a=2*n-r;return new tt(it(e>=240?e-240:e+120,a,r),it(e,a,r),it(e<120?e+240:e-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var ft=Math.PI/180,ct=180/Math.PI,ot=.96422,ut=1,st=.82521,lt=4/29,dt=6/29,ht=3*dt*dt,bt=dt*dt*dt;function pt(e){if(e instanceof gt)return new gt(e.l,e.a,e.b,e.opacity);if(e instanceof xt){if(isNaN(e.h))return new gt(e.l,0,0,e.opacity);var t=e.h*ft;return new gt(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}e instanceof tt||(e=Je(e));var n,r,a=wt(e.r),i=wt(e.g),f=wt(e.b),c=vt((.2225045*a+.7168786*i+.0606169*f)/ut);return a===i&&i===f?n=r=c:(n=vt((.4360747*a+.3850649*i+.1430804*f)/ot),r=vt((.0139322*a+.0971045*i+.7141733*f)/st)),new gt(116*c-16,500*(n-c),200*(c-r),e.opacity)}function gt(e,t,n,r){this.l=+e,this.a=+t,this.b=+n,this.opacity=+r}function vt(e){return e>bt?Math.pow(e,1/3):e/ht+lt}function mt(e){return e>dt?e*e*e:ht*(e-lt)}function yt(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function wt(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function xt(e,t,n,r){this.h=+e,this.c=+t,this.l=+n,this.opacity=+r}ze(gt,function(e,t,n,r){return 1===arguments.length?pt(e):new gt(e,t,n,null==r?1:r)},Ue(Fe,{brighter:function(e){return new gt(this.l+18*(null==e?1:e),this.a,this.b,this.opacity)},darker:function(e){return new gt(this.l-18*(null==e?1:e),this.a,this.b,this.opacity)},rgb:function(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return new tt(yt(3.1338561*(t=ot*mt(t))-1.6168667*(e=ut*mt(e))-.4906146*(n=st*mt(n))),yt(-.9787684*t+1.9161415*e+.033454*n),yt(.0719453*t-.2289914*e+1.4052427*n),this.opacity)}})),ze(xt,function(e,t,n,r){return 1===arguments.length?function(e){if(e instanceof xt)return new xt(e.h,e.c,e.l,e.opacity);if(e instanceof gt||(e=pt(e)),0===e.a&&0===e.b)return new xt(NaN,0,e.l,e.opacity);var t=Math.atan2(e.b,e.a)*ct;return new xt(t<0?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}(e):new xt(e,t,n,null==r?1:r)},Ue(Fe,{brighter:function(e){return new xt(this.h,this.c,this.l+18*(null==e?1:e),this.opacity)},darker:function(e){return new xt(this.h,this.c,this.l-18*(null==e?1:e),this.opacity)},rgb:function(){return pt(this).rgb()}}));var _t=-.14861,Mt=1.78277,At=-.29227,Tt=-.90649,St=1.97294,kt=St*Tt,Et=St*Mt,Nt=Mt*At-Tt*_t;function Ct(e,t,n,r){return 1===arguments.length?function(e){if(e instanceof Dt)return new Dt(e.h,e.s,e.l,e.opacity);e instanceof tt||(e=Je(e));var t=e.r/255,n=e.g/255,r=e.b/255,a=(Nt*r+kt*t-Et*n)/(Nt+kt-Et),i=r-a,f=(St*(n-a)-At*i)/Tt,c=Math.sqrt(f*f+i*i)/(St*a*(1-a)),o=c?Math.atan2(f,i)*ct-120:NaN;return new Dt(o<0?o+360:o,c,a,e.opacity)}(e):new Dt(e,t,n,null==r?1:r)}function Dt(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function It(e){return function(){return e}}function Pt(e,t){return function(n){return e+n*t}}function $t(e){return 1==(e=+e)?zt:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):It(isNaN(t)?n:t)}}function zt(e,t){var n=t-e;return n?Pt(e,n):It(isNaN(e)?t:e)}ze(Dt,Ct,Ue(Fe,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new Dt(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new Dt(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=isNaN(this.h)?0:(this.h+120)*ft,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),r=Math.cos(e),a=Math.sin(e);return new tt(255*(t+n*(_t*r+Mt*a)),255*(t+n*(At*r+Tt*a)),255*(t+n*(St*r)),this.opacity)}}));var Ut=function e(t){var n=$t(t);function r(e,t){var r=n((e=et(e)).r,(t=et(t)).r),a=n(e.g,t.g),i=n(e.b,t.b),f=zt(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=a(t),e.b=i(t),e.opacity=f(t),e+""}}return r.gamma=e,r}(1);var Ft,Yt=(Ft=function(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),a=e[r],i=e[r+1],f=r>0?e[r-1]:2*a-i,c=r<t-1?e[r+2]:2*i-a;return function(e,t,n,r,a){var i=e*e,f=i*e;return((1-3*e+3*i-f)*t+(4-6*i+3*f)*n+(1+3*e+3*i-3*f)*r+f*a)/6}((n-r/t)*t,f,a,i,c)}},function(e){var t,n,r=e.length,a=new Array(r),i=new Array(r),f=new Array(r);for(t=0;t<r;++t)n=et(e[t]),a[t]=n.r||0,i[t]=n.g||0,f[t]=n.b||0;return a=Ft(a),i=Ft(i),f=Ft(f),n.opacity=1,function(e){return n.r=a(e),n.g=i(e),n.b=f(e),n+""}});function Gt(e,t){return t-=e=+e,function(n){return e+t*n}}var Lt=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Vt=new RegExp(Lt.source,"g");function Rt(e,t){var n,r,a,i=Lt.lastIndex=Vt.lastIndex=0,f=-1,c=[],o=[];for(e+="",t+="";(n=Lt.exec(e))&&(r=Vt.exec(t));)(a=r.index)>i&&(a=t.slice(i,a),c[f]?c[f]+=a:c[++f]=a),(n=n[0])===(r=r[0])?c[f]?c[f]+=r:c[++f]=r:(c[++f]=null,o.push({i:f,x:Gt(n,r)})),i=Vt.lastIndex;return i<t.length&&(a=t.slice(i),c[f]?c[f]+=a:c[++f]=a),c.length<2?o[0]?function(e){return function(t){return e(t)+""}}(o[0].x):function(e){return function(){return e}}(t):(t=o.length,function(e){for(var n,r=0;r<t;++r)c[(n=o[r]).i]=n.x(e);return c.join("")})}function Ht(e,t){var n,r=typeof t;return null==t||"boolean"===r?It(t):("number"===r?Gt:"string"===r?(n=We(t))?(t=n,Ut):Rt:t instanceof We?Ut:t instanceof Date?function(e,t){var n=new Date;return t-=e=+e,function(r){return n.setTime(e+t*r),n}}:Array.isArray(t)?function(e,t){var n,r=t?t.length:0,a=e?Math.min(r,e.length):0,i=new Array(a),f=new Array(r);for(n=0;n<a;++n)i[n]=Ht(e[n],t[n]);for(;n<r;++n)f[n]=t[n];return function(e){for(n=0;n<a;++n)f[n]=i[n](e);return f}}:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?function(e,t){var n,r={},a={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?r[n]=Ht(e[n],t[n]):a[n]=t[n];return function(e){for(n in r)a[n]=r[n](e);return a}}:Gt)(e,t)}function Ot(e,t){return t-=e=+e,function(n){return Math.round(e+t*n)}}var jt,qt,Xt,Bt,Zt=180/Math.PI,Wt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Kt(e,t,n,r,a,i){var f,c,o;return(f=Math.sqrt(e*e+t*t))&&(e/=f,t/=f),(o=e*n+t*r)&&(n-=e*o,r-=t*o),(c=Math.sqrt(n*n+r*r))&&(n/=c,r/=c,o/=c),e*r<t*n&&(e=-e,t=-t,o=-o,f=-f),{translateX:a,translateY:i,rotate:Math.atan2(t,e)*Zt,skewX:Math.atan(o)*Zt,scaleX:f,scaleY:c}}function Qt(e,t,n,r){function a(e){return e.length?e.pop()+" ":""}return function(i,f){var c=[],o=[];return i=e(i),f=e(f),function(e,r,a,i,f,c){if(e!==a||r!==i){var o=f.push("translate(",null,t,null,n);c.push({i:o-4,x:Gt(e,a)},{i:o-2,x:Gt(r,i)})}else(a||i)&&f.push("translate("+a+t+i+n)}(i.translateX,i.translateY,f.translateX,f.translateY,c,o),function(e,t,n,i){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:Gt(e,t)})):t&&n.push(a(n)+"rotate("+t+r)}(i.rotate,f.rotate,c,o),function(e,t,n,i){e!==t?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:Gt(e,t)}):t&&n.push(a(n)+"skewX("+t+r)}(i.skewX,f.skewX,c,o),function(e,t,n,r,i,f){if(e!==n||t!==r){var c=i.push(a(i)+"scale(",null,",",null,")");f.push({i:c-4,x:Gt(e,n)},{i:c-2,x:Gt(t,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,f.scaleX,f.scaleY,c,o),i=f=null,function(e){for(var t,n=-1,r=o.length;++n<r;)c[(t=o[n]).i]=t.x(e);return c.join("")}}}var Jt=Qt(function(e){return"none"===e?Wt:(jt||(jt=document.createElement("DIV"),qt=document.documentElement,Xt=document.defaultView),jt.style.transform=e,e=Xt.getComputedStyle(qt.appendChild(jt),null).getPropertyValue("transform"),qt.removeChild(jt),Kt(+(e=e.slice(7,-1).split(","))[0],+e[1],+e[2],+e[3],+e[4],+e[5]))},"px, ","px)","deg)"),en=Qt(function(e){return null==e?Wt:(Bt||(Bt=document.createElementNS("http://www.w3.org/2000/svg","g")),Bt.setAttribute("transform",e),(e=Bt.transform.baseVal.consolidate())?Kt((e=e.matrix).a,e.b,e.c,e.d,e.e,e.f):Wt)},", ",")",")");Math.SQRT2;function tn(e){return function t(n){function r(t,r){var a=e((t=Ct(t)).h,(r=Ct(r)).h),i=zt(t.s,r.s),f=zt(t.l,r.l),c=zt(t.opacity,r.opacity);return function(e){return t.h=a(e),t.s=i(e),t.l=f(Math.pow(e,n)),t.opacity=c(e),t+""}}return n=+n,r.gamma=t,r}(1)}tn(function(e,t){var n=t-e;return n?Pt(e,n>180||n<-180?n-360*Math.round(n/360):n):It(isNaN(e)?t:e)});var nn=tn(zt);function rn(e){return+e}var an=[0,1];function fn(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:(n=t,function(){return n});var n}function cn(e,t,n,r){var a=e[0],i=e[1],f=t[0],c=t[1];return i<a?(a=n(i,a),f=r(c,f)):(a=n(a,i),f=r(f,c)),function(e){return f(a(e))}}function on(e,t,n,r){var a=Math.min(e.length,t.length)-1,i=new Array(a),f=new Array(a),c=-1;for(e[a]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++c<a;)i[c]=n(e[c],e[c+1]),f[c]=r(t[c],t[c+1]);return function(t){var n=ie(e,t,1,a)-1;return f[n](i[n](t))}}function un(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]}function sn(e){return(e=un(Math.abs(e)))?e[1]:NaN}var ln,dn=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function hn(e){return new bn(e)}function bn(e){if(!(t=dn.exec(e)))throw new Error("invalid format: "+e);var t;this.fill=t[1]||" ",this.align=t[2]||">",this.sign=t[3]||"-",this.symbol=t[4]||"",this.zero=!!t[5],this.width=t[6]&&+t[6],this.comma=!!t[7],this.precision=t[8]&&+t[8].slice(1),this.trim=!!t[9],this.type=t[10]||""}function pn(e,t){var n=un(e,t);if(!n)return e+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")}hn.prototype=bn.prototype,bn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var gn={"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return Math.round(e).toString(2)},c:function(e){return e+""},d:function(e){return Math.round(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return Math.round(e).toString(8)},p:function(e,t){return pn(100*e,t)},r:pn,s:function(e,t){var n=un(e,t);if(!n)return e+"";var r=n[0],a=n[1],i=a-(ln=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,f=r.length;return i===f?r:i>f?r+new Array(i-f+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+un(e,Math.max(0,t+i-1))[0]},X:function(e){return Math.round(e).toString(16).toUpperCase()},x:function(e){return Math.round(e).toString(16)}};function vn(e){return e}var mn,yn,wn,xn=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function _n(e){var t,n,r=e.grouping&&e.thousands?(t=e.grouping,n=e.thousands,function(e,r){for(var a=e.length,i=[],f=0,c=t[0],o=0;a>0&&c>0&&(o+c+1>r&&(c=Math.max(1,r-o)),i.push(e.substring(a-=c,a+c)),!((o+=c+1)>r));)c=t[f=(f+1)%t.length];return i.reverse().join(n)}):vn,a=e.currency,i=e.decimal,f=e.numerals?function(e){return function(t){return t.replace(/[0-9]/g,function(t){return e[+t]})}}(e.numerals):vn,c=e.percent||"%";function o(e){var t=(e=hn(e)).fill,n=e.align,o=e.sign,u=e.symbol,s=e.zero,l=e.width,d=e.comma,h=e.precision,b=e.trim,p=e.type;"n"===p?(d=!0,p="g"):gn[p]||(null==h&&(h=12),b=!0,p="g"),(s||"0"===t&&"="===n)&&(s=!0,t="0",n="=");var g="$"===u?a[0]:"#"===u&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",v="$"===u?a[1]:/[%p]/.test(p)?c:"",m=gn[p],y=/[defgprs%]/.test(p);function w(e){var a,c,u,w=g,x=v;if("c"===p)x=m(e)+x,e="";else{var _=(e=+e)<0;if(e=m(Math.abs(e),h),b&&(e=function(e){e:for(var t,n=e.length,r=1,a=-1;r<n;++r)switch(e[r]){case".":a=t=r;break;case"0":0===a&&(a=r),t=r;break;default:if(a>0){if(!+e[r])break e;a=0}}return a>0?e.slice(0,a)+e.slice(t+1):e}(e)),_&&0==+e&&(_=!1),w=(_?"("===o?o:"-":"-"===o||"("===o?"":o)+w,x=("s"===p?xn[8+ln/3]:"")+x+(_&&"("===o?")":""),y)for(a=-1,c=e.length;++a<c;)if(48>(u=e.charCodeAt(a))||u>57){x=(46===u?i+e.slice(a+1):e.slice(a))+x,e=e.slice(0,a);break}}d&&!s&&(e=r(e,1/0));var M=w.length+e.length+x.length,A=M<l?new Array(l-M+1).join(t):"";switch(d&&s&&(e=r(A+e,A.length?l-x.length:1/0),A=""),n){case"<":e=w+e+x+A;break;case"=":e=w+A+e+x;break;case"^":e=A.slice(0,M=A.length>>1)+w+e+x+A.slice(M);break;default:e=A+w+e+x}return f(e)}return h=null==h?6:/[gprs]/.test(p)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),w.toString=function(){return e+""},w}return{format:o,formatPrefix:function(e,t){var n=o(((e=hn(e)).type="f",e)),r=3*Math.max(-8,Math.min(8,Math.floor(sn(t)/3))),a=Math.pow(10,-r),i=xn[8+r/3];return function(e){return n(a*e)+i}}}}function Mn(e,t,n){var r,a=e[0],i=e[e.length-1],f=function(e,t,n){var r=Math.abs(t-e)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=se?a*=10:i>=le?a*=5:i>=de&&(a*=2),t<e?-a:a}(a,i,null==t?10:t);switch((n=hn(null==n?",f":n)).type){case"s":var c=Math.max(Math.abs(a),Math.abs(i));return null!=n.precision||isNaN(r=function(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(sn(t)/3)))-sn(Math.abs(e)))}(f,c))||(n.precision=r),wn(n,c);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(r=function(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,sn(t)-sn(e))+1}(f,Math.max(Math.abs(a),Math.abs(i))))||(n.precision=r-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(r=function(e){return Math.max(0,-sn(Math.abs(e)))}(f))||(n.precision=r-2*("%"===n.type))}return yn(n)}function An(e){var t=e.domain;return e.ticks=function(e){var n=t();return function(e,t,n){var r,a,i,f,c=-1;if(n=+n,(e=+e)==(t=+t)&&n>0)return[e];if((r=t<e)&&(a=e,e=t,t=a),0===(f=he(e,t,n))||!isFinite(f))return[];if(f>0)for(e=Math.ceil(e/f),t=Math.floor(t/f),i=new Array(a=Math.ceil(t-e+1));++c<a;)i[c]=(e+c)*f;else for(e=Math.floor(e*f),t=Math.ceil(t*f),i=new Array(a=Math.ceil(e-t+1));++c<a;)i[c]=(e-c)/f;return r&&i.reverse(),i}(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){return Mn(t(),e,n)},e.nice=function(n){null==n&&(n=10);var r,a=t(),i=0,f=a.length-1,c=a[i],o=a[f];return o<c&&(r=c,c=o,o=r,r=i,i=f,f=r),(r=he(c,o,n))>0?r=he(c=Math.floor(c/r)*r,o=Math.ceil(o/r)*r,n):r<0&&(r=he(c=Math.ceil(c*r)/r,o=Math.floor(o*r)/r,n)),r>0?(a[i]=Math.floor(c/r)*r,a[f]=Math.ceil(o/r)*r,t(a)):r<0&&(a[i]=Math.ceil(c*r)/r,a[f]=Math.floor(o*r)/r,t(a)),e},e}function Tn(){var e=function(e,t){var n,r,a,i=an,f=an,c=Ht,o=!1;function u(){return n=Math.min(i.length,f.length)>2?on:cn,r=a=null,s}function s(t){return(r||(r=n(i,f,o?function(e){return function(t,n){var r=e(t=+t,n=+n);return function(e){return e<=t?0:e>=n?1:r(e)}}}(e):e,c)))(+t)}return s.invert=function(e){return(a||(a=n(f,i,fn,o?function(e){return function(t,n){var r=e(t=+t,n=+n);return function(e){return e<=0?t:e>=1?n:r(e)}}}(t):t)))(+e)},s.domain=function(e){return arguments.length?(i=De.call(e,rn),u()):i.slice()},s.range=function(e){return arguments.length?(f=Ie.call(e),u()):f.slice()},s.rangeRound=function(e){return f=Ie.call(e),c=Ot,u()},s.clamp=function(e){return arguments.length?(o=!!e,u()):o},s.interpolate=function(e){return arguments.length?(c=e,u()):c},u()}(fn,Gt);return e.copy=function(){return t=e,Tn().domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp());var t},An(e)}mn=_n({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),yn=mn.format,wn=mn.formatPrefix;var Sn=new Date,kn=new Date;function En(e,t,n,r){function a(t){return e(t=new Date(+t)),t}return a.floor=a,a.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},a.round=function(e){var t=a(e),n=a.ceil(e);return e-t<n-e?t:n},a.offset=function(e,n){return t(e=new Date(+e),null==n?1:Math.floor(n)),e},a.range=function(n,r,i){var f,c=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return c;do{c.push(f=new Date(+n)),t(n,i),e(n)}while(f<n&&n<r);return c},a.filter=function(n){return En(function(t){if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)},function(e,r){if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););})},n&&(a.count=function(t,r){return Sn.setTime(+t),kn.setTime(+r),e(Sn),e(kn),Math.floor(n(Sn,kn))},a.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?a.filter(r?function(t){return r(t)%e==0}:function(t){return a.count(0,t)%e==0}):a:null}),a}var Nn=En(function(){},function(e,t){e.setTime(+e+t)},function(e,t){return t-e});Nn.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?En(function(t){t.setTime(Math.floor(t/e)*e)},function(t,n){t.setTime(+t+n*e)},function(t,n){return(n-t)/e}):Nn:null};var Cn=6e4,Dn=6048e5,In=(En(function(e){e.setTime(1e3*Math.floor(e/1e3))},function(e,t){e.setTime(+e+1e3*t)},function(e,t){return(t-e)/1e3},function(e){return e.getUTCSeconds()}),En(function(e){e.setTime(Math.floor(e/Cn)*Cn)},function(e,t){e.setTime(+e+t*Cn)},function(e,t){return(t-e)/Cn},function(e){return e.getMinutes()}),En(function(e){var t=e.getTimezoneOffset()*Cn%36e5;t<0&&(t+=36e5),e.setTime(36e5*Math.floor((+e-t)/36e5)+t)},function(e,t){e.setTime(+e+36e5*t)},function(e,t){return(t-e)/36e5},function(e){return e.getHours()}),En(function(e){e.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*Cn)/864e5},function(e){return e.getDate()-1}));function Pn(e){return En(function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+7*t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*Cn)/Dn})}var $n=Pn(0),zn=Pn(1),Un=(Pn(2),Pn(3),Pn(4)),Fn=(Pn(5),Pn(6),En(function(e){e.setDate(1),e.setHours(0,0,0,0)},function(e,t){e.setMonth(e.getMonth()+t)},function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())},function(e){return e.getMonth()}),En(function(e){e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,t){e.setFullYear(e.getFullYear()+t)},function(e,t){return t.getFullYear()-e.getFullYear()},function(e){return e.getFullYear()}));Fn.every=function(e){return isFinite(e=Math.floor(e))&&e>0?En(function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n*e)}):null};En(function(e){e.setUTCSeconds(0,0)},function(e,t){e.setTime(+e+t*Cn)},function(e,t){return(t-e)/Cn},function(e){return e.getUTCMinutes()}),En(function(e){e.setUTCMinutes(0,0,0)},function(e,t){e.setTime(+e+36e5*t)},function(e,t){return(t-e)/36e5},function(e){return e.getUTCHours()});var Yn=En(function(e){e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+t)},function(e,t){return(t-e)/864e5},function(e){return e.getUTCDate()-1});function Gn(e){return En(function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+7*t)},function(e,t){return(t-e)/Dn})}var Ln=Gn(0),Vn=Gn(1),Rn=(Gn(2),Gn(3),Gn(4)),Hn=(Gn(5),Gn(6),En(function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCMonth(e.getUTCMonth()+t)},function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())},function(e){return e.getUTCMonth()}),En(function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)},function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()},function(e){return e.getUTCFullYear()}));function On(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function jn(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function qn(e){return{y:e,m:0,d:1,H:0,M:0,S:0,L:0}}Hn.every=function(e){return isFinite(e=Math.floor(e))&&e>0?En(function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)}):null};var Xn,Bn,Zn,Wn={"-":"",_:" ",0:"0"},Kn=/^\s*\d+/,Qn=/^%/,Jn=/[\\^$*+?|[\]().{}]/g;function er(e,t,n){var r=e<0?"-":"",a=(r?-e:e)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(t)+a:a)}function tr(e){return e.replace(Jn,"\\$&")}function nr(e){return new RegExp("^(?:"+e.map(tr).join("|")+")","i")}function rr(e){for(var t={},n=-1,r=e.length;++n<r;)t[e[n].toLowerCase()]=n;return t}function ar(e,t,n){var r=Kn.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function ir(e,t,n){var r=Kn.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function fr(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function cr(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function or(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function ur(e,t,n){var r=Kn.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function sr(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function lr(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function dr(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function hr(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function br(e,t,n){var r=Kn.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function pr(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function gr(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function vr(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function mr(e,t,n){var r=Kn.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function yr(e,t,n){var r=Kn.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function wr(e,t,n){var r=Qn.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function xr(e,t,n){var r=Kn.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function _r(e,t,n){var r=Kn.exec(t.slice(n));return r?(e.Q=1e3*+r[0],n+r[0].length):-1}function Mr(e,t){return er(e.getDate(),t,2)}function Ar(e,t){return er(e.getHours(),t,2)}function Tr(e,t){return er(e.getHours()%12||12,t,2)}function Sr(e,t){return er(1+In.count(Fn(e),e),t,3)}function kr(e,t){return er(e.getMilliseconds(),t,3)}function Er(e,t){return kr(e,t)+"000"}function Nr(e,t){return er(e.getMonth()+1,t,2)}function Cr(e,t){return er(e.getMinutes(),t,2)}function Dr(e,t){return er(e.getSeconds(),t,2)}function Ir(e){var t=e.getDay();return 0===t?7:t}function Pr(e,t){return er($n.count(Fn(e),e),t,2)}function $r(e,t){var n=e.getDay();return e=n>=4||0===n?Un(e):Un.ceil(e),er(Un.count(Fn(e),e)+(4===Fn(e).getDay()),t,2)}function zr(e){return e.getDay()}function Ur(e,t){return er(zn.count(Fn(e),e),t,2)}function Fr(e,t){return er(e.getFullYear()%100,t,2)}function Yr(e,t){return er(e.getFullYear()%1e4,t,4)}function Gr(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+er(t/60|0,"0",2)+er(t%60,"0",2)}function Lr(e,t){return er(e.getUTCDate(),t,2)}function Vr(e,t){return er(e.getUTCHours(),t,2)}function Rr(e,t){return er(e.getUTCHours()%12||12,t,2)}function Hr(e,t){return er(1+Yn.count(Hn(e),e),t,3)}function Or(e,t){return er(e.getUTCMilliseconds(),t,3)}function jr(e,t){return Or(e,t)+"000"}function qr(e,t){return er(e.getUTCMonth()+1,t,2)}function Xr(e,t){return er(e.getUTCMinutes(),t,2)}function Br(e,t){return er(e.getUTCSeconds(),t,2)}function Zr(e){var t=e.getUTCDay();return 0===t?7:t}function Wr(e,t){return er(Ln.count(Hn(e),e),t,2)}function Kr(e,t){var n=e.getUTCDay();return e=n>=4||0===n?Rn(e):Rn.ceil(e),er(Rn.count(Hn(e),e)+(4===Hn(e).getUTCDay()),t,2)}function Qr(e){return e.getUTCDay()}function Jr(e,t){return er(Vn.count(Hn(e),e),t,2)}function ea(e,t){return er(e.getUTCFullYear()%100,t,2)}function ta(e,t){return er(e.getUTCFullYear()%1e4,t,4)}function na(){return"+0000"}function ra(){return"%"}function aa(e){return+e}function ia(e){return Math.floor(+e/1e3)}!function(e){Xn=function(e){var t=e.dateTime,n=e.date,r=e.time,a=e.periods,i=e.days,f=e.shortDays,c=e.months,o=e.shortMonths,u=nr(a),s=rr(a),l=nr(i),d=rr(i),h=nr(f),b=rr(f),p=nr(c),g=rr(c),v=nr(o),m=rr(o),y={a:function(e){return f[e.getDay()]},A:function(e){return i[e.getDay()]},b:function(e){return o[e.getMonth()]},B:function(e){return c[e.getMonth()]},c:null,d:Mr,e:Mr,f:Er,H:Ar,I:Tr,j:Sr,L:kr,m:Nr,M:Cr,p:function(e){return a[+(e.getHours()>=12)]},Q:aa,s:ia,S:Dr,u:Ir,U:Pr,V:$r,w:zr,W:Ur,x:null,X:null,y:Fr,Y:Yr,Z:Gr,"%":ra},w={a:function(e){return f[e.getUTCDay()]},A:function(e){return i[e.getUTCDay()]},b:function(e){return o[e.getUTCMonth()]},B:function(e){return c[e.getUTCMonth()]},c:null,d:Lr,e:Lr,f:jr,H:Vr,I:Rr,j:Hr,L:Or,m:qr,M:Xr,p:function(e){return a[+(e.getUTCHours()>=12)]},Q:aa,s:ia,S:Br,u:Zr,U:Wr,V:Kr,w:Qr,W:Jr,x:null,X:null,y:ea,Y:ta,Z:na,"%":ra},x={a:function(e,t,n){var r=h.exec(t.slice(n));return r?(e.w=b[r[0].toLowerCase()],n+r[0].length):-1},A:function(e,t,n){var r=l.exec(t.slice(n));return r?(e.w=d[r[0].toLowerCase()],n+r[0].length):-1},b:function(e,t,n){var r=v.exec(t.slice(n));return r?(e.m=m[r[0].toLowerCase()],n+r[0].length):-1},B:function(e,t,n){var r=p.exec(t.slice(n));return r?(e.m=g[r[0].toLowerCase()],n+r[0].length):-1},c:function(e,n,r){return A(e,t,n,r)},d:hr,e:hr,f:yr,H:pr,I:pr,j:br,L:mr,m:dr,M:gr,p:function(e,t,n){var r=u.exec(t.slice(n));return r?(e.p=s[r[0].toLowerCase()],n+r[0].length):-1},Q:xr,s:_r,S:vr,u:ir,U:fr,V:cr,w:ar,W:or,x:function(e,t,r){return A(e,n,t,r)},X:function(e,t,n){return A(e,r,t,n)},y:sr,Y:ur,Z:lr,"%":wr};function _(e,t){return function(n){var r,a,i,f=[],c=-1,o=0,u=e.length;for(n instanceof Date||(n=new Date(+n));++c<u;)37===e.charCodeAt(c)&&(f.push(e.slice(o,c)),null!=(a=Wn[r=e.charAt(++c)])?r=e.charAt(++c):a="e"===r?" ":"0",(i=t[r])&&(r=i(n,a)),f.push(r),o=c+1);return f.push(e.slice(o,c)),f.join("")}}function M(e,t){return function(n){var r,a,i=qn(1900);if(A(i,e,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(r=(a=(r=jn(qn(i.y))).getUTCDay())>4||0===a?Vn.ceil(r):Vn(r),r=Yn.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(r=(a=(r=t(qn(i.y))).getDay())>4||0===a?zn.ceil(r):zn(r),r=In.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?jn(qn(i.y)).getUTCDay():t(qn(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,jn(i)):t(i)}}function A(e,t,n,r){for(var a,i,f=0,c=t.length,o=n.length;f<c;){if(r>=o)return-1;if(37===(a=t.charCodeAt(f++))){if(a=t.charAt(f++),!(i=x[a in Wn?t.charAt(f++):a])||(r=i(e,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return y.x=_(n,y),y.X=_(r,y),y.c=_(t,y),w.x=_(n,w),w.X=_(r,w),w.c=_(t,w),{format:function(e){var t=_(e+="",y);return t.toString=function(){return e},t},parse:function(e){var t=M(e+="",On);return t.toString=function(){return e},t},utcFormat:function(e){var t=_(e+="",w);return t.toString=function(){return e},t},utcParse:function(e){var t=M(e,jn);return t.toString=function(){return e},t}}}(e),Xn.format,Xn.parse,Bn=Xn.utcFormat,Zn=Xn.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Bn("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Zn("%Y-%m-%dT%H:%M:%S.%LZ");var fa={value:function(){}};function ca(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r)throw new Error("illegal type: "+e);r[e]=[]}return new oa(r)}function oa(e){this._=e}function ua(e,t){for(var n,r=0,a=e.length;r<a;++r)if((n=e[r]).name===t)return n.value}function sa(e,t,n){for(var r=0,a=e.length;r<a;++r)if(e[r].name===t){e[r]=fa,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=n&&e.push({name:t,value:n}),e}oa.prototype=ca.prototype={constructor:oa,on:function(e,t){var n,r,a=this._,i=(r=a,(e+"").trim().split(/^|\s+/).map(function(e){var t="",n=e.indexOf(".");if(n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),e&&!r.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:t}})),f=-1,c=i.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++f<c;)if(n=(e=i[f]).type)a[n]=sa(a[n],e.name,t);else if(null==t)for(n in a)a[n]=sa(a[n],e.name,null);return this}for(;++f<c;)if((n=(e=i[f]).type)&&(n=ua(a[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new oa(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(i=0,n=(r=this._[e]).length;i<n;++i)r[i].value.apply(t,a)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],a=0,i=r.length;a<i;++a)r[a].value.apply(t,n)}};var la,da,ha=0,ba=0,pa=0,ga=1e3,va=0,ma=0,ya=0,wa="object"==typeof performance&&performance.now?performance:Date,xa="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function _a(){return ma||(xa(Ma),ma=wa.now()+ya)}function Ma(){ma=0}function Aa(){this._call=this._time=this._next=null}function Ta(e,t,n){var r=new Aa;return r.restart(e,t,n),r}function Sa(){ma=(va=wa.now())+ya,ha=ba=0;try{!function(){_a(),++ha;for(var e,t=la;t;)(e=ma-t._time)>=0&&t._call.call(null,e),t=t._next;--ha}()}finally{ha=0,function(){var e,t,n=la,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:la=t);da=e,Ea(r)}(),ma=0}}function ka(){var e=wa.now(),t=e-va;t>ga&&(ya-=t,va=e)}function Ea(e){ha||(ba&&(ba=clearTimeout(ba)),e-ma>24?(e<1/0&&(ba=setTimeout(Sa,e-wa.now()-ya)),pa&&(pa=clearInterval(pa))):(pa||(va=wa.now(),pa=setInterval(ka,ga)),ha=1,xa(Sa)))}function Na(e,t,n){var r=new Aa;return t=null==t?0:+t,r.restart(function(n){r.stop(),e(n+t)},t,n),r}Aa.prototype=Ta.prototype={constructor:Aa,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?_a():+n)+(null==t?0:+t),this._next||da===this||(da?da._next=this:la=this,da=this),this._call=e,this._time=n,Ea()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ea())}};var Ca=ca("start","end","interrupt"),Da=[],Ia=0,Pa=1,$a=2,za=3,Ua=4,Fa=5,Ya=6;function Ga(e,t,n,r,a,i){var f=e.__transition;if(f){if(n in f)return}else e.__transition={};!function(e,t,n){var r,a=e.__transition;function i(o){var u,s,l,d;if(n.state!==Pa)return c();for(u in a)if((d=a[u]).name===n.name){if(d.state===za)return Na(i);d.state===Ua?(d.state=Ya,d.timer.stop(),d.on.call("interrupt",e,e.__data__,d.index,d.group),delete a[u]):+u<t&&(d.state=Ya,d.timer.stop(),delete a[u])}if(Na(function(){n.state===za&&(n.state=Ua,n.timer.restart(f,n.delay,n.time),f(o))}),n.state=$a,n.on.call("start",e,e.__data__,n.index,n.group),n.state===$a){for(n.state=za,r=new Array(l=n.tween.length),u=0,s=-1;u<l;++u)(d=n.tween[u].value.call(e,e.__data__,n.index,n.group))&&(r[++s]=d);r.length=s+1}}function f(t){for(var a=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(c),n.state=Fa,1),i=-1,f=r.length;++i<f;)r[i].call(null,a);n.state===Fa&&(n.on.call("end",e,e.__data__,n.index,n.group),c())}function c(){for(var r in n.state=Ya,n.timer.stop(),delete a[t],a)return;delete e.__transition}a[t]=n,n.timer=Ta(function(e){n.state=Pa,n.timer.restart(i,n.delay,n.time),n.delay<=e&&i(e-n.delay)},0,n.time)}(e,n,{name:t,index:r,group:a,on:Ca,tween:Da,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:Ia})}function La(e,t){var n=Ra(e,t);if(n.state>Ia)throw new Error("too late; already scheduled");return n}function Va(e,t){var n=Ra(e,t);if(n.state>$a)throw new Error("too late; already started");return n}function Ra(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}function Ha(e,t){var n,r,a,i=e.__transition,f=!0;if(i){for(a in t=null==t?null:t+"",i)(n=i[a]).name===t?(r=n.state>$a&&n.state<Fa,n.state=Ya,n.timer.stop(),r&&n.on.call("interrupt",e,e.__data__,n.index,n.group),delete i[a]):f=!1;f&&delete e.__transition}}function Oa(e,t,n){var r=e._id;return e.each(function(){var e=Va(this,r);(e.value||(e.value={}))[t]=n.apply(this,arguments)}),function(e){return Ra(e,r).value[t]}}function ja(e,t){var n;return("number"==typeof t?Gt:t instanceof We?Ut:(n=We(t))?(t=n,Ut):Rt)(e,t)}var qa=Q.prototype.constructor;var Xa=0;function Ba(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function Za(){return++Xa}var Wa=Q.prototype;Ba.prototype=function(e){return Q().transition(e)}.prototype={constructor:Ba,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=b(e));for(var r=this._groups,a=r.length,i=new Array(a),f=0;f<a;++f)for(var c,o,u=r[f],s=u.length,l=i[f]=new Array(s),d=0;d<s;++d)(c=u[d])&&(o=e.call(c,c.__data__,d,u))&&("__data__"in c&&(o.__data__=c.__data__),l[d]=o,Ga(l[d],t,n,d,l,Ra(c,n)));return new Ba(i,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=g(e));for(var r=this._groups,a=r.length,i=[],f=[],c=0;c<a;++c)for(var o,u=r[c],s=u.length,l=0;l<s;++l)if(o=u[l]){for(var d,h=e.call(o,o.__data__,l,u),b=Ra(o,n),p=0,v=h.length;p<v;++p)(d=h[p])&&Ga(d,t,n,p,h,b);i.push(h),f.push(o)}return new Ba(i,f,t,n)},filter:function(e){"function"!=typeof e&&(e=w(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var i,f=t[a],c=f.length,o=r[a]=[],u=0;u<c;++u)(i=f[u])&&e.call(i,i.__data__,u,f)&&o.push(i);return new Ba(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,a=n.length,i=Math.min(r,a),f=new Array(r),c=0;c<i;++c)for(var o,u=t[c],s=n[c],l=u.length,d=f[c]=new Array(l),h=0;h<l;++h)(o=u[h]||s[h])&&(d[h]=o);for(;c<r;++c)f[c]=t[c];return new Ba(f,this._parents,this._name,this._id)},selection:function(){return new qa(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=Za(),r=this._groups,a=r.length,i=0;i<a;++i)for(var f,c=r[i],o=c.length,u=0;u<o;++u)if(f=c[u]){var s=Ra(f,t);Ga(f,e,n,u,c,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new Ba(r,this._parents,e,n)},call:Wa.call,nodes:Wa.nodes,node:Wa.node,size:Wa.size,empty:Wa.empty,each:Wa.each,on:function(e,t){var n=this._id;return arguments.length<2?Ra(this.node(),n).on.on(e):this.each(function(e,t,n){var r,a,i=function(e){return(e+"").trim().split(/^|\s+/).every(function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e})}(t)?La:Va;return function(){var f=i(this,e),c=f.on;c!==r&&(a=(r=c).copy()).on(t,n),f.on=a}}(n,e,t))},attr:function(e,t){var n=l(e),r="transform"===n?en:ja;return this.attrTween(e,"function"==typeof t?(n.local?function(e,t,n){var r,a,i;return function(){var f,c=n(this);if(null!=c)return(f=this.getAttributeNS(e.space,e.local))===c?null:f===r&&c===a?i:i=t(r=f,a=c);this.removeAttributeNS(e.space,e.local)}}:function(e,t,n){var r,a,i;return function(){var f,c=n(this);if(null!=c)return(f=this.getAttribute(e))===c?null:f===r&&c===a?i:i=t(r=f,a=c);this.removeAttribute(e)}})(n,r,Oa(this,"attr."+e,t)):null==t?(n.local?function(e){return function(){this.removeAttributeNS(e.space,e.local)}}:function(e){return function(){this.removeAttribute(e)}})(n):(n.local?function(e,t,n){var r,a;return function(){var i=this.getAttributeNS(e.space,e.local);return i===n?null:i===r?a:a=t(r=i,n)}}:function(e,t,n){var r,a;return function(){var i=this.getAttribute(e);return i===n?null:i===r?a:a=t(r=i,n)}})(n,r,t+""))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var r=l(e);return this.tween(n,(r.local?function(e,t){function n(){var n=this,r=t.apply(n,arguments);return r&&function(t){n.setAttributeNS(e.space,e.local,r(t))}}return n._value=t,n}:function(e,t){function n(){var n=this,r=t.apply(n,arguments);return r&&function(t){n.setAttribute(e,r(t))}}return n._value=t,n})(r,t))},style:function(e,t,n){var r="transform"==(e+="")?Jt:ja;return null==t?this.styleTween(e,function(e,t){var n,r,a;return function(){var i=E(this,e),f=(this.style.removeProperty(e),E(this,e));return i===f?null:i===n&&f===r?a:a=t(n=i,r=f)}}(e,r)).on("end.style."+e,function(e){return function(){this.style.removeProperty(e)}}(e)):this.styleTween(e,"function"==typeof t?function(e,t,n){var r,a,i;return function(){var f=E(this,e),c=n(this);return null==c&&(this.style.removeProperty(e),c=E(this,e)),f===c?null:f===r&&c===a?i:i=t(r=f,a=c)}}(e,r,Oa(this,"style."+e,t)):function(e,t,n){var r,a;return function(){var i=E(this,e);return i===n?null:i===r?a:a=t(r=i,n)}}(e,r,t+""),n)},styleTween:function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,function(e,t,n){function r(){var r=this,a=t.apply(r,arguments);return a&&function(t){r.style.setProperty(e,a(t),n)}}return r._value=t,r}(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(Oa(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},remove:function(){return this.on("end.remove",(e=this._id,function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}));var e},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r,a=Ra(this.node(),n).tween,i=0,f=a.length;i<f;++i)if((r=a[i]).name===e)return r.value;return null}return this.each((null==t?function(e,t){var n,r;return function(){var a=Va(this,e),i=a.tween;if(i!==n)for(var f=0,c=(r=n=i).length;f<c;++f)if(r[f].name===t){(r=r.slice()).splice(f,1);break}a.tween=r}}:function(e,t,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=Va(this,e),f=i.tween;if(f!==r){a=(r=f).slice();for(var c={name:t,value:n},o=0,u=a.length;o<u;++o)if(a[o].name===t){a[o]=c;break}o===u&&a.push(c)}i.tween=a}})(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?function(e,t){return function(){La(this,e).delay=+t.apply(this,arguments)}}:function(e,t){return t=+t,function(){La(this,e).delay=t}})(t,e)):Ra(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?function(e,t){return function(){Va(this,e).duration=+t.apply(this,arguments)}}:function(e,t){return t=+t,function(){Va(this,e).duration=t}})(t,e)):Ra(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(function(e,t){if("function"!=typeof t)throw new Error;return function(){Va(this,e).ease=t}}(t,e)):Ra(this.node(),t).ease}};Math.PI,Math.PI;var Ka={time:null,delay:0,duration:250,ease:function(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}};function Qa(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))return Ka.time=_a(),Ka;return n}function Ja(e){for(var t=e.length/6|0,n=new Array(t),r=0;r<t;)n[r]="#"+e.slice(6*r,6*++r);return n}function ei(e){return Yt(e[e.length-1])}Q.prototype.interrupt=function(e){return this.each(function(){Ha(this,e)})},Q.prototype.transition=function(e){var t,n;e instanceof Ba?(t=e._id,e=e._name):(t=Za(),(n=Ka).time=_a(),e=null==e?null:e+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var f,c=r[i],o=c.length,u=0;u<o;++u)(f=c[u])&&Ga(f,e,t,u,c,n||Qa(f,t));return new Ba(r,this._parents,e,t)},Ja("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Ja("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Ja("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Ja("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Ja("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Ja("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Ja("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Ja("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Ja("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),ei(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Ja)),ei(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Ja)),ei(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Ja)),ei(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Ja)),ei(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Ja)),ei(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Ja)),ei(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Ja)),ei(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Ja)),ei(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Ja)),ei(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Ja)),ei(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Ja)),ei(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Ja)),ei(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Ja)),ei(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Ja)),ei(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Ja)),ei(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Ja)),ei(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Ja)),ei(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Ja)),ei(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Ja)),ei(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Ja)),ei(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Ja)),ei(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Ja)),ei(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Ja)),ei(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Ja)),ei(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Ja)),ei(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Ja)),ei(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Ja)),nn(Ct(300,.5,0),Ct(-240,.5,1));nn(Ct(-100,.75,.35),Ct(80,1.5,.8)),nn(Ct(260,.75,.35),Ct(80,1.5,.8)),Ct(),et(),Math.PI,Math.PI;function ti(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}ti(Ja("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));ti(Ja("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),ti(Ja("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),ti(Ja("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));class ni{constructor(e,t,n=!1){$(`#${e}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(r).appendTo(`#${e}`),this.buttons={},this.tooltip=t}createDownloadSvgButton(e,t,n,r,a="fa-download"){this.createButton(e,a);J(`#${e}`).on("click",()=>{this.downloadSvg(t,n,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(e,t,n="fa-expand-arrows-alt"){this.createButton(e,n);J(`#${e}`).on("click",t).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(e,t="fa-download"){const n=$("<a/>").attr("id",e).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${t}`).appendTo(n),this.buttons[e]=n,n}attachTooltip(e){this.tooltip=e}downloadSvg(e,t,n){let r=$($($(`${"#"+e}`))[0]),a=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),i=function(e){for(var t="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var a=n[r].cssRules,i=0;i<a.length;i++){var f=a[i];if(void 0!==f.style){var c,o=void 0===f.selectorText?f.selectorText:f.selectorText.replace(`#${e[0].id} `,"");try{c=$(e).find(o)}catch(e){c=[]}c.length>0&&(t+=f.selectorText+" { "+f.style.cssText+" }\n")}}}catch(e){if("SecurityError"!==e.name)throw e;continue}var u=document.createElement("style");return u.setAttribute("type","text/css"),u.innerHTML="<![CDATA[\n"+t+"\n]]>",u}(r.get());a.prepend(i),$("#"+n).html("").hide();let f=$(`#${n}`).append(a).html(),c=new Blob([f],{type:"image/svg+xml"});saveAs(c,t),$(`#${n}`).html("").hide()}}class ri{constructor(e,t=!1,n=30,r=-40,a=100){this.id=e,this.verbose=t,this.offsetX=n,this.offsetY=r,this.duration=a}show(e){this.verbose&&console.log(e),this.edit(e),this.move(),J("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){J("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(e=O.pageX,t=O.pageY){this.verbose&&(console.log(e),console.log(t)),e+=this.offsetX,t=t+this.offsetY<0?10:t+this.offsetY;J("#"+this.id).style("left",`${e}px`).style("top",`${t}px`)}edit(e){J("#"+this.id).html(e)}}var ai=Array.prototype.slice;function ii(e){return e}var fi=1,ci=2,oi=3,ui=4,si=1e-6;function li(e){return"translate("+(e+.5)+",0)"}function di(e){return"translate(0,"+(e+.5)+")"}function hi(){return!this.__axis}function bi(e,t){var n=[],r=null,a=null,i=6,f=6,c=3,o=e===fi||e===ui?-1:1,u=e===ui||e===ci?"x":"y",s=e===fi||e===oi?li:di;function l(l){var d=null==r?t.ticks?t.ticks.apply(t,n):t.domain():r,h=null==a?t.tickFormat?t.tickFormat.apply(t,n):ii:a,b=Math.max(i,0)+c,p=t.range(),g=+p[0]+.5,v=+p[p.length-1]+.5,m=(t.bandwidth?function(e){var t=Math.max(0,e.bandwidth()-1)/2;return e.round()&&(t=Math.round(t)),function(n){return+e(n)+t}}:function(e){return function(t){return+e(t)}})(t.copy()),y=l.selection?l.selection():l,w=y.selectAll(".domain").data([null]),x=y.selectAll(".tick").data(d,t).order(),_=x.exit(),M=x.enter().append("g").attr("class","tick"),A=x.select("line"),T=x.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),x=x.merge(M),A=A.merge(M.append("line").attr("stroke","#000").attr(u+"2",o*i)),T=T.merge(M.append("text").attr("fill","#000").attr(u,o*b).attr("dy",e===fi?"0em":e===oi?"0.71em":"0.32em")),l!==y&&(w=w.transition(l),x=x.transition(l),A=A.transition(l),T=T.transition(l),_=_.transition(l).attr("opacity",si).attr("transform",function(e){return isFinite(e=m(e))?s(e):this.getAttribute("transform")}),M.attr("opacity",si).attr("transform",function(e){var t=this.parentNode.__axis;return s(t&&isFinite(t=t(e))?t:m(e))})),_.remove(),w.attr("d",e===ui||e==ci?"M"+o*f+","+g+"H0.5V"+v+"H"+o*f:"M"+g+","+o*f+"V0.5H"+v+"V"+o*f),x.attr("opacity",1).attr("transform",function(e){return s(m(e))}),A.attr(u+"2",o*i),T.attr(u,o*b).text(h),y.filter(hi).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",e===ci?"start":e===ui?"end":"middle"),y.each(function(){this.__axis=m})}return l.scale=function(e){return arguments.length?(t=e,l):t},l.ticks=function(){return n=ai.call(arguments),l},l.tickArguments=function(e){return arguments.length?(n=null==e?[]:ai.call(e),l):n.slice()},l.tickValues=function(e){return arguments.length?(r=null==e?null:ai.call(e),l):r&&r.slice()},l.tickFormat=function(e){return arguments.length?(a=e,l):a},l.tickSize=function(e){return arguments.length?(i=f=+e,l):i},l.tickSizeInner=function(e){return arguments.length?(i=+e,l):i},l.tickSizeOuter=function(e){return arguments.length?(f=+e,l):f},l.tickPadding=function(e){return arguments.length?(c=+e,l):c},l}function pi(e){return bi(oi,e)}var gi=Math.PI,vi=2*gi,mi=vi-1e-6;function yi(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function wi(){return new yi}function xi(e){return function(){return e}}yi.prototype=wi.prototype={constructor:yi,moveTo:function(e,t){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(e,t){this._+="L"+(this._x1=+e)+","+(this._y1=+t)},quadraticCurveTo:function(e,t,n,r){this._+="Q"+ +e+","+ +t+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(e,t,n,r,a,i){this._+="C"+ +e+","+ +t+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(e,t,n,r,a){e=+e,t=+t,n=+n,r=+r,a=+a;var i=this._x1,f=this._y1,c=n-e,o=r-t,u=i-e,s=f-t,l=u*u+s*s;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=e)+","+(this._y1=t);else if(l>1e-6)if(Math.abs(s*c-o*u)>1e-6&&a){var d=n-i,h=r-f,b=c*c+o*o,p=d*d+h*h,g=Math.sqrt(b),v=Math.sqrt(l),m=a*Math.tan((gi-Math.acos((b+l-p)/(2*g*v)))/2),y=m/v,w=m/g;Math.abs(y-1)>1e-6&&(this._+="L"+(e+y*u)+","+(t+y*s)),this._+="A"+a+","+a+",0,0,"+ +(s*d>u*h)+","+(this._x1=e+w*c)+","+(this._y1=t+w*o)}else this._+="L"+(this._x1=e)+","+(this._y1=t);else;},arc:function(e,t,n,r,a,i){e=+e,t=+t;var f=(n=+n)*Math.cos(r),c=n*Math.sin(r),o=e+f,u=t+c,s=1^i,l=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+o+","+u:(Math.abs(this._x1-o)>1e-6||Math.abs(this._y1-u)>1e-6)&&(this._+="L"+o+","+u),n&&(l<0&&(l=l%vi+vi),l>mi?this._+="A"+n+","+n+",0,1,"+s+","+(e-f)+","+(t-c)+"A"+n+","+n+",0,1,"+s+","+(this._x1=o)+","+(this._y1=u):l>1e-6&&(this._+="A"+n+","+n+",0,"+ +(l>=gi)+","+s+","+(this._x1=e+n*Math.cos(a))+","+(this._y1=t+n*Math.sin(a))))},rect:function(e,t,n,r){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};Math.PI;function _i(e){this._context=e}function Mi(e){return new _i(e)}function Ai(e){return e[0]}function Ti(e){return e[1]}function Si(){var e=Ai,t=null,n=xi(0),r=Ti,a=xi(!0),i=null,f=Mi,c=null;function o(o){var u,s,l,d,h,b=o.length,p=!1,g=new Array(b),v=new Array(b);for(null==i&&(c=f(h=wi())),u=0;u<=b;++u){if(!(u<b&&a(d=o[u],u,o))===p)if(p=!p)s=u,c.areaStart(),c.lineStart();else{for(c.lineEnd(),c.lineStart(),l=u-1;l>=s;--l)c.point(g[l],v[l]);c.lineEnd(),c.areaEnd()}p&&(g[u]=+e(d,u,o),v[u]=+n(d,u,o),c.point(t?+t(d,u,o):g[u],r?+r(d,u,o):v[u]))}if(h)return c=null,h+""||null}function u(){return function(){var e=Ai,t=Ti,n=xi(!0),r=null,a=Mi,i=null;function f(f){var c,o,u,s=f.length,l=!1;for(null==r&&(i=a(u=wi())),c=0;c<=s;++c)!(c<s&&n(o=f[c],c,f))===l&&((l=!l)?i.lineStart():i.lineEnd()),l&&i.point(+e(o,c,f),+t(o,c,f));if(u)return i=null,u+""||null}return f.x=function(t){return arguments.length?(e="function"==typeof t?t:xi(+t),f):e},f.y=function(e){return arguments.length?(t="function"==typeof e?e:xi(+e),f):t},f.defined=function(e){return arguments.length?(n="function"==typeof e?e:xi(!!e),f):n},f.curve=function(e){return arguments.length?(a=e,null!=r&&(i=a(r)),f):a},f.context=function(e){return arguments.length?(null==e?r=i=null:i=a(r=e),f):r},f}().defined(a).curve(f).context(i)}return o.x=function(n){return arguments.length?(e="function"==typeof n?n:xi(+n),t=null,o):e},o.x0=function(t){return arguments.length?(e="function"==typeof t?t:xi(+t),o):e},o.x1=function(e){return arguments.length?(t=null==e?null:"function"==typeof e?e:xi(+e),o):t},o.y=function(e){return arguments.length?(n="function"==typeof e?e:xi(+e),r=null,o):n},o.y0=function(e){return arguments.length?(n="function"==typeof e?e:xi(+e),o):n},o.y1=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:xi(+e),o):r},o.lineX0=o.lineY0=function(){return u().x(e).y(n)},o.lineY1=function(){return u().x(e).y(r)},o.lineX1=function(){return u().x(t).y(n)},o.defined=function(e){return arguments.length?(a="function"==typeof e?e:xi(!!e),o):a},o.curve=function(e){return arguments.length?(f=e,null!=i&&(c=f(i)),o):f},o.context=function(e){return arguments.length?(null==e?i=c=null:c=f(i=e),o):i},o}function ki(e){return e<0?-1:1}function Ei(e,t,n){var r=e._x1-e._x0,a=t-e._x1,i=(e._y1-e._y0)/(r||a<0&&-0),f=(n-e._y1)/(a||r<0&&-0),c=(i*a+f*r)/(r+a);return(ki(i)+ki(f))*Math.min(Math.abs(i),Math.abs(f),.5*Math.abs(c))||0}function Ni(e,t){var n=e._x1-e._x0;return n?(3*(e._y1-e._y0)/n-t)/2:t}function Ci(e,t,n){var r=e._x0,a=e._y0,i=e._x1,f=e._y1,c=(i-r)/3;e._context.bezierCurveTo(r+c,a+c*t,i-c,f-c*n,i,f)}function Di(e){this._context=e}function Ii(e){this._context=e}function Pi(){O.preventDefault(),O.stopImmediatePropagation()}function $i(e){return function(){return e}}function zi(){O.stopImmediatePropagation()}function Ui(){O.preventDefault(),O.stopImmediatePropagation()}_i.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}},Di.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Ci(this,this._t0,Ni(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(t=+t,(e=+e)!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,Ci(this,Ni(this,n=Ei(this,e,t)),n);break;default:Ci(this,this._t0,n=Ei(this,e,t))}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}},(function(e){this._context=new Ii(e)}.prototype=Object.create(Di.prototype)).point=function(e,t){Di.prototype.point.call(this,t,e)},Ii.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,r,a,i){this._context.bezierCurveTo(t,e,r,n,i,a)}};var Fi={name:"drag"},Yi={name:"space"},Gi={name:"handle"},Li={name:"center"},Vi={name:"x",handles:["e","w"].map(Zi),input:function(e,t){return e&&[[e[0],t[0][1]],[e[1],t[1][1]]]},output:function(e){return e&&[e[0][0],e[1][0]]}},Ri={name:"y",handles:["n","s"].map(Zi),input:function(e,t){return e&&[[t[0][0],e[0]],[t[1][0],e[1]]]},output:function(e){return e&&[e[0][1],e[1][1]]}},Hi={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Zi),input:function(e){return e},output:function(e){return e}},Oi={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},ji={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},qi={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Xi={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Bi={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Zi(e){return{type:e}}function Wi(){return!O.button}function Ki(){var e=this.ownerSVGElement||this;return[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]}function Qi(e){for(;!e.__brush;)if(!(e=e.parentNode))return;return e.__brush}function Ji(e){return e[0][0]===e[1][0]||e[0][1]===e[1][1]}function ef(){return function(e){var t,n=Ki,r=Wi,a=ca(f,"start","brush","end"),i=6;function f(t){var n=t.property("__brush",l).selectAll(".overlay").data([Zi("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Oi.overlay).merge(n).each(function(){var e=Qi(this).extent;J(this).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1])}),t.selectAll(".selection").data([Zi("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Oi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=t.selectAll(".handle").data(e.handles,function(e){return e.type});r.exit().remove(),r.enter().append("rect").attr("class",function(e){return"handle handle--"+e.type}).attr("cursor",function(e){return Oi[e.type]}),t.each(c).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",s)}function c(){var e=J(this),t=Qi(this).selection;t?(e.selectAll(".selection").style("display",null).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1]),e.selectAll(".handle").style("display",null).attr("x",function(e){return"e"===e.type[e.type.length-1]?t[1][0]-i/2:t[0][0]-i/2}).attr("y",function(e){return"s"===e.type[0]?t[1][1]-i/2:t[0][1]-i/2}).attr("width",function(e){return"n"===e.type||"s"===e.type?t[1][0]-t[0][0]+i:i}).attr("height",function(e){return"e"===e.type||"w"===e.type?t[1][1]-t[0][1]+i:i})):e.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function o(e,t){return e.__brush.emitter||new u(e,t)}function u(e,t){this.that=e,this.args=t,this.state=e.__brush,this.active=0}function s(){if(O.touches){if(O.changedTouches.length<O.touches.length)return Ui()}else if(t)return;if(r.apply(this,arguments)){var n,a,i,f,u,s,l,d,h,b,p,g,v,m=this,y=O.target.__data__.type,w="selection"===(O.metaKey?y="overlay":y)?Fi:O.altKey?Li:Gi,x=e===Ri?null:Xi[y],_=e===Vi?null:Bi[y],M=Qi(m),A=M.extent,T=M.selection,S=A[0][0],k=A[0][1],E=A[1][0],N=A[1][1],C=x&&_&&O.shiftKey,D=te(m),I=D,P=o(m,arguments).beforestart();"overlay"===y?M.selection=T=[[n=e===Ri?S:D[0],i=e===Vi?k:D[1]],[u=e===Ri?E:n,l=e===Vi?N:i]]:(n=T[0][0],i=T[0][1],u=T[1][0],l=T[1][1]),a=n,f=i,s=u,d=l;var $=J(m).attr("pointer-events","none"),z=$.selectAll(".overlay").attr("cursor",Oi[y]);if(O.touches)$.on("touchmove.brush",F,!0).on("touchend.brush touchcancel.brush",G,!0);else{var U=J(O.view).on("keydown.brush",function(){switch(O.keyCode){case 16:C=x&&_;break;case 18:w===Gi&&(x&&(u=s-h*x,n=a+h*x),_&&(l=d-b*_,i=f+b*_),w=Li,Y());break;case 32:w!==Gi&&w!==Li||(x<0?u=s-h:x>0&&(n=a-h),_<0?l=d-b:_>0&&(i=f-b),w=Yi,z.attr("cursor",Oi.selection),Y());break;default:return}Ui()},!0).on("keyup.brush",function(){switch(O.keyCode){case 16:C&&(g=v=C=!1,Y());break;case 18:w===Li&&(x<0?u=s:x>0&&(n=a),_<0?l=d:_>0&&(i=f),w=Gi,Y());break;case 32:w===Yi&&(O.altKey?(x&&(u=s-h*x,n=a+h*x),_&&(l=d-b*_,i=f+b*_),w=Li):(x<0?u=s:x>0&&(n=a),_<0?l=d:_>0&&(i=f),w=Gi),z.attr("cursor",Oi[y]),Y());break;default:return}Ui()},!0).on("mousemove.brush",F,!0).on("mouseup.brush",G,!0);!function(e){var t=e.document.documentElement,n=J(e).on("dragstart.drag",Pi,!0);"onselectstart"in t?n.on("selectstart.drag",Pi,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")}(O.view)}zi(),Ha(m),c.call(m),P.start()}function F(){var e=te(m);!C||g||v||(Math.abs(e[0]-I[0])>Math.abs(e[1]-I[1])?v=!0:g=!0),I=e,p=!0,Ui(),Y()}function Y(){var e;switch(h=I[0]-D[0],b=I[1]-D[1],w){case Yi:case Fi:x&&(h=Math.max(S-n,Math.min(E-u,h)),a=n+h,s=u+h),_&&(b=Math.max(k-i,Math.min(N-l,b)),f=i+b,d=l+b);break;case Gi:x<0?(h=Math.max(S-n,Math.min(E-n,h)),a=n+h,s=u):x>0&&(h=Math.max(S-u,Math.min(E-u,h)),a=n,s=u+h),_<0?(b=Math.max(k-i,Math.min(N-i,b)),f=i+b,d=l):_>0&&(b=Math.max(k-l,Math.min(N-l,b)),f=i,d=l+b);break;case Li:x&&(a=Math.max(S,Math.min(E,n-h*x)),s=Math.max(S,Math.min(E,u+h*x))),_&&(f=Math.max(k,Math.min(N,i-b*_)),d=Math.max(k,Math.min(N,l+b*_)))}s<a&&(x*=-1,e=n,n=u,u=e,e=a,a=s,s=e,y in ji&&z.attr("cursor",Oi[y=ji[y]])),d<f&&(_*=-1,e=i,i=l,l=e,e=f,f=d,d=e,y in qi&&z.attr("cursor",Oi[y=qi[y]])),M.selection&&(T=M.selection),g&&(a=T[0][0],s=T[1][0]),v&&(f=T[0][1],d=T[1][1]),T[0][0]===a&&T[0][1]===f&&T[1][0]===s&&T[1][1]===d||(M.selection=[[a,f],[s,d]],c.call(m),P.brush())}function G(){if(zi(),O.touches){if(O.touches.length)return;t&&clearTimeout(t),t=setTimeout(function(){t=null},500),$.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(e,t){var n=e.document.documentElement,r=J(e).on("dragstart.drag",null);t&&(r.on("click.drag",Pi,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(O.view,p),U.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);$.attr("pointer-events","all"),z.attr("cursor",Oi.overlay),M.selection&&(T=M.selection),Ji(T)&&(M.selection=null,c.call(m)),P.end()}}function l(){var t=this.__brush||{selection:null};return t.extent=n.apply(this,arguments),t.dim=e,t}return f.move=function(t,n){t.selection?t.on("start.brush",function(){o(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){o(this,arguments).end()}).tween("brush",function(){var t=this,r=t.__brush,a=o(t,arguments),i=r.selection,f=e.input("function"==typeof n?n.apply(this,arguments):n,r.extent),u=Ht(i,f);function s(e){r.selection=1===e&&Ji(f)?null:u(e),c.call(t),a.brush()}return i&&f?s:s(1)}):t.each(function(){var t=arguments,r=this.__brush,a=e.input("function"==typeof n?n.apply(this,t):n,r.extent),i=o(this,t).beforestart();Ha(this),r.selection=null==a||Ji(a)?null:a,c.call(this),i.start().brush().end()})},u.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){!function(e,t,n,r){var a=O;e.sourceEvent=O,O=e;try{t.apply(n,r)}finally{O=a}}(new function(e,t,n){this.target=e,this.type=t,this.selection=n}(f,t,e.output(this.state.selection)),a.apply,a,[t,this.that,this.args])}},f.extent=function(e){return arguments.length?(n="function"==typeof e?e:$i([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),f):n},f.filter=function(e){return arguments.length?(r="function"==typeof e?e:$i(!!e),f):r},f.handleSize=function(e){return arguments.length?(i=+e,f):i},f.on=function(){var e=a.on.apply(a,arguments);return e===a?f:e},f}(Hi)}const tf={epanechnikov:function(e){return Math.abs(e)<=1?.75*(1-e*e):0},gaussian:function(e){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*e*e)}},nf={nrd:function(e){let t=(be(e,.75)-be(e,.25))/1.34;return 1.06*Math.min(ce(e),t)*Math.pow(e.length,-.2)}};function rf(e,t,n){return function(r){return t.map(t=>[t,function(e,t){var n,r=e.length,a=r,i=-1,f=0;if(null==t)for(;++i<r;)isNaN(n=fe(e[i]))?--a:f+=n;else for(;++i<r;)isNaN(n=fe(t(e[i],i,e)))?--a:f+=n;if(a)return f/a}(r,r=>e((t-r)/n))/n])}}class af{constructor(e,t={}){this._sanityCheck(e),this.data=e,this.groupInfo=t,this.toolbar=void 0,this.tooltip=void 0}render(e,t=500,n=357,r=.05,a,i=[-3,3],f="Y axis",c=!0,o=30,u=!0,s=0,l=!1,d=!1,h=!1,b=!1,p=!1,g=!1,v=0){if(this.reset=(()=>{e.selectAll("*").remove(),this.render(e,t,n,r,a,i,f,c,o,u,s,l,d,h,b,p,g)}),this.updateYScale=function(i,f){e.selectAll("*").remove(),void 0===f&&(f=[]),this.render(e,t,n,r,a,[],i,c,o,u,s,l,d,h,b,p,g)},this.updateXScale=function(a){void 0===a&&console.error("updateXScale called without new X domain"),e.selectAll("*").remove(),this.render(e,t,n,r,a,[],f,c,o,u,s,l,d,h,b,p,g)},void 0===i||0==i.length){let e=[];this.data.forEach(t=>e=e.concat(t.values)),i=oe(e)}this.groups=Me().key(e=>e.group).entries(this.data),this.scale={x:$e().rangeRound([0,t]).domain(a||this.groups.map(e=>e.key)).paddingInner(r),subx:$e(),y:Tn().rangeRound([n,0]).domain(i),z:Tn()},this.groups.forEach(t=>{let r=t.key,a=t.values,f=this.groupInfo[r];if(t.index=this.scale.x.domain().indexOf(r),void 0!==f){e.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","center").attr("fill",e=>"pvalue"==e&&parseFloat(f[e])<=parseFloat(f.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(e,t)=>{return`translate(${this.scale.x(r)+this.scale.x.bandwidth()/2}, ${this.scale.y(i[0])+50})`}).text(e=>`${e}: ${parseFloat(parseFloat(f[e]).toPrecision(3)).toExponential()}`)}p&&a.sort((e,t)=>e.label<t.label?-1:e.label>t.label?1:0),this.scale.subx.domain(a.map(e=>e.label)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),a.forEach(n=>{0!=n.values.length&&(n.values=n.values.sort(ne),this._drawViolin(e,n,l,t.index,g,v))});var c=18;if(b){const t=$e().domain(a.map(e=>void 0==e.size?"(0)":`(${e.size||0})`)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]);e.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${n+c})`).call(pi(t))}if(u){c=5;const t=e.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${n+c})`).call(pi(this.scale.subx));s>0&&t.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${s}, 2, 10)`)}});let m=u?55:0;var y;if(this.xAxis=c?pi(this.scale.x):pi(this.scale.x).tickFormat(""),e.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${n+m})`).call(this.xAxis).selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${o}, -10, 10)`),m=5,this.yAxis=(y=this.scale.y,bi(ui,y)).tickValues(this.scale.y.ticks(5)),e.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${m}, 0)`).call(this.yAxis),e.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${2*m+J(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(f),e.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),d&&this._addGroupDivider(e),h){const t=e.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");t.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const n=t.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),r=10;n.append("rect").attr("x",(e,t)=>5+60*t+this.scale.x.range()[0]).attr("y",-28).attr("width",r).attr("height",r).style("fill",e=>e.color),n.append("text").attr("class","violin-legend-text").text(e=>e.label).attr("x",(e,t)=>17+60*t+this.scale.x.range()[0]).attr("y",-20)}}addPlotTitle(e,t){let n=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,r=this.scale.y.range()[1]-10;e.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${n}, ${r})`).text(t)}createTooltip(e){return 0==$(`#${e}`).length&&$("<div/>").attr("id",e).appendTo($("body")),this.tooltip=new ri(e),J(`#${e}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(e,t){return this.toolbar=new ni(e,t),this.toolbar}addBrush(e){const t=ef();t.on("end",()=>{this.zoom(e,t)}),e.append("g").attr("class","brush").call(t)}zoom(e,t){let n,r=O.selection;if(void 0===t)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter((e,t)=>{const n=Math.floor(r[0][0]/this.scale.x.bandwidth()),a=Math.floor(r[1][0]/this.scale.x.bandwidth());return t>=n&&t<=a}));const n=Math.floor(this.scale.y.invert(r[1][1])),a=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([n,a]),e.select(".brush").call(t.move,null)}else{if(!n)return n=setTimeout(function(){n=null},350);this.reset()}let a=e.transition().duration(750);e.select(".axis--x").transition(a).call(this.xAxis),e.select(".axis--y").transition(a).call(this.yAxis),this.groups.forEach((t,n)=>{let r=t.key,i=t.values;this.scale.subx.rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),i.forEach(n=>{if(0==n.values.length)return;this.scale.x.domain().indexOf(r);this.scale.z.range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const i=e.select(`#violin${t.index}-${n.label}`);i.select(".violin").transition(a).attr("d",Si().x0(e=>this.scale.z(e[1])).x1(e=>this.scale.z(-e[1])).y(e=>this.scale.y(e[0])));const f=be(n.values,.25),c=be(n.values,.75);i.select(".violin-ir").transition(a).attr("x",this.scale.z(-.1)).attr("y",this.scale.y(c)).attr("width",Math.abs(this.scale.z(-.1)-this.scale.z(.1))).attr("height",Math.abs(this.scale.y(c)-this.scale.y(f)));const o=ge(n.values);i.select(".violin-median").transition(a).attr("x1",this.scale.z(-.1)).attr("x2",this.scale.z(.1)).attr("y1",this.scale.y(o)).attr("y2",this.scale.y(o))})})}_drawViolin(e,t,n,r,a,i){let f=rf(tf.gaussian,this.scale.y.ticks(100),nf.nrd(t.values));const c=oe(t.values),o=f(t.values).filter(e=>e[0]>=c[0]&&e[0]<=c[1]),u=e.append("g").attr("id",`violin${r}-${t.label}`).attr("class","violin-g").datum(t);if(t.values.length>=i&&o.length&&this._validVertices(o)){let i=pe(o,e=>Math.abs(e[1]));this.scale.z.domain([-i,i]).range([this.scale.subx(t.label),this.scale.subx(t.label)+this.scale.subx.bandwidth()]);let f=Si().x0(e=>this.scale.z(e[1])).x1(e=>this.scale.z(-e[1])).y(e=>this.scale.y(e[0]));const c=u.append("path").datum(o).attr("d",f).classed("violin",!0).style("fill",()=>void 0!==t.color?t.color:r%2==0?"#90c1c1":"#94a8b8"),s=be(t.values,.25),l=be(t.values,.75),d=this.scale.z.domain()[1]/3;if(n){const n=Math.abs(l-s),r=pe(t.values.filter(e=>e<=l+1.5*n)),a=ve(t.values.filter(e=>e>=s-1.5*n));e.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(a)).style("stroke","#fff")}u.append("rect").attr("x",this.scale.z(-d)).attr("y",this.scale.y(l)).attr("width",Math.abs(this.scale.z(-d)-this.scale.z(d))).attr("height",Math.abs(this.scale.y(l)-this.scale.y(s))).attr("class","violin-ir");const h=ge(t.values);if(u.append("line").attr("x1",this.scale.z(-d)).attr("x2",this.scale.z(d)).attr("y1",this.scale.y(h)).attr("y2",this.scale.y(h)).attr("class","violin-median"),a){let e=we(0,d/2);const n=Math.abs(l-s),r=pe(t.values.filter(e=>e<=l+1.5*n)),a=ve(t.values.filter(e=>e>=s-1.5*n)),i=t.values.filter(e=>e<a||e>r);u.append("g").attr("class","violin-outliers").selectAll("circle").data(i).enter().append("circle").attr("cx",()=>this.scale.z(e())).attr("cy",e=>this.scale.y(e)).attr("r",2)}u.on("mouseover",()=>{c.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(t.group+"<br/>"+t.label+"<br/>Median: "+h.toPrecision(4)+"<br/>")}),u.on("mouseout",()=>{c.classed("highlighted",!1)})}else if(i){let e=pe(t.values,e=>Math.abs(e));this.scale.z.domain([-e,e]).range([this.scale.subx(t.label),this.scale.subx(t.label)+this.scale.subx.bandwidth()]);const n=this.scale.z.domain()[1]/3;let r=we(0,n/2);u.append("g").attr("class","violin-points").selectAll("circle").data(t.values).enter().append("circle").attr("cx",()=>this.scale.z(r())).attr("cy",e=>this.scale.y(e)).attr("r",2)}}_sanityCheck(e){const t=["group","label","values"];e.forEach(e=>{t.forEach(t=>{if(void 0===e[t])throw"GroupedViolin: input data error."})})}_addGroupDivider(e){const t=this.scale.x.domain(),n=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),r=(e,r)=>r!==t.length-1?this.scale.x(e)+ +this.scale.x.bandwidth()+n/2:0;e.selectAll(".vline").data(t).enter().append("line").classed("vline",!0).attr("x1",r).attr("x2",r).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(e,n)=>n!=t.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}_validVertices(e){return!e.reduce((e,t)=>e.concat(t),[]).filter(e=>isNaN(e)).length}}const ff={id:"gtexGroupedViolinPlot",data:{heatmap:ye({x:50,y:10,scaleFactor:1e3}),dendroHeatmap:{rowTree:"(((TP53:0.17,SLK:0.17):1.18,NDRG4:1.34):1.33,ACTN3:2.67);",colTree:"(((Adipose Visceral Omentum:0.06,Adipose Subcutaneous:0.06):0.00,Bladder:0.06):0.16,Adrenal Gland:0.22);",heatmap:[{y:"SLK",value:35.505,x:"Adipose Subcutaneous",unit:"TPM"},{y:"SLK",value:29.28,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"SLK",value:17.405,x:"Adrenal Gland",unit:"TPM"},{y:"SLK",value:53.29,x:"Bladder",unit:"TPM"},{y:"NDRG4",value:12.035,x:"Adipose Subcutaneous",unit:"TPM"},{y:"NDRG4",value:6.531000000000001,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"NDRG4",value:134.8,x:"Adrenal Gland",unit:"TPM"},{y:"NDRG4",value:7.1160000000000005,x:"Bladder",unit:"TPM"},{y:"TP53",value:29.935,x:"Adipose Subcutaneous",unit:"TPM"},{y:"TP53",value:23.55,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"TP53",value:18.515,x:"Adrenal Gland",unit:"TPM"},{y:"TP53",value:40.51,x:"Bladder",unit:"TPM"},{y:"ACTN3",value:.33145,x:"Adipose Subcutaneous",unit:"TPM"},{y:"ACTN3",value:.3317,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"ACTN3",value:.100005,x:"Adrenal Gland",unit:"TPM"},{y:"ACTN3",value:.48100000000000004,x:"Bladder",unit:"TPM"}]},groupedViolinPlot:[{group:"Group 1",label:"Gene 1",values:ue(0,2e3).map(we(2,1))},{group:"Group 1",label:"Gene 2",values:ue(0,2e3).map(we(5,1))},{group:"Group 1",label:"Gene 3",values:ue(0,2e3).map(we(10,1))},{group:"Group 2",label:"Gene 1",values:ue(0,2e3).map(we(5,1))},{group:"Group 2",label:"Gene 2",values:ue(0,2e3).map(we(3,1))},{group:"Group 2",label:"Gene 3",values:ue(0,2e3).map(we(1,1))},{group:"Group 3",label:"Gene 1",values:ue(0,2e3).map(we(2,1))},{group:"Group 3",label:"Gene 2",values:ue(0,2e3).map(we(3,1))},{group:"Group 3",label:"Gene 3",values:ue(0,2e3).map(we(5,1))}],transcriptTracks:{exons:{"ENST00000311595.9":[{chrom:"17",chromEnd:77071172,exonId:"ENSE00002713933.1",exonNumber:"1",chromStart:77071151,strand:"+"},{chrom:"17",chromEnd:77073579,exonId:"ENSE00003672628.1",exonNumber:"2",chromStart:77073512,strand:"+"},{chrom:"17",chromEnd:77073946,exonId:"ENSE00003475281.1",exonNumber:"3",chromStart:77073745,strand:"+"},{chrom:"17",chromEnd:77075719,exonId:"ENSE00001111713.1",exonNumber:"4",chromStart:77075571,strand:"+"},{chrom:"17",chromEnd:77076446,exonId:"ENSE00003651250.1",exonNumber:"5",chromStart:77076289,strand:"+"},{chrom:"17",chromEnd:77077155,exonId:"ENSE00003607773.1",exonNumber:"6",chromStart:77077007,strand:"+"},{chrom:"17",chromEnd:77078612,exonId:"ENSE00002720924.1",exonNumber:"7",chromStart:77077980,strand:"+"}]},transcripts:[{chromosome:"17",end:77078612,gencodeId:"ENSG00000167280.12",geneSymbol:"ENGASE",start:77071151,strand:"+",transcriptId:"ENST00000311595.9"}]},bubbleMap:ye({x:50,y:10,scaleFactor:1,diverging:!0,bubble:!0}),ldPlot:ye({x:2,y:2,scaleFactor:1})}.groupedViolinPlot,width:500,height:300,marginLeft:100,marginRight:20,marginTop:50,marginBottom:100,showDivider:!0,xPadding:.3,yLabel:"Random Value",showSubX:!0,showX:!0,xAngle:0,subXAngle:0,showWhisker:!1,showLegend:!1,showSampleSize:!0};function cf(e=ff){console.log(e.data);let t={top:e.marginTop,right:e.marginRight,bottom:e.marginBottom,left:e.marginLeft};me(e.id);let n=e.width-(e.marginLeft+e.marginRight),r=e.height-(e.marginTop+e.marginBottom),a=(e.id,`${e.id}Tooltip`),i=function(e,t,n,r,a,i="relative"){return me(e),void 0===a&&(a=`${e}-svg`),J("#"+e).append("svg").attr("width",t).attr("height",n).attr("id",a).append("g").attr("transform",`translate(${r.left}, ${r.top})`)}(e.id,e.width,e.height,t);const f=new af(e.data);return f.render(i,n,r,e.xPadding,void 0,[],e.yLabel,e.showX,e.xAngle,e.showSubX,e.subXAngle,e.showWhisker,e.showDivider,e.showLegend,e.showSampleSize,e.sortSubX,e.showOutliers,e.numPoints),i.selectAll(".violin-size-axis").classed("violin-size-axis-hide",!0).classed("violin-size-axis",!1),f.createTooltip(a),i}return e.render=function(e,t,n,r,a,i=function(){const e="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:e+"association/singleTissueEqtl?format=json&datasetId=gtex_v7&gencodeId=",ld:e+"dataset/ld?format=json&datasetId=gtex_v7&gencodeId=",dyneqtl:e+"association/dyneqtl",snp:e+"reference/variant?format=json&snpId=",variantId:e+"dataset/variant?format=json&variantId=",exonExp:e+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcriptExp:e+"expression/medianTranscriptExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",junctionExp:e+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcript:e+"reference/transcript?datasetId=gtex_v7&gencodeId=",exon:e+"reference/exon?datasetId=gtex_v7&gencodeId=",geneModel:e+"dataset/collapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneModelUnfiltered:e+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneExp:e+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",medGeneExp:e+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&pageSize=10000",geneExpBoxplot:e+"expression/geneExpression?datasetId=gtex_v7&boxplotDetail=full&gencodeId=",topInTissueFiltered:e+"expression/topExpressedGene?datasetId=gtex_v7&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:e+"expression/topExpressedGene?datasetId=gtex_v7&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:e+"reference/gene?format=json&gencodeVersion=v19&genomeBuild=GRCh37%2Fhg19&geneId=",tissue:e+"dataset/tissueInfo?format=json&datasetId=gtex_v7",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}()){var f,c;(f=i.dyneqtl+`?variantId=${n}&gencodeId=${t}&tissueSiteDetailId=${r}`,c={credentials:"include"},fetch(f,c).then(o)).then(function(t){let n=function(e){["data","genotypes","pValue","pValueThreshold","tissueSiteDetailId"].forEach(t=>{if(!e.hasOwnProperty(t))throw console.error(e),"Parse Error: Required json attribute is missing: "+t}),e.expression_values=e.data.map(e=>parseFloat(e)),e.genotypes=e.genotypes.map(e=>parseFloat(e)),e.homoRefExp=e.expression_values.filter((t,n)=>0==e.genotypes[n]),e.homoAltExp=e.expression_values.filter((t,n)=>2==e.genotypes[n]),e.heteroExp=e.expression_values.filter((t,n)=>1==e.genotypes[n]);let t=e.variantId.split(/_/)[2],n=e.variantId.split(/_/)[3];return e.het=t+n,e.ref=t+t,e.alt=n+n,e}(t);e.data=[{group:a||n.tissueSiteDetailId,label:n.ref.length>2?"ref":n.ref,size:n.homoRefExp.length,values:n.homoRefExp},{group:a||n.tissueSiteDetailId,label:n.het.length>2?"het":n.het,size:n.heteroExp.length,values:n.heteroExp},{group:a||n.tissueSiteDetailId,label:n.alt.length>2?"alt":n.alt,size:n.homoAltExp.length,values:n.homoAltExp}],e.numPoints=10,cf(e)})},e}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXF0bC12aW9saW4uYnVuZGxlLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvZHN2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvY3N2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvdHN2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9qc29uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NyZWF0b3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yQWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbWF0Y2hlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zcGFyc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW50ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0YS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zb3J0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvd2luZG93LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NsYXNzZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9odG1sLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JhaXNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luc2VydC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yZW1vdmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGlzcGF0Y2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zb3VyY2VFdmVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21vdXNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvcG9pbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0QWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2ZpbHRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NvbnN0YW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2V4aXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbWVyZ2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb3JkZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2FsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2Rlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2RlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NpemUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW1wdHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZWFjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hdHRyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3Byb3BlcnR5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2FwcGVuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXR1bS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9kZXZpYXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3ZhcmlhbmNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9leHRlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3JhbmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aWNrcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcXVhbnRpbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21heC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVkaWFuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9taW4uanMiLCIuLi8uLi9zcmMvbW9kdWxlcy91dGlscy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL25vcm1hbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2RlZmF1bHRTb3VyY2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvbWFwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL25lc3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvc2V0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvb3JkaW5hbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYmFuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvZGVmaW5lLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9jb2xvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvbWF0aC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvbGFiLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9jdWJlaGVsaXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbnN0YW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb2xvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcmdiLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9zdHJpbmcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3ZhbHVlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9kYXRlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvb2JqZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yb3VuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2RlY29tcG9zZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL3BhcnNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3pvb20uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2N1YmVoZWxpeC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb250aW51b3VzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdERlY2ltYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9leHBvbmVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9pZGVudGl0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdE51bWVyYWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGlja0Zvcm1hdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblByZWZpeC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblJvdW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2xpbmVhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9pbnRlcnZhbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9taWxsaXNlY29uZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kdXJhdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvc2Vjb25kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbnV0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9ob3VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3dlZWsuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMveWVhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9tb250aC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNNaW51dGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjSG91ci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNEYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjV2Vlay5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNZZWFyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01vbnRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2lzb0Zvcm1hdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvaXNvUGFyc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZGlzcGF0Y2gvc3JjL2Rpc3BhdGNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZW91dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NjaGVkdWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL2ludGVycnVwdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3R3ZWVuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW50ZXJwb2xhdGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdEFsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ZpbHRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL21lcmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL29uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0ci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHJUd2Vlbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGVUd2Vlbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kZWxheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2R1cmF0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9zaW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvZWxhc3RpYy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NvbG9ycy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3JhbXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbnRlcnJ1cHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9jYXRlZ29yeTEwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvQWNjZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvRGFyazIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYWlyZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYXN0ZWwxLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvUGFzdGVsMi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1NldDEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9TZXQyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvU2V0My5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9CckJHLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1BSR24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUGlZRy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9QdU9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkQnUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRHeS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZFlsQnUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRZbEduLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1NwZWN0cmFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9CdUduLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9CdVB1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9HbkJ1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9PclJkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9QdUJ1R24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1QnUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1UmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1JkUHUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsR25CdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxHbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxPckJyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9ZbE9yUmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9CbHVlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL0dyZWVucy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL0dyZXlzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvUHVycGxlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL1JlZHMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9PcmFuZ2VzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9jdWJlaGVsaXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3JhaW5ib3cuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3NpbmVib3cuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3ZpcmlkaXMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9Ub29sYmFyLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvVG9vbHRpcC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9pZGVudGl0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9heGlzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXBhdGgvc3JjL3BhdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2NvbnN0YW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9tYXRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9saW5lYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BvaW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcmVhLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9tb25vdG9uZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9ub2V2ZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvbm9ldmVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvYnJ1c2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvbm9kcmFnLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9ldmVudC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2tkZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVhbi5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL0dyb3VwZWRWaW9saW4uanMiLCIuLi8uLi9zcmMvR1RFeFZpei5qcyIsIi4uLy4uL3NyYy9FcXRsVmlvbGluUGxvdC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2d0ZXhEYXRhUGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBFT0wgPSB7fSxcbiAgICBFT0YgPSB7fSxcbiAgICBRVU9URSA9IDM0LFxuICAgIE5FV0xJTkUgPSAxMCxcbiAgICBSRVRVUk4gPSAxMztcblxuZnVuY3Rpb24gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpIHtcbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgY29sdW1ucy5tYXAoZnVuY3Rpb24obmFtZSwgaSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShuYW1lKSArIFwiOiBkW1wiICsgaSArIFwiXVwiO1xuICB9KS5qb2luKFwiLFwiKSArIFwifVwiKTtcbn1cblxuZnVuY3Rpb24gY3VzdG9tQ29udmVydGVyKGNvbHVtbnMsIGYpIHtcbiAgdmFyIG9iamVjdCA9IG9iamVjdENvbnZlcnRlcihjb2x1bW5zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgIHJldHVybiBmKG9iamVjdChyb3cpLCBpLCBjb2x1bW5zKTtcbiAgfTtcbn1cblxuLy8gQ29tcHV0ZSB1bmlxdWUgY29sdW1ucyBpbiBvcmRlciBvZiBkaXNjb3ZlcnkuXG5mdW5jdGlvbiBpbmZlckNvbHVtbnMocm93cykge1xuICB2YXIgY29sdW1uU2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIGNvbHVtbnMgPSBbXTtcblxuICByb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KSB7XG4gICAgZm9yICh2YXIgY29sdW1uIGluIHJvdykge1xuICAgICAgaWYgKCEoY29sdW1uIGluIGNvbHVtblNldCkpIHtcbiAgICAgICAgY29sdW1ucy5wdXNoKGNvbHVtblNldFtjb2x1bW5dID0gY29sdW1uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb2x1bW5zO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWxpbWl0ZXIpIHtcbiAgdmFyIHJlRm9ybWF0ID0gbmV3IFJlZ0V4cChcIltcXFwiXCIgKyBkZWxpbWl0ZXIgKyBcIlxcblxccl1cIiksXG4gICAgICBERUxJTUlURVIgPSBkZWxpbWl0ZXIuY2hhckNvZGVBdCgwKTtcblxuICBmdW5jdGlvbiBwYXJzZSh0ZXh0LCBmKSB7XG4gICAgdmFyIGNvbnZlcnQsIGNvbHVtbnMsIHJvd3MgPSBwYXJzZVJvd3ModGV4dCwgZnVuY3Rpb24ocm93LCBpKSB7XG4gICAgICBpZiAoY29udmVydCkgcmV0dXJuIGNvbnZlcnQocm93LCBpIC0gMSk7XG4gICAgICBjb2x1bW5zID0gcm93LCBjb252ZXJ0ID0gZiA/IGN1c3RvbUNvbnZlcnRlcihyb3csIGYpIDogb2JqZWN0Q29udmVydGVyKHJvdyk7XG4gICAgfSk7XG4gICAgcm93cy5jb2x1bW5zID0gY29sdW1ucyB8fCBbXTtcbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUm93cyh0ZXh0LCBmKSB7XG4gICAgdmFyIHJvd3MgPSBbXSwgLy8gb3V0cHV0IHJvd3NcbiAgICAgICAgTiA9IHRleHQubGVuZ3RoLFxuICAgICAgICBJID0gMCwgLy8gY3VycmVudCBjaGFyYWN0ZXIgaW5kZXhcbiAgICAgICAgbiA9IDAsIC8vIGN1cnJlbnQgbGluZSBudW1iZXJcbiAgICAgICAgdCwgLy8gY3VycmVudCB0b2tlblxuICAgICAgICBlb2YgPSBOIDw9IDAsIC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9GP1xuICAgICAgICBlb2wgPSBmYWxzZTsgLy8gY3VycmVudCB0b2tlbiBmb2xsb3dlZCBieSBFT0w/XG5cbiAgICAvLyBTdHJpcCB0aGUgdHJhaWxpbmcgbmV3bGluZS5cbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gTkVXTElORSkgLS1OO1xuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoTiAtIDEpID09PSBSRVRVUk4pIC0tTjtcblxuICAgIGZ1bmN0aW9uIHRva2VuKCkge1xuICAgICAgaWYgKGVvZikgcmV0dXJuIEVPRjtcbiAgICAgIGlmIChlb2wpIHJldHVybiBlb2wgPSBmYWxzZSwgRU9MO1xuXG4gICAgICAvLyBVbmVzY2FwZSBxdW90ZXMuXG4gICAgICB2YXIgaSwgaiA9IEksIGM7XG4gICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGopID09PSBRVU9URSkge1xuICAgICAgICB3aGlsZSAoSSsrIDwgTiAmJiB0ZXh0LmNoYXJDb2RlQXQoSSkgIT09IFFVT1RFIHx8IHRleHQuY2hhckNvZGVBdCgrK0kpID09PSBRVU9URSk7XG4gICAgICAgIGlmICgoaSA9IEkpID49IE4pIGVvZiA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KEkrKykpID09PSBORVdMSU5FKSBlb2wgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjID09PSBSRVRVUk4pIHsgZW9sID0gdHJ1ZTsgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gTkVXTElORSkgKytJOyB9XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGogKyAxLCBpIC0gMSkucmVwbGFjZSgvXCJcIi9nLCBcIlxcXCJcIik7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgbmV4dCBkZWxpbWl0ZXIgb3IgbmV3bGluZS5cbiAgICAgIHdoaWxlIChJIDwgTikge1xuICAgICAgICBpZiAoKGMgPSB0ZXh0LmNoYXJDb2RlQXQoaSA9IEkrKykpID09PSBORVdMSU5FKSBlb2wgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjID09PSBSRVRVUk4pIHsgZW9sID0gdHJ1ZTsgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gTkVXTElORSkgKytJOyB9XG4gICAgICAgIGVsc2UgaWYgKGMgIT09IERFTElNSVRFUikgY29udGludWU7XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGosIGkpO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm4gbGFzdCB0b2tlbiBiZWZvcmUgRU9GLlxuICAgICAgcmV0dXJuIGVvZiA9IHRydWUsIHRleHQuc2xpY2UoaiwgTik7XG4gICAgfVxuXG4gICAgd2hpbGUgKCh0ID0gdG9rZW4oKSkgIT09IEVPRikge1xuICAgICAgdmFyIHJvdyA9IFtdO1xuICAgICAgd2hpbGUgKHQgIT09IEVPTCAmJiB0ICE9PSBFT0YpIHJvdy5wdXNoKHQpLCB0ID0gdG9rZW4oKTtcbiAgICAgIGlmIChmICYmIChyb3cgPSBmKHJvdywgbisrKSkgPT0gbnVsbCkgY29udGludWU7XG4gICAgICByb3dzLnB1c2gocm93KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdChyb3dzLCBjb2x1bW5zKSB7XG4gICAgaWYgKGNvbHVtbnMgPT0gbnVsbCkgY29sdW1ucyA9IGluZmVyQ29sdW1ucyhyb3dzKTtcbiAgICByZXR1cm4gW2NvbHVtbnMubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcildLmNvbmNhdChyb3dzLm1hcChmdW5jdGlvbihyb3cpIHtcbiAgICAgIHJldHVybiBjb2x1bW5zLm1hcChmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdFZhbHVlKHJvd1tjb2x1bW5dKTtcbiAgICAgIH0pLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB9KSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFJvd3Mocm93cykge1xuICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3cocm93KSB7XG4gICAgcmV0dXJuIHJvdy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dCA9PSBudWxsID8gXCJcIlxuICAgICAgICA6IHJlRm9ybWF0LnRlc3QodGV4dCArPSBcIlwiKSA/IFwiXFxcIlwiICsgdGV4dC5yZXBsYWNlKC9cIi9nLCBcIlxcXCJcXFwiXCIpICsgXCJcXFwiXCJcbiAgICAgICAgOiB0ZXh0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXJzZTogcGFyc2UsXG4gICAgcGFyc2VSb3dzOiBwYXJzZVJvd3MsXG4gICAgZm9ybWF0OiBmb3JtYXQsXG4gICAgZm9ybWF0Um93czogZm9ybWF0Um93c1xuICB9O1xufVxuIiwiaW1wb3J0IGRzdiBmcm9tIFwiLi9kc3ZcIjtcblxudmFyIGNzdiA9IGRzdihcIixcIik7XG5cbmV4cG9ydCB2YXIgY3N2UGFyc2UgPSBjc3YucGFyc2U7XG5leHBvcnQgdmFyIGNzdlBhcnNlUm93cyA9IGNzdi5wYXJzZVJvd3M7XG5leHBvcnQgdmFyIGNzdkZvcm1hdCA9IGNzdi5mb3JtYXQ7XG5leHBvcnQgdmFyIGNzdkZvcm1hdFJvd3MgPSBjc3YuZm9ybWF0Um93cztcbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2XCI7XG5cbnZhciB0c3YgPSBkc3YoXCJcXHRcIik7XG5cbmV4cG9ydCB2YXIgdHN2UGFyc2UgPSB0c3YucGFyc2U7XG5leHBvcnQgdmFyIHRzdlBhcnNlUm93cyA9IHRzdi5wYXJzZVJvd3M7XG5leHBvcnQgdmFyIHRzdkZvcm1hdCA9IHRzdi5mb3JtYXQ7XG5leHBvcnQgdmFyIHRzdkZvcm1hdFJvd3MgPSB0c3YuZm9ybWF0Um93cztcbiIsImZ1bmN0aW9uIHJlc3BvbnNlSnNvbihyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlSnNvbik7XG59XG4iLCJleHBvcnQgdmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gIHhodG1sOiB4aHRtbCxcbiAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcbn07XG4iLCJpbXBvcnQgbmFtZXNwYWNlcyBmcm9tIFwiLi9uYW1lc3BhY2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICByZXR1cm4gbmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpID8ge3NwYWNlOiBuYW1lc3BhY2VzW3ByZWZpeF0sIGxvY2FsOiBuYW1lfSA6IG5hbWU7XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuL25hbWVzcGFjZVwiO1xuaW1wb3J0IHt4aHRtbH0gZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5mdW5jdGlvbiBjcmVhdG9ySW5oZXJpdChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIHVyaSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKVxuICAgICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh1cmksIG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdG9yRml4ZWQoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gKGZ1bGxuYW1lLmxvY2FsXG4gICAgICA/IGNyZWF0b3JGaXhlZFxuICAgICAgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gbm9uZSgpIHt9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gbm9uZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZnVuY3Rpb24gZW1wdHkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBlbXB0eSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICB9O1xufVxuIiwidmFyIG1hdGNoZXIgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH07XG59O1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBpZiAoIWVsZW1lbnQubWF0Y2hlcykge1xuICAgIHZhciB2ZW5kb3JNYXRjaGVzID0gZWxlbWVudC53ZWJraXRNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgfHwgZWxlbWVudC5tc01hdGNoZXNTZWxlY3RvclxuICAgICAgICB8fCBlbGVtZW50Lm1vek1hdGNoZXNTZWxlY3RvclxuICAgICAgICB8fCBlbGVtZW50Lm9NYXRjaGVzU2VsZWN0b3I7XG4gICAgbWF0Y2hlciA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2ZW5kb3JNYXRjaGVzLmNhbGwodGhpcywgc2VsZWN0b3IpO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoZXI7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih1cGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBBcnJheSh1cGRhdGUubGVuZ3RoKTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2VudGVyIHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFbnRlck5vZGUocGFyZW50LCBkYXR1bSkge1xuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBwYXJlbnQub3duZXJEb2N1bWVudDtcbiAgdGhpcy5uYW1lc3BhY2VVUkkgPSBwYXJlbnQubmFtZXNwYWNlVVJJO1xuICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9fZGF0YV9fID0gZGF0dW07XG59XG5cbkVudGVyTm9kZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBFbnRlck5vZGUsXG4gIGFwcGVuZENoaWxkOiBmdW5jdGlvbihjaGlsZCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgdGhpcy5fbmV4dCk7IH0sXG4gIGluc2VydEJlZm9yZTogZnVuY3Rpb24oY2hpbGQsIG5leHQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIG5leHQpOyB9LFxuICBxdWVyeVNlbGVjdG9yOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOyB9LFxuICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpOyB9XG59O1xuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge0VudGVyTm9kZX0gZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi4vY29uc3RhbnRcIjtcblxudmFyIGtleVByZWZpeCA9IFwiJFwiOyAvLyBQcm90ZWN0IGFnYWluc3Qga2V5cyBsaWtlIOKAnF9fcHJvdG9fX+KAnS5cblxuZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbm9kZSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgdmFyIGksXG4gICAgICBub2RlLFxuICAgICAgbm9kZUJ5S2V5VmFsdWUgPSB7fSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAga2V5VmFsdWVzID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKSxcbiAgICAgIGtleVZhbHVlO1xuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBub2RlLlxuICAvLyBJZiBtdWx0aXBsZSBub2RlcyBoYXZlIHRoZSBzYW1lIGtleSwgdGhlIGR1cGxpY2F0ZXMgYXJlIGFkZGVkIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgICBpZiAoa2V5VmFsdWUgaW4gbm9kZUJ5S2V5VmFsdWUpIHtcbiAgICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBkYXR1bS5cbiAgLy8gSWYgdGhlcmUgYSBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleSwgam9pbiBhbmQgYWRkIGl0IHRvIHVwZGF0ZS5cbiAgLy8gSWYgdGhlcmUgaXMgbm90IChvciB0aGUga2V5IGlzIGEgZHVwbGljYXRlKSwgYWRkIGl0IHRvIGVudGVyLlxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChwYXJlbnQsIGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdKSB7XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlW2tleVZhbHVlc1tpXV0gPT09IG5vZGUpKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgZGF0YSA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGogPSAtMTtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oZCkgeyBkYXRhWysral0gPSBkOyB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCh2YWx1ZSk7XG5cbiAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YSA9IHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBlbnRlckdyb3VwID0gZW50ZXJbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIHVwZGF0ZUdyb3VwID0gdXBkYXRlW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICBleGl0R3JvdXAgPSBleGl0W2pdID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKTtcblxuICAgIGJpbmQocGFyZW50LCBncm91cCwgZW50ZXJHcm91cCwgdXBkYXRlR3JvdXAsIGV4aXRHcm91cCwgZGF0YSwga2V5KTtcblxuICAgIC8vIE5vdyBjb25uZWN0IHRoZSBlbnRlciBub2RlcyB0byB0aGVpciBmb2xsb3dpbmcgdXBkYXRlIG5vZGUsIHN1Y2ggdGhhdFxuICAgIC8vIGFwcGVuZENoaWxkIGNhbiBpbnNlcnQgdGhlIG1hdGVyaWFsaXplZCBlbnRlciBub2RlIGJlZm9yZSB0aGlzIG5vZGUsXG4gICAgLy8gcmF0aGVyIHRoYW4gYXQgdGhlIGVuZCBvZiB0aGUgcGFyZW50IG5vZGUuXG4gICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDAsIHByZXZpb3VzLCBuZXh0OyBpMCA8IGRhdGFMZW5ndGg7ICsraTApIHtcbiAgICAgIGlmIChwcmV2aW91cyA9IGVudGVyR3JvdXBbaTBdKSB7XG4gICAgICAgIGlmIChpMCA+PSBpMSkgaTEgPSBpMCArIDE7XG4gICAgICAgIHdoaWxlICghKG5leHQgPSB1cGRhdGVHcm91cFtpMV0pICYmICsraTEgPCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgcHJldmlvdXMuX25leHQgPSBuZXh0IHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlID0gbmV3IFNlbGVjdGlvbih1cGRhdGUsIHBhcmVudHMpO1xuICB1cGRhdGUuX2VudGVyID0gZW50ZXI7XG4gIHVwZGF0ZS5fZXhpdCA9IGV4aXQ7XG4gIHJldHVybiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHNvcnRncm91cHMsIHRoaXMuX3BhcmVudHMpLm9yZGVyKCk7XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSAvLyBub2RlIGlzIGEgTm9kZVxuICAgICAgfHwgKG5vZGUuZG9jdW1lbnQgJiYgbm9kZSkgLy8gbm9kZSBpcyBhIFdpbmRvd1xuICAgICAgfHwgbm9kZS5kZWZhdWx0VmlldzsgLy8gbm9kZSBpcyBhIERvY3VtZW50XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgZWxzZSB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHYsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgIDogc3R5bGVWYWx1ZSh0aGlzLm5vZGUoKSwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVZhbHVlKG5vZGUsIG5hbWUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gY2xhc3NBcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xufVxuXG5mdW5jdGlvbiBjbGFzc0xpc3Qobm9kZSkge1xuICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbn1cblxuZnVuY3Rpb24gQ2xhc3NMaXN0KG5vZGUpIHtcbiAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gIHRoaXMuX25hbWVzID0gY2xhc3NBcnJheShub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpO1xufVxuXG5DbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgdGhpcy5fbmFtZXMuc3BsaWNlKGksIDEpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpID49IDA7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNsYXNzZWRBZGQobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QuYWRkKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFJlbW92ZShub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5yZW1vdmUobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZEFkZCh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGYWxzZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZFJlbW92ZSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbihuYW1lcywgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICh2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gY2xhc3NlZEFkZCA6IGNsYXNzZWRSZW1vdmUpKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWVzID0gY2xhc3NBcnJheShuYW1lICsgXCJcIik7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3QodGhpcy5ub2RlKCkpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGNsYXNzZWRGdW5jdGlvbiA6IHZhbHVlXG4gICAgICA/IGNsYXNzZWRUcnVlXG4gICAgICA6IGNsYXNzZWRGYWxzZSkobmFtZXMsIHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiB0ZXh0UmVtb3ZlKCkge1xuICB0aGlzLnRleHRDb250ZW50ID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHRleHRSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHRleHRGdW5jdGlvblxuICAgICAgICAgIDogdGV4dENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLnRleHRDb250ZW50O1xufVxuIiwiZnVuY3Rpb24gaHRtbFJlbW92ZSgpIHtcbiAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBodG1sQ29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGh0bWxGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBodG1sUmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBodG1sRnVuY3Rpb25cbiAgICAgICAgICA6IGh0bWxDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG59XG4iLCJmdW5jdGlvbiByYWlzZSgpIHtcbiAgaWYgKHRoaXMubmV4dFNpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmFpc2UpO1xufVxuIiwiZnVuY3Rpb24gbG93ZXIoKSB7XG4gIGlmICh0aGlzLnByZXZpb3VzU2libGluZykgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLCB0aGlzLnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKGxvd2VyKTtcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yXCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yXCI7XG5cbmZ1bmN0aW9uIGNvbnN0YW50TnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGJlZm9yZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpLFxuICAgICAgc2VsZWN0ID0gYmVmb3JlID09IG51bGwgPyBjb25zdGFudE51bGwgOiB0eXBlb2YgYmVmb3JlID09PSBcImZ1bmN0aW9uXCIgPyBiZWZvcmUgOiBzZWxlY3RvcihiZWZvcmUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBzZWxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmUoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmVtb3ZlKTtcbn1cbiIsImZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZVNoYWxsb3coKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuY2xvbmVOb2RlKGZhbHNlKSwgdGhpcy5uZXh0U2libGluZyk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZURlZXAoKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuY2xvbmVOb2RlKHRydWUpLCB0aGlzLm5leHRTaWJsaW5nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVlcCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZGVlcCA/IHNlbGVjdGlvbl9jbG9uZURlZXAgOiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KTtcbn1cbiIsInZhciBmaWx0ZXJFdmVudHMgPSB7fTtcblxuZXhwb3J0IHZhciBldmVudCA9IG51bGw7XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGlmICghKFwib25tb3VzZWVudGVyXCIgaW4gZWxlbWVudCkpIHtcbiAgICBmaWx0ZXJFdmVudHMgPSB7bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIiwgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwifTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaWx0ZXJDb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICBsaXN0ZW5lciA9IGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGhpcyAmJiAhKHJlbGF0ZWQuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcykgJiA4KSkpIHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50MSkge1xuICAgIHZhciBldmVudDAgPSBldmVudDsgLy8gRXZlbnRzIGNhbiBiZSByZWVudHJhbnQgKGUuZy4sIGZvY3VzKS5cbiAgICBldmVudCA9IGV2ZW50MTtcbiAgICB0cnkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLCBpbmRleCwgZ3JvdXApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBldmVudCA9IGV2ZW50MDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb247XG4gICAgaWYgKCFvbikgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBpID0gLTEsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGlmIChvID0gb25bal0sICghdHlwZW5hbWUudHlwZSB8fCBvLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUpICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25bKytpXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgrK2kpIG9uLmxlbmd0aCA9IGk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHdyYXAgPSBmaWx0ZXJFdmVudHMuaGFzT3duUHJvcGVydHkodHlwZW5hbWUudHlwZSkgPyBmaWx0ZXJDb250ZXh0TGlzdGVuZXIgOiBjb250ZXh0TGlzdGVuZXI7XG4gIHJldHVybiBmdW5jdGlvbihkLCBpLCBncm91cCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSB3cmFwKHZhbHVlLCBpLCBncm91cCk7XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgICAgaWYgKChvID0gb25bal0pLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIgPSBsaXN0ZW5lciwgby5jYXB0dXJlID0gY2FwdHVyZSk7XG4gICAgICAgIG8udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZW5hbWUudHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgIG8gPSB7dHlwZTogdHlwZW5hbWUudHlwZSwgbmFtZTogdHlwZW5hbWUubmFtZSwgdmFsdWU6IHZhbHVlLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGNhcHR1cmU6IGNhcHR1cmV9O1xuICAgIGlmICghb24pIHRoaXMuX19vbiA9IFtvXTtcbiAgICBlbHNlIG9uLnB1c2gobyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgdHlwZW5hbWVzID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiKSwgaSwgbiA9IHR5cGVuYW1lcy5sZW5ndGgsIHQ7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG9uID0gdGhpcy5ub2RlKCkuX19vbjtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKGkgPSAwLCBvID0gb25bal07IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKCh0ID0gdHlwZW5hbWVzW2ldKS50eXBlID09PSBvLnR5cGUgJiYgdC5uYW1lID09PSBvLm5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gby52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBvbiA9IHZhbHVlID8gb25BZGQgOiBvblJlbW92ZTtcbiAgaWYgKGNhcHR1cmUgPT0gbnVsbCkgY2FwdHVyZSA9IGZhbHNlO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB0aGlzLmVhY2gob24odHlwZW5hbWVzW2ldLCB2YWx1ZSwgY2FwdHVyZSkpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbUV2ZW50KGV2ZW50MSwgbGlzdGVuZXIsIHRoYXQsIGFyZ3MpIHtcbiAgdmFyIGV2ZW50MCA9IGV2ZW50O1xuICBldmVudDEuc291cmNlRXZlbnQgPSBldmVudDtcbiAgZXZlbnQgPSBldmVudDE7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9IGZpbmFsbHkge1xuICAgIGV2ZW50ID0gZXZlbnQwO1xuICB9XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KG5vZGUsIHR5cGUsIHBhcmFtcykge1xuICB2YXIgd2luZG93ID0gZGVmYXVsdFZpZXcobm9kZSksXG4gICAgICBldmVudCA9IHdpbmRvdy5DdXN0b21FdmVudDtcblxuICBpZiAodHlwZW9mIGV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBldmVudCA9IG5ldyBldmVudCh0eXBlLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgaWYgKHBhcmFtcykgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSksIGV2ZW50LmRldGFpbCA9IHBhcmFtcy5kZXRhaWw7XG4gICAgZWxzZSBldmVudC5pbml0RXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgfVxuXG4gIG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoQ29uc3RhbnQodHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGRpc3BhdGNoRnVuY3Rpb25cbiAgICAgIDogZGlzcGF0Y2hDb25zdGFudCkodHlwZSwgcGFyYW1zKSk7XG59XG4iLCJpbXBvcnQgc2VsZWN0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3RcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdGEgZnJvbSBcIi4vZGF0YVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbnRlciBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9leGl0IGZyb20gXCIuL2V4aXRcIjtcbmltcG9ydCBzZWxlY3Rpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fb3JkZXIgZnJvbSBcIi4vb3JkZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc29ydCBmcm9tIFwiLi9zb3J0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NhbGwgZnJvbSBcIi4vY2FsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlcyBmcm9tIFwiLi9ub2Rlc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlIGZyb20gXCIuL25vZGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2l6ZSBmcm9tIFwiLi9zaXplXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VtcHR5IGZyb20gXCIuL2VtcHR5XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VhY2ggZnJvbSBcIi4vZWFjaFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hdHRyIGZyb20gXCIuL2F0dHJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fcHJvcGVydHkgZnJvbSBcIi4vcHJvcGVydHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xhc3NlZCBmcm9tIFwiLi9jbGFzc2VkXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RleHQgZnJvbSBcIi4vdGV4dFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9odG1sIGZyb20gXCIuL2h0bWxcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmFpc2UgZnJvbSBcIi4vcmFpc2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fbG93ZXIgZnJvbSBcIi4vbG93ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXBwZW5kIGZyb20gXCIuL2FwcGVuZFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnNlcnQgZnJvbSBcIi4vaW5zZXJ0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xvbmUgZnJvbSBcIi4vY2xvbmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0dW0gZnJvbSBcIi4vZGF0dW1cIjtcbmltcG9ydCBzZWxlY3Rpb25fb24gZnJvbSBcIi4vb25cIjtcbmltcG9ydCBzZWxlY3Rpb25fZGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2hcIjtcblxuZXhwb3J0IHZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5TZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICBtZXJnZTogc2VsZWN0aW9uX21lcmdlLFxuICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICBjbG9uZTogc2VsZWN0aW9uX2Nsb25lLFxuICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICBvbjogc2VsZWN0aW9uX29uLFxuICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Rpb247XG4iLCJpbXBvcnQge1NlbGVjdGlvbiwgcm9vdH0gZnJvbSBcIi4vc2VsZWN0aW9uL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgOiBuZXcgU2VsZWN0aW9uKFtbc2VsZWN0b3JdXSwgcm9vdCk7XG59XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiLi9zZWxlY3Rpb24vb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjdXJyZW50ID0gZXZlbnQsIHNvdXJjZTtcbiAgd2hpbGUgKHNvdXJjZSA9IGN1cnJlbnQuc291cmNlRXZlbnQpIGN1cnJlbnQgPSBzb3VyY2U7XG4gIHJldHVybiBjdXJyZW50O1xufVxuIiwiaW1wb3J0IHNvdXJjZUV2ZW50IGZyb20gXCIuL3NvdXJjZUV2ZW50XCI7XG5pbXBvcnQgcG9pbnQgZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICB2YXIgZXZlbnQgPSBzb3VyY2VFdmVudCgpO1xuICBpZiAoZXZlbnQuY2hhbmdlZFRvdWNoZXMpIGV2ZW50ID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gIHJldHVybiBwb2ludChub2RlLCBldmVudCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBldmVudCkge1xuICB2YXIgc3ZnID0gbm9kZS5vd25lclNWR0VsZW1lbnQgfHwgbm9kZTtcblxuICBpZiAoc3ZnLmNyZWF0ZVNWR1BvaW50KSB7XG4gICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgcG9pbnQueCA9IGV2ZW50LmNsaWVudFgsIHBvaW50LnkgPSBldmVudC5jbGllbnRZO1xuICAgIHBvaW50ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG5vZGUuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKTtcbiAgICByZXR1cm4gW3BvaW50LngsIHBvaW50LnldO1xuICB9XG5cbiAgdmFyIHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4gW2V2ZW50LmNsaWVudFggLSByZWN0LmxlZnQgLSBub2RlLmNsaWVudExlZnQsIGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCAtIG5vZGUuY2xpZW50VG9wXTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2VsZWN0b3JBbGwgZnJvbSBcIi4uL3NlbGVjdG9yQWxsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSk7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHBhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgbWF0Y2hlciBmcm9tIFwiLi4vbWF0Y2hlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdGlvbikge1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSBzZWxlY3Rpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IC0xLCBtID0gZ3JvdXBzLmxlbmd0aDsgKytqIDwgbTspIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IGdyb3VwLmxlbmd0aCAtIDEsIG5leHQgPSBncm91cFtpXSwgbm9kZTsgLS1pID49IDA7KSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGlmIChuZXh0ICYmIG5leHQgIT09IG5vZGUubmV4dFNpYmxpbmcpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaSA9IC0xO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7IG5vZGVzWysraV0gPSB0aGlzOyB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gZ3JvdXBbaV07XG4gICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSAwO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7ICsrc2l6ZTsgfSk7XG4gIHJldHVybiBzaXplO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhdGhpcy5ub2RlKCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4uL25hbWVzcGFjZVwiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHYpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICByZXR1cm4gZnVsbG5hbWUubG9jYWxcbiAgICAgICAgPyBub2RlLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbClcbiAgICAgICAgOiBub2RlLmdldEF0dHJpYnV0ZShmdWxsbmFtZSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkpKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImZ1bmN0aW9uIHByb3BlcnR5UmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzW25hbWVdID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICBlbHNlIHRoaXNbbmFtZV0gPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBwcm9wZXJ0eVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBwcm9wZXJ0eUZ1bmN0aW9uXG4gICAgICAgICAgOiBwcm9wZXJ0eUNvbnN0YW50KShuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpW25hbWVdO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IGJpc2VjdG9yIGZyb20gXCIuL2Jpc2VjdG9yXCI7XG5cbnZhciBhc2NlbmRpbmdCaXNlY3QgPSBiaXNlY3Rvcihhc2NlbmRpbmcpO1xuZXhwb3J0IHZhciBiaXNlY3RSaWdodCA9IGFzY2VuZGluZ0Jpc2VjdC5yaWdodDtcbmV4cG9ydCB2YXIgYmlzZWN0TGVmdCA9IGFzY2VuZGluZ0Jpc2VjdC5sZWZ0O1xuZXhwb3J0IGRlZmF1bHQgYmlzZWN0UmlnaHQ7XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmIChjb21wYXJlLmxlbmd0aCA9PT0gMSkgY29tcGFyZSA9IGFzY2VuZGluZ0NvbXBhcmF0b3IoY29tcGFyZSk7XG4gIHJldHVybiB7XG4gICAgbGVmdDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA8IDApIGxvID0gbWlkICsgMTtcbiAgICAgICAgZWxzZSBoaSA9IG1pZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9LFxuICAgIHJpZ2h0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpID4gMCkgaGkgPSBtaWQ7XG4gICAgICAgIGVsc2UgbG8gPSBtaWQgKyAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nQ29tcGFyYXRvcihmKSB7XG4gIHJldHVybiBmdW5jdGlvbihkLCB4KSB7XG4gICAgcmV0dXJuIGFzY2VuZGluZyhmKGQpLCB4KTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbn1cbiIsImltcG9ydCB2YXJpYW5jZSBmcm9tIFwiLi92YXJpYW5jZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnJheSwgZikge1xuICB2YXIgdiA9IHZhcmlhbmNlKGFycmF5LCBmKTtcbiAgcmV0dXJuIHYgPyBNYXRoLnNxcnQodikgOiB2O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG0gPSAwLFxuICAgICAgaSA9IC0xLFxuICAgICAgbWVhbiA9IDAsXG4gICAgICB2YWx1ZSxcbiAgICAgIGRlbHRhLFxuICAgICAgc3VtID0gMDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVzW2ldKSkpIHtcbiAgICAgICAgZGVsdGEgPSB2YWx1ZSAtIG1lYW47XG4gICAgICAgIG1lYW4gKz0gZGVsdGEgLyArK207XG4gICAgICAgIHN1bSArPSBkZWx0YSAqICh2YWx1ZSAtIG1lYW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSkpIHtcbiAgICAgICAgZGVsdGEgPSB2YWx1ZSAtIG1lYW47XG4gICAgICAgIG1lYW4gKz0gZGVsdGEgLyArK207XG4gICAgICAgIHN1bSArPSBkZWx0YSAqICh2YWx1ZSAtIG1lYW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChtID4gMSkgcmV0dXJuIHN1bSAvIChtIC0gMSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtaW4sXG4gICAgICBtYXg7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gW21pbiwgbWF4XTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gIHN0YXJ0ID0gK3N0YXJ0LCBzdG9wID0gK3N0b3AsIHN0ZXAgPSAobiA9IGFyZ3VtZW50cy5sZW5ndGgpIDwgMiA/IChzdG9wID0gc3RhcnQsIHN0YXJ0ID0gMCwgMSkgOiBuIDwgMyA/IDEgOiArc3RlcDtcblxuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IE1hdGgubWF4KDAsIE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApKSB8IDAsXG4gICAgICByYW5nZSA9IG5ldyBBcnJheShuKTtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIHJhbmdlW2ldID0gc3RhcnQgKyBpICogc3RlcDtcbiAgfVxuXG4gIHJldHVybiByYW5nZTtcbn1cbiIsInZhciBlMTAgPSBNYXRoLnNxcnQoNTApLFxuICAgIGU1ID0gTWF0aC5zcXJ0KDEwKSxcbiAgICBlMiA9IE1hdGguc3FydCgyKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciByZXZlcnNlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbixcbiAgICAgIHRpY2tzLFxuICAgICAgc3RlcDtcblxuICBzdG9wID0gK3N0b3AsIHN0YXJ0ID0gK3N0YXJ0LCBjb3VudCA9ICtjb3VudDtcbiAgaWYgKHN0YXJ0ID09PSBzdG9wICYmIGNvdW50ID4gMCkgcmV0dXJuIFtzdGFydF07XG4gIGlmIChyZXZlcnNlID0gc3RvcCA8IHN0YXJ0KSBuID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IG47XG4gIGlmICgoc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSkgPT09IDAgfHwgIWlzRmluaXRlKHN0ZXApKSByZXR1cm4gW107XG5cbiAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wIC8gc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdG9wIC0gc3RhcnQgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0ICsgaSkgKiBzdGVwO1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAqIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAqIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RhcnQgLSBzdG9wICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCAtIGkpIC8gc3RlcDtcbiAgfVxuXG4gIGlmIChyZXZlcnNlKSB0aWNrcy5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHBvd2VyID0gTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwKSAvIE1hdGguTE4xMCksXG4gICAgICBlcnJvciA9IHN0ZXAgLyBNYXRoLnBvdygxMCwgcG93ZXIpO1xuICByZXR1cm4gcG93ZXIgPj0gMFxuICAgICAgPyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKSAqIE1hdGgucG93KDEwLCBwb3dlcilcbiAgICAgIDogLU1hdGgucG93KDEwLCAtcG93ZXIpIC8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAwID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHN0ZXAxID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcDApIC8gTWF0aC5MTjEwKSksXG4gICAgICBlcnJvciA9IHN0ZXAwIC8gc3RlcDE7XG4gIGlmIChlcnJvciA+PSBlMTApIHN0ZXAxICo9IDEwO1xuICBlbHNlIGlmIChlcnJvciA+PSBlNSkgc3RlcDEgKj0gNTtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTIpIHN0ZXAxICo9IDI7XG4gIHJldHVybiBzdG9wIDwgc3RhcnQgPyAtc3RlcDEgOiBzdGVwMTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgcCwgdmFsdWVvZikge1xuICBpZiAodmFsdWVvZiA9PSBudWxsKSB2YWx1ZW9mID0gbnVtYmVyO1xuICBpZiAoIShuID0gdmFsdWVzLmxlbmd0aCkpIHJldHVybjtcbiAgaWYgKChwID0gK3ApIDw9IDAgfHwgbiA8IDIpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbMF0sIDAsIHZhbHVlcyk7XG4gIGlmIChwID49IDEpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbbiAtIDFdLCBuIC0gMSwgdmFsdWVzKTtcbiAgdmFyIG4sXG4gICAgICBpID0gKG4gLSAxKSAqIHAsXG4gICAgICBpMCA9IE1hdGguZmxvb3IoaSksXG4gICAgICB2YWx1ZTAgPSArdmFsdWVvZih2YWx1ZXNbaTBdLCBpMCwgdmFsdWVzKSxcbiAgICAgIHZhbHVlMSA9ICt2YWx1ZW9mKHZhbHVlc1tpMCArIDFdLCBpMCArIDEsIHZhbHVlcyk7XG4gIHJldHVybiB2YWx1ZTAgKyAodmFsdWUxIC0gdmFsdWUwKSAqIChpIC0gaTApO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWF4O1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1heDtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuaW1wb3J0IHF1YW50aWxlIGZyb20gXCIuL3F1YW50aWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG51bWJlcnMgPSBbXTtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVzW2ldKSkpIHtcbiAgICAgICAgbnVtYmVycy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSB7XG4gICAgICAgIG51bWJlcnMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHF1YW50aWxlKG51bWJlcnMuc29ydChhc2NlbmRpbmcpLCAwLjUpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWluO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIG1pbiA+IHZhbHVlKSB7XG4gICAgICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1pbjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbi8qKlxuICogQ3JlYXRlcyBhbiBTVkdcbiAqIEBwYXJhbSBpZCB7U3RyaW5nfSBhIERPTSBlbGVtZW50IElEIHRoYXQgc3RhcnRzIHdpdGggYSBcIiNcIlxuICogQHBhcmFtIHdpZHRoIHtOdW1lcmljfVxuICogQHBhcmFtIGhlaWdodCB7TnVtZXJpY31cbiAqIEBwYXJhbSBtYXJnaW4ge09iamVjdH0gd2l0aCB0d28gYXR0cmlidXRlczogd2lkdGggYW5kIGhlaWdodFxuICogQHJldHVybiB7U2VsZWN0aW9ufSB0aGUgZDMgc2VsZWN0aW9uIG9iamVjdCBvZiB0aGUgU1ZHXG4gKi9cblxuaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7cmFuZ2V9IGZyb20gXCJkMy1hcnJheVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tEb21JZChpZCl7XG4gICAgLy8gdGVzdCBpbnB1dCBwYXJhbXNcbiAgICBpZiAoJChgIyR7aWR9YCkubGVuZ3RoID09IDApIHtcbiAgICAgICAgbGV0IGVycm9yID0gYElucHV0IEVycm9yOiBET00gSUQgJHtpZH0gaXMgbm90IGZvdW5kLmA7XG4gICAgICAgIC8vYWxlcnQoZXJyb3IpO1xuICAgICAgICBjb25zb2xlLndhcm4oZXJyb3IpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgQ2FudmFzIEQzIG9iamVjdFxuICogQHBhcmFtIGlkIHtTdHJpbmd9IHRoZSBwYXJlbnQgZG9tIElEXG4gKiBAcGFyYW0gd2lkdGgge051bWVyaWN9OiB0aGUgb3V0ZXIgd2lkdGhcbiAqIEBwYXJhbSBoZWlnaHQge051bWVyaWN9OiB0aGUgb3V0ZXIgaGVpZ2h0XG4gKiBAcGFyYW0gbWFyZ2luIHtPYmplY3R9IHdpdGggYXR0cjogbGVmdCwgdG9wXG4gKiBAcGFyYW0gY2FudmFzSWQge1N0cmluZ31cbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2FudmFzKGlkLCB3aWR0aCwgaGVpZ2h0LCBtYXJnaW4sIGNhbnZhc0lkPXVuZGVmaW5lZCwgcG9zaXRpb249XCJhYnNvbHV0ZVwiKXtcbiAgICBjaGVja0RvbUlkKGlkKTtcbiAgICBpZihjYW52YXNJZD09PXVuZGVmaW5lZCkgY2FudmFzSWQ9YCR7aWR9LWNhbnZhc2A7XG4gICAgcmV0dXJuIHNlbGVjdChgIyR7aWR9YClcbiAgICAgICAgLmFwcGVuZChcImNhbnZhc1wiKVxuICAgICAgICAuYXR0cignaWQnLCBjYW52YXNJZClcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgICAgICAuc3R5bGUoXCJwb3NpdGlvblwiLCBwb3NpdGlvbikgLy8gVE9ETzogc2hvdWxkIHRoZSBwb3NpdGlvbiBiZSB1c2VyLWRlZmluZWQ/IHJlbGF0aXZlIHZzIGFic29sdXRlXG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIFNWRyBEMyBvYmplY3RcbiAqIEBwYXJhbSBpZCB7U3RyaW5nfSB0aGUgcGFyZW50IGRvbSBJRFxuICogQHBhcmFtIHdpZHRoIHtOdW1lcmljfTogdGhlIG91dGVyIHdpZHRoXG4gKiBAcGFyYW0gaGVpZ2h0IHtOdW1lcmljfTogdGhlIG91dGVyIGhlaWdodFxuICogQHBhcmFtIG1hcmdpbiB7T2JqZWN0fSB3aXRoIGF0dHI6IGxlZnQsIHRvcFxuICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN2ZyhpZCwgd2lkdGgsIGhlaWdodCwgbWFyZ2luLCBzdmdJZD11bmRlZmluZWQsIHBvc2l0aW9uPVwicmVsYXRpdmVcIil7XG4gICAgY2hlY2tEb21JZChpZCk7XG4gICAgaWYgKHN2Z0lkPT09dW5kZWZpbmVkKSBzdmdJZD1gJHtpZH0tc3ZnYDtcbiAgICByZXR1cm4gc2VsZWN0KFwiI1wiK2lkKS5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgICAgICAuYXR0cihcImlkXCIsIHN2Z0lkKVxuICAgICAgICAvLyAuc3R5bGUoXCJwb3NpdGlvblwiLCBwb3NpdGlvbilcbiAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwgJHttYXJnaW4udG9wfSlgKVxufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gc3ZnT2JqXG4gKiBAcGFyYW0gZG93bmxvYWRGaWxlTmFtZSB7U3RyaW5nfVxuICogQHBhcmFtIHRlbXBEb3dubG9hZERpdklkIHtTdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZFN2ZyhzdmdPYmosIGRvd25sb2FkRmlsZU5hbWUsIHRlbXBEb3dubG9hZERpdklkKXtcbiAgICBjb25zb2xlLmxvZyhzdmdPYmopO1xuICAgIHZhciAkc3ZnQ29weSA9IHN2Z09iai5jbG9uZSgpXG4gICAgLmF0dHIoXCJ2ZXJzaW9uXCIsIFwiMS4xXCIpXG4gICAgLmF0dHIoXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuXG4gICAgLy8gcGFyc2UgYW5kIGFkZCB0aGUgQ1NTIHN0eWxpbmcgdXNlZCBieSB0aGUgU1ZHXG4gICAgdmFyIHN0eWxlcyA9IHBhcnNlQ3NzU3R5bGVzKHN2Z09iai5nZXQoKSk7XG4gICAgJHN2Z0NvcHkucHJlcGVuZChzdHlsZXMpO1xuXG4gICAgJChcIiNcIiArIHRlbXBEb3dubG9hZERpdklkKS5odG1sKCcnKS5oaWRlKCk7XG4gICAgdmFyIHN2Z0h0bWwgPSAkKFwiI1wiICsgdGVtcERvd25sb2FkRGl2SWQpLmFwcGVuZCgkc3ZnQ29weSkuaHRtbCgpO1xuXG4gICAgdmFyIHN2Z0Jsb2IgPSBuZXcgQmxvYihbc3ZnSHRtbF0sIHt0eXBlOiBcImltYWdlL3N2Zyt4bWxcIn0pO1xuICAgIHNhdmVBcyhzdmdCbG9iLCBkb3dubG9hZEZpbGVOYW1lKTtcblxuICAgIC8vIGNsZWFyIHRoZSB0ZW1wIGRvd25sb2FkIGRpdlxuICAgICQoXCIjXCIgKyB0ZW1wRG93bmxvYWREaXZJZCkuaHRtbCgnJykuaGlkZSgpO1xufVxuLyoqXG4gKiBBIGZ1bmN0aW9uIGZvciBwYXJzaW5nIHRoZSBDU1Mgc3R5bGUgc2hlZXQgYW5kIGluY2x1ZGluZyB0aGUgc3R5bGUgcHJvcGVydGllcyBpbiB0aGUgZG93bmxvYWRhYmxlIFNWRy5cbiAqIEBwYXJhbSBkb21cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDc3NTdHlsZXMgKGRvbSkge1xuICAgIHZhciB1c2VkID0gXCJcIjtcbiAgICB2YXIgc2hlZXRzID0gZG9jdW1lbnQuc3R5bGVTaGVldHM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNoZWV0cy5sZW5ndGg7IGkrKykgeyAvLyBUT0RPOiB3YWxrIHRocm91Z2ggdGhpcyBibG9jayBvZiBjb2RlXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChzaGVldHNbaV0uY3NzUnVsZXMgPT0gbnVsbCkgY29udGludWU7XG4gICAgICAgICAgICB2YXIgcnVsZXMgPSBzaGVldHNbaV0uY3NzUnVsZXM7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcnVsZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcnVsZSA9IHJ1bGVzW2pdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YocnVsZS5zdHlsZSkgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbXM7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92aW5nIGFueSBzZWxlY3RvciB0ZXh0IGluY2x1ZGluZyBzdmcgZWxlbWVudCBJRCAtLSBkb20gYWxyZWFkeSBzZWxlY3RzIGZvciB0aGF0XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IHJ1bGUuc2VsZWN0b3JUZXh0ID09PSB1bmRlZmluZWQ/IHJ1bGUuc2VsZWN0b3JUZXh0IDogcnVsZS5zZWxlY3RvclRleHQucmVwbGFjZShgIyR7ZG9tWzBdLmlkfSBgLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vU29tZSBzZWxlY3RvcnMgd29uJ3Qgd29yaywgYW5kIG1vc3Qgb2YgdGhlc2UgZG9uJ3QgbWF0dGVyLlxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbXMgPSAkKGRvbSkuZmluZChzZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1zID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCArPSBydWxlLnNlbGVjdG9yVGV4dCArIFwiIHsgXCIgKyBydWxlLnN0eWxlLmNzc1RleHQgKyBcIiB9XFxuXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIEluIEZpcmVmb3gsIGlmIHN0eWxlc2hlZXQgb3JpZ2luYXRlcyBmcm9tIGEgZGlmZiBkb21haW4sXG4gICAgICAgICAgICAvLyB0cnlpbmcgdG8gYWNjZXNzIHRoZSBjc3NSdWxlcyB3aWxsIHRocm93IGEgU2VjdXJpdHlFcnJvci5cbiAgICAgICAgICAgIC8vIEhlbmNlLCB3ZSBtdXN0IHVzZSBhIHRyeS9jYXRjaCB0byBoYW5kbGUgdGhpcyBpbiBGaXJlZm94XG4gICAgICAgICAgICBpZiAoZS5uYW1lICE9PSAnU2VjdXJpdHlFcnJvcicpIHRocm93IGU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBzLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpO1xuICAgIHMuaW5uZXJIVE1MID0gXCI8IVtDREFUQVtcXG5cIiArIHVzZWQgKyBcIlxcbl1dPlwiO1xuXG4gICAgcmV0dXJuIHM7XG59XG5cbi8qKlxuICogR2VuZXJhdGUgYSBsaXN0IG9mIHgqeSBkYXRhIG9iamVjdHMgd2l0aCByYW5kb20gdmFsdWVzXG4gKiBUaGUgZGF0YSBvYmplY3QgaGFzIHRoaXMgc3RydWN0dXJlOiB7eDogeGxhYmVsLCB5OiB5bGFiZWwsIHZhbHVlOiBzb21lIHZhbHVlLCBkaXNwbGF5VmFsdWU6IHNvbWUgdmFsdWV9XG4gKiBAcGFyYW0gcGFyXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbU1hdHJpeChwYXI9e3g6MjAsIHk6MjAsIHNjYWxlRmFjdG9yOjEsIGRpdmVyZ2luZzpmYWxzZSwgYnViYmxlOmZhbHNlfSl7XG4gICAgbGV0IFggPSByYW5nZSgxLCBwYXIueCsxKTsgLy8gZ2VuZXJhdGVzIGEgMS1iYXNlZCBsaXN0LlxuICAgIGxldCBZID0gcmFuZ2UoMSwgcGFyLnkrMSk7XG4gICAgbGV0IGRhdGEgPSBbXTtcbiAgICBYLmZvckVhY2goKHgpPT57XG4gICAgICAgIHggPSAneCcgKyB4LnRvU3RyaW5nKCk7XG4gICAgICAgIFkuZm9yRWFjaCgoeSk9PntcbiAgICAgICAgICAgIHkgPSAneScgKyB5LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBsZXQgdiA9IE1hdGgucmFuZG9tKCkqcGFyLnNjYWxlRmFjdG9yO1xuICAgICAgICAgICAgdiA9IHBhci5kaXZlcmdpbmcmJk1hdGgucmFuZG9tKCkgPCAwLjUgPyAtdiA6IHY7IC8vIHJhbmRvbWx5IGFzc2lnbmluZyBuZWdhdGl2ZSBhbmQgcG9zaXRpdmUgdmFsdWVzXG4gICAgICAgICAgICBkYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICAgICAgeTogeSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdixcbiAgICAgICAgICAgICAgICBkaXNwbGF5VmFsdWU6IHBhcnNlRmxvYXQodi50b0V4cG9uZW50aWFsKCkpLnRvUHJlY2lzaW9uKDMpLFxuICAgICAgICAgICAgICAgIHI6IHBhci5idWJibGU/TWF0aC5yYW5kb20oKSozMDp1bmRlZmluZWQgLy8gb25seSByZWxldmFudCB0byBidWJibGUgbWFwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICB9KTtcbiAgICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGxpc3Qgb2YgcmFuZG9tIHZhbHVlc1xuICogQHBhcmFtIHBhclxuICogQHJldHVybnMge0FycmF5fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21MaXN0KHBhcj17bjoxMDAsIHNjYWxlRmFjdG9yOjF9KSB7XG4gICAgbGV0IFggPSByYW5nZSgwLCBwYXIubik7IC8vIGdlbmVyYXRlcyBhIDEtYmFzZWQgbGlzdC5cbiAgICBsZXQgZGF0YSA9IFtdO1xuICAgIHJldHVybiBYLm1hcCgoeCkgPT4gTWF0aC5yYW5kb20oKSAqIHBhci5zY2FsZUZhY3Rvcik7XG5cbn1cbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbU5vcm1hbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tTm9ybWFsKG11LCBzaWdtYSkge1xuICAgIHZhciB4LCByO1xuICAgIG11ID0gbXUgPT0gbnVsbCA/IDAgOiArbXU7XG4gICAgc2lnbWEgPSBzaWdtYSA9PSBudWxsID8gMSA6ICtzaWdtYTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeTtcblxuICAgICAgLy8gSWYgYXZhaWxhYmxlLCB1c2UgdGhlIHNlY29uZCBwcmV2aW91c2x5LWdlbmVyYXRlZCB1bmlmb3JtIHJhbmRvbS5cbiAgICAgIGlmICh4ICE9IG51bGwpIHkgPSB4LCB4ID0gbnVsbDtcblxuICAgICAgLy8gT3RoZXJ3aXNlLCBnZW5lcmF0ZSBhIG5ldyB4IGFuZCB5LlxuICAgICAgZWxzZSBkbyB7XG4gICAgICAgIHggPSBzb3VyY2UoKSAqIDIgLSAxO1xuICAgICAgICB5ID0gc291cmNlKCkgKiAyIC0gMTtcbiAgICAgICAgciA9IHggKiB4ICsgeSAqIHk7XG4gICAgICB9IHdoaWxlICghciB8fCByID4gMSk7XG5cbiAgICAgIHJldHVybiBtdSArIHNpZ21hICogeSAqIE1hdGguc3FydCgtMiAqIE1hdGgubG9nKHIpIC8gcik7XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbU5vcm1hbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21Ob3JtYWw7XG5cbiAgcmV0dXJuIHJhbmRvbU5vcm1hbDtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpO1xufVxuIiwiZXhwb3J0IHZhciBwcmVmaXggPSBcIiRcIjtcblxuZnVuY3Rpb24gTWFwKCkge31cblxuTWFwLnByb3RvdHlwZSA9IG1hcC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBNYXAsXG4gIGhhczogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIChwcmVmaXggKyBrZXkpIGluIHRoaXM7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIHRoaXNbcHJlZml4ICsga2V5XTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdGhpc1twcmVmaXggKyBrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHByb3BlcnR5ID0gcHJlZml4ICsga2V5O1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0aGlzICYmIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGtleXMucHVzaChwcm9wZXJ0eS5zbGljZSgxKSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH0sXG4gIHZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSB2YWx1ZXMucHVzaCh0aGlzW3Byb3BlcnR5XSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSxcbiAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZW50cmllcy5wdXNoKHtrZXk6IHByb3BlcnR5LnNsaWNlKDEpLCB2YWx1ZTogdGhpc1twcm9wZXJ0eV19KTtcbiAgICByZXR1cm4gZW50cmllcztcbiAgfSxcbiAgc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNpemUgPSAwO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSArK3NpemU7XG4gICAgcmV0dXJuIHNpemU7XG4gIH0sXG4gIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBlYWNoOiBmdW5jdGlvbihmKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGYodGhpc1twcm9wZXJ0eV0sIHByb3BlcnR5LnNsaWNlKDEpLCB0aGlzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbWFwKG9iamVjdCwgZikge1xuICB2YXIgbWFwID0gbmV3IE1hcDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTWFwKSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7IG1hcC5zZXQoa2V5LCB2YWx1ZSk7IH0pO1xuXG4gIC8vIEluZGV4IGFycmF5IGJ5IG51bWVyaWMgaW5kZXggb3Igc3BlY2lmaWVkIGtleSBmdW5jdGlvbi5cbiAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IG9iamVjdC5sZW5ndGgsXG4gICAgICAgIG87XG5cbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChpLCBvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoZihvID0gb2JqZWN0W2ldLCBpLCBvYmplY3QpLCBvKTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgb2JqZWN0IHRvIG1hcC5cbiAgZWxzZSBpZiAob2JqZWN0KSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBtYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xuXG4gIHJldHVybiBtYXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcDtcbiIsImltcG9ydCBtYXAgZnJvbSBcIi4vbWFwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIga2V5cyA9IFtdLFxuICAgICAgc29ydEtleXMgPSBbXSxcbiAgICAgIHNvcnRWYWx1ZXMsXG4gICAgICByb2xsdXAsXG4gICAgICBuZXN0O1xuXG4gIGZ1bmN0aW9uIGFwcGx5KGFycmF5LCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpIHtcbiAgICBpZiAoZGVwdGggPj0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGFycmF5LnNvcnQoc29ydFZhbHVlcyk7XG4gICAgICByZXR1cm4gcm9sbHVwICE9IG51bGwgPyByb2xsdXAoYXJyYXkpIDogYXJyYXk7XG4gICAgfVxuXG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAga2V5ID0ga2V5c1tkZXB0aCsrXSxcbiAgICAgICAga2V5VmFsdWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB2YWx1ZXNCeUtleSA9IG1hcCgpLFxuICAgICAgICB2YWx1ZXMsXG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVJlc3VsdCgpO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh2YWx1ZXMgPSB2YWx1ZXNCeUtleS5nZXQoa2V5VmFsdWUgPSBrZXkodmFsdWUgPSBhcnJheVtpXSkgKyBcIlwiKSkge1xuICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZXNCeUtleS5zZXQoa2V5VmFsdWUsIFt2YWx1ZV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbHVlc0J5S2V5LmVhY2goZnVuY3Rpb24odmFsdWVzLCBrZXkpIHtcbiAgICAgIHNldFJlc3VsdChyZXN1bHQsIGtleSwgYXBwbHkodmFsdWVzLCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBlbnRyaWVzKG1hcCwgZGVwdGgpIHtcbiAgICBpZiAoKytkZXB0aCA+IGtleXMubGVuZ3RoKSByZXR1cm4gbWFwO1xuICAgIHZhciBhcnJheSwgc29ydEtleSA9IHNvcnRLZXlzW2RlcHRoIC0gMV07XG4gICAgaWYgKHJvbGx1cCAhPSBudWxsICYmIGRlcHRoID49IGtleXMubGVuZ3RoKSBhcnJheSA9IG1hcC5lbnRyaWVzKCk7XG4gICAgZWxzZSBhcnJheSA9IFtdLCBtYXAuZWFjaChmdW5jdGlvbih2LCBrKSB7IGFycmF5LnB1c2goe2tleTogaywgdmFsdWVzOiBlbnRyaWVzKHYsIGRlcHRoKX0pOyB9KTtcbiAgICByZXR1cm4gc29ydEtleSAhPSBudWxsID8gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzb3J0S2V5KGEua2V5LCBiLmtleSk7IH0pIDogYXJyYXk7XG4gIH1cblxuICByZXR1cm4gbmVzdCA9IHtcbiAgICBvYmplY3Q6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlT2JqZWN0LCBzZXRPYmplY3QpOyB9LFxuICAgIG1hcDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCk7IH0sXG4gICAgZW50cmllczogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGVudHJpZXMoYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKSwgMCk7IH0sXG4gICAga2V5OiBmdW5jdGlvbihkKSB7IGtleXMucHVzaChkKTsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydEtleXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRLZXlzW2tleXMubGVuZ3RoIC0gMV0gPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydFZhbHVlczogZnVuY3Rpb24ob3JkZXIpIHsgc29ydFZhbHVlcyA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICByb2xsdXA6IGZ1bmN0aW9uKGYpIHsgcm9sbHVwID0gZjsgcmV0dXJuIG5lc3Q7IH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT2JqZWN0KCkge1xuICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIHNldE9iamVjdChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWFwKCkge1xuICByZXR1cm4gbWFwKCk7XG59XG5cbmZ1bmN0aW9uIHNldE1hcChtYXAsIGtleSwgdmFsdWUpIHtcbiAgbWFwLnNldChrZXksIHZhbHVlKTtcbn1cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBtYXAsIHByZWZpeH0gZnJvbSBcIi4vbWFwXCI7XG5cbmZ1bmN0aW9uIFNldCgpIHt9XG5cbnZhciBwcm90byA9IG1hcC5wcm90b3R5cGU7XG5cblNldC5wcm90b3R5cGUgPSBzZXQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2V0LFxuICBoYXM6IHByb3RvLmhhcyxcbiAgYWRkOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhbHVlICs9IFwiXCI7XG4gICAgdGhpc1twcmVmaXggKyB2YWx1ZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBwcm90by5yZW1vdmUsXG4gIGNsZWFyOiBwcm90by5jbGVhcixcbiAgdmFsdWVzOiBwcm90by5rZXlzLFxuICBzaXplOiBwcm90by5zaXplLFxuICBlbXB0eTogcHJvdG8uZW1wdHksXG4gIGVhY2g6IHByb3RvLmVhY2hcbn07XG5cbmZ1bmN0aW9uIHNldChvYmplY3QsIGYpIHtcbiAgdmFyIHNldCA9IG5ldyBTZXQ7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFNldCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUpIHsgc2V0LmFkZCh2YWx1ZSk7IH0pO1xuXG4gIC8vIE90aGVyd2lzZSwgYXNzdW1lIGl04oCZcyBhbiBhcnJheS5cbiAgZWxzZSBpZiAob2JqZWN0KSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IG9iamVjdC5sZW5ndGg7XG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIHNldC5hZGQob2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKGYob2JqZWN0W2ldLCBpLCBvYmplY3QpKTtcbiAgfVxuXG4gIHJldHVybiBzZXQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNldDtcbiIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBtYXAgPSBhcnJheS5tYXA7XG5leHBvcnQgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG4iLCJpbXBvcnQge21hcH0gZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5cbmV4cG9ydCB2YXIgaW1wbGljaXQgPSB7bmFtZTogXCJpbXBsaWNpdFwifTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkaW5hbChyYW5nZSkge1xuICB2YXIgaW5kZXggPSBtYXAoKSxcbiAgICAgIGRvbWFpbiA9IFtdLFxuICAgICAgdW5rbm93biA9IGltcGxpY2l0O1xuXG4gIHJhbmdlID0gcmFuZ2UgPT0gbnVsbCA/IFtdIDogc2xpY2UuY2FsbChyYW5nZSk7XG5cbiAgZnVuY3Rpb24gc2NhbGUoZCkge1xuICAgIHZhciBrZXkgPSBkICsgXCJcIiwgaSA9IGluZGV4LmdldChrZXkpO1xuICAgIGlmICghaSkge1xuICAgICAgaWYgKHVua25vd24gIT09IGltcGxpY2l0KSByZXR1cm4gdW5rbm93bjtcbiAgICAgIGluZGV4LnNldChrZXksIGkgPSBkb21haW4ucHVzaChkKSk7XG4gICAgfVxuICAgIHJldHVybiByYW5nZVsoaSAtIDEpICUgcmFuZ2UubGVuZ3RoXTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXSwgaW5kZXggPSBtYXAoKTtcbiAgICB2YXIgaSA9IC0xLCBuID0gXy5sZW5ndGgsIGQsIGtleTtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpbmRleC5oYXMoa2V5ID0gKGQgPSBfW2ldKSArIFwiXCIpKSBpbmRleC5zZXQoa2V5LCBkb21haW4ucHVzaChkKSk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UuY2FsbChfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb3JkaW5hbCgpXG4gICAgICAgIC5kb21haW4oZG9tYWluKVxuICAgICAgICAucmFuZ2UocmFuZ2UpXG4gICAgICAgIC51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cbiIsImltcG9ydCB7cmFuZ2UgYXMgc2VxdWVuY2V9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IG9yZGluYWwgZnJvbSBcIi4vb3JkaW5hbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiYW5kKCkge1xuICB2YXIgc2NhbGUgPSBvcmRpbmFsKCkudW5rbm93bih1bmRlZmluZWQpLFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluLFxuICAgICAgb3JkaW5hbFJhbmdlID0gc2NhbGUucmFuZ2UsXG4gICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgIHN0ZXAsXG4gICAgICBiYW5kd2lkdGgsXG4gICAgICByb3VuZCA9IGZhbHNlLFxuICAgICAgcGFkZGluZ0lubmVyID0gMCxcbiAgICAgIHBhZGRpbmdPdXRlciA9IDAsXG4gICAgICBhbGlnbiA9IDAuNTtcblxuICBkZWxldGUgc2NhbGUudW5rbm93bjtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHZhciBuID0gZG9tYWluKCkubGVuZ3RoLFxuICAgICAgICByZXZlcnNlID0gcmFuZ2VbMV0gPCByYW5nZVswXSxcbiAgICAgICAgc3RhcnQgPSByYW5nZVtyZXZlcnNlIC0gMF0sXG4gICAgICAgIHN0b3AgPSByYW5nZVsxIC0gcmV2ZXJzZV07XG4gICAgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMSwgbiAtIHBhZGRpbmdJbm5lciArIHBhZGRpbmdPdXRlciAqIDIpO1xuICAgIGlmIChyb3VuZCkgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgc3RhcnQgKz0gKHN0b3AgLSBzdGFydCAtIHN0ZXAgKiAobiAtIHBhZGRpbmdJbm5lcikpICogYWxpZ247XG4gICAgYmFuZHdpZHRoID0gc3RlcCAqICgxIC0gcGFkZGluZ0lubmVyKTtcbiAgICBpZiAocm91bmQpIHN0YXJ0ID0gTWF0aC5yb3VuZChzdGFydCksIGJhbmR3aWR0aCA9IE1hdGgucm91bmQoYmFuZHdpZHRoKTtcbiAgICB2YXIgdmFsdWVzID0gc2VxdWVuY2UobikubWFwKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIHN0YXJ0ICsgc3RlcCAqIGk7IH0pO1xuICAgIHJldHVybiBvcmRpbmFsUmFuZ2UocmV2ZXJzZSA/IHZhbHVlcy5yZXZlcnNlKCkgOiB2YWx1ZXMpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbihfKSwgcmVzY2FsZSgpKSA6IGRvbWFpbigpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gWytfWzBdLCArX1sxXV0sIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHJhbmdlID0gWytfWzBdLCArX1sxXV0sIHJvdW5kID0gdHJ1ZSwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmJhbmR3aWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiYW5kd2lkdGg7XG4gIH07XG5cbiAgc2NhbGUuc3RlcCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzdGVwO1xuICB9O1xuXG4gIHNjYWxlLnJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJvdW5kID0gISFfLCByZXNjYWxlKCkpIDogcm91bmQ7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBwYWRkaW5nT3V0ZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZ0lubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ091dGVyID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogcGFkZGluZ091dGVyO1xuICB9O1xuXG4gIHNjYWxlLmFsaWduID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFsaWduID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogYWxpZ247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiYW5kKClcbiAgICAgICAgLmRvbWFpbihkb21haW4oKSlcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAucm91bmQocm91bmQpXG4gICAgICAgIC5wYWRkaW5nSW5uZXIocGFkZGluZ0lubmVyKVxuICAgICAgICAucGFkZGluZ091dGVyKHBhZGRpbmdPdXRlcilcbiAgICAgICAgLmFsaWduKGFsaWduKTtcbiAgfTtcblxuICByZXR1cm4gcmVzY2FsZSgpO1xufVxuXG5mdW5jdGlvbiBwb2ludGlzaChzY2FsZSkge1xuICB2YXIgY29weSA9IHNjYWxlLmNvcHk7XG5cbiAgc2NhbGUucGFkZGluZyA9IHNjYWxlLnBhZGRpbmdPdXRlcjtcbiAgZGVsZXRlIHNjYWxlLnBhZGRpbmdJbm5lcjtcbiAgZGVsZXRlIHNjYWxlLnBhZGRpbmdPdXRlcjtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHBvaW50aXNoKGNvcHkoKSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9pbnQoKSB7XG4gIHJldHVybiBwb2ludGlzaChiYW5kKCkucGFkZGluZ0lubmVyKDEpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBmYWN0b3J5LCBwcm90b3R5cGUpIHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gZmFjdG9yeS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIHByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKHBhcmVudCwgZGVmaW5pdGlvbikge1xuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgZm9yICh2YXIga2V5IGluIGRlZmluaXRpb24pIHByb3RvdHlwZVtrZXldID0gZGVmaW5pdGlvbltrZXldO1xuICByZXR1cm4gcHJvdG90eXBlO1xufVxuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDb2xvcigpIHt9XG5cbmV4cG9ydCB2YXIgZGFya2VyID0gMC43O1xuZXhwb3J0IHZhciBicmlnaHRlciA9IDEgLyBkYXJrZXI7XG5cbnZhciByZUkgPSBcIlxcXFxzKihbKy1dP1xcXFxkKylcXFxccypcIixcbiAgICByZU4gPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KVxcXFxzKlwiLFxuICAgIHJlUCA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pJVxcXFxzKlwiLFxuICAgIHJlSGV4MyA9IC9eIyhbMC05YS1mXXszfSkkLyxcbiAgICByZUhleDYgPSAvXiMoWzAtOWEtZl17Nn0pJC8sXG4gICAgcmVSZ2JJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlSSwgcmVJLCByZUldICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlUCwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVJLCByZUksIHJlSSwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlUCwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbFBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbFxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbGFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xhXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIik7XG5cbnZhciBuYW1lZCA9IHtcbiAgYWxpY2VibHVlOiAweGYwZjhmZixcbiAgYW50aXF1ZXdoaXRlOiAweGZhZWJkNyxcbiAgYXF1YTogMHgwMGZmZmYsXG4gIGFxdWFtYXJpbmU6IDB4N2ZmZmQ0LFxuICBhenVyZTogMHhmMGZmZmYsXG4gIGJlaWdlOiAweGY1ZjVkYyxcbiAgYmlzcXVlOiAweGZmZTRjNCxcbiAgYmxhY2s6IDB4MDAwMDAwLFxuICBibGFuY2hlZGFsbW9uZDogMHhmZmViY2QsXG4gIGJsdWU6IDB4MDAwMGZmLFxuICBibHVldmlvbGV0OiAweDhhMmJlMixcbiAgYnJvd246IDB4YTUyYTJhLFxuICBidXJseXdvb2Q6IDB4ZGViODg3LFxuICBjYWRldGJsdWU6IDB4NWY5ZWEwLFxuICBjaGFydHJldXNlOiAweDdmZmYwMCxcbiAgY2hvY29sYXRlOiAweGQyNjkxZSxcbiAgY29yYWw6IDB4ZmY3ZjUwLFxuICBjb3JuZmxvd2VyYmx1ZTogMHg2NDk1ZWQsXG4gIGNvcm5zaWxrOiAweGZmZjhkYyxcbiAgY3JpbXNvbjogMHhkYzE0M2MsXG4gIGN5YW46IDB4MDBmZmZmLFxuICBkYXJrYmx1ZTogMHgwMDAwOGIsXG4gIGRhcmtjeWFuOiAweDAwOGI4YixcbiAgZGFya2dvbGRlbnJvZDogMHhiODg2MGIsXG4gIGRhcmtncmF5OiAweGE5YTlhOSxcbiAgZGFya2dyZWVuOiAweDAwNjQwMCxcbiAgZGFya2dyZXk6IDB4YTlhOWE5LFxuICBkYXJra2hha2k6IDB4YmRiNzZiLFxuICBkYXJrbWFnZW50YTogMHg4YjAwOGIsXG4gIGRhcmtvbGl2ZWdyZWVuOiAweDU1NmIyZixcbiAgZGFya29yYW5nZTogMHhmZjhjMDAsXG4gIGRhcmtvcmNoaWQ6IDB4OTkzMmNjLFxuICBkYXJrcmVkOiAweDhiMDAwMCxcbiAgZGFya3NhbG1vbjogMHhlOTk2N2EsXG4gIGRhcmtzZWFncmVlbjogMHg4ZmJjOGYsXG4gIGRhcmtzbGF0ZWJsdWU6IDB4NDgzZDhiLFxuICBkYXJrc2xhdGVncmF5OiAweDJmNGY0ZixcbiAgZGFya3NsYXRlZ3JleTogMHgyZjRmNGYsXG4gIGRhcmt0dXJxdW9pc2U6IDB4MDBjZWQxLFxuICBkYXJrdmlvbGV0OiAweDk0MDBkMyxcbiAgZGVlcHBpbms6IDB4ZmYxNDkzLFxuICBkZWVwc2t5Ymx1ZTogMHgwMGJmZmYsXG4gIGRpbWdyYXk6IDB4Njk2OTY5LFxuICBkaW1ncmV5OiAweDY5Njk2OSxcbiAgZG9kZ2VyYmx1ZTogMHgxZTkwZmYsXG4gIGZpcmVicmljazogMHhiMjIyMjIsXG4gIGZsb3JhbHdoaXRlOiAweGZmZmFmMCxcbiAgZm9yZXN0Z3JlZW46IDB4MjI4YjIyLFxuICBmdWNoc2lhOiAweGZmMDBmZixcbiAgZ2FpbnNib3JvOiAweGRjZGNkYyxcbiAgZ2hvc3R3aGl0ZTogMHhmOGY4ZmYsXG4gIGdvbGQ6IDB4ZmZkNzAwLFxuICBnb2xkZW5yb2Q6IDB4ZGFhNTIwLFxuICBncmF5OiAweDgwODA4MCxcbiAgZ3JlZW46IDB4MDA4MDAwLFxuICBncmVlbnllbGxvdzogMHhhZGZmMmYsXG4gIGdyZXk6IDB4ODA4MDgwLFxuICBob25leWRldzogMHhmMGZmZjAsXG4gIGhvdHBpbms6IDB4ZmY2OWI0LFxuICBpbmRpYW5yZWQ6IDB4Y2Q1YzVjLFxuICBpbmRpZ286IDB4NGIwMDgyLFxuICBpdm9yeTogMHhmZmZmZjAsXG4gIGtoYWtpOiAweGYwZTY4YyxcbiAgbGF2ZW5kZXI6IDB4ZTZlNmZhLFxuICBsYXZlbmRlcmJsdXNoOiAweGZmZjBmNSxcbiAgbGF3bmdyZWVuOiAweDdjZmMwMCxcbiAgbGVtb25jaGlmZm9uOiAweGZmZmFjZCxcbiAgbGlnaHRibHVlOiAweGFkZDhlNixcbiAgbGlnaHRjb3JhbDogMHhmMDgwODAsXG4gIGxpZ2h0Y3lhbjogMHhlMGZmZmYsXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93OiAweGZhZmFkMixcbiAgbGlnaHRncmF5OiAweGQzZDNkMyxcbiAgbGlnaHRncmVlbjogMHg5MGVlOTAsXG4gIGxpZ2h0Z3JleTogMHhkM2QzZDMsXG4gIGxpZ2h0cGluazogMHhmZmI2YzEsXG4gIGxpZ2h0c2FsbW9uOiAweGZmYTA3YSxcbiAgbGlnaHRzZWFncmVlbjogMHgyMGIyYWEsXG4gIGxpZ2h0c2t5Ymx1ZTogMHg4N2NlZmEsXG4gIGxpZ2h0c2xhdGVncmF5OiAweDc3ODg5OSxcbiAgbGlnaHRzbGF0ZWdyZXk6IDB4Nzc4ODk5LFxuICBsaWdodHN0ZWVsYmx1ZTogMHhiMGM0ZGUsXG4gIGxpZ2h0eWVsbG93OiAweGZmZmZlMCxcbiAgbGltZTogMHgwMGZmMDAsXG4gIGxpbWVncmVlbjogMHgzMmNkMzIsXG4gIGxpbmVuOiAweGZhZjBlNixcbiAgbWFnZW50YTogMHhmZjAwZmYsXG4gIG1hcm9vbjogMHg4MDAwMDAsXG4gIG1lZGl1bWFxdWFtYXJpbmU6IDB4NjZjZGFhLFxuICBtZWRpdW1ibHVlOiAweDAwMDBjZCxcbiAgbWVkaXVtb3JjaGlkOiAweGJhNTVkMyxcbiAgbWVkaXVtcHVycGxlOiAweDkzNzBkYixcbiAgbWVkaXVtc2VhZ3JlZW46IDB4M2NiMzcxLFxuICBtZWRpdW1zbGF0ZWJsdWU6IDB4N2I2OGVlLFxuICBtZWRpdW1zcHJpbmdncmVlbjogMHgwMGZhOWEsXG4gIG1lZGl1bXR1cnF1b2lzZTogMHg0OGQxY2MsXG4gIG1lZGl1bXZpb2xldHJlZDogMHhjNzE1ODUsXG4gIG1pZG5pZ2h0Ymx1ZTogMHgxOTE5NzAsXG4gIG1pbnRjcmVhbTogMHhmNWZmZmEsXG4gIG1pc3R5cm9zZTogMHhmZmU0ZTEsXG4gIG1vY2Nhc2luOiAweGZmZTRiNSxcbiAgbmF2YWpvd2hpdGU6IDB4ZmZkZWFkLFxuICBuYXZ5OiAweDAwMDA4MCxcbiAgb2xkbGFjZTogMHhmZGY1ZTYsXG4gIG9saXZlOiAweDgwODAwMCxcbiAgb2xpdmVkcmFiOiAweDZiOGUyMyxcbiAgb3JhbmdlOiAweGZmYTUwMCxcbiAgb3JhbmdlcmVkOiAweGZmNDUwMCxcbiAgb3JjaGlkOiAweGRhNzBkNixcbiAgcGFsZWdvbGRlbnJvZDogMHhlZWU4YWEsXG4gIHBhbGVncmVlbjogMHg5OGZiOTgsXG4gIHBhbGV0dXJxdW9pc2U6IDB4YWZlZWVlLFxuICBwYWxldmlvbGV0cmVkOiAweGRiNzA5MyxcbiAgcGFwYXlhd2hpcDogMHhmZmVmZDUsXG4gIHBlYWNocHVmZjogMHhmZmRhYjksXG4gIHBlcnU6IDB4Y2Q4NTNmLFxuICBwaW5rOiAweGZmYzBjYixcbiAgcGx1bTogMHhkZGEwZGQsXG4gIHBvd2RlcmJsdWU6IDB4YjBlMGU2LFxuICBwdXJwbGU6IDB4ODAwMDgwLFxuICByZWJlY2NhcHVycGxlOiAweDY2MzM5OSxcbiAgcmVkOiAweGZmMDAwMCxcbiAgcm9zeWJyb3duOiAweGJjOGY4ZixcbiAgcm95YWxibHVlOiAweDQxNjllMSxcbiAgc2FkZGxlYnJvd246IDB4OGI0NTEzLFxuICBzYWxtb246IDB4ZmE4MDcyLFxuICBzYW5keWJyb3duOiAweGY0YTQ2MCxcbiAgc2VhZ3JlZW46IDB4MmU4YjU3LFxuICBzZWFzaGVsbDogMHhmZmY1ZWUsXG4gIHNpZW5uYTogMHhhMDUyMmQsXG4gIHNpbHZlcjogMHhjMGMwYzAsXG4gIHNreWJsdWU6IDB4ODdjZWViLFxuICBzbGF0ZWJsdWU6IDB4NmE1YWNkLFxuICBzbGF0ZWdyYXk6IDB4NzA4MDkwLFxuICBzbGF0ZWdyZXk6IDB4NzA4MDkwLFxuICBzbm93OiAweGZmZmFmYSxcbiAgc3ByaW5nZ3JlZW46IDB4MDBmZjdmLFxuICBzdGVlbGJsdWU6IDB4NDY4MmI0LFxuICB0YW46IDB4ZDJiNDhjLFxuICB0ZWFsOiAweDAwODA4MCxcbiAgdGhpc3RsZTogMHhkOGJmZDgsXG4gIHRvbWF0bzogMHhmZjYzNDcsXG4gIHR1cnF1b2lzZTogMHg0MGUwZDAsXG4gIHZpb2xldDogMHhlZTgyZWUsXG4gIHdoZWF0OiAweGY1ZGViMyxcbiAgd2hpdGU6IDB4ZmZmZmZmLFxuICB3aGl0ZXNtb2tlOiAweGY1ZjVmNSxcbiAgeWVsbG93OiAweGZmZmYwMCxcbiAgeWVsbG93Z3JlZW46IDB4OWFjZDMyXG59O1xuXG5kZWZpbmUoQ29sb3IsIGNvbG9yLCB7XG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICBoZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpLmhleCgpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkgKyBcIlwiO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29sb3IoZm9ybWF0KSB7XG4gIHZhciBtO1xuICBmb3JtYXQgPSAoZm9ybWF0ICsgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAobSA9IHJlSGV4My5leGVjKGZvcm1hdCkpID8gKG0gPSBwYXJzZUludChtWzFdLCAxNiksIG5ldyBSZ2IoKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHgwZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZiksIDEpKSAvLyAjZjAwXG4gICAgICA6IChtID0gcmVIZXg2LmV4ZWMoZm9ybWF0KSkgPyByZ2JuKHBhcnNlSW50KG1bMV0sIDE2KSkgLy8gI2ZmMDAwMFxuICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgOiAobSA9IHJlUmdiUGVyY2VudC5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCAxKSAvLyByZ2IoMTAwJSwgMCUsIDAlKVxuICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgOiAobSA9IHJlSHNsUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCAxKSAvLyBoc2woMTIwLCA1MCUsIDUwJSlcbiAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSlcbiAgICAgIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApXG4gICAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJnYm4obikge1xuICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYkNvbnZlcnQobykge1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBSZ2I7XG4gIG8gPSBvLnJnYigpO1xuICByZXR1cm4gbmV3IFJnYihvLnIsIG8uZywgby5iLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICB0aGlzLnIgPSArcjtcbiAgdGhpcy5nID0gK2c7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKFJnYiwgcmdiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnIgJiYgdGhpcy5yIDw9IDI1NSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5nICYmIHRoaXMuZyA8PSAyNTUpXG4gICAgICAgICYmICgwIDw9IHRoaXMuYiAmJiB0aGlzLmIgPD0gMjU1KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBoZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIiNcIiArIGhleCh0aGlzLnIpICsgaGV4KHRoaXMuZykgKyBoZXgodGhpcy5iKTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICAgIHJldHVybiAoYSA9PT0gMSA/IFwicmdiKFwiIDogXCJyZ2JhKFwiKVxuICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLnIpIHx8IDApKSArIFwiLCBcIlxuICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmcpIHx8IDApKSArIFwiLCBcIlxuICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmIpIHx8IDApKVxuICAgICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xuICB9XG59KSk7XG5cbmZ1bmN0aW9uIGhleCh2YWx1ZSkge1xuICB2YWx1ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh2YWx1ZSkgfHwgMCkpO1xuICByZXR1cm4gKHZhbHVlIDwgMTYgPyBcIjBcIiA6IFwiXCIpICsgdmFsdWUudG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiBoc2xhKGgsIHMsIGwsIGEpIHtcbiAgaWYgKGEgPD0gMCkgaCA9IHMgPSBsID0gTmFOO1xuICBlbHNlIGlmIChsIDw9IDAgfHwgbCA+PSAxKSBoID0gcyA9IE5hTjtcbiAgZWxzZSBpZiAocyA8PSAwKSBoID0gTmFOO1xuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG5ldyBIc2woby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgSHNsO1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG87XG4gIG8gPSBvLnJnYigpO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbWluID0gTWF0aC5taW4ociwgZywgYiksXG4gICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgIGggPSBOYU4sXG4gICAgICBzID0gbWF4IC0gbWluLFxuICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgaWYgKHMpIHtcbiAgICBpZiAociA9PT0gbWF4KSBoID0gKGcgLSBiKSAvIHMgKyAoZyA8IGIpICogNjtcbiAgICBlbHNlIGlmIChnID09PSBtYXgpIGggPSAoYiAtIHIpIC8gcyArIDI7XG4gICAgZWxzZSBoID0gKHIgLSBnKSAvIHMgKyA0O1xuICAgIHMgLz0gbCA8IDAuNSA/IG1heCArIG1pbiA6IDIgLSBtYXggLSBtaW47XG4gICAgaCAqPSA2MDtcbiAgfSBlbHNlIHtcbiAgICBzID0gbCA+IDAgJiYgbCA8IDEgPyAwIDogaDtcbiAgfVxuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoc2xDb252ZXJ0KGgpIDogbmV3IEhzbChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIEhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSHNsLCBoc2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSB0aGlzLmggJSAzNjAgKyAodGhpcy5oIDwgMCkgKiAzNjAsXG4gICAgICAgIHMgPSBpc05hTihoKSB8fCBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyxcbiAgICAgICAgbCA9IHRoaXMubCxcbiAgICAgICAgbTIgPSBsICsgKGwgPCAwLjUgPyBsIDogMSAtIGwpICogcyxcbiAgICAgICAgbTEgPSAyICogbCAtIG0yO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgaHNsMnJnYihoID49IDI0MCA/IGggLSAyNDAgOiBoICsgMTIwLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoIDwgMTIwID8gaCArIDI0MCA6IGggLSAxMjAsIG0xLCBtMiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMucyAmJiB0aGlzLnMgPD0gMSB8fCBpc05hTih0aGlzLnMpKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmwgJiYgdGhpcy5sIDw9IDEpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH1cbn0pKTtcblxuLyogRnJvbSBGdkQgMTMuMzcsIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyAqL1xuZnVuY3Rpb24gaHNsMnJnYihoLCBtMSwgbTIpIHtcbiAgcmV0dXJuIChoIDwgNjAgPyBtMSArIChtMiAtIG0xKSAqIGggLyA2MFxuICAgICAgOiBoIDwgMTgwID8gbTJcbiAgICAgIDogaCA8IDI0MCA/IG0xICsgKG0yIC0gbTEpICogKDI0MCAtIGgpIC8gNjBcbiAgICAgIDogbTEpICogMjU1O1xufVxuIiwiZXhwb3J0IHZhciBkZWcycmFkID0gTWF0aC5QSSAvIDE4MDtcbmV4cG9ydCB2YXIgcmFkMmRlZyA9IDE4MCAvIE1hdGguUEk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmVcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYn0gZnJvbSBcIi4vY29sb3JcIjtcbmltcG9ydCB7ZGVnMnJhZCwgcmFkMmRlZ30gZnJvbSBcIi4vbWF0aFwiO1xuXG4vLyBodHRwczovL2JldGEub2JzZXJ2YWJsZWhxLmNvbS9AbWJvc3RvY2svbGFiLWFuZC1yZ2JcbnZhciBLID0gMTgsXG4gICAgWG4gPSAwLjk2NDIyLFxuICAgIFluID0gMSxcbiAgICBabiA9IDAuODI1MjEsXG4gICAgdDAgPSA0IC8gMjksXG4gICAgdDEgPSA2IC8gMjksXG4gICAgdDIgPSAzICogdDEgKiB0MSxcbiAgICB0MyA9IHQxICogdDEgKiB0MTtcblxuZnVuY3Rpb24gbGFiQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgTGFiKSByZXR1cm4gbmV3IExhYihvLmwsIG8uYSwgby5iLCBvLm9wYWNpdHkpO1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkge1xuICAgIGlmIChpc05hTihvLmgpKSByZXR1cm4gbmV3IExhYihvLmwsIDAsIDAsIG8ub3BhY2l0eSk7XG4gICAgdmFyIGggPSBvLmggKiBkZWcycmFkO1xuICAgIHJldHVybiBuZXcgTGFiKG8ubCwgTWF0aC5jb3MoaCkgKiBvLmMsIE1hdGguc2luKGgpICogby5jLCBvLm9wYWNpdHkpO1xuICB9XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSByZ2IybHJnYihvLnIpLFxuICAgICAgZyA9IHJnYjJscmdiKG8uZyksXG4gICAgICBiID0gcmdiMmxyZ2Ioby5iKSxcbiAgICAgIHkgPSB4eXoybGFiKCgwLjIyMjUwNDUgKiByICsgMC43MTY4Nzg2ICogZyArIDAuMDYwNjE2OSAqIGIpIC8gWW4pLCB4LCB6O1xuICBpZiAociA9PT0gZyAmJiBnID09PSBiKSB4ID0geiA9IHk7IGVsc2Uge1xuICAgIHggPSB4eXoybGFiKCgwLjQzNjA3NDcgKiByICsgMC4zODUwNjQ5ICogZyArIDAuMTQzMDgwNCAqIGIpIC8gWG4pO1xuICAgIHogPSB4eXoybGFiKCgwLjAxMzkzMjIgKiByICsgMC4wOTcxMDQ1ICogZyArIDAuNzE0MTczMyAqIGIpIC8gWm4pO1xuICB9XG4gIHJldHVybiBuZXcgTGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXkobCwgb3BhY2l0eSkge1xuICByZXR1cm4gbmV3IExhYihsLCAwLCAwLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gbGFiQ29udmVydChsKSA6IG5ldyBMYWIobCwgYSwgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMuYSA9ICthO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShMYWIsIGxhYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHkgPSAodGhpcy5sICsgMTYpIC8gMTE2LFxuICAgICAgICB4ID0gaXNOYU4odGhpcy5hKSA/IHkgOiB5ICsgdGhpcy5hIC8gNTAwLFxuICAgICAgICB6ID0gaXNOYU4odGhpcy5iKSA/IHkgOiB5IC0gdGhpcy5iIC8gMjAwO1xuICAgIHggPSBYbiAqIGxhYjJ4eXooeCk7XG4gICAgeSA9IFluICogbGFiMnh5eih5KTtcbiAgICB6ID0gWm4gKiBsYWIyeHl6KHopO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgbHJnYjJyZ2IoIDMuMTMzODU2MSAqIHggLSAxLjYxNjg2NjcgKiB5IC0gMC40OTA2MTQ2ICogeiksXG4gICAgICBscmdiMnJnYigtMC45Nzg3Njg0ICogeCArIDEuOTE2MTQxNSAqIHkgKyAwLjAzMzQ1NDAgKiB6KSxcbiAgICAgIGxyZ2IycmdiKCAwLjA3MTk0NTMgKiB4IC0gMC4yMjg5OTE0ICogeSArIDEuNDA1MjQyNyAqIHopLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiB4eXoybGFiKHQpIHtcbiAgcmV0dXJuIHQgPiB0MyA/IE1hdGgucG93KHQsIDEgLyAzKSA6IHQgLyB0MiArIHQwO1xufVxuXG5mdW5jdGlvbiBsYWIyeHl6KHQpIHtcbiAgcmV0dXJuIHQgPiB0MSA/IHQgKiB0ICogdCA6IHQyICogKHQgLSB0MCk7XG59XG5cbmZ1bmN0aW9uIGxyZ2IycmdiKHgpIHtcbiAgcmV0dXJuIDI1NSAqICh4IDw9IDAuMDAzMTMwOCA/IDEyLjkyICogeCA6IDEuMDU1ICogTWF0aC5wb3coeCwgMSAvIDIuNCkgLSAwLjA1NSk7XG59XG5cbmZ1bmN0aW9uIHJnYjJscmdiKHgpIHtcbiAgcmV0dXJuICh4IC89IDI1NSkgPD0gMC4wNDA0NSA/IHggLyAxMi45MiA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG59XG5cbmZ1bmN0aW9uIGhjbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIG5ldyBIY2woby5oLCBvLmMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIExhYikpIG8gPSBsYWJDb252ZXJ0KG8pO1xuICBpZiAoby5hID09PSAwICYmIG8uYiA9PT0gMCkgcmV0dXJuIG5ldyBIY2woTmFOLCAwLCBvLmwsIG8ub3BhY2l0eSk7XG4gIHZhciBoID0gTWF0aC5hdGFuMihvLmIsIG8uYSkgKiByYWQyZGVnO1xuICByZXR1cm4gbmV3IEhjbChoIDwgMCA/IGggKyAzNjAgOiBoLCBNYXRoLnNxcnQoby5hICogby5hICsgby5iICogby5iKSwgby5sLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGNoKGwsIGMsIGgsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGwpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQoaCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLmMgPSArYztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSGNsLCBoY2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgKyBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBsYWJDb252ZXJ0KHRoaXMpLnJnYigpO1xuICB9XG59KSk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmVcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYiwgZGFya2VyLCBicmlnaHRlcn0gZnJvbSBcIi4vY29sb3JcIjtcbmltcG9ydCB7ZGVnMnJhZCwgcmFkMmRlZ30gZnJvbSBcIi4vbWF0aFwiO1xuXG52YXIgQSA9IC0wLjE0ODYxLFxuICAgIEIgPSArMS43ODI3NyxcbiAgICBDID0gLTAuMjkyMjcsXG4gICAgRCA9IC0wLjkwNjQ5LFxuICAgIEUgPSArMS45NzI5NCxcbiAgICBFRCA9IEUgKiBELFxuICAgIEVCID0gRSAqIEIsXG4gICAgQkNfREEgPSBCICogQyAtIEQgKiBBO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXhDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBDdWJlaGVsaXgpIHJldHVybiBuZXcgQ3ViZWhlbGl4KG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIGwgPSAoQkNfREEgKiBiICsgRUQgKiByIC0gRUIgKiBnKSAvIChCQ19EQSArIEVEIC0gRUIpLFxuICAgICAgYmwgPSBiIC0gbCxcbiAgICAgIGsgPSAoRSAqIChnIC0gbCkgLSBDICogYmwpIC8gRCxcbiAgICAgIHMgPSBNYXRoLnNxcnQoayAqIGsgKyBibCAqIGJsKSAvIChFICogbCAqICgxIC0gbCkpLCAvLyBOYU4gaWYgbD0wIG9yIGw9MVxuICAgICAgaCA9IHMgPyBNYXRoLmF0YW4yKGssIGJsKSAqIHJhZDJkZWcgLSAxMjAgOiBOYU47XG4gIHJldHVybiBuZXcgQ3ViZWhlbGl4KGggPCAwID8gaCArIDM2MCA6IGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY3ViZWhlbGl4Q29udmVydChoKSA6IG5ldyBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShDdWJlaGVsaXgsIGN1YmVoZWxpeCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IGlzTmFOKHRoaXMuaCkgPyAwIDogKHRoaXMuaCArIDEyMCkgKiBkZWcycmFkLFxuICAgICAgICBsID0gK3RoaXMubCxcbiAgICAgICAgYSA9IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zICogbCAqICgxIC0gbCksXG4gICAgICAgIGNvc2ggPSBNYXRoLmNvcyhoKSxcbiAgICAgICAgc2luaCA9IE1hdGguc2luKGgpO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgMjU1ICogKGwgKyBhICogKEEgKiBjb3NoICsgQiAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChDICogY29zaCArIEQgKiBzaW5oKSksXG4gICAgICAyNTUgKiAobCArIGEgKiAoRSAqIGNvc2gpKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmZ1bmN0aW9uIGxpbmVhcihhLCBkKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKyB0ICogZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXhwb25lbnRpYWwoYSwgYiwgeSkge1xuICByZXR1cm4gYSA9IE1hdGgucG93KGEsIHkpLCBiID0gTWF0aC5wb3coYiwgeSkgLSBhLCB5ID0gMSAvIHksIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coYSArIHQgKiBiLCB5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh1ZShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQgPiAxODAgfHwgZCA8IC0xODAgPyBkIC0gMzYwICogTWF0aC5yb3VuZChkIC8gMzYwKSA6IGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnYW1tYSh5KSB7XG4gIHJldHVybiAoeSA9ICt5KSA9PT0gMSA/IG5vZ2FtbWEgOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIgLSBhID8gZXhwb25lbnRpYWwoYSwgYiwgeSkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9nYW1tYShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG4iLCJpbXBvcnQge3JnYiBhcyBjb2xvclJnYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgYmFzaXMgZnJvbSBcIi4vYmFzaXNcIjtcbmltcG9ydCBiYXNpc0Nsb3NlZCBmcm9tIFwiLi9iYXNpc0Nsb3NlZFwiO1xuaW1wb3J0IG5vZ2FtbWEsIHtnYW1tYX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHJnYkdhbW1hKHkpIHtcbiAgdmFyIGNvbG9yID0gZ2FtbWEoeSk7XG5cbiAgZnVuY3Rpb24gcmdiKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgciA9IGNvbG9yKChzdGFydCA9IGNvbG9yUmdiKHN0YXJ0KSkuciwgKGVuZCA9IGNvbG9yUmdiKGVuZCkpLnIpLFxuICAgICAgICBnID0gY29sb3Ioc3RhcnQuZywgZW5kLmcpLFxuICAgICAgICBiID0gY29sb3Ioc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LnIgPSByKHQpO1xuICAgICAgc3RhcnQuZyA9IGcodCk7XG4gICAgICBzdGFydC5iID0gYih0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG5cbiAgcmdiLmdhbW1hID0gcmdiR2FtbWE7XG5cbiAgcmV0dXJuIHJnYjtcbn0pKDEpO1xuXG5mdW5jdGlvbiByZ2JTcGxpbmUoc3BsaW5lKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICB2YXIgbiA9IGNvbG9ycy5sZW5ndGgsXG4gICAgICAgIHIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGcgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGksIGNvbG9yO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNvbG9yID0gY29sb3JSZ2IoY29sb3JzW2ldKTtcbiAgICAgIHJbaV0gPSBjb2xvci5yIHx8IDA7XG4gICAgICBnW2ldID0gY29sb3IuZyB8fCAwO1xuICAgICAgYltpXSA9IGNvbG9yLmIgfHwgMDtcbiAgICB9XG4gICAgciA9IHNwbGluZShyKTtcbiAgICBnID0gc3BsaW5lKGcpO1xuICAgIGIgPSBzcGxpbmUoYik7XG4gICAgY29sb3Iub3BhY2l0eSA9IDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGNvbG9yLnIgPSByKHQpO1xuICAgICAgY29sb3IuZyA9IGcodCk7XG4gICAgICBjb2xvci5iID0gYih0KTtcbiAgICAgIHJldHVybiBjb2xvciArIFwiXCI7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciByZ2JCYXNpcyA9IHJnYlNwbGluZShiYXNpcyk7XG5leHBvcnQgdmFyIHJnYkJhc2lzQ2xvc2VkID0gcmdiU3BsaW5lKGJhc2lzQ2xvc2VkKTtcbiIsImV4cG9ydCBmdW5jdGlvbiBiYXNpcyh0MSwgdjAsIHYxLCB2MiwgdjMpIHtcbiAgdmFyIHQyID0gdDEgKiB0MSwgdDMgPSB0MiAqIHQxO1xuICByZXR1cm4gKCgxIC0gMyAqIHQxICsgMyAqIHQyIC0gdDMpICogdjBcbiAgICAgICsgKDQgLSA2ICogdDIgKyAzICogdDMpICogdjFcbiAgICAgICsgKDEgKyAzICogdDEgKyAzICogdDIgLSAzICogdDMpICogdjJcbiAgICAgICsgdDMgKiB2MykgLyA2O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IHQgPD0gMCA/ICh0ID0gMCkgOiB0ID49IDEgPyAodCA9IDEsIG4gLSAxKSA6IE1hdGguZmxvb3IodCAqIG4pLFxuICAgICAgICB2MSA9IHZhbHVlc1tpXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbaSArIDFdLFxuICAgICAgICB2MCA9IGkgPiAwID8gdmFsdWVzW2kgLSAxXSA6IDIgKiB2MSAtIHYyLFxuICAgICAgICB2MyA9IGkgPCBuIC0gMSA/IHZhbHVlc1tpICsgMl0gOiAyICogdjIgLSB2MTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgYiAqIHQ7XG4gIH07XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG52YXIgcmVBID0gL1stK10/KD86XFxkK1xcLj9cXGQqfFxcLj9cXGQrKSg/OltlRV1bLStdP1xcZCspPy9nLFxuICAgIHJlQiA9IG5ldyBSZWdFeHAocmVBLnNvdXJjZSwgXCJnXCIpO1xuXG5mdW5jdGlvbiB6ZXJvKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbmUoYikge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBiKHQpICsgXCJcIjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYmkgPSByZUEubGFzdEluZGV4ID0gcmVCLmxhc3RJbmRleCA9IDAsIC8vIHNjYW4gaW5kZXggZm9yIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGFtLCAvLyBjdXJyZW50IG1hdGNoIGluIGFcbiAgICAgIGJtLCAvLyBjdXJyZW50IG1hdGNoIGluIGJcbiAgICAgIGJzLCAvLyBzdHJpbmcgcHJlY2VkaW5nIGN1cnJlbnQgbnVtYmVyIGluIGIsIGlmIGFueVxuICAgICAgaSA9IC0xLCAvLyBpbmRleCBpbiBzXG4gICAgICBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuXG4gIC8vIENvZXJjZSBpbnB1dHMgdG8gc3RyaW5ncy5cbiAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XG5cbiAgLy8gSW50ZXJwb2xhdGUgcGFpcnMgb2YgbnVtYmVycyBpbiBhICYgYi5cbiAgd2hpbGUgKChhbSA9IHJlQS5leGVjKGEpKVxuICAgICAgJiYgKGJtID0gcmVCLmV4ZWMoYikpKSB7XG4gICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7IC8vIGEgc3RyaW5nIHByZWNlZGVzIHRoZSBuZXh0IG51bWJlciBpbiBiXG4gICAgICBicyA9IGIuc2xpY2UoYmksIGJzKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG4gICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7IC8vIG51bWJlcnMgaW4gYSAmIGIgbWF0Y2hcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBibTtcbiAgICB9IGVsc2UgeyAvLyBpbnRlcnBvbGF0ZSBub24tbWF0Y2hpbmcgbnVtYmVyc1xuICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgIHEucHVzaCh7aTogaSwgeDogbnVtYmVyKGFtLCBibSl9KTtcbiAgICB9XG4gICAgYmkgPSByZUIubGFzdEluZGV4O1xuICB9XG5cbiAgLy8gQWRkIHJlbWFpbnMgb2YgYi5cbiAgaWYgKGJpIDwgYi5sZW5ndGgpIHtcbiAgICBicyA9IGIuc2xpY2UoYmkpO1xuICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gIH1cblxuICAvLyBTcGVjaWFsIG9wdGltaXphdGlvbiBmb3Igb25seSBhIHNpbmdsZSBtYXRjaC5cbiAgLy8gT3RoZXJ3aXNlLCBpbnRlcnBvbGF0ZSBlYWNoIG9mIHRoZSBudW1iZXJzIGFuZCByZWpvaW4gdGhlIHN0cmluZy5cbiAgcmV0dXJuIHMubGVuZ3RoIDwgMiA/IChxWzBdXG4gICAgICA/IG9uZShxWzBdLngpXG4gICAgICA6IHplcm8oYikpXG4gICAgICA6IChiID0gcS5sZW5ndGgsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgICAgIH0pO1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgcmdiIGZyb20gXCIuL3JnYlwiO1xuaW1wb3J0IGFycmF5IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgZGF0ZSBmcm9tIFwiLi9kYXRlXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuaW1wb3J0IG9iamVjdCBmcm9tIFwiLi9vYmplY3RcIjtcbmltcG9ydCBzdHJpbmcgZnJvbSBcIi4vc3RyaW5nXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgdCA9IHR5cGVvZiBiLCBjO1xuICByZXR1cm4gYiA9PSBudWxsIHx8IHQgPT09IFwiYm9vbGVhblwiID8gY29uc3RhbnQoYilcbiAgICAgIDogKHQgPT09IFwibnVtYmVyXCIgPyBudW1iZXJcbiAgICAgIDogdCA9PT0gXCJzdHJpbmdcIiA/ICgoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgcmdiKSA6IHN0cmluZylcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gcmdiXG4gICAgICA6IGIgaW5zdGFuY2VvZiBEYXRlID8gZGF0ZVxuICAgICAgOiBBcnJheS5pc0FycmF5KGIpID8gYXJyYXlcbiAgICAgIDogdHlwZW9mIGIudmFsdWVPZiAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiLnRvU3RyaW5nICE9PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4oYikgPyBvYmplY3RcbiAgICAgIDogbnVtYmVyKShhLCBiKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZTtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGQuc2V0VGltZShhICsgYiAqIHQpLCBkO1xuICB9O1xufVxuIiwiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIG5iID0gYiA/IGIubGVuZ3RoIDogMCxcbiAgICAgIG5hID0gYSA/IE1hdGgubWluKG5iLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgeCA9IG5ldyBBcnJheShuYSksXG4gICAgICBjID0gbmV3IEFycmF5KG5iKSxcbiAgICAgIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIHhbaV0gPSB2YWx1ZShhW2ldLCBiW2ldKTtcbiAgZm9yICg7IGkgPCBuYjsgKytpKSBjW2ldID0gYltpXTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSBjW2ldID0geFtpXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0ge30sXG4gICAgICBjID0ge30sXG4gICAgICBrO1xuXG4gIGlmIChhID09PSBudWxsIHx8IHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSBhID0ge307XG4gIGlmIChiID09PSBudWxsIHx8IHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSBiID0ge307XG5cbiAgZm9yIChrIGluIGIpIHtcbiAgICBpZiAoayBpbiBhKSB7XG4gICAgICBpW2tdID0gdmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChhICsgYiAqIHQpO1xuICB9O1xufVxuIiwidmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0ge1xuICB0cmFuc2xhdGVYOiAwLFxuICB0cmFuc2xhdGVZOiAwLFxuICByb3RhdGU6IDAsXG4gIHNrZXdYOiAwLFxuICBzY2FsZVg6IDEsXG4gIHNjYWxlWTogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgc2NhbGVYLCBzY2FsZVksIHNrZXdYO1xuICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcbiAgaWYgKHNjYWxlWSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKSkgYyAvPSBzY2FsZVksIGQgLz0gc2NhbGVZLCBza2V3WCAvPSBzY2FsZVk7XG4gIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlWDogZSxcbiAgICB0cmFuc2xhdGVZOiBmLFxuICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXG4gICAgc2tld1g6IE1hdGguYXRhbihza2V3WCkgKiBkZWdyZWVzLFxuICAgIHNjYWxlWDogc2NhbGVYLFxuICAgIHNjYWxlWTogc2NhbGVZXG4gIH07XG59XG4iLCJpbXBvcnQgZGVjb21wb3NlLCB7aWRlbnRpdHl9IGZyb20gXCIuL2RlY29tcG9zZVwiO1xuXG52YXIgY3NzTm9kZSxcbiAgICBjc3NSb290LFxuICAgIGNzc1ZpZXcsXG4gICAgc3ZnTm9kZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gXCJub25lXCIpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFjc3NOb2RlKSBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKSwgY3NzUm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgY3NzVmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBjc3NOb2RlLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlO1xuICB2YWx1ZSA9IGNzc1ZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShjc3NSb290LmFwcGVuZENoaWxkKGNzc05vZGUpLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKFwidHJhbnNmb3JtXCIpO1xuICBjc3NSb290LnJlbW92ZUNoaWxkKGNzc05vZGUpO1xuICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDcsIC0xKS5zcGxpdChcIixcIik7XG4gIHJldHVybiBkZWNvbXBvc2UoK3ZhbHVlWzBdLCArdmFsdWVbMV0sICt2YWx1ZVsyXSwgK3ZhbHVlWzNdLCArdmFsdWVbNF0sICt2YWx1ZVs1XSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN2Zyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIXN2Z05vZGUpIHN2Z05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XG4gIHN2Z05vZGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHZhbHVlKTtcbiAgaWYgKCEodmFsdWUgPSBzdmdOb2RlLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi4vbnVtYmVyXCI7XG5pbXBvcnQge3BhcnNlQ3NzLCBwYXJzZVN2Z30gZnJvbSBcIi4vcGFyc2VcIjtcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2UsIHB4Q29tbWEsIHB4UGFyZW4sIGRlZ1BhcmVuKSB7XG5cbiAgZnVuY3Rpb24gcG9wKHMpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIgXCIgOiBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKFwidHJhbnNsYXRlKFwiLCBudWxsLCBweENvbW1hLCBudWxsLCBweFBhcmVuKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgfHwgeWIpIHtcbiAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHhiICsgcHhDb21tYSArIHliICsgcHhQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRlKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgaWYgKGEgLSBiID4gMTgwKSBiICs9IDM2MDsgZWxzZSBpZiAoYiAtIGEgPiAxODApIGEgKz0gMzYwOyAvLyBzaG9ydGVzdCBwYXRoXG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNrZXdYKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgIT09IDEgfHwgeWIgIT09IDEpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcbiAgICBhID0gcGFyc2UoYSksIGIgPSBwYXJzZShiKTtcbiAgICB0cmFuc2xhdGUoYS50cmFuc2xhdGVYLCBhLnRyYW5zbGF0ZVksIGIudHJhbnNsYXRlWCwgYi50cmFuc2xhdGVZLCBzLCBxKTtcbiAgICByb3RhdGUoYS5yb3RhdGUsIGIucm90YXRlLCBzLCBxKTtcbiAgICBza2V3WChhLnNrZXdYLCBiLnNrZXdYLCBzLCBxKTtcbiAgICBzY2FsZShhLnNjYWxlWCwgYS5zY2FsZVksIGIuc2NhbGVYLCBiLnNjYWxlWSwgcywgcSk7XG4gICAgYSA9IGIgPSBudWxsOyAvLyBnY1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gcS5sZW5ndGgsIG87XG4gICAgICB3aGlsZSAoKytpIDwgbikgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtQ3NzID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VDc3MsIFwicHgsIFwiLCBcInB4KVwiLCBcImRlZylcIik7XG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcbiIsInZhciByaG8gPSBNYXRoLlNRUlQyLFxuICAgIHJobzIgPSAyLFxuICAgIHJobzQgPSA0LFxuICAgIGVwc2lsb24yID0gMWUtMTI7XG5cbmZ1bmN0aW9uIGNvc2goeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpICsgMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gc2luaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgLSAxIC8geCkgLyAyO1xufVxuXG5mdW5jdGlvbiB0YW5oKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKDIgKiB4KSkgLSAxKSAvICh4ICsgMSk7XG59XG5cbi8vIHAwID0gW3V4MCwgdXkwLCB3MF1cbi8vIHAxID0gW3V4MSwgdXkxLCB3MV1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHAwLCBwMSkge1xuICB2YXIgdXgwID0gcDBbMF0sIHV5MCA9IHAwWzFdLCB3MCA9IHAwWzJdLFxuICAgICAgdXgxID0gcDFbMF0sIHV5MSA9IHAxWzFdLCB3MSA9IHAxWzJdLFxuICAgICAgZHggPSB1eDEgLSB1eDAsXG4gICAgICBkeSA9IHV5MSAtIHV5MCxcbiAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICBpLFxuICAgICAgUztcblxuICAvLyBTcGVjaWFsIGNhc2UgZm9yIHUwIOKJhSB1MS5cbiAgaWYgKGQyIDwgZXBzaWxvbjIpIHtcbiAgICBTID0gTWF0aC5sb2codzEgLyB3MCkgLyByaG87XG4gICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHV4MCArIHQgKiBkeCxcbiAgICAgICAgdXkwICsgdCAqIGR5LFxuICAgICAgICB3MCAqIE1hdGguZXhwKHJobyAqIHQgKiBTKVxuICAgICAgXTtcbiAgICB9XG4gIH1cblxuICAvLyBHZW5lcmFsIGNhc2UuXG4gIGVsc2Uge1xuICAgIHZhciBkMSA9IE1hdGguc3FydChkMiksXG4gICAgICAgIGIwID0gKHcxICogdzEgLSB3MCAqIHcwICsgcmhvNCAqIGQyKSAvICgyICogdzAgKiByaG8yICogZDEpLFxuICAgICAgICBiMSA9ICh3MSAqIHcxIC0gdzAgKiB3MCAtIHJobzQgKiBkMikgLyAoMiAqIHcxICogcmhvMiAqIGQxKSxcbiAgICAgICAgcjAgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjAgKiBiMCArIDEpIC0gYjApLFxuICAgICAgICByMSA9IE1hdGgubG9nKE1hdGguc3FydChiMSAqIGIxICsgMSkgLSBiMSk7XG4gICAgUyA9IChyMSAtIHIwKSAvIHJobztcbiAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIHMgPSB0ICogUyxcbiAgICAgICAgICBjb3NocjAgPSBjb3NoKHIwKSxcbiAgICAgICAgICB1ID0gdzAgLyAocmhvMiAqIGQxKSAqIChjb3NocjAgKiB0YW5oKHJobyAqIHMgKyByMCkgLSBzaW5oKHIwKSk7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB1eDAgKyB1ICogZHgsXG4gICAgICAgIHV5MCArIHUgKiBkeSxcbiAgICAgICAgdzAgKiBjb3NocjAgLyBjb3NoKHJobyAqIHMgKyByMClcbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgaS5kdXJhdGlvbiA9IFMgKiAxMDAwO1xuXG4gIHJldHVybiBpO1xufVxuIiwiaW1wb3J0IHtjdWJlaGVsaXggYXMgY29sb3JDdWJlaGVsaXh9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGNvbG9yLCB7aHVlfSBmcm9tIFwiLi9jb2xvclwiO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXgoaHVlKSB7XG4gIHJldHVybiAoZnVuY3Rpb24gY3ViZWhlbGl4R2FtbWEoeSkge1xuICAgIHkgPSAreTtcblxuICAgIGZ1bmN0aW9uIGN1YmVoZWxpeChzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckN1YmVoZWxpeChzdGFydCkpLmgsIChlbmQgPSBjb2xvckN1YmVoZWxpeChlbmQpKS5oKSxcbiAgICAgICAgICBzID0gY29sb3Ioc3RhcnQucywgZW5kLnMpLFxuICAgICAgICAgIGwgPSBjb2xvcihzdGFydC5sLCBlbmQubCksXG4gICAgICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgICBzdGFydC5zID0gcyh0KTtcbiAgICAgICAgc3RhcnQubCA9IGwoTWF0aC5wb3codCwgeSkpO1xuICAgICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY3ViZWhlbGl4LmdhbW1hID0gY3ViZWhlbGl4R2FtbWE7XG5cbiAgICByZXR1cm4gY3ViZWhlbGl4O1xuICB9KSgxKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3ViZWhlbGl4KGh1ZSk7XG5leHBvcnQgdmFyIGN1YmVoZWxpeExvbmcgPSBjdWJlaGVsaXgoY29sb3IpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gK3g7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlIGFzIGludGVycG9sYXRlVmFsdWUsIGludGVycG9sYXRlUm91bmR9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHttYXAsIHNsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG52YXIgdW5pdCA9IFswLCAxXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlaW50ZXJwb2xhdGVMaW5lYXIoYSwgYikge1xuICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICh4IC0gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50KGIpO1xufVxuXG5mdW5jdGlvbiBkZWludGVycG9sYXRlQ2xhbXAoZGVpbnRlcnBvbGF0ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBkID0gZGVpbnRlcnBvbGF0ZShhID0gK2EsIGIgPSArYik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggPD0gYSA/IDAgOiB4ID49IGIgPyAxIDogZCh4KTsgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVpbnRlcnBvbGF0ZUNsYW1wKHJlaW50ZXJwb2xhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgciA9IHJlaW50ZXJwb2xhdGUoYSA9ICthLCBiID0gK2IpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7IHJldHVybiB0IDw9IDAgPyBhIDogdCA+PSAxID8gYiA6IHIodCk7IH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbWFwKGRvbWFpbiwgcmFuZ2UsIGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgaWYgKGQxIDwgZDApIGQwID0gZGVpbnRlcnBvbGF0ZShkMSwgZDApLCByMCA9IHJlaW50ZXJwb2xhdGUocjEsIHIwKTtcbiAgZWxzZSBkMCA9IGRlaW50ZXJwb2xhdGUoZDAsIGQxKSwgcjAgPSByZWludGVycG9sYXRlKHIwLCByMSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG59XG5cbmZ1bmN0aW9uIHBvbHltYXAoZG9tYWluLCByYW5nZSwgZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSkge1xuICB2YXIgaiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxLFxuICAgICAgZCA9IG5ldyBBcnJheShqKSxcbiAgICAgIHIgPSBuZXcgQXJyYXkoaiksXG4gICAgICBpID0gLTE7XG5cbiAgLy8gUmV2ZXJzZSBkZXNjZW5kaW5nIGRvbWFpbnMuXG4gIGlmIChkb21haW5bal0gPCBkb21haW5bMF0pIHtcbiAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxuXG4gIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgZFtpXSA9IGRlaW50ZXJwb2xhdGUoZG9tYWluW2ldLCBkb21haW5baSArIDFdKTtcbiAgICByW2ldID0gcmVpbnRlcnBvbGF0ZShyYW5nZVtpXSwgcmFuZ2VbaSArIDFdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgdmFyIGkgPSBiaXNlY3QoZG9tYWluLCB4LCAxLCBqKSAtIDE7XG4gICAgcmV0dXJuIHJbaV0oZFtpXSh4KSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXRcbiAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgLnJhbmdlKHNvdXJjZS5yYW5nZSgpKVxuICAgICAgLmludGVycG9sYXRlKHNvdXJjZS5pbnRlcnBvbGF0ZSgpKVxuICAgICAgLmNsYW1wKHNvdXJjZS5jbGFtcCgpKTtcbn1cblxuLy8gZGVpbnRlcnBvbGF0ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuLy8gcmVpbnRlcnBvbGF0ZShhLCBiKSh0KSB0YWtlcyBhIHBhcmFtZXRlciB0IGluIFswLDFdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGludW91cyhkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSB7XG4gIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgcmFuZ2UgPSB1bml0LFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVZhbHVlLFxuICAgICAgY2xhbXAgPSBmYWxzZSxcbiAgICAgIHBpZWNld2lzZSxcbiAgICAgIG91dHB1dCxcbiAgICAgIGlucHV0O1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgcGllY2V3aXNlID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSA+IDIgPyBwb2x5bWFwIDogYmltYXA7XG4gICAgb3V0cHV0ID0gaW5wdXQgPSBudWxsO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCAob3V0cHV0ID0gcGllY2V3aXNlKGRvbWFpbiwgcmFuZ2UsIGNsYW1wID8gZGVpbnRlcnBvbGF0ZUNsYW1wKGRlaW50ZXJwb2xhdGUpIDogZGVpbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGUpKSkoK3gpO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiAoaW5wdXQgfHwgKGlucHV0ID0gcGllY2V3aXNlKHJhbmdlLCBkb21haW4sIGRlaW50ZXJwb2xhdGVMaW5lYXIsIGNsYW1wID8gcmVpbnRlcnBvbGF0ZUNsYW1wKHJlaW50ZXJwb2xhdGUpIDogcmVpbnRlcnBvbGF0ZSkpKSgreSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IG1hcC5jYWxsKF8sIG51bWJlciksIHJlc2NhbGUoKSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHJhbmdlID0gc2xpY2UuY2FsbChfKSwgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVJvdW5kLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHJlc2NhbGUoKSkgOiBjbGFtcDtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0ZSA9IF8sIHJlc2NhbGUoKSkgOiBpbnRlcnBvbGF0ZTtcbiAgfTtcblxuICByZXR1cm4gcmVzY2FsZSgpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCIvLyBDb21wdXRlcyB0aGUgZGVjaW1hbCBjb2VmZmljaWVudCBhbmQgZXhwb25lbnQgb2YgdGhlIHNwZWNpZmllZCBudW1iZXIgeCB3aXRoXG4vLyBzaWduaWZpY2FudCBkaWdpdHMgcCwgd2hlcmUgeCBpcyBwb3NpdGl2ZSBhbmQgcCBpcyBpbiBbMSwgMjFdIG9yIHVuZGVmaW5lZC5cbi8vIEZvciBleGFtcGxlLCBmb3JtYXREZWNpbWFsKDEuMjMpIHJldHVybnMgW1wiMTIzXCIsIDBdLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgdmFyIGksIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gIHJldHVybiBbXG4gICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAreC5zbGljZShpICsgMSlcbiAgXTtcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geCA9IGZvcm1hdERlY2ltYWwoTWF0aC5hYnMoeCkpLCB4ID8geFsxXSA6IE5hTjtcbn1cbiIsIi8vIFtbZmlsbF1hbGlnbl1bc2lnbl1bc3ltYm9sXVswXVt3aWR0aF1bLF1bLnByZWNpc2lvbl1bfl1bdHlwZV1cbnZhciByZSA9IC9eKD86KC4pPyhbPD49Xl0pKT8oWytcXC1cXCggXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC5cXGQrKT8ofik/KFthLXolXSk/JC9pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIHJldHVybiBuZXcgRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG59XG5cbmZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUgPSBGb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlOyAvLyBpbnN0YW5jZW9mXG5cbmZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgaWYgKCEobWF0Y2ggPSByZS5leGVjKHNwZWNpZmllcikpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZvcm1hdDogXCIgKyBzcGVjaWZpZXIpO1xuICB2YXIgbWF0Y2g7XG4gIHRoaXMuZmlsbCA9IG1hdGNoWzFdIHx8IFwiIFwiO1xuICB0aGlzLmFsaWduID0gbWF0Y2hbMl0gfHwgXCI+XCI7XG4gIHRoaXMuc2lnbiA9IG1hdGNoWzNdIHx8IFwiLVwiO1xuICB0aGlzLnN5bWJvbCA9IG1hdGNoWzRdIHx8IFwiXCI7XG4gIHRoaXMuemVybyA9ICEhbWF0Y2hbNV07XG4gIHRoaXMud2lkdGggPSBtYXRjaFs2XSAmJiArbWF0Y2hbNl07XG4gIHRoaXMuY29tbWEgPSAhIW1hdGNoWzddO1xuICB0aGlzLnByZWNpc2lvbiA9IG1hdGNoWzhdICYmICttYXRjaFs4XS5zbGljZSgxKTtcbiAgdGhpcy50cmltID0gISFtYXRjaFs5XTtcbiAgdGhpcy50eXBlID0gbWF0Y2hbMTBdIHx8IFwiXCI7XG59XG5cbkZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmlsbFxuICAgICAgKyB0aGlzLmFsaWduXG4gICAgICArIHRoaXMuc2lnblxuICAgICAgKyB0aGlzLnN5bWJvbFxuICAgICAgKyAodGhpcy56ZXJvID8gXCIwXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy53aWR0aCA9PSBudWxsID8gXCJcIiA6IE1hdGgubWF4KDEsIHRoaXMud2lkdGggfCAwKSlcbiAgICAgICsgKHRoaXMuY29tbWEgPyBcIixcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLnByZWNpc2lvbiA9PSBudWxsID8gXCJcIiA6IFwiLlwiICsgTWF0aC5tYXgoMCwgdGhpcy5wcmVjaXNpb24gfCAwKSlcbiAgICAgICsgKHRoaXMudHJpbSA/IFwiflwiIDogXCJcIilcbiAgICAgICsgdGhpcy50eXBlO1xufTtcbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWxcIjtcblxuZXhwb3J0IHZhciBwcmVmaXhFeHBvbmVudDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWwoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdLFxuICAgICAgaSA9IGV4cG9uZW50IC0gKHByZWZpeEV4cG9uZW50ID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQgLyAzKSkpICogMykgKyAxLFxuICAgICAgbiA9IGNvZWZmaWNpZW50Lmxlbmd0aDtcbiAgcmV0dXJuIGkgPT09IG4gPyBjb2VmZmljaWVudFxuICAgICAgOiBpID4gbiA/IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGkgLSBuICsgMSkuam9pbihcIjBcIilcbiAgICAgIDogaSA+IDAgPyBjb2VmZmljaWVudC5zbGljZSgwLCBpKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoaSlcbiAgICAgIDogXCIwLlwiICsgbmV3IEFycmF5KDEgLSBpKS5qb2luKFwiMFwiKSArIGZvcm1hdERlY2ltYWwoeCwgTWF0aC5tYXgoMCwgcCArIGkgLSAxKSlbMF07IC8vIGxlc3MgdGhhbiAxeSFcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWwoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdO1xuICByZXR1cm4gZXhwb25lbnQgPCAwID8gXCIwLlwiICsgbmV3IEFycmF5KC1leHBvbmVudCkuam9pbihcIjBcIikgKyBjb2VmZmljaWVudFxuICAgICAgOiBjb2VmZmljaWVudC5sZW5ndGggPiBleHBvbmVudCArIDEgPyBjb2VmZmljaWVudC5zbGljZSgwLCBleHBvbmVudCArIDEpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShleHBvbmVudCArIDEpXG4gICAgICA6IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGV4cG9uZW50IC0gY29lZmZpY2llbnQubGVuZ3RoICsgMikuam9pbihcIjBcIik7XG59XG4iLCJpbXBvcnQgZm9ybWF0UHJlZml4QXV0byBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvXCI7XG5pbXBvcnQgZm9ybWF0Um91bmRlZCBmcm9tIFwiLi9mb3JtYXRSb3VuZGVkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgXCIlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuICh4ICogMTAwKS50b0ZpeGVkKHApOyB9LFxuICBcImJcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygyKTsgfSxcbiAgXCJjXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggKyBcIlwiOyB9LFxuICBcImRcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxMCk7IH0sXG4gIFwiZVwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvRXhwb25lbnRpYWwocCk7IH0sXG4gIFwiZlwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvRml4ZWQocCk7IH0sXG4gIFwiZ1wiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvUHJlY2lzaW9uKHApOyB9LFxuICBcIm9cIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZyg4KTsgfSxcbiAgXCJwXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIGZvcm1hdFJvdW5kZWQoeCAqIDEwMCwgcCk7IH0sXG4gIFwiclwiOiBmb3JtYXRSb3VuZGVkLFxuICBcInNcIjogZm9ybWF0UHJlZml4QXV0byxcbiAgXCJYXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7IH0sXG4gIFwieFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KTsgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnRcIjtcbmltcG9ydCBmb3JtYXRHcm91cCBmcm9tIFwiLi9mb3JtYXRHcm91cFwiO1xuaW1wb3J0IGZvcm1hdE51bWVyYWxzIGZyb20gXCIuL2Zvcm1hdE51bWVyYWxzXCI7XG5pbXBvcnQgZm9ybWF0U3BlY2lmaWVyIGZyb20gXCIuL2Zvcm1hdFNwZWNpZmllclwiO1xuaW1wb3J0IGZvcm1hdFRyaW0gZnJvbSBcIi4vZm9ybWF0VHJpbVwiO1xuaW1wb3J0IGZvcm1hdFR5cGVzIGZyb20gXCIuL2Zvcm1hdFR5cGVzXCI7XG5pbXBvcnQge3ByZWZpeEV4cG9uZW50fSBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcblxudmFyIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiwrVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obG9jYWxlKSB7XG4gIHZhciBncm91cCA9IGxvY2FsZS5ncm91cGluZyAmJiBsb2NhbGUudGhvdXNhbmRzID8gZm9ybWF0R3JvdXAobG9jYWxlLmdyb3VwaW5nLCBsb2NhbGUudGhvdXNhbmRzKSA6IGlkZW50aXR5LFxuICAgICAgY3VycmVuY3kgPSBsb2NhbGUuY3VycmVuY3ksXG4gICAgICBkZWNpbWFsID0gbG9jYWxlLmRlY2ltYWwsXG4gICAgICBudW1lcmFscyA9IGxvY2FsZS5udW1lcmFscyA/IGZvcm1hdE51bWVyYWxzKGxvY2FsZS5udW1lcmFscykgOiBpZGVudGl0eSxcbiAgICAgIHBlcmNlbnQgPSBsb2NhbGUucGVyY2VudCB8fCBcIiVcIjtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICB2YXIgZmlsbCA9IHNwZWNpZmllci5maWxsLFxuICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICBzeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sLFxuICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICBjb21tYSA9IHNwZWNpZmllci5jb21tYSxcbiAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgdHJpbSA9IHNwZWNpZmllci50cmltLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBUaGUgXCJuXCIgdHlwZSBpcyBhbiBhbGlhcyBmb3IgXCIsZ1wiLlxuICAgIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBUaGUgXCJcIiB0eXBlLCBhbmQgYW55IGludmFsaWQgdHlwZSwgaXMgYW4gYWxpYXMgZm9yIFwiLjEyfmdcIi5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHByZWNpc2lvbiA9PSBudWxsICYmIChwcmVjaXNpb24gPSAxMiksIHRyaW0gPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgIHZhciBwcmVmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lbMF0gOiBzeW1ib2wgPT09IFwiI1wiICYmIC9bYm94WF0vLnRlc3QodHlwZSkgPyBcIjBcIiArIHR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCIsXG4gICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVsxXSA6IC9bJXBdLy50ZXN0KHR5cGUpID8gcGVyY2VudCA6IFwiXCI7XG5cbiAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgIC8vIENhbiB0aGlzIHR5cGUgZ2VuZXJhdGUgZXhwb25lbnRpYWwgbm90YXRpb24/XG4gICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgbWF5YmVTdWZmaXggPSAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBwcmVjaXNpb24gaWYgbm90IHNwZWNpZmllZCxcbiAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAvLyBGb3IgZml4ZWQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFswLCAyMF0uXG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyA2XG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFyIHZhbHVlTmVnYXRpdmUgPSB2YWx1ZSA8IDA7XG4gICAgICAgIHZhbHVlID0gZm9ybWF0VHlwZShNYXRoLmFicyh2YWx1ZSksIHByZWNpc2lvbik7XG5cbiAgICAgICAgLy8gVHJpbSBpbnNpZ25pZmljYW50IHplcm9zLlxuICAgICAgICBpZiAodHJpbSkgdmFsdWUgPSBmb3JtYXRUcmltKHZhbHVlKTtcblxuICAgICAgICAvLyBJZiBhIG5lZ2F0aXZlIHZhbHVlIHJvdW5kcyB0byB6ZXJvIGR1cmluZyBmb3JtYXR0aW5nLCB0cmVhdCBhcyBwb3NpdGl2ZS5cbiAgICAgICAgaWYgKHZhbHVlTmVnYXRpdmUgJiYgK3ZhbHVlID09PSAwKSB2YWx1ZU5lZ2F0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgICAgIHZhbHVlUHJlZml4ID0gKHZhbHVlTmVnYXRpdmUgPyAoc2lnbiA9PT0gXCIoXCIgPyBzaWduIDogXCItXCIpIDogc2lnbiA9PT0gXCItXCIgfHwgc2lnbiA9PT0gXCIoXCIgPyBcIlwiIDogc2lnbikgKyB2YWx1ZVByZWZpeDtcbiAgICAgICAgdmFsdWVTdWZmaXggPSAodHlwZSA9PT0gXCJzXCIgPyBwcmVmaXhlc1s4ICsgcHJlZml4RXhwb25lbnQgLyAzXSA6IFwiXCIpICsgdmFsdWVTdWZmaXggKyAodmFsdWVOZWdhdGl2ZSAmJiBzaWduID09PSBcIihcIiA/IFwiKVwiIDogXCJcIik7XG5cbiAgICAgICAgLy8gQnJlYWsgdGhlIGZvcm1hdHRlZCB2YWx1ZSBpbnRvIHRoZSBpbnRlZ2VyIOKAnHZhbHVl4oCdIHBhcnQgdGhhdCBjYW4gYmVcbiAgICAgICAgLy8gZ3JvdXBlZCwgYW5kIGZyYWN0aW9uYWwgb3IgZXhwb25lbnRpYWwg4oCcc3VmZml44oCdIHBhcnQgdGhhdCBpcyBub3QuXG4gICAgICAgIGlmIChtYXliZVN1ZmZpeCkge1xuICAgICAgICAgIGkgPSAtMSwgbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgaWYgKGMgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpLCA0OCA+IGMgfHwgYyA+IDU3KSB7XG4gICAgICAgICAgICAgIHZhbHVlU3VmZml4ID0gKGMgPT09IDQ2ID8gZGVjaW1hbCArIHZhbHVlLnNsaWNlKGkgKyAxKSA6IHZhbHVlLnNsaWNlKGkpKSArIHZhbHVlU3VmZml4O1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIG5vdCBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBiZWZvcmUgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiAhemVybykgdmFsdWUgPSBncm91cCh2YWx1ZSwgSW5maW5pdHkpO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBwYWRkaW5nLlxuICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlUHJlZml4Lmxlbmd0aCArIHZhbHVlLmxlbmd0aCArIHZhbHVlU3VmZml4Lmxlbmd0aCxcbiAgICAgICAgICBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGFmdGVyIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgemVybykgdmFsdWUgPSBncm91cChwYWRkaW5nICsgdmFsdWUsIHBhZGRpbmcubGVuZ3RoID8gd2lkdGggLSB2YWx1ZVN1ZmZpeC5sZW5ndGggOiBJbmZpbml0eSksIHBhZGRpbmcgPSBcIlwiO1xuXG4gICAgICAvLyBSZWNvbnN0cnVjdCB0aGUgZmluYWwgb3V0cHV0IGJhc2VkIG9uIHRoZSBkZXNpcmVkIGFsaWdubWVudC5cbiAgICAgIHN3aXRjaCAoYWxpZ24pIHtcbiAgICAgICAgY2FzZSBcIjxcIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nOyBicmVhaztcbiAgICAgICAgY2FzZSBcIj1cIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHBhZGRpbmcgKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgICAgY2FzZSBcIl5cIjogdmFsdWUgPSBwYWRkaW5nLnNsaWNlKDAsIGxlbmd0aCA9IHBhZGRpbmcubGVuZ3RoID4+IDEpICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZy5zbGljZShsZW5ndGgpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogdmFsdWUgPSBwYWRkaW5nICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bWVyYWxzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmb3JtYXQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzcGVjaWZpZXIgKyBcIlwiO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9ybWF0O1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpIHtcbiAgICB2YXIgZiA9IG5ld0Zvcm1hdCgoc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciksIHNwZWNpZmllci50eXBlID0gXCJmXCIsIHNwZWNpZmllcikpLFxuICAgICAgICBlID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMsXG4gICAgICAgIGsgPSBNYXRoLnBvdygxMCwgLWUpLFxuICAgICAgICBwcmVmaXggPSBwcmVmaXhlc1s4ICsgZSAvIDNdO1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGYoayAqIHZhbHVlKSArIHByZWZpeDtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IG5ld0Zvcm1hdCxcbiAgICBmb3JtYXRQcmVmaXg6IGZvcm1hdFByZWZpeFxuICB9O1xufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGVcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgZm9ybWF0O1xuZXhwb3J0IHZhciBmb3JtYXRQcmVmaXg7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICBkZWNpbWFsOiBcIi5cIixcbiAgdGhvdXNhbmRzOiBcIixcIixcbiAgZ3JvdXBpbmc6IFszXSxcbiAgY3VycmVuY3k6IFtcIiRcIiwgXCJcIl1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICBmb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICBmb3JtYXRQcmVmaXggPSBsb2NhbGUuZm9ybWF0UHJlZml4O1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZ3JvdXBpbmcsIHRob3VzYW5kcykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIHdpZHRoKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgIHQgPSBbXSxcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIGcgPSBncm91cGluZ1swXSxcbiAgICAgICAgbGVuZ3RoID0gMDtcblxuICAgIHdoaWxlIChpID4gMCAmJiBnID4gMCkge1xuICAgICAgaWYgKGxlbmd0aCArIGcgKyAxID4gd2lkdGgpIGcgPSBNYXRoLm1heCgxLCB3aWR0aCAtIGxlbmd0aCk7XG4gICAgICB0LnB1c2godmFsdWUuc3Vic3RyaW5nKGkgLT0gZywgaSArIGcpKTtcbiAgICAgIGlmICgobGVuZ3RoICs9IGcgKyAxKSA+IHdpZHRoKSBicmVhaztcbiAgICAgIGcgPSBncm91cGluZ1tqID0gKGogKyAxKSAlIGdyb3VwaW5nLmxlbmd0aF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHQucmV2ZXJzZSgpLmpvaW4odGhvdXNhbmRzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG51bWVyYWxzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bMC05XS9nLCBmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gbnVtZXJhbHNbK2ldO1xuICAgIH0pO1xuICB9O1xufVxuIiwiLy8gVHJpbXMgaW5zaWduaWZpY2FudCB6ZXJvcywgZS5nLiwgcmVwbGFjZXMgMS4yMDAwayB3aXRoIDEuMmsuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzKSB7XG4gIG91dDogZm9yICh2YXIgbiA9IHMubGVuZ3RoLCBpID0gMSwgaTAgPSAtMSwgaTE7IGkgPCBuOyArK2kpIHtcbiAgICBzd2l0Y2ggKHNbaV0pIHtcbiAgICAgIGNhc2UgXCIuXCI6IGkwID0gaTEgPSBpOyBicmVhaztcbiAgICAgIGNhc2UgXCIwXCI6IGlmIChpMCA9PT0gMCkgaTAgPSBpOyBpMSA9IGk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogaWYgKGkwID4gMCkgeyBpZiAoIStzW2ldKSBicmVhayBvdXQ7IGkwID0gMDsgfSBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cbiIsImltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXQsIGZvcm1hdFByZWZpeCwgZm9ybWF0U3BlY2lmaWVyLCBwcmVjaXNpb25GaXhlZCwgcHJlY2lzaW9uUHJlZml4LCBwcmVjaXNpb25Sb3VuZH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkb21haW4sIGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgdmFyIHN0YXJ0ID0gZG9tYWluWzBdLFxuICAgICAgc3RvcCA9IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV0sXG4gICAgICBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50KSxcbiAgICAgIHByZWNpc2lvbjtcbiAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgc3dpdGNoIChzcGVjaWZpZXIudHlwZSkge1xuICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgICByZXR1cm4gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwiXCI6XG4gICAgY2FzZSBcImVcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcInJcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUm91bmQoc3RlcCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSkpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCJlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmXCI6XG4gICAgY2FzZSBcIiVcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQoc3BlY2lmaWVyKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCB2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIG1heCkge1xuICBzdGVwID0gTWF0aC5hYnMoc3RlcCksIG1heCA9IE1hdGguYWJzKG1heCkgLSBzdGVwO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwb25lbnQobWF4KSAtIGV4cG9uZW50KHN0ZXApKSArIDE7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJpbXBvcnQge3RpY2tzLCB0aWNrSW5jcmVtZW50fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIgYXMgcmVpbnRlcnBvbGF0ZX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge2RlZmF1bHQgYXMgY29udGludW91cywgY29weSwgZGVpbnRlcnBvbGF0ZUxpbmVhciBhcyBkZWludGVycG9sYXRlfSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQgdGlja0Zvcm1hdCBmcm9tIFwiLi90aWNrRm9ybWF0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXJpc2goc2NhbGUpIHtcbiAgdmFyIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCk7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkb21haW4oKSwgY291bnQsIHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG5cbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICBpMCA9IDAsXG4gICAgICAgIGkxID0gZC5sZW5ndGggLSAxLFxuICAgICAgICBzdGFydCA9IGRbaTBdLFxuICAgICAgICBzdG9wID0gZFtpMV0sXG4gICAgICAgIHN0ZXA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG5cbiAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBkW2kxXSA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIGRbaTBdID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBkb21haW4oZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGluZWFyKCkge1xuICB2YXIgc2NhbGUgPSBjb250aW51b3VzKGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwidmFyIHQwID0gbmV3IERhdGUsXG4gICAgdDEgPSBuZXcgRGF0ZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbmV3SW50ZXJ2YWwoZmxvb3JpLCBvZmZzZXRpLCBjb3VudCwgZmllbGQpIHtcblxuICBmdW5jdGlvbiBpbnRlcnZhbChkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoK2RhdGUpKSwgZGF0ZTtcbiAgfVxuXG4gIGludGVydmFsLmZsb29yID0gaW50ZXJ2YWw7XG5cbiAgaW50ZXJ2YWwuY2VpbCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZShkYXRlIC0gMSkpLCBvZmZzZXRpKGRhdGUsIDEpLCBmbG9vcmkoZGF0ZSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucm91bmQgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgdmFyIGQwID0gaW50ZXJ2YWwoZGF0ZSksXG4gICAgICAgIGQxID0gaW50ZXJ2YWwuY2VpbChkYXRlKTtcbiAgICByZXR1cm4gZGF0ZSAtIGQwIDwgZDEgLSBkYXRlID8gZDAgOiBkMTtcbiAgfTtcblxuICBpbnRlcnZhbC5vZmZzZXQgPSBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgcmV0dXJuIG9mZnNldGkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSwgc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICB2YXIgcmFuZ2UgPSBbXSwgcHJldmlvdXM7XG4gICAgc3RhcnQgPSBpbnRlcnZhbC5jZWlsKHN0YXJ0KTtcbiAgICBzdGVwID0gc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgaWYgKCEoc3RhcnQgPCBzdG9wKSB8fCAhKHN0ZXAgPiAwKSkgcmV0dXJuIHJhbmdlOyAvLyBhbHNvIGhhbmRsZXMgSW52YWxpZCBEYXRlXG4gICAgZG8gcmFuZ2UucHVzaChwcmV2aW91cyA9IG5ldyBEYXRlKCtzdGFydCkpLCBvZmZzZXRpKHN0YXJ0LCBzdGVwKSwgZmxvb3JpKHN0YXJ0KTtcbiAgICB3aGlsZSAocHJldmlvdXMgPCBzdGFydCAmJiBzdGFydCA8IHN0b3ApO1xuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICBpbnRlcnZhbC5maWx0ZXIgPSBmdW5jdGlvbih0ZXN0KSB7XG4gICAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHdoaWxlIChmbG9vcmkoZGF0ZSksICF0ZXN0KGRhdGUpKSBkYXRlLnNldFRpbWUoZGF0ZSAtIDEpO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHtcbiAgICAgICAgaWYgKHN0ZXAgPCAwKSB3aGlsZSAoKytzdGVwIDw9IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCAtMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH0gZWxzZSB3aGlsZSAoLS1zdGVwID49IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCArMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBpZiAoY291bnQpIHtcbiAgICBpbnRlcnZhbC5jb3VudCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHQwLnNldFRpbWUoK3N0YXJ0KSwgdDEuc2V0VGltZSgrZW5kKTtcbiAgICAgIGZsb29yaSh0MCksIGZsb29yaSh0MSk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihjb3VudCh0MCwgdDEpKTtcbiAgICB9O1xuXG4gICAgaW50ZXJ2YWwuZXZlcnkgPSBmdW5jdGlvbihzdGVwKSB7XG4gICAgICBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgIHJldHVybiAhaXNGaW5pdGUoc3RlcCkgfHwgIShzdGVwID4gMCkgPyBudWxsXG4gICAgICAgICAgOiAhKHN0ZXAgPiAxKSA/IGludGVydmFsXG4gICAgICAgICAgOiBpbnRlcnZhbC5maWx0ZXIoZmllbGRcbiAgICAgICAgICAgICAgPyBmdW5jdGlvbihkKSB7IHJldHVybiBmaWVsZChkKSAlIHN0ZXAgPT09IDA7IH1cbiAgICAgICAgICAgICAgOiBmdW5jdGlvbihkKSB7IHJldHVybiBpbnRlcnZhbC5jb3VudCgwLCBkKSAlIHN0ZXAgPT09IDA7IH0pO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gaW50ZXJ2YWw7XG59XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIG1pbGxpc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gIC8vIG5vb3Bcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQgLSBzdGFydDtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG5taWxsaXNlY29uZC5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgayA9IE1hdGguZmxvb3Ioayk7XG4gIGlmICghaXNGaW5pdGUoaykgfHwgIShrID4gMCkpIHJldHVybiBudWxsO1xuICBpZiAoIShrID4gMSkpIHJldHVybiBtaWxsaXNlY29uZDtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gaykgKiBrKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBrKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gaztcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaWxsaXNlY29uZDtcbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmQucmFuZ2U7XG4iLCJleHBvcnQgdmFyIGR1cmF0aW9uU2Vjb25kID0gMWUzO1xuZXhwb3J0IHZhciBkdXJhdGlvbk1pbnV0ZSA9IDZlNDtcbmV4cG9ydCB2YXIgZHVyYXRpb25Ib3VyID0gMzZlNTtcbmV4cG9ydCB2YXIgZHVyYXRpb25EYXkgPSA4NjRlNTtcbmV4cG9ydCB2YXIgZHVyYXRpb25XZWVrID0gNjA0OGU1O1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5LCBkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIGRheSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uRGF5O1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXREYXRlKCkgLSAxO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRheTtcbmV4cG9ydCB2YXIgZGF5cyA9IGRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvblNlY29uZH0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHNlY29uZCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGR1cmF0aW9uU2Vjb25kKSAqIGR1cmF0aW9uU2Vjb25kKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uU2Vjb25kKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvblNlY29uZDtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDU2Vjb25kcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHNlY29uZDtcbmV4cG9ydCB2YXIgc2Vjb25kcyA9IHNlY29uZC5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIG1pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGR1cmF0aW9uTWludXRlKSAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1pbnV0ZTtcbmV4cG9ydCB2YXIgbWludXRlcyA9IG1pbnV0ZS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXIsIGR1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgaG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgdmFyIG9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIGR1cmF0aW9uTWludXRlICUgZHVyYXRpb25Ib3VyO1xuICBpZiAob2Zmc2V0IDwgMCkgb2Zmc2V0ICs9IGR1cmF0aW9uSG91cjtcbiAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoKCtkYXRlIC0gb2Zmc2V0KSAvIGR1cmF0aW9uSG91cikgKiBkdXJhdGlvbkhvdXIgKyBvZmZzZXQpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgaG91cjtcbmV4cG9ydCB2YXIgaG91cnMgPSBob3VyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlLCBkdXJhdGlvbldlZWt9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbmZ1bmN0aW9uIHdlZWtkYXkoaSkge1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIChkYXRlLmdldERheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgc3VuZGF5ID0gd2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgbW9uZGF5ID0gd2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdHVlc2RheSA9IHdlZWtkYXkoMik7XG5leHBvcnQgdmFyIHdlZG5lc2RheSA9IHdlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHRodXJzZGF5ID0gd2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgZnJpZGF5ID0gd2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgc2F0dXJkYXkgPSB3ZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHN1bmRheXMgPSBzdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIG1vbmRheXMgPSBtb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHR1ZXNkYXlzID0gdHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5cyA9IHdlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdGh1cnNkYXlzID0gdGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIGZyaWRheXMgPSBmcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHNhdHVyZGF5cyA9IHNhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciB5ZWFyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnllYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB5ZWFyO1xuZXhwb3J0IHZhciB5ZWFycyA9IHllYXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIG1vbnRoID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldERhdGUoMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0TW9udGgoKSAtIHN0YXJ0LmdldE1vbnRoKCkgKyAoZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNb250aCgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vbnRoO1xuZXhwb3J0IHZhciBtb250aHMgPSBtb250aC5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHV0Y01pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENTZWNvbmRzKDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTWludXRlO1xuZXhwb3J0IHZhciB1dGNNaW51dGVzID0gdXRjTWludXRlLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91cn0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHV0Y0hvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTWludXRlcygwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0hvdXI7XG5leHBvcnQgdmFyIHV0Y0hvdXJzID0gdXRjSG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkRheX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHV0Y0RheSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25EYXk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0RhdGUoKSAtIDE7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjRGF5O1xuZXhwb3J0IHZhciB1dGNEYXlzID0gdXRjRGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uV2Vla30gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxuZnVuY3Rpb24gdXRjV2Vla2RheShpKSB7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gKGRhdGUuZ2V0VVRDRGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIHV0Y1N1bmRheSA9IHV0Y1dlZWtkYXkoMCk7XG5leHBvcnQgdmFyIHV0Y01vbmRheSA9IHV0Y1dlZWtkYXkoMSk7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXkgPSB1dGNXZWVrZGF5KDIpO1xuZXhwb3J0IHZhciB1dGNXZWRuZXNkYXkgPSB1dGNXZWVrZGF5KDMpO1xuZXhwb3J0IHZhciB1dGNUaHVyc2RheSA9IHV0Y1dlZWtkYXkoNCk7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheSA9IHV0Y1dlZWtkYXkoNSk7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5ID0gdXRjV2Vla2RheSg2KTtcblxuZXhwb3J0IHZhciB1dGNTdW5kYXlzID0gdXRjU3VuZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNNb25kYXlzID0gdXRjTW9uZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNUdWVzZGF5cyA9IHV0Y1R1ZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheXMgPSB1dGNXZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5cyA9IHV0Y1RodXJzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNGcmlkYXlzID0gdXRjRnJpZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNTYXR1cmRheXMgPSB1dGNTYXR1cmRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgdXRjWWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG51dGNZZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjWWVhcjtcbmV4cG9ydCB2YXIgdXRjWWVhcnMgPSB1dGNZZWFyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciB1dGNNb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENEYXRlKDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ01vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldFVUQ01vbnRoKCkgLSBzdGFydC5nZXRVVENNb250aCgpICsgKGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNNb250aDtcbmV4cG9ydCB2YXIgdXRjTW9udGhzID0gdXRjTW9udGgucmFuZ2U7XG4iLCJpbXBvcnQge1xuICB0aW1lRGF5LFxuICB0aW1lU3VuZGF5LFxuICB0aW1lTW9uZGF5LFxuICB0aW1lVGh1cnNkYXksXG4gIHRpbWVZZWFyLFxuICB1dGNEYXksXG4gIHV0Y1N1bmRheSxcbiAgdXRjTW9uZGF5LFxuICB1dGNUaHVyc2RheSxcbiAgdXRjWWVhclxufSBmcm9tIFwiZDMtdGltZVwiO1xuXG5mdW5jdGlvbiBsb2NhbERhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkLnkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZShkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xufVxuXG5mdW5jdGlvbiB1dGNEYXRlKGQpIHtcbiAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xufVxuXG5mdW5jdGlvbiBuZXdZZWFyKHkpIHtcbiAgcmV0dXJuIHt5OiB5LCBtOiAwLCBkOiAxLCBIOiAwLCBNOiAwLCBTOiAwLCBMOiAwfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TG9jYWxlKGxvY2FsZSkge1xuICB2YXIgbG9jYWxlX2RhdGVUaW1lID0gbG9jYWxlLmRhdGVUaW1lLFxuICAgICAgbG9jYWxlX2RhdGUgPSBsb2NhbGUuZGF0ZSxcbiAgICAgIGxvY2FsZV90aW1lID0gbG9jYWxlLnRpbWUsXG4gICAgICBsb2NhbGVfcGVyaW9kcyA9IGxvY2FsZS5wZXJpb2RzLFxuICAgICAgbG9jYWxlX3dlZWtkYXlzID0gbG9jYWxlLmRheXMsXG4gICAgICBsb2NhbGVfc2hvcnRXZWVrZGF5cyA9IGxvY2FsZS5zaG9ydERheXMsXG4gICAgICBsb2NhbGVfbW9udGhzID0gbG9jYWxlLm1vbnRocyxcbiAgICAgIGxvY2FsZV9zaG9ydE1vbnRocyA9IGxvY2FsZS5zaG9ydE1vbnRocztcblxuICB2YXIgcGVyaW9kUmUgPSBmb3JtYXRSZShsb2NhbGVfcGVyaW9kcyksXG4gICAgICBwZXJpb2RMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgd2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHNob3J0V2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydFdlZWtkYXlzKSxcbiAgICAgIG1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfbW9udGhzKSxcbiAgICAgIG1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9tb250aHMpLFxuICAgICAgc2hvcnRNb250aFJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0TW9udGhzKSxcbiAgICAgIHNob3J0TW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0TW9udGhzKTtcblxuICB2YXIgZm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0U2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0TWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBmb3JtYXRIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdEhvdXIxMixcbiAgICBcImpcIjogZm9ybWF0RGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdE1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRQZXJpb2QsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0Wm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgdXRjRm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0VVRDU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRVVENXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRVVENTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRVVENNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0VVRDTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBmb3JtYXRVVENIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdFVUQ0hvdXIxMixcbiAgICBcImpcIjogZm9ybWF0VVRDRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRVVENNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdFVUQ01vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRVVENNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRVVENQZXJpb2QsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRVVENTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRVVENXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRVVENZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRVVENGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0VVRDWm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgcGFyc2VzID0ge1xuICAgIFwiYVwiOiBwYXJzZVNob3J0V2Vla2RheSxcbiAgICBcIkFcIjogcGFyc2VXZWVrZGF5LFxuICAgIFwiYlwiOiBwYXJzZVNob3J0TW9udGgsXG4gICAgXCJCXCI6IHBhcnNlTW9udGgsXG4gICAgXCJjXCI6IHBhcnNlTG9jYWxlRGF0ZVRpbWUsXG4gICAgXCJkXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImVcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBwYXJzZU1pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJJXCI6IHBhcnNlSG91cjI0LFxuICAgIFwialwiOiBwYXJzZURheU9mWWVhcixcbiAgICBcIkxcIjogcGFyc2VNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IHBhcnNlTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IHBhcnNlTWludXRlcyxcbiAgICBcInBcIjogcGFyc2VQZXJpb2QsXG4gICAgXCJRXCI6IHBhcnNlVW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogcGFyc2VTZWNvbmRzLFxuICAgIFwidVwiOiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IHBhcnNlV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogcGFyc2VXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IHBhcnNlV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogcGFyc2VMb2NhbGVEYXRlLFxuICAgIFwiWFwiOiBwYXJzZUxvY2FsZVRpbWUsXG4gICAgXCJ5XCI6IHBhcnNlWWVhcixcbiAgICBcIllcIjogcGFyc2VGdWxsWWVhcixcbiAgICBcIlpcIjogcGFyc2Vab25lLFxuICAgIFwiJVwiOiBwYXJzZUxpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgLy8gVGhlc2UgcmVjdXJzaXZlIGRpcmVjdGl2ZSBkZWZpbml0aW9ucyBtdXN0IGJlIGRlZmVycmVkLlxuICBmb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCBmb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgdXRjRm9ybWF0cyk7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllciwgZm9ybWF0cykge1xuICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICB2YXIgc3RyaW5nID0gW10sXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIGogPSAwLFxuICAgICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICAgIGMsXG4gICAgICAgICAgcGFkLFxuICAgICAgICAgIGZvcm1hdDtcblxuICAgICAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSBkYXRlID0gbmV3IERhdGUoK2RhdGUpO1xuXG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSkgPT09IDM3KSB7XG4gICAgICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgICAgICBpZiAoKHBhZCA9IHBhZHNbYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKV0pICE9IG51bGwpIGMgPSBzcGVjaWZpZXIuY2hhckF0KCsraSk7XG4gICAgICAgICAgZWxzZSBwYWQgPSBjID09PSBcImVcIiA/IFwiIFwiIDogXCIwXCI7XG4gICAgICAgICAgaWYgKGZvcm1hdCA9IGZvcm1hdHNbY10pIGMgPSBmb3JtYXQoZGF0ZSwgcGFkKTtcbiAgICAgICAgICBzdHJpbmcucHVzaChjKTtcbiAgICAgICAgICBqID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgIHJldHVybiBzdHJpbmcuam9pbihcIlwiKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3UGFyc2Uoc3BlY2lmaWVyLCBuZXdEYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIGQgPSBuZXdZZWFyKDE5MDApLFxuICAgICAgICAgIGkgPSBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZyArPSBcIlwiLCAwKSxcbiAgICAgICAgICB3ZWVrLCBkYXk7XG4gICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICAgICAgLy8gSWYgYSBVTklYIHRpbWVzdGFtcCBpcyBzcGVjaWZpZWQsIHJldHVybiBpdC5cbiAgICAgIGlmIChcIlFcIiBpbiBkKSByZXR1cm4gbmV3IERhdGUoZC5RKTtcblxuICAgICAgLy8gVGhlIGFtLXBtIGZsYWcgaXMgMCBmb3IgQU0sIGFuZCAxIGZvciBQTS5cbiAgICAgIGlmIChcInBcIiBpbiBkKSBkLkggPSBkLkggJSAxMiArIGQucCAqIDEyO1xuXG4gICAgICAvLyBDb252ZXJ0IGRheS1vZi13ZWVrIGFuZCB3ZWVrLW9mLXllYXIgdG8gZGF5LW9mLXllYXIuXG4gICAgICBpZiAoXCJWXCIgaW4gZCkge1xuICAgICAgICBpZiAoZC5WIDwgMSB8fCBkLlYgPiA1MykgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSAxO1xuICAgICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXRlKG5ld1llYXIoZC55KSksIGRheSA9IHdlZWsuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdXRjTW9uZGF5LmNlaWwod2VlaykgOiB1dGNNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHV0Y0RheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldFVUQ0RhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2VlayA9IG5ld0RhdGUobmV3WWVhcihkLnkpKSwgZGF5ID0gd2Vlay5nZXREYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB0aW1lTW9uZGF5LmNlaWwod2VlaykgOiB0aW1lTW9uZGF5KHdlZWspO1xuICAgICAgICAgIHdlZWsgPSB0aW1lRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0RGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcIldcIiBpbiBkIHx8IFwiVVwiIGluIGQpIHtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IFwidVwiIGluIGQgPyBkLnUgJSA3IDogXCJXXCIgaW4gZCA/IDEgOiAwO1xuICAgICAgICBkYXkgPSBcIlpcIiBpbiBkID8gdXRjRGF0ZShuZXdZZWFyKGQueSkpLmdldFVUQ0RheSgpIDogbmV3RGF0ZShuZXdZZWFyKGQueSkpLmdldERheSgpO1xuICAgICAgICBkLm0gPSAwO1xuICAgICAgICBkLmQgPSBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF5ICsgNSkgJSA3IDogZC53ICsgZC5VICogNyAtIChkYXkgKyA2KSAlIDc7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGEgdGltZSB6b25lIGlzIHNwZWNpZmllZCwgYWxsIGZpZWxkcyBhcmUgaW50ZXJwcmV0ZWQgYXMgVVRDIGFuZCB0aGVuXG4gICAgICAvLyBvZmZzZXQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgdGltZSB6b25lLlxuICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgZC5IICs9IGQuWiAvIDEwMCB8IDA7XG4gICAgICAgIGQuTSArPSBkLlogJSAxMDA7XG4gICAgICAgIHJldHVybiB1dGNEYXRlKGQpO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UsIGFsbCBmaWVsZHMgYXJlIGluIGxvY2FsIHRpbWUuXG4gICAgICByZXR1cm4gbmV3RGF0ZShkKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcsIGopIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICBtID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgYyxcbiAgICAgICAgcGFyc2U7XG5cbiAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckNvZGVBdChpKyspO1xuICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckF0KGkrKyk7XG4gICAgICAgIHBhcnNlID0gcGFyc2VzW2MgaW4gcGFkcyA/IHNwZWNpZmllci5jaGFyQXQoaSsrKSA6IGNdO1xuICAgICAgICBpZiAoIXBhcnNlIHx8ICgoaiA9IHBhcnNlKGQsIHN0cmluZywgaikpIDwgMCkpIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gajtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUGVyaW9kKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gcGVyaW9kUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQucCA9IHBlcmlvZExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNob3J0V2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0V2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSBzaG9ydFdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gd2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSB3ZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0TW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gc2hvcnRNb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gbW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGVUaW1lLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX3RpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXREYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0TW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFBlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgZm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHBhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIGxvY2FsRGF0ZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9LFxuICAgIHV0Y0Zvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgdXRjRm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyLCB1dGNEYXRlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHBhZHMgPSB7XCItXCI6IFwiXCIsIFwiX1wiOiBcIiBcIiwgXCIwXCI6IFwiMFwifSxcbiAgICBudW1iZXJSZSA9IC9eXFxzKlxcZCsvLCAvLyBub3RlOiBpZ25vcmVzIG5leHQgZGlyZWN0aXZlXG4gICAgcGVyY2VudFJlID0gL14lLyxcbiAgICByZXF1b3RlUmUgPSAvW1xcXFxeJCorP3xbXFxdKCkue31dL2c7XG5cbmZ1bmN0aW9uIHBhZCh2YWx1ZSwgZmlsbCwgd2lkdGgpIHtcbiAgdmFyIHNpZ24gPSB2YWx1ZSA8IDAgPyBcIi1cIiA6IFwiXCIsXG4gICAgICBzdHJpbmcgPSAoc2lnbiA/IC12YWx1ZSA6IHZhbHVlKSArIFwiXCIsXG4gICAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICByZXR1cm4gc2lnbiArIChsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgKyBzdHJpbmcgOiBzdHJpbmcpO1xufVxuXG5mdW5jdGlvbiByZXF1b3RlKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZShyZXF1b3RlUmUsIFwiXFxcXCQmXCIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRSZShuYW1lcykge1xuICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oPzpcIiArIG5hbWVzLm1hcChyZXF1b3RlKS5qb2luKFwifFwiKSArIFwiKVwiLCBcImlcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExvb2t1cChuYW1lcykge1xuICB2YXIgbWFwID0ge30sIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIG1hcFtuYW1lc1tpXS50b0xvd2VyQ2FzZSgpXSA9IGk7XG4gIHJldHVybiBtYXA7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlclN1bmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLncgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC51ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuVSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlcklTTyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlYgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5XID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VGdWxsWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNCkpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0gKyAoK25bMF0gPiA2OCA/IDE5MDAgOiAyMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVpvbmUoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gL14oWil8KFsrLV1cXGRcXGQpKD86Oj8oXFxkXFxkKSk/Ly5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLlogPSBuWzFdID8gMCA6IC0oblsyXSArIChuWzNdIHx8IFwiMDBcIikpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9udGhOdW1iZXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZk1vbnRoKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQubSA9IDAsIGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSG91cjI0KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuSCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWludXRlcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLk0gPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5TID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaWxsaXNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5MID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaWNyb3NlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDYpKTtcbiAgcmV0dXJuIG4gPyAoZC5MID0gTWF0aC5mbG9vcihuWzBdIC8gMTAwMCksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VMaXRlcmFsUGVyY2VudChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBwZXJjZW50UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyBpICsgblswXS5sZW5ndGggOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VVbml4VGltZXN0YW1wKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5RID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQuUSA9ICgrblswXSkgKiAxMDAwLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdGltZURheS5jb3VudCh0aW1lWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0U2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkYXkgPSBkLmdldERheSgpO1xuICByZXR1cm4gZGF5ID09PSAwID8gNyA6IGRheTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodGltZVN1bmRheS5jb3VudCh0aW1lWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHRpbWVUaHVyc2RheShkKSA6IHRpbWVUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKHRpbWVUaHVyc2RheS5jb3VudCh0aW1lWWVhcihkKSwgZCkgKyAodGltZVllYXIoZCkuZ2V0RGF5KCkgPT09IDQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla2RheU51bWJlclN1bmRheShkKSB7XG4gIHJldHVybiBkLmdldERheSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh0aW1lTW9uZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFpvbmUoZCkge1xuICB2YXIgeiA9IGQuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgcmV0dXJuICh6ID4gMCA/IFwiLVwiIDogKHogKj0gLTEsIFwiK1wiKSlcbiAgICAgICsgcGFkKHogLyA2MCB8IDAsIFwiMFwiLCAyKVxuICAgICAgKyBwYWQoeiAlIDYwLCBcIjBcIiwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDSG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdXRjRGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ1NlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZG93ID0gZC5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIGRvdyA9PT0gMCA/IDcgOiBkb3c7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y1N1bmRheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXRVVENEYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdXRjVGh1cnNkYXkoZCkgOiB1dGNUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKHV0Y1RodXJzZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpICsgKHV0Y1llYXIoZCkuZ2V0VVRDRGF5KCkgPT09IDQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheShkKSB7XG4gIHJldHVybiBkLmdldFVUQ0RheSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh1dGNNb25kYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENGdWxsWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENab25lKCkge1xuICByZXR1cm4gXCIrMDAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRMaXRlcmFsUGVyY2VudCgpIHtcbiAgcmV0dXJuIFwiJVwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbml4VGltZXN0YW1wKGQpIHtcbiAgcmV0dXJuICtkO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyhkKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKCtkIC8gMTAwMCk7XG59XG4iLCJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZVwiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciB0aW1lRm9ybWF0O1xuZXhwb3J0IHZhciB0aW1lUGFyc2U7XG5leHBvcnQgdmFyIHV0Y0Zvcm1hdDtcbmV4cG9ydCB2YXIgdXRjUGFyc2U7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICBkYXRlVGltZTogXCIleCwgJVhcIixcbiAgZGF0ZTogXCIlLW0vJS1kLyVZXCIsXG4gIHRpbWU6IFwiJS1JOiVNOiVTICVwXCIsXG4gIHBlcmlvZHM6IFtcIkFNXCIsIFwiUE1cIl0sXG4gIGRheXM6IFtcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCJdLFxuICBzaG9ydERheXM6IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXSxcbiAgbW9udGhzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSxcbiAgc2hvcnRNb250aHM6IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gIHRpbWVGb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICB0aW1lUGFyc2UgPSBsb2NhbGUucGFyc2U7XG4gIHV0Y0Zvcm1hdCA9IGxvY2FsZS51dGNGb3JtYXQ7XG4gIHV0Y1BhcnNlID0gbG9jYWxlLnV0Y1BhcnNlO1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiaW1wb3J0IHt1dGNGb3JtYXR9IGZyb20gXCIuL2RlZmF1bHRMb2NhbGVcIjtcblxuZXhwb3J0IHZhciBpc29TcGVjaWZpZXIgPSBcIiVZLSVtLSVkVCVIOiVNOiVTLiVMWlwiO1xuXG5mdW5jdGlvbiBmb3JtYXRJc29OYXRpdmUoZGF0ZSkge1xuICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpO1xufVxuXG52YXIgZm9ybWF0SXNvID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmdcbiAgICA/IGZvcm1hdElzb05hdGl2ZVxuICAgIDogdXRjRm9ybWF0KGlzb1NwZWNpZmllcik7XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdElzbztcbiIsImltcG9ydCB7aXNvU3BlY2lmaWVyfSBmcm9tIFwiLi9pc29Gb3JtYXRcIjtcbmltcG9ydCB7dXRjUGFyc2V9IGZyb20gXCIuL2RlZmF1bHRMb2NhbGVcIjtcblxuZnVuY3Rpb24gcGFyc2VJc29OYXRpdmUoc3RyaW5nKSB7XG4gIHZhciBkYXRlID0gbmV3IERhdGUoc3RyaW5nKTtcbiAgcmV0dXJuIGlzTmFOKGRhdGUpID8gbnVsbCA6IGRhdGU7XG59XG5cbnZhciBwYXJzZUlzbyA9ICtuZXcgRGF0ZShcIjIwMDAtMDEtMDFUMDA6MDA6MDAuMDAwWlwiKVxuICAgID8gcGFyc2VJc29OYXRpdmVcbiAgICA6IHV0Y1BhcnNlKGlzb1NwZWNpZmllcik7XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlSXNvO1xuIiwidmFyIG5vb3AgPSB7dmFsdWU6IGZ1bmN0aW9uKCkge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykpIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgdHlwZTogXCIgKyB0KTtcbiAgICBfW3RdID0gW107XG4gIH1cbiAgcmV0dXJuIG5ldyBEaXNwYXRjaChfKTtcbn1cblxuZnVuY3Rpb24gRGlzcGF0Y2goXykge1xuICB0aGlzLl8gPSBfO1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMsIHR5cGVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICBpZiAodCAmJiAhdHlwZXMuaGFzT3duUHJvcGVydHkodCkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0KTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuRGlzcGF0Y2gucHJvdG90eXBlID0gZGlzcGF0Y2gucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXG4gIG9uOiBmdW5jdGlvbih0eXBlbmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgXyA9IHRoaXMuXyxcbiAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXG4gICAgICAgIHQsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IFQubGVuZ3RoO1xuXG4gICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBvZiB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSAmJiAodCA9IGdldChfW3RdLCB0eXBlbmFtZS5uYW1lKSkpIHJldHVybiB0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIGEgdHlwZSB3YXMgc3BlY2lmaWVkLCBzZXQgdGhlIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICAvLyBPdGhlcndpc2UsIGlmIGEgbnVsbCBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZW1vdmUgY2FsbGJhY2tzIG9mIHRoZSBnaXZlbiBuYW1lLlxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIGVsc2UgaWYgKGNhbGxiYWNrID09IG51bGwpIGZvciAodCBpbiBfKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIG51bGwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29weSA9IHt9LCBfID0gdGhpcy5fO1xuICAgIGZvciAodmFyIHQgaW4gXykgY29weVt0XSA9IF9bdF0uc2xpY2UoKTtcbiAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICB9LFxuICBjYWxsOiBmdW5jdGlvbih0eXBlLCB0aGF0KSB7XG4gICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24odHlwZSwgdGhhdCwgYXJncykge1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aCwgYzsgaSA8IG47ICsraSkge1xuICAgIGlmICgoYyA9IHR5cGVbaV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXQodHlwZSwgbmFtZSwgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICh0eXBlW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHR5cGVbaV0gPSBub29wLCB0eXBlID0gdHlwZS5zbGljZSgwLCBpKS5jb25jYXQodHlwZS5zbGljZShpICsgMSkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjayAhPSBudWxsKSB0eXBlLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiBjYWxsYmFja30pO1xuICByZXR1cm4gdHlwZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGlzcGF0Y2g7XG4iLCJ2YXIgZnJhbWUgPSAwLCAvLyBpcyBhbiBhbmltYXRpb24gZnJhbWUgcGVuZGluZz9cbiAgICB0aW1lb3V0ID0gMCwgLy8gaXMgYSB0aW1lb3V0IHBlbmRpbmc/XG4gICAgaW50ZXJ2YWwgPSAwLCAvLyBhcmUgYW55IHRpbWVycyBhY3RpdmU/XG4gICAgcG9rZURlbGF5ID0gMTAwMCwgLy8gaG93IGZyZXF1ZW50bHkgd2UgY2hlY2sgZm9yIGNsb2NrIHNrZXdcbiAgICB0YXNrSGVhZCxcbiAgICB0YXNrVGFpbCxcbiAgICBjbG9ja0xhc3QgPSAwLFxuICAgIGNsb2NrTm93ID0gMCxcbiAgICBjbG9ja1NrZXcgPSAwLFxuICAgIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZSxcbiAgICBzZXRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGltZXIoKSB7XG4gIHRoaXMuX2NhbGwgPVxuICB0aGlzLl90aW1lID1cbiAgdGhpcy5fbmV4dCA9IG51bGw7XG59XG5cblRpbWVyLnByb3RvdHlwZSA9IHRpbWVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRpbWVyLFxuICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcbiAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgIGlmICh0YXNrVGFpbCkgdGFza1RhaWwuX25leHQgPSB0aGlzO1xuICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XG4gICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICBzbGVlcCgpO1xuICB9LFxuICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2FsbCkge1xuICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICBzbGVlcCgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93OyAvLyBTdHJpY3RseSBsZXNzIHRoYW4gaWYgd2UgcmVjb21wdXRlZCBjbG9ja05vdy5cbiAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCB0aW1lIC0gY2xvY2subm93KCkgLSBjbG9ja1NrZXcpO1xuICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9jay5ub3coKSwgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VGltZXJ9IGZyb20gXCIuL3RpbWVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgdC5yZXN0YXJ0KGZ1bmN0aW9uKGVsYXBzZWQpIHtcbiAgICB0LnN0b3AoKTtcbiAgICBjYWxsYmFjayhlbGFwc2VkICsgZGVsYXkpO1xuICB9LCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge3RpbWVyLCB0aW1lb3V0fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGVtcHR5T24gPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiaW50ZXJydXB0XCIpO1xudmFyIGVtcHR5VHdlZW4gPSBbXTtcblxuZXhwb3J0IHZhciBDUkVBVEVEID0gMDtcbmV4cG9ydCB2YXIgU0NIRURVTEVEID0gMTtcbmV4cG9ydCB2YXIgU1RBUlRJTkcgPSAyO1xuZXhwb3J0IHZhciBTVEFSVEVEID0gMztcbmV4cG9ydCB2YXIgUlVOTklORyA9IDQ7XG5leHBvcnQgdmFyIEVORElORyA9IDU7XG5leHBvcnQgdmFyIEVOREVEID0gNjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSwgaWQsIGluZGV4LCBncm91cCwgdGltaW5nKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZXMpIG5vZGUuX190cmFuc2l0aW9uID0ge307XG4gIGVsc2UgaWYgKGlkIGluIHNjaGVkdWxlcykgcmV0dXJuO1xuICBjcmVhdGUobm9kZSwgaWQsIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIGluZGV4OiBpbmRleCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIGdyb3VwOiBncm91cCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIG9uOiBlbXB0eU9uLFxuICAgIHR3ZWVuOiBlbXB0eVR3ZWVuLFxuICAgIHRpbWU6IHRpbWluZy50aW1lLFxuICAgIGRlbGF5OiB0aW1pbmcuZGVsYXksXG4gICAgZHVyYXRpb246IHRpbWluZy5kdXJhdGlvbixcbiAgICBlYXNlOiB0aW1pbmcuZWFzZSxcbiAgICB0aW1lcjogbnVsbCxcbiAgICBzdGF0ZTogQ1JFQVRFRFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gQ1JFQVRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgc2NoZWR1bGVkXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gU1RBUlRJTkcpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHN0YXJ0ZWRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSkgdGhyb3cgbmV3IEVycm9yKFwidHJhbnNpdGlvbiBub3QgZm91bmRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKG5vZGUsIGlkLCBzZWxmKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHR3ZWVuO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHNlbGYgdGltZXIgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBjcmVhdGVkLlxuICAvLyBOb3RlIHRoZSBhY3R1YWwgZGVsYXkgaXMgbm90IGtub3duIHVudGlsIHRoZSBmaXJzdCBjYWxsYmFjayFcbiAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gIHNlbGYudGltZXIgPSB0aW1lcihzY2hlZHVsZSwgMCwgc2VsZi50aW1lKTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG5cbiAgICAvLyBJZiB0aGUgZWxhcHNlZCBkZWxheSBpcyBsZXNzIHRoYW4gb3VyIGZpcnN0IHNsZWVwLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBpZiAoc2VsZi5kZWxheSA8PSBlbGFwc2VkKSBzdGFydChlbGFwc2VkIC0gc2VsZi5kZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG4gICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAvLyBJZiB0aGUgc3RhdGUgaXMgbm90IFNDSEVEVUxFRCwgdGhlbiB3ZSBwcmV2aW91c2x5IGVycm9yZWQgb24gc3RhcnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNDSEVEVUxFRCkgcmV0dXJuIHN0b3AoKTtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIG8gPSBzY2hlZHVsZXNbaV07XG4gICAgICBpZiAoby5uYW1lICE9PSBzZWxmLm5hbWUpIGNvbnRpbnVlO1xuXG4gICAgICAvLyBXaGlsZSB0aGlzIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBzdGFydGluZyB0cmFuc2l0aW9uIGR1cmluZyB0aGlzIGZyYW1lLFxuICAgICAgLy8gZGVmZXIgc3RhcnRpbmcgYW4gaW50ZXJydXB0aW5nIHRyYW5zaXRpb24gdW50aWwgdGhhdCB0cmFuc2l0aW9uIGhhcyBhXG4gICAgICAvLyBjaGFuY2UgdG8gdGljayAoYW5kIHBvc3NpYmx5IGVuZCk7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzU0IVxuICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHJldHVybiB0aW1lb3V0KHN0YXJ0KTtcblxuICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxuICAgICAgLy8gRGlzcGF0Y2ggdGhlIGludGVycnVwdCBldmVudC5cbiAgICAgIGlmIChvLnN0YXRlID09PSBSVU5OSU5HKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLiBObyBpbnRlcnJ1cHQgZXZlbnQgaXMgZGlzcGF0Y2hlZFxuICAgICAgLy8gYmVjYXVzZSB0aGUgY2FuY2VsbGVkIHRyYW5zaXRpb25zIG5ldmVyIHN0YXJ0ZWQuIE5vdGUgdGhhdCB0aGlzIGFsc29cbiAgICAgIC8vIHJlbW92ZXMgdGhpcyB0cmFuc2l0aW9uIGZyb20gdGhlIHBlbmRpbmcgbGlzdCFcbiAgICAgIGVsc2UgaWYgKCtpIDwgaWQpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBkMy9kMyMxNTc2LlxuICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgc2NoZWR1bGVkIGJlZm9yZSB0aGUgc3RhcnQgZXZlbnQ7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzE2IVxuICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICB0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFNUQVJURUQpIHtcbiAgICAgICAgc2VsZi5zdGF0ZSA9IFJVTk5JTkc7XG4gICAgICAgIHNlbGYudGltZXIucmVzdGFydCh0aWNrLCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuICAgICAgICB0aWNrKGVsYXBzZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIHN0YXJ0IGV2ZW50LlxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSB0d2VlbiBhcmUgaW5pdGlhbGl6ZWQuXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJUSU5HO1xuICAgIHNlbGYub24uY2FsbChcInN0YXJ0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTVEFSVElORykgcmV0dXJuOyAvLyBpbnRlcnJ1cHRlZFxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVEVEO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXG4gICAgdHdlZW4gPSBuZXcgQXJyYXkobiA9IHNlbGYudHdlZW4ubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBqID0gLTE7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XG4gICAgICAgIHR3ZWVuWysral0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICB0d2Vlbi5sZW5ndGggPSBqICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgIHZhciB0ID0gZWxhcHNlZCA8IHNlbGYuZHVyYXRpb24gPyBzZWxmLmVhc2UuY2FsbChudWxsLCBlbGFwc2VkIC8gc2VsZi5kdXJhdGlvbikgOiAoc2VsZi50aW1lci5yZXN0YXJ0KHN0b3ApLCBzZWxmLnN0YXRlID0gRU5ESU5HLCAxKSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gdHdlZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHR3ZWVuW2ldLmNhbGwobnVsbCwgdCk7XG4gICAgfVxuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIGVuZCBldmVudC5cbiAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XG4gICAgICBzZWxmLm9uLmNhbGwoXCJlbmRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBzZWxmLnN0YXRlID0gRU5ERUQ7XG4gICAgc2VsZi50aW1lci5zdG9wKCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpZF07XG4gICAgZm9yICh2YXIgaSBpbiBzY2hlZHVsZXMpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHtTVEFSVElORywgRU5ESU5HLCBFTkRFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgYWN0aXZlLFxuICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgaTtcblxuICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICBhY3RpdmUgPSBzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HICYmIHNjaGVkdWxlLnN0YXRlIDwgRU5ESU5HO1xuICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XG4gICAgc2NoZWR1bGUudGltZXIuc3RvcCgpO1xuICAgIGlmIChhY3RpdmUpIHNjaGVkdWxlLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2NoZWR1bGUuaW5kZXgsIHNjaGVkdWxlLmdyb3VwKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICB9XG5cbiAgaWYgKGVtcHR5KSBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiB0d2VlblJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gdHdlZW4wID0gdHdlZW47XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xID0gdHdlZW4xLnNsaWNlKCk7XG4gICAgICAgICAgdHdlZW4xLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0d2VlbkZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9ICh0d2VlbjAgPSB0d2Vlbikuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIHQgPSB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfSwgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMVtpXSA9IHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpID09PSBuKSB0d2VlbjEucHVzaCh0KTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgbmFtZSArPSBcIlwiO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciB0d2VlbiA9IGdldCh0aGlzLm5vZGUoKSwgaWQpLnR3ZWVuO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4ubGVuZ3RoLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHQgPSB0d2VlbltpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gdC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsID8gdHdlZW5SZW1vdmUgOiB0d2VlbkZ1bmN0aW9uKShpZCwgbmFtZSwgdmFsdWUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR3ZWVuVmFsdWUodHJhbnNpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdHJhbnNpdGlvbi5faWQ7XG5cbiAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCk7XG4gICAgKHNjaGVkdWxlLnZhbHVlIHx8IChzY2hlZHVsZS52YWx1ZSA9IHt9KSlbbmFtZV0gPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBnZXQobm9kZSwgaWQpLnZhbHVlW25hbWVdO1xuICB9O1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJnYiwgaW50ZXJwb2xhdGVTdHJpbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBjO1xuICByZXR1cm4gKHR5cGVvZiBiID09PSBcIm51bWJlclwiID8gaW50ZXJwb2xhdGVOdW1iZXJcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gaW50ZXJwb2xhdGVSZ2JcbiAgICAgIDogKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKVxuICAgICAgOiBpbnRlcnBvbGF0ZVN0cmluZykoYSwgYik7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0ciBmcm9tIFwiLi9hdHRyXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyVHdlZW4gZnJvbSBcIi4vYXR0clR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kZWxheSBmcm9tIFwiLi9kZWxheVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZHVyYXRpb24gZnJvbSBcIi4vZHVyYXRpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2Vhc2UgZnJvbSBcIi4vZWFzZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlclwiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHRcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW5cIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHRyYW5zaXRpb25fZmlsdGVyLFxuICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbl90cmFuc2l0aW9uLFxuICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9wcm90b3R5cGUuZWFjaCxcbiAgb246IHRyYW5zaXRpb25fb24sXG4gIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgYXR0clR3ZWVuOiB0cmFuc2l0aW9uX2F0dHJUd2VlbixcbiAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgdGV4dDogdHJhbnNpdGlvbl90ZXh0LFxuICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgZGVsYXk6IHRyYW5zaXRpb25fZGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2Vcbn07XG4iLCJpbXBvcnQge3NlbGVjdG9yfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgICBzY2hlZHVsZShzdWJncm91cFtpXSwgbmFtZSwgaWQsIGksIHN1Ymdyb3VwLCBnZXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdG9yQWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPSBjaGlsZHJlbltrXSkge1xuICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7bWF0Y2hlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0cmFuc2l0aW9uKSB7XG4gIGlmICh0cmFuc2l0aW9uLl9pZCAhPT0gdGhpcy5faWQpIHRocm93IG5ldyBFcnJvcjtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gdHJhbnNpdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICBpZDEgPSBuZXdJZCgpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHZhciBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkMCk7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkMSwgaSwgZ3JvdXAsIHtcbiAgICAgICAgICB0aW1lOiBpbmhlcml0LnRpbWUgKyBpbmhlcml0LmRlbGF5ICsgaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBlYXNlOiBpbmhlcml0LmVhc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQxKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIHN0YXJ0KG5hbWUpIHtcbiAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiAhdCB8fCB0ID09PSBcInN0YXJ0XCI7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgb24wLCBvbjEsIHNpdCA9IHN0YXJ0KG5hbWUpID8gaW5pdCA6IHNldDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNpdCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjApIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24obmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMlxuICAgICAgPyBnZXQodGhpcy5ub2RlKCksIGlkKS5vbi5vbihuYW1lKVxuICAgICAgOiB0aGlzLmVhY2gob25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZVwiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIHZhbHVlMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICB2YWx1ZTEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCwgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKSwgaSA9IGZ1bGxuYW1lID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHRoaXMuYXR0clR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKShmdWxsbmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcImF0dHIuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHZhbHVlID09IG51bGwgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKShmdWxsbmFtZSlcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKGZ1bGxuYW1lLCBpLCB2YWx1ZSArIFwiXCIpKTtcbn1cbiIsImltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBpICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCBpKHQpKTtcbiAgICB9O1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2VlbihuYW1lLCB2YWx1ZSkge1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBpICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIGkodCkpO1xuICAgIH07XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGtleSA9IFwiYXR0ci5cIiArIG5hbWU7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIChmdWxsbmFtZS5sb2NhbCA/IGF0dHJUd2Vlbk5TIDogYXR0clR3ZWVuKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtzdHlsZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2VlblwiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlXCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUsIGludGVycG9sYXRlKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgdmFsdWUxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZUVuZChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gc3R5bGUodGhpcywgbmFtZSk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgdmFsdWUxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVSZW1vdmUobmFtZSwgaSkpXG4gICAgICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgc3R5bGVSZW1vdmVFbmQobmFtZSkpXG4gICAgICA6IHRoaXMuc3R5bGVUd2VlbihuYW1lLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICAgICAgOiBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlICsgXCJcIiksIHByaW9yaXR5KTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBub2RlID0gdGhpcywgaSA9IHZhbHVlLmFwcGx5KG5vZGUsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGkgJiYgZnVuY3Rpb24odCkge1xuICAgICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBpKHQpLCBwcmlvcml0eSk7XG4gICAgfTtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTEgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyB0ZXh0RnVuY3Rpb24odHdlZW5WYWx1ZSh0aGlzLCBcInRleHRcIiwgdmFsdWUpKVxuICAgICAgOiB0ZXh0Q29uc3RhbnQodmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCIpKTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZUZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5fX3RyYW5zaXRpb24pIGlmICgraSAhPT0gaWQpIHJldHVybjtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vbihcImVuZC5yZW1vdmVcIiwgcmVtb3ZlRnVuY3Rpb24odGhpcy5faWQpKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBkZWxheUZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVsYXlDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkZWxheUZ1bmN0aW9uXG4gICAgICAgICAgOiBkZWxheUNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kZWxheTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGR1cmF0aW9uRnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGR1cmF0aW9uQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkdXJhdGlvbkZ1bmN0aW9uXG4gICAgICAgICAgOiBkdXJhdGlvbkNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kdXJhdGlvbjtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5lYXNlO1xufVxuIiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICBoYWxmUGkgPSBwaSAvIDI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbih0KSB7XG4gIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5PdXQodCkge1xuICByZXR1cm4gTWF0aC5zaW4odCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbk91dCh0KSB7XG4gIHJldHVybiAoMSAtIE1hdGguY29zKHBpICogdCkpIC8gMjtcbn1cbiIsInZhciB0YXUgPSAyICogTWF0aC5QSSxcbiAgICBhbXBsaXR1ZGUgPSAxLFxuICAgIHBlcmlvZCA9IDAuMztcblxuZXhwb3J0IHZhciBlbGFzdGljSW4gPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luKHQpIHtcbiAgICByZXR1cm4gYSAqIE1hdGgucG93KDIsIDEwICogLS10KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNJbi5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbi5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbjtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNPdXQodCkge1xuICAgIHJldHVybiAxIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqICh0ID0gK3QpKSAqIE1hdGguc2luKCh0ICsgcykgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNPdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY091dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ID0gdCAqIDIgLSAxKSA8IDBcbiAgICAgICAgPyBhICogTWF0aC5wb3coMiwgMTAgKiB0KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKVxuICAgICAgICA6IDIgLSBhICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigocyArIHQpIC8gcCkpIC8gMjtcbiAgfVxuXG4gIGVsYXN0aWNJbk91dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbk91dC5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbk91dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuLi90cmFuc2l0aW9uL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUgZnJvbSBcIi4uL3RyYW5zaXRpb24vc2NoZWR1bGVcIjtcbmltcG9ydCB7ZWFzZUN1YmljSW5PdXR9IGZyb20gXCJkMy1lYXNlXCI7XG5pbXBvcnQge25vd30gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBkZWZhdWx0VGltaW5nID0ge1xuICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDI1MCxcbiAgZWFzZTogZWFzZUN1YmljSW5PdXRcbn07XG5cbmZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgdmFyIHRpbWluZztcbiAgd2hpbGUgKCEodGltaW5nID0gbm9kZS5fX3RyYW5zaXRpb24pIHx8ICEodGltaW5nID0gdGltaW5nW2lkXSkpIHtcbiAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRUaW1pbmcudGltZSA9IG5vdygpLCBkZWZhdWx0VGltaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGltaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBpZCxcbiAgICAgIHRpbWluZztcblxuICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaSwgZ3JvdXAsIHRpbWluZyB8fCBpbmhlcml0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW4odCkge1xuICByZXR1cm4gdCAqIHQgKiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0ICogdCA6ICh0IC09IDIpICogdCAqIHQgKyAyKSAvIDI7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgdmFyIG4gPSBzcGVjaWZpZXIubGVuZ3RoIC8gNiB8IDAsIGNvbG9ycyA9IG5ldyBBcnJheShuKSwgaSA9IDA7XG4gIHdoaWxlIChpIDwgbikgY29sb3JzW2ldID0gXCIjXCIgKyBzcGVjaWZpZXIuc2xpY2UoaSAqIDYsICsraSAqIDYpO1xuICByZXR1cm4gY29sb3JzO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVJnYkJhc2lzfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2NoZW1lKSB7XG4gIHJldHVybiBpbnRlcnBvbGF0ZVJnYkJhc2lzKHNjaGVtZVtzY2hlbWUubGVuZ3RoIC0gMV0pO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBzZWxlY3Rpb25faW50ZXJydXB0IGZyb20gXCIuL2ludGVycnVwdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb25cIjtcblxuc2VsZWN0aW9uLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBzZWxlY3Rpb25faW50ZXJydXB0O1xuc2VsZWN0aW9uLnByb3RvdHlwZS50cmFuc2l0aW9uID0gc2VsZWN0aW9uX3RyYW5zaXRpb247XG4iLCJpbXBvcnQgaW50ZXJydXB0IGZyb20gXCIuLi9pbnRlcnJ1cHRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIGludGVycnVwdCh0aGlzLCBuYW1lKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiMWY3N2I0ZmY3ZjBlMmNhMDJjZDYyNzI4OTQ2N2JkOGM1NjRiZTM3N2MyN2Y3ZjdmYmNiZDIyMTdiZWNmXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjdmYzk3ZmJlYWVkNGZkYzA4NmZmZmY5OTM4NmNiMGYwMDI3ZmJmNWIxNzY2NjY2NlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCIxYjllNzdkOTVmMDI3NTcwYjNlNzI5OGE2NmE2MWVlNmFiMDJhNjc2MWQ2NjY2NjZcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiYTZjZWUzMWY3OGI0YjJkZjhhMzNhMDJjZmI5YTk5ZTMxYTFjZmRiZjZmZmY3ZjAwY2FiMmQ2NmEzZDlhZmZmZjk5YjE1OTI4XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcImZiYjRhZWIzY2RlM2NjZWJjNWRlY2JlNGZlZDlhNmZmZmZjY2U1ZDhiZGZkZGFlY2YyZjJmMlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJiM2UyY2RmZGNkYWNjYmQ1ZThmNGNhZTRlNmY1YzlmZmYyYWVmMWUyY2NjY2NjY2NcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiZTQxYTFjMzc3ZWI4NGRhZjRhOTg0ZWEzZmY3ZjAwZmZmZjMzYTY1NjI4Zjc4MWJmOTk5OTk5XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjY2YzJhNWZjOGQ2MjhkYTBjYmU3OGFjM2E2ZDg1NGZmZDkyZmU1YzQ5NGIzYjNiM1wiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCI4ZGQzYzdmZmZmYjNiZWJhZGFmYjgwNzI4MGIxZDNmZGI0NjJiM2RlNjlmY2NkZTVkOWQ5ZDliYzgwYmRjY2ViYzVmZmVkNmZcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJkOGIzNjVmNWY1ZjU1YWI0YWNcIixcbiAgXCJhNjYxMWFkZmMyN2Q4MGNkYzEwMTg1NzFcIixcbiAgXCJhNjYxMWFkZmMyN2RmNWY1ZjU4MGNkYzEwMTg1NzFcIixcbiAgXCI4YzUxMGFkOGIzNjVmNmU4YzNjN2VhZTU1YWI0YWMwMTY2NWVcIixcbiAgXCI4YzUxMGFkOGIzNjVmNmU4YzNmNWY1ZjVjN2VhZTU1YWI0YWMwMTY2NWVcIixcbiAgXCI4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWVcIixcbiAgXCI4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNmNWY1ZjVjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWVcIixcbiAgXCI1NDMwMDU4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWUwMDNjMzBcIixcbiAgXCI1NDMwMDU4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNmNWY1ZjVjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWUwMDNjMzBcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiYWY4ZGMzZjdmN2Y3N2ZiZjdiXCIsXG4gIFwiN2IzMjk0YzJhNWNmYTZkYmEwMDA4ODM3XCIsXG4gIFwiN2IzMjk0YzJhNWNmZjdmN2Y3YTZkYmEwMDA4ODM3XCIsXG4gIFwiNzYyYTgzYWY4ZGMzZTdkNGU4ZDlmMGQzN2ZiZjdiMWI3ODM3XCIsXG4gIFwiNzYyYTgzYWY4ZGMzZTdkNGU4ZjdmN2Y3ZDlmMGQzN2ZiZjdiMWI3ODM3XCIsXG4gIFwiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3XCIsXG4gIFwiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZjdmN2Y3ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3XCIsXG4gIFwiNDAwMDRiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3MDA0NDFiXCIsXG4gIFwiNDAwMDRiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZjdmN2Y3ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3MDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU5YTNjOWY3ZjdmN2ExZDc2YVwiLFxuICBcImQwMWM4YmYxYjZkYWI4ZTE4NjRkYWMyNlwiLFxuICBcImQwMWM4YmYxYjZkYWY3ZjdmN2I4ZTE4NjRkYWMyNlwiLFxuICBcImM1MWI3ZGU5YTNjOWZkZTBlZmU2ZjVkMGExZDc2YTRkOTIyMVwiLFxuICBcImM1MWI3ZGU5YTNjOWZkZTBlZmY3ZjdmN2U2ZjVkMGExZDc2YTRkOTIyMVwiLFxuICBcImM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmU2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMVwiLFxuICBcImM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmY3ZjdmN2U2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMVwiLFxuICBcIjhlMDE1MmM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmU2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMTI3NjQxOVwiLFxuICBcIjhlMDE1MmM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmY3ZjdmN2U2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMTI3NjQxOVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCI5OThlYzNmN2Y3ZjdmMWEzNDBcIixcbiAgXCI1ZTNjOTliMmFiZDJmZGI4NjNlNjYxMDFcIixcbiAgXCI1ZTNjOTliMmFiZDJmN2Y3ZjdmZGI4NjNlNjYxMDFcIixcbiAgXCI1NDI3ODg5OThlYzNkOGRhZWJmZWUwYjZmMWEzNDBiMzU4MDZcIixcbiAgXCI1NDI3ODg5OThlYzNkOGRhZWJmN2Y3ZjdmZWUwYjZmMWEzNDBiMzU4MDZcIixcbiAgXCI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDZcIixcbiAgXCI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmN2Y3ZjdmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDZcIixcbiAgXCIyZDAwNGI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDY3ZjNiMDhcIixcbiAgXCIyZDAwNGI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmN2Y3ZjdmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDY3ZjNiMDhcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWY4YTYyZjdmN2Y3NjdhOWNmXCIsXG4gIFwiY2EwMDIwZjRhNTgyOTJjNWRlMDU3MWIwXCIsXG4gIFwiY2EwMDIwZjRhNTgyZjdmN2Y3OTJjNWRlMDU3MWIwXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZDFlNWYwNjdhOWNmMjE2NmFjXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZjdmN2Y3ZDFlNWYwNjdhOWNmMjE2NmFjXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZjdmN2Y3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjMDUzMDYxXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZjdmN2Y3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjMDUzMDYxXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmOGE2MmZmZmZmZjk5OTk5OVwiLFxuICBcImNhMDAyMGY0YTU4MmJhYmFiYTQwNDA0MFwiLFxuICBcImNhMDAyMGY0YTU4MmZmZmZmZmJhYmFiYTQwNDA0MFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2UwZTBlMDk5OTk5OTRkNGQ0ZFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2ZmZmZmZmUwZTBlMDk5OTk5OTRkNGQ0ZFwiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2UwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZFwiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2ZmZmZmZmUwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZFwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2UwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZDFhMWExYVwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2ZmZmZmZmUwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZDFhMWExYVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5MWJmZGJcIixcbiAgXCJkNzE5MWNmZGFlNjFhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBmZmZmYmZlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmM4ZDU5ZmZmZmJmOTFjZjYwXCIsXG4gIFwiZDcxOTFjZmRhZTYxYTZkOTZhMWE5NjQxXCIsXG4gIFwiZDcxOTFjZmRhZTYxZmZmZmJmYTZkOTZhMWE5NjQxXCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDhiZDllZjhiOTFjZjYwMWE5ODUwXCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDhiZmZmZmJmZDllZjhiOTFjZjYwMWE5ODUwXCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwXCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwXCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwMDA2ODM3XCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwMDA2ODM3XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZjOGQ1OWZmZmZiZjk5ZDU5NFwiLFxuICBcImQ3MTkxY2ZkYWU2MWFiZGRhNDJiODNiYVwiLFxuICBcImQ3MTkxY2ZkYWU2MWZmZmZiZmFiZGRhNDJiODNiYVwiLFxuICBcImQ1M2U0ZmZjOGQ1OWZlZTA4YmU2ZjU5ODk5ZDU5NDMyODhiZFwiLFxuICBcImQ1M2U0ZmZjOGQ1OWZlZTA4YmZmZmZiZmU2ZjU5ODk5ZDU5NDMyODhiZFwiLFxuICBcImQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZFwiLFxuICBcImQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZFwiLFxuICBcIjllMDE0MmQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZDVlNGZhMlwiLFxuICBcIjllMDE0MmQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZDVlNGZhMlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlNWY1Zjk5OWQ4YzkyY2EyNWZcIixcbiAgXCJlZGY4ZmJiMmUyZTI2NmMyYTQyMzhiNDVcIixcbiAgXCJlZGY4ZmJiMmUyZTI2NmMyYTQyY2EyNWYwMDZkMmNcIixcbiAgXCJlZGY4ZmJjY2VjZTY5OWQ4Yzk2NmMyYTQyY2EyNWYwMDZkMmNcIixcbiAgXCJlZGY4ZmJjY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDU4MjRcIixcbiAgXCJmN2ZjZmRlNWY1ZjljY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDU4MjRcIixcbiAgXCJmN2ZjZmRlNWY1ZjljY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDZkMmMwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTBlY2Y0OWViY2RhODg1NmE3XCIsXG4gIFwiZWRmOGZiYjNjZGUzOGM5NmM2ODg0MTlkXCIsXG4gIFwiZWRmOGZiYjNjZGUzOGM5NmM2ODg1NmE3ODEwZjdjXCIsXG4gIFwiZWRmOGZiYmZkM2U2OWViY2RhOGM5NmM2ODg1NmE3ODEwZjdjXCIsXG4gIFwiZWRmOGZiYmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkNmUwMTZiXCIsXG4gIFwiZjdmY2ZkZTBlY2Y0YmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkNmUwMTZiXCIsXG4gIFwiZjdmY2ZkZTBlY2Y0YmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkODEwZjdjNGQwMDRiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImUwZjNkYmE4ZGRiNTQzYTJjYVwiLFxuICBcImYwZjllOGJhZTRiYzdiY2NjNDJiOGNiZVwiLFxuICBcImYwZjllOGJhZTRiYzdiY2NjNDQzYTJjYTA4NjhhY1wiLFxuICBcImYwZjllOGNjZWJjNWE4ZGRiNTdiY2NjNDQzYTJjYTA4NjhhY1wiLFxuICBcImYwZjllOGNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NTg5ZVwiLFxuICBcImY3ZmNmMGUwZjNkYmNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NTg5ZVwiLFxuICBcImY3ZmNmMGUwZjNkYmNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NjhhYzA4NDA4MVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWU4YzhmZGJiODRlMzRhMzNcIixcbiAgXCJmZWYwZDlmZGNjOGFmYzhkNTlkNzMwMWZcIixcbiAgXCJmZWYwZDlmZGNjOGFmYzhkNTllMzRhMzNiMzAwMDBcIixcbiAgXCJmZWYwZDlmZGQ0OWVmZGJiODRmYzhkNTllMzRhMzNiMzAwMDBcIixcbiAgXCJmZWYwZDlmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWY5OTAwMDBcIixcbiAgXCJmZmY3ZWNmZWU4YzhmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWY5OTAwMDBcIixcbiAgXCJmZmY3ZWNmZWU4YzhmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWZiMzAwMDA3ZjAwMDBcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWNlMmYwYTZiZGRiMWM5MDk5XCIsXG4gIFwiZjZlZmY3YmRjOWUxNjdhOWNmMDI4MThhXCIsXG4gIFwiZjZlZmY3YmRjOWUxNjdhOWNmMWM5MDk5MDE2YzU5XCIsXG4gIFwiZjZlZmY3ZDBkMWU2YTZiZGRiNjdhOWNmMWM5MDk5MDE2YzU5XCIsXG4gIFwiZjZlZmY3ZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2NDUwXCIsXG4gIFwiZmZmN2ZiZWNlMmYwZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2NDUwXCIsXG4gIFwiZmZmN2ZiZWNlMmYwZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2YzU5MDE0NjM2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVjZTdmMmE2YmRkYjJiOGNiZVwiLFxuICBcImYxZWVmNmJkYzllMTc0YTljZjA1NzBiMFwiLFxuICBcImYxZWVmNmJkYzllMTc0YTljZjJiOGNiZTA0NWE4ZFwiLFxuICBcImYxZWVmNmQwZDFlNmE2YmRkYjc0YTljZjJiOGNiZTA0NWE4ZFwiLFxuICBcImYxZWVmNmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDAzNGU3YlwiLFxuICBcImZmZjdmYmVjZTdmMmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDAzNGU3YlwiLFxuICBcImZmZjdmYmVjZTdmMmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDA0NWE4ZDAyMzg1OFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlN2UxZWZjOTk0YzdkZDFjNzdcIixcbiAgXCJmMWVlZjZkN2I1ZDhkZjY1YjBjZTEyNTZcIixcbiAgXCJmMWVlZjZkN2I1ZDhkZjY1YjBkZDFjNzc5ODAwNDNcIixcbiAgXCJmMWVlZjZkNGI5ZGFjOTk0YzdkZjY1YjBkZDFjNzc5ODAwNDNcIixcbiAgXCJmMWVlZjZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5MTAwM2ZcIixcbiAgXCJmN2Y0ZjllN2UxZWZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5MTAwM2ZcIixcbiAgXCJmN2Y0ZjllN2UxZWZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5ODAwNDM2NzAwMWZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmRlMGRkZmE5ZmI1YzUxYjhhXCIsXG4gIFwiZmVlYmUyZmJiNGI5Zjc2OGExYWUwMTdlXCIsXG4gIFwiZmVlYmUyZmJiNGI5Zjc2OGExYzUxYjhhN2EwMTc3XCIsXG4gIFwiZmVlYmUyZmNjNWMwZmE5ZmI1Zjc2OGExYzUxYjhhN2EwMTc3XCIsXG4gIFwiZmVlYmUyZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3XCIsXG4gIFwiZmZmN2YzZmRlMGRkZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3XCIsXG4gIFwiZmZmN2YzZmRlMGRkZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3NDkwMDZhXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVkZjhiMTdmY2RiYjJjN2ZiOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDIyNWVhOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODI1MzQ5NDA4MWQ1OFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmN2ZjYjlhZGRkOGUzMWEzNTRcIixcbiAgXCJmZmZmY2NjMmU2OTk3OGM2NzkyMzg0NDNcIixcbiAgXCJmZmZmY2NjMmU2OTk3OGM2NzkzMWEzNTQwMDY4MzdcIixcbiAgXCJmZmZmY2NkOWYwYTNhZGRkOGU3OGM2NzkzMWEzNTQwMDY4MzdcIixcbiAgXCJmZmZmY2NkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDVhMzJcIixcbiAgXCJmZmZmZTVmN2ZjYjlkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDVhMzJcIixcbiAgXCJmZmZmZTVmN2ZjYjlkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDY4MzcwMDQ1MjlcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmZmN2JjZmVjNDRmZDk1ZjBlXCIsXG4gIFwiZmZmZmQ0ZmVkOThlZmU5OTI5Y2M0YzAyXCIsXG4gIFwiZmZmZmQ0ZmVkOThlZmU5OTI5ZDk1ZjBlOTkzNDA0XCIsXG4gIFwiZmZmZmQ0ZmVlMzkxZmVjNDRmZmU5OTI5ZDk1ZjBlOTkzNDA0XCIsXG4gIFwiZmZmZmQ0ZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOGMyZDA0XCIsXG4gIFwiZmZmZmU1ZmZmN2JjZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOGMyZDA0XCIsXG4gIFwiZmZmZmU1ZmZmN2JjZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOTkzNDA0NjYyNTA2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZmZWRhMGZlYjI0Y2YwM2IyMFwiLFxuICBcImZmZmZiMmZlY2M1Y2ZkOGQzY2UzMWExY1wiLFxuICBcImZmZmZiMmZlY2M1Y2ZkOGQzY2YwM2IyMGJkMDAyNlwiLFxuICBcImZmZmZiMmZlZDk3NmZlYjI0Y2ZkOGQzY2YwM2IyMGJkMDAyNlwiLFxuICBcImZmZmZiMmZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2IxMDAyNlwiLFxuICBcImZmZmZjY2ZmZWRhMGZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2IxMDAyNlwiLFxuICBcImZmZmZjY2ZmZWRhMGZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2JkMDAyNjgwMDAyNlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJkZWViZjc5ZWNhZTEzMTgyYmRcIixcbiAgXCJlZmYzZmZiZGQ3ZTc2YmFlZDYyMTcxYjVcIixcbiAgXCJlZmYzZmZiZGQ3ZTc2YmFlZDYzMTgyYmQwODUxOWNcIixcbiAgXCJlZmYzZmZjNmRiZWY5ZWNhZTE2YmFlZDYzMTgyYmQwODUxOWNcIixcbiAgXCJlZmYzZmZjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODQ1OTRcIixcbiAgXCJmN2ZiZmZkZWViZjdjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODQ1OTRcIixcbiAgXCJmN2ZiZmZkZWViZjdjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODUxOWMwODMwNmJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTVmNWUwYTFkOTliMzFhMzU0XCIsXG4gIFwiZWRmOGU5YmFlNGIzNzRjNDc2MjM4YjQ1XCIsXG4gIFwiZWRmOGU5YmFlNGIzNzRjNDc2MzFhMzU0MDA2ZDJjXCIsXG4gIFwiZWRmOGU5YzdlOWMwYTFkOTliNzRjNDc2MzFhMzU0MDA2ZDJjXCIsXG4gIFwiZWRmOGU5YzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA1YTMyXCIsXG4gIFwiZjdmY2Y1ZTVmNWUwYzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA1YTMyXCIsXG4gIFwiZjdmY2Y1ZTVmNWUwYzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA2ZDJjMDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImYwZjBmMGJkYmRiZDYzNjM2M1wiLFxuICBcImY3ZjdmN2NjY2NjYzk2OTY5NjUyNTI1MlwiLFxuICBcImY3ZjdmN2NjY2NjYzk2OTY5NjYzNjM2MzI1MjUyNVwiLFxuICBcImY3ZjdmN2Q5ZDlkOWJkYmRiZDk2OTY5NjYzNjM2MzI1MjUyNVwiLFxuICBcImY3ZjdmN2Q5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNVwiLFxuICBcImZmZmZmZmYwZjBmMGQ5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNVwiLFxuICBcImZmZmZmZmYwZjBmMGQ5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNTAwMDAwMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZmVkZjViY2JkZGM3NTZiYjFcIixcbiAgXCJmMmYwZjdjYmM5ZTI5ZTlhYzg2YTUxYTNcIixcbiAgXCJmMmYwZjdjYmM5ZTI5ZTlhYzg3NTZiYjE1NDI3OGZcIixcbiAgXCJmMmYwZjdkYWRhZWJiY2JkZGM5ZTlhYzg3NTZiYjE1NDI3OGZcIixcbiAgXCJmMmYwZjdkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM0YTE0ODZcIixcbiAgXCJmY2ZiZmRlZmVkZjVkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM0YTE0ODZcIixcbiAgXCJmY2ZiZmRlZmVkZjVkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM1NDI3OGYzZjAwN2RcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmVlMGQyZmM5MjcyZGUyZDI2XCIsXG4gIFwiZmVlNWQ5ZmNhZTkxZmI2YTRhY2IxODFkXCIsXG4gIFwiZmVlNWQ5ZmNhZTkxZmI2YTRhZGUyZDI2YTUwZjE1XCIsXG4gIFwiZmVlNWQ5ZmNiYmExZmM5MjcyZmI2YTRhZGUyZDI2YTUwZjE1XCIsXG4gIFwiZmVlNWQ5ZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkOTkwMDBkXCIsXG4gIFwiZmZmNWYwZmVlMGQyZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkOTkwMDBkXCIsXG4gIFwiZmZmNWYwZmVlMGQyZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkYTUwZjE1NjcwMDBkXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZTZjZWZkYWU2YmU2NTUwZFwiLFxuICBcImZlZWRkZWZkYmU4NWZkOGQzY2Q5NDcwMVwiLFxuICBcImZlZWRkZWZkYmU4NWZkOGQzY2U2NTUwZGE2MzYwM1wiLFxuICBcImZlZWRkZWZkZDBhMmZkYWU2YmZkOGQzY2U2NTUwZGE2MzYwM1wiLFxuICBcImZlZWRkZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMThjMmQwNFwiLFxuICBcImZmZjVlYmZlZTZjZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMThjMmQwNFwiLFxuICBcImZmZjVlYmZlZTZjZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMWE2MzYwMzdmMjcwNFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQge2N1YmVoZWxpeH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlQ3ViZWhlbGl4TG9uZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoMzAwLCAwLjUsIDAuMCksIGN1YmVoZWxpeCgtMjQwLCAwLjUsIDEuMCkpO1xuIiwiaW1wb3J0IHtjdWJlaGVsaXh9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgdmFyIHdhcm0gPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KC0xMDAsIDAuNzUsIDAuMzUpLCBjdWJlaGVsaXgoODAsIDEuNTAsIDAuOCkpO1xuXG5leHBvcnQgdmFyIGNvb2wgPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KDI2MCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbnZhciBjID0gY3ViZWhlbGl4KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHQpIHtcbiAgaWYgKHQgPCAwIHx8IHQgPiAxKSB0IC09IE1hdGguZmxvb3IodCk7XG4gIHZhciB0cyA9IE1hdGguYWJzKHQgLSAwLjUpO1xuICBjLmggPSAzNjAgKiB0IC0gMTAwO1xuICBjLnMgPSAxLjUgLSAxLjUgKiB0cztcbiAgYy5sID0gMC44IC0gMC45ICogdHM7XG4gIHJldHVybiBjICsgXCJcIjtcbn1cbiIsImltcG9ydCB7cmdifSBmcm9tIFwiZDMtY29sb3JcIjtcblxudmFyIGMgPSByZ2IoKSxcbiAgICBwaV8xXzMgPSBNYXRoLlBJIC8gMyxcbiAgICBwaV8yXzMgPSBNYXRoLlBJICogMiAvIDM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHQpIHtcbiAgdmFyIHg7XG4gIHQgPSAoMC41IC0gdCkgKiBNYXRoLlBJO1xuICBjLnIgPSAyNTUgKiAoeCA9IE1hdGguc2luKHQpKSAqIHg7XG4gIGMuZyA9IDI1NSAqICh4ID0gTWF0aC5zaW4odCArIHBpXzFfMykpICogeDtcbiAgYy5iID0gMjU1ICogKHggPSBNYXRoLnNpbih0ICsgcGlfMl8zKSkgKiB4O1xuICByZXR1cm4gYyArIFwiXCI7XG59XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZnVuY3Rpb24gcmFtcChyYW5nZSkge1xuICB2YXIgbiA9IHJhbmdlLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gcmFuZ2VbTWF0aC5tYXgoMCwgTWF0aC5taW4obiAtIDEsIE1hdGguZmxvb3IodCAqIG4pKSldO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCByYW1wKGNvbG9ycyhcIjQ0MDE1NDQ0MDI1NjQ1MDQ1NzQ1MDU1OTQ2MDc1YTQ2MDg1YzQ2MGE1ZDQ2MGI1ZTQ3MGQ2MDQ3MGU2MTQ3MTA2MzQ3MTE2NDQ3MTM2NTQ4MTQ2NzQ4MTY2ODQ4MTc2OTQ4MTg2YTQ4MWE2YzQ4MWI2ZDQ4MWM2ZTQ4MWQ2ZjQ4MWY3MDQ4MjA3MTQ4MjE3MzQ4MjM3NDQ4MjQ3NTQ4MjU3NjQ4MjY3NzQ4Mjg3ODQ4Mjk3OTQ3MmE3YTQ3MmM3YTQ3MmQ3YjQ3MmU3YzQ3MmY3ZDQ2MzA3ZTQ2MzI3ZTQ2MzM3ZjQ2MzQ4MDQ1MzU4MTQ1Mzc4MTQ1Mzg4MjQ0Mzk4MzQ0M2E4MzQ0M2I4NDQzM2Q4NDQzM2U4NTQyM2Y4NTQyNDA4NjQyNDE4NjQxNDI4NzQxNDQ4NzQwNDU4ODQwNDY4ODNmNDc4ODNmNDg4OTNlNDk4OTNlNGE4OTNlNGM4YTNkNGQ4YTNkNGU4YTNjNGY4YTNjNTA4YjNiNTE4YjNiNTI4YjNhNTM4YjNhNTQ4YzM5NTU4YzM5NTY4YzM4NTg4YzM4NTk4YzM3NWE4YzM3NWI4ZDM2NWM4ZDM2NWQ4ZDM1NWU4ZDM1NWY4ZDM0NjA4ZDM0NjE4ZDMzNjI4ZDMzNjM4ZDMyNjQ4ZTMyNjU4ZTMxNjY4ZTMxNjc4ZTMxNjg4ZTMwNjk4ZTMwNmE4ZTJmNmI4ZTJmNmM4ZTJlNmQ4ZTJlNmU4ZTJlNmY4ZTJkNzA4ZTJkNzE4ZTJjNzE4ZTJjNzI4ZTJjNzM4ZTJiNzQ4ZTJiNzU4ZTJhNzY4ZTJhNzc4ZTJhNzg4ZTI5Nzk4ZTI5N2E4ZTI5N2I4ZTI4N2M4ZTI4N2Q4ZTI3N2U4ZTI3N2Y4ZTI3ODA4ZTI2ODE4ZTI2ODI4ZTI2ODI4ZTI1ODM4ZTI1ODQ4ZTI1ODU4ZTI0ODY4ZTI0ODc4ZTIzODg4ZTIzODk4ZTIzOGE4ZDIyOGI4ZDIyOGM4ZDIyOGQ4ZDIxOGU4ZDIxOGY4ZDIxOTA4ZDIxOTE4YzIwOTI4YzIwOTI4YzIwOTM4YzFmOTQ4YzFmOTU4YjFmOTY4YjFmOTc4YjFmOTg4YjFmOTk4YTFmOWE4YTFlOWI4YTFlOWM4OTFlOWQ4OTFmOWU4OTFmOWY4ODFmYTA4ODFmYTE4ODFmYTE4NzFmYTI4NzIwYTM4NjIwYTQ4NjIxYTU4NTIxYTY4NTIyYTc4NTIyYTg4NDIzYTk4MzI0YWE4MzI1YWI4MjI1YWM4MjI2YWQ4MTI3YWQ4MTI4YWU4MDI5YWY3ZjJhYjA3ZjJjYjE3ZTJkYjI3ZDJlYjM3YzJmYjQ3YzMxYjU3YjMyYjY3YTM0YjY3OTM1Yjc3OTM3Yjg3ODM4Yjk3NzNhYmE3NjNiYmI3NTNkYmM3NDNmYmM3MzQwYmQ3MjQyYmU3MTQ0YmY3MDQ2YzA2ZjQ4YzE2ZTRhYzE2ZDRjYzI2YzRlYzM2YjUwYzQ2YTUyYzU2OTU0YzU2ODU2YzY2NzU4Yzc2NTVhYzg2NDVjYzg2MzVlYzk2MjYwY2E2MDYzY2I1ZjY1Y2I1ZTY3Y2M1YzY5Y2Q1YjZjY2Q1YTZlY2U1ODcwY2Y1NzczZDA1Njc1ZDA1NDc3ZDE1MzdhZDE1MTdjZDI1MDdmZDM0ZTgxZDM0ZDg0ZDQ0Yjg2ZDU0OTg5ZDU0ODhiZDY0NjhlZDY0NTkwZDc0MzkzZDc0MTk1ZDg0MDk4ZDgzZTliZDkzYzlkZDkzYmEwZGEzOWEyZGEzN2E1ZGIzNmE4ZGIzNGFhZGMzMmFkZGMzMGIwZGQyZmIyZGQyZGI1ZGUyYmI4ZGUyOWJhZGUyOGJkZGYyNmMwZGYyNWMyZGYyM2M1ZTAyMWM4ZTAyMGNhZTExZmNkZTExZGQwZTExY2QyZTIxYmQ1ZTIxYWQ4ZTIxOWRhZTMxOWRkZTMxOGRmZTMxOGUyZTQxOGU1ZTQxOWU3ZTQxOWVhZTUxYWVjZTUxYmVmZTUxY2YxZTUxZGY0ZTYxZWY2ZTYyMGY4ZTYyMWZiZTcyM2ZkZTcyNVwiKSk7XG5cbmV4cG9ydCB2YXIgbWFnbWEgPSByYW1wKGNvbG9ycyhcIjAwMDAwNDAxMDAwNTAxMDEwNjAxMDEwODAyMDEwOTAyMDIwYjAyMDIwZDAzMDMwZjAzMDMxMjA0MDQxNDA1MDQxNjA2MDUxODA2MDUxYTA3MDYxYzA4MDcxZTA5MDcyMDBhMDgyMjBiMDkyNDBjMDkyNjBkMGEyOTBlMGIyYjEwMGIyZDExMGMyZjEyMGQzMTEzMGQzNDE0MGUzNjE1MGUzODE2MGYzYjE4MGYzZDE5MTAzZjFhMTA0MjFjMTA0NDFkMTE0NzFlMTE0OTIwMTE0YjIxMTE0ZTIyMTE1MDI0MTI1MzI1MTI1NTI3MTI1ODI5MTE1YTJhMTE1YzJjMTE1ZjJkMTE2MTJmMTE2MzMxMTE2NTMzMTA2NzM0MTA2OTM2MTA2YjM4MTA2YzM5MGY2ZTNiMGY3MDNkMGY3MTNmMGY3MjQwMGY3NDQyMGY3NTQ0MGY3NjQ1MTA3NzQ3MTA3ODQ5MTA3ODRhMTA3OTRjMTE3YTRlMTE3YjRmMTI3YjUxMTI3YzUyMTM3YzU0MTM3ZDU2MTQ3ZDU3MTU3ZTU5MTU3ZTVhMTY3ZTVjMTY3ZjVkMTc3ZjVmMTg3ZjYwMTg4MDYyMTk4MDY0MWE4MDY1MWE4MDY3MWI4MDY4MWM4MTZhMWM4MTZiMWQ4MTZkMWQ4MTZlMWU4MTcwMWY4MTcyMWY4MTczMjA4MTc1MjE4MTc2MjE4MTc4MjI4MTc5MjI4MjdiMjM4MjdjMjM4MjdlMjQ4MjgwMjU4MjgxMjU4MTgzMjY4MTg0MjY4MTg2Mjc4MTg4Mjc4MTg5Mjg4MThiMjk4MThjMjk4MThlMmE4MTkwMmE4MTkxMmI4MTkzMmI4MDk0MmM4MDk2MmM4MDk4MmQ4MDk5MmQ4MDliMmU3ZjljMmU3ZjllMmY3ZmEwMmY3ZmExMzA3ZWEzMzA3ZWE1MzE3ZWE2MzE3ZGE4MzI3ZGFhMzM3ZGFiMzM3Y2FkMzQ3Y2FlMzQ3YmIwMzU3YmIyMzU3YmIzMzY3YWI1MzY3YWI3Mzc3OWI4Mzc3OWJhMzg3OGJjMzk3OGJkMzk3N2JmM2E3N2MwM2E3NmMyM2I3NWM0M2M3NWM1M2M3NGM3M2Q3M2M4M2U3M2NhM2U3MmNjM2Y3MWNkNDA3MWNmNDA3MGQwNDE2ZmQyNDI2ZmQzNDM2ZWQ1NDQ2ZGQ2NDU2Y2Q4NDU2Y2Q5NDY2YmRiNDc2YWRjNDg2OWRlNDk2OGRmNGE2OGUwNGM2N2UyNGQ2NmUzNGU2NWU0NGY2NGU1NTA2NGU3NTI2M2U4NTM2MmU5NTQ2MmVhNTY2MWViNTc2MGVjNTg2MGVkNWE1ZmVlNWI1ZWVmNWQ1ZWYwNWY1ZWYxNjA1ZGYyNjI1ZGYyNjQ1Y2YzNjU1Y2Y0Njc1Y2Y0Njk1Y2Y1NmI1Y2Y2NmM1Y2Y2NmU1Y2Y3NzA1Y2Y3NzI1Y2Y4NzQ1Y2Y4NzY1Y2Y5Nzg1ZGY5Nzk1ZGY5N2I1ZGZhN2Q1ZWZhN2Y1ZWZhODE1ZmZiODM1ZmZiODU2MGZiODc2MWZjODk2MWZjOGE2MmZjOGM2M2ZjOGU2NGZjOTA2NWZkOTI2NmZkOTQ2N2ZkOTY2OGZkOTg2OWZkOWE2YWZkOWI2YmZlOWQ2Y2ZlOWY2ZGZlYTE2ZWZlYTM2ZmZlYTU3MWZlYTc3MmZlYTk3M2ZlYWE3NGZlYWM3NmZlYWU3N2ZlYjA3OGZlYjI3YWZlYjQ3YmZlYjY3Y2ZlYjc3ZWZlYjk3ZmZlYmI4MWZlYmQ4MmZlYmY4NGZlYzE4NWZlYzI4N2ZlYzQ4OGZlYzY4YWZlYzg4Y2ZlY2E4ZGZlY2M4ZmZlY2Q5MGZlY2Y5MmZlZDE5NGZlZDM5NWZlZDU5N2ZlZDc5OWZlZDg5YWZkZGE5Y2ZkZGM5ZWZkZGVhMGZkZTBhMWZkZTJhM2ZkZTNhNWZkZTVhN2ZkZTdhOWZkZTlhYWZkZWJhY2ZjZWNhZWZjZWViMGZjZjBiMmZjZjJiNGZjZjRiNmZjZjZiOGZjZjdiOWZjZjliYmZjZmJiZGZjZmRiZlwiKSk7XG5cbmV4cG9ydCB2YXIgaW5mZXJubyA9IHJhbXAoY29sb3JzKFwiMDAwMDA0MDEwMDA1MDEwMTA2MDEwMTA4MDIwMTBhMDIwMjBjMDIwMjBlMDMwMjEwMDQwMzEyMDQwMzE0MDUwNDE3MDYwNDE5MDcwNTFiMDgwNTFkMDkwNjFmMGEwNzIyMGIwNzI0MGMwODI2MGQwODI5MGUwOTJiMTAwOTJkMTEwYTMwMTIwYTMyMTQwYjM0MTUwYjM3MTYwYjM5MTgwYzNjMTkwYzNlMWIwYzQxMWMwYzQzMWUwYzQ1MWYwYzQ4MjEwYzRhMjMwYzRjMjQwYzRmMjYwYzUxMjgwYjUzMjkwYjU1MmIwYjU3MmQwYjU5MmYwYTViMzEwYTVjMzIwYTVlMzQwYTVmMzYwOTYxMzgwOTYyMzkwOTYzM2IwOTY0M2QwOTY1M2UwOTY2NDAwYTY3NDIwYTY4NDQwYTY4NDUwYTY5NDcwYjZhNDkwYjZhNGEwYzZiNGMwYzZiNGQwZDZjNGYwZDZjNTEwZTZjNTIwZTZkNTQwZjZkNTUwZjZkNTcxMDZlNTkxMDZlNWExMTZlNWMxMjZlNWQxMjZlNWYxMzZlNjExMzZlNjIxNDZlNjQxNTZlNjUxNTZlNjcxNjZlNjkxNjZlNmExNzZlNmMxODZlNmQxODZlNmYxOTZlNzExOTZlNzIxYTZlNzQxYTZlNzUxYjZlNzcxYzZkNzgxYzZkN2ExZDZkN2MxZDZkN2QxZTZkN2YxZTZjODAxZjZjODIyMDZjODQyMDZiODUyMTZiODcyMTZiODgyMjZhOGEyMjZhOGMyMzY5OGQyMzY5OGYyNDY5OTAyNTY4OTIyNTY4OTMyNjY3OTUyNjY3OTcyNzY2OTgyNzY2OWEyODY1OWIyOTY0OWQyOTY0OWYyYTYzYTAyYTYzYTIyYjYyYTMyYzYxYTUyYzYwYTYyZDYwYTgyZTVmYTkyZTVlYWIyZjVlYWQzMDVkYWUzMDVjYjAzMTViYjEzMjVhYjMzMjVhYjQzMzU5YjYzNDU4YjczNTU3YjkzNTU2YmEzNjU1YmMzNzU0YmQzODUzYmYzOTUyYzAzYTUxYzEzYTUwYzMzYjRmYzQzYzRlYzYzZDRkYzczZTRjYzgzZjRiY2E0MDRhY2I0MTQ5Y2M0MjQ4Y2U0MzQ3Y2Y0NDQ2ZDA0NTQ1ZDI0NjQ0ZDM0NzQzZDQ0ODQyZDU0YTQxZDc0YjNmZDg0YzNlZDk0ZDNkZGE0ZTNjZGI1MDNiZGQ1MTNhZGU1MjM4ZGY1MzM3ZTA1NTM2ZTE1NjM1ZTI1NzM0ZTM1OTMzZTQ1YTMxZTU1YzMwZTY1ZDJmZTc1ZTJlZTg2MDJkZTk2MTJiZWE2MzJhZWI2NDI5ZWI2NjI4ZWM2NzI2ZWQ2OTI1ZWU2YTI0ZWY2YzIzZWY2ZTIxZjA2ZjIwZjE3MTFmZjE3MzFkZjI3NDFjZjM3NjFiZjM3ODE5ZjQ3OTE4ZjU3YjE3ZjU3ZDE1ZjY3ZTE0ZjY4MDEzZjc4MjEyZjc4NDEwZjg4NTBmZjg4NzBlZjg4OTBjZjk4YjBiZjk4YzBhZjk4ZTA5ZmE5MDA4ZmE5MjA3ZmE5NDA3ZmI5NjA2ZmI5NzA2ZmI5OTA2ZmI5YjA2ZmI5ZDA3ZmM5ZjA3ZmNhMTA4ZmNhMzA5ZmNhNTBhZmNhNjBjZmNhODBkZmNhYTBmZmNhYzExZmNhZTEyZmNiMDE0ZmNiMjE2ZmNiNDE4ZmJiNjFhZmJiODFkZmJiYTFmZmJiYzIxZmJiZTIzZmFjMDI2ZmFjMjI4ZmFjNDJhZmFjNjJkZjljNzJmZjljOTMyZjljYjM1ZjhjZDM3ZjhjZjNhZjdkMTNkZjdkMzQwZjZkNTQzZjZkNzQ2ZjVkOTQ5ZjVkYjRjZjRkZDRmZjRkZjUzZjRlMTU2ZjNlMzVhZjNlNTVkZjJlNjYxZjJlODY1ZjJlYTY5ZjFlYzZkZjFlZDcxZjFlZjc1ZjFmMTc5ZjJmMjdkZjJmNDgyZjNmNTg2ZjNmNjhhZjRmODhlZjVmOTkyZjZmYTk2ZjhmYjlhZjlmYzlkZmFmZGExZmNmZmE0XCIpKTtcblxuZXhwb3J0IHZhciBwbGFzbWEgPSByYW1wKGNvbG9ycyhcIjBkMDg4NzEwMDc4ODEzMDc4OTE2MDc4YTE5MDY4YzFiMDY4ZDFkMDY4ZTIwMDY4ZjIyMDY5MDI0MDY5MTI2MDU5MTI4MDU5MjJhMDU5MzJjMDU5NDJlMDU5NTJmMDU5NjMxMDU5NzMzMDU5NzM1MDQ5ODM3MDQ5OTM4MDQ5YTNhMDQ5YTNjMDQ5YjNlMDQ5YzNmMDQ5YzQxMDQ5ZDQzMDM5ZTQ0MDM5ZTQ2MDM5ZjQ4MDM5ZjQ5MDNhMDRiMDNhMTRjMDJhMTRlMDJhMjUwMDJhMjUxMDJhMzUzMDJhMzU1MDJhNDU2MDFhNDU4MDFhNDU5MDFhNTViMDFhNTVjMDFhNjVlMDFhNjYwMDFhNjYxMDBhNzYzMDBhNzY0MDBhNzY2MDBhNzY3MDBhODY5MDBhODZhMDBhODZjMDBhODZlMDBhODZmMDBhODcxMDBhODcyMDFhODc0MDFhODc1MDFhODc3MDFhODc4MDFhODdhMDJhODdiMDJhODdkMDNhODdlMDNhODgwMDRhODgxMDRhNzgzMDVhNzg0MDVhNzg2MDZhNjg3MDdhNjg4MDhhNjhhMDlhNThiMGFhNThkMGJhNThlMGNhNDhmMGRhNDkxMGVhMzkyMGZhMzk0MTBhMjk1MTFhMTk2MTNhMTk4MTRhMDk5MTU5ZjlhMTY5ZjljMTc5ZTlkMTg5ZDllMTk5ZGEwMWE5Y2ExMWI5YmEyMWQ5YWEzMWU5YWE1MWY5OWE2MjA5OGE3MjE5N2E4MjI5NmFhMjM5NWFiMjQ5NGFjMjY5NGFkMjc5M2FlMjg5MmIwMjk5MWIxMmE5MGIyMmI4ZmIzMmM4ZWI0MmU4ZGI1MmY4Y2I2MzA4YmI3MzE4YWI4MzI4OWJhMzM4OGJiMzQ4OGJjMzU4N2JkMzc4NmJlMzg4NWJmMzk4NGMwM2E4M2MxM2I4MmMyM2M4MWMzM2Q4MGM0M2U3ZmM1NDA3ZWM2NDE3ZGM3NDI3Y2M4NDM3YmM5NDQ3YWNhNDU3YWNiNDY3OWNjNDc3OGNjNDk3N2NkNGE3NmNlNGI3NWNmNGM3NGQwNGQ3M2QxNGU3MmQyNGY3MWQzNTE3MWQ0NTI3MGQ1NTM2ZmQ1NTQ2ZWQ2NTU2ZGQ3NTY2Y2Q4NTc2YmQ5NTg2YWRhNWE2YWRhNWI2OWRiNWM2OGRjNWQ2N2RkNWU2NmRlNWY2NWRlNjE2NGRmNjI2M2UwNjM2M2UxNjQ2MmUyNjU2MWUyNjY2MGUzNjg1ZmU0Njk1ZWU1NmE1ZGU1NmI1ZGU2NmM1Y2U3NmU1YmU3NmY1YWU4NzA1OWU5NzE1OGU5NzI1N2VhNzQ1N2ViNzU1NmViNzY1NWVjNzc1NGVkNzk1M2VkN2E1MmVlN2I1MWVmN2M1MWVmN2U1MGYwN2Y0ZmYwODA0ZWYxODE0ZGYxODM0Y2YyODQ0YmYzODU0YmYzODc0YWY0ODg0OWY0ODk0OGY1OGI0N2Y1OGM0NmY2OGQ0NWY2OGY0NGY3OTA0NGY3OTE0M2Y3OTM0MmY4OTQ0MWY4OTU0MGY5OTczZmY5OTgzZWY5OWEzZWZhOWIzZGZhOWMzY2ZhOWUzYmZiOWYzYWZiYTEzOWZiYTIzOGZjYTMzOGZjYTUzN2ZjYTYzNmZjYTgzNWZjYTkzNGZkYWIzM2ZkYWMzM2ZkYWUzMmZkYWYzMWZkYjEzMGZkYjIyZmZkYjQyZmZkYjUyZWZlYjcyZGZlYjgyY2ZlYmEyY2ZlYmIyYmZlYmQyYWZlYmUyYWZlYzAyOWZkYzIyOWZkYzMyOGZkYzUyN2ZkYzYyN2ZkYzgyN2ZkY2EyNmZkY2IyNmZjY2QyNWZjY2UyNWZjZDAyNWZjZDIyNWZiZDMyNGZiZDUyNGZiZDcyNGZhZDgyNGZhZGEyNGY5ZGMyNGY5ZGQyNWY4ZGYyNWY4ZTEyNWY3ZTIyNWY3ZTQyNWY2ZTYyNmY2ZTgyNmY1ZTkyNmY1ZWIyN2Y0ZWQyN2YzZWUyN2YzZjAyN2YyZjIyN2YxZjQyNmYxZjUyNWYwZjcyNGYwZjkyMVwiKSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG4vKipcbiAqIENyZWF0ZSBhIHRvb2xiYXJcbiAqIFRoaXMgY2xhc3MgdXNlcyBhIGxvdCBvZiBqUXVlcnkgZm9yIGRvbSBlbGVtZW50IG1hbmlwdWxhdGlvblxuICovXG5cbmltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3BhcnNlQ3NzU3R5bGVzfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sYmFyIHtcbiAgICBjb25zdHJ1Y3Rvcihkb21JZCwgdG9vbHRpcD11bmRlZmluZWQsIHZlcnRpY2FsPWZhbHNlKXtcbiAgICAgICAgJChgIyR7ZG9tSWR9YCkuc2hvdygpOyAvLyBpZiBoaWRkZW5cblxuICAgICAgICAvLyBhZGQgYSBuZXcgYmFyZ3JvdXAgZGl2IHRvIGRvbUlEIHdpdGggYm9vdHN0cmFwIGJ1dHRvbiBjbGFzc2VzXG4gICAgICAgIGNvbnN0IGJ0bkNsYXNzZXMgPSB2ZXJ0aWNhbD8nYnRuLWdyb3VwLXZlcnRpY2FsIGJ0bi1ncm91cC1zbSc6ICdidG4tZ3JvdXAgYnRuLWdyb3VwLXNtJztcbiAgICAgICAgdGhpcy5iYXIgPSAkKCc8ZGl2Lz4nKS5hZGRDbGFzcyhidG5DbGFzc2VzKS5hcHBlbmRUbyhgIyR7ZG9tSWR9YCk7XG4gICAgICAgIHRoaXMuYnV0dG9ucyA9IHt9O1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0b29sdGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGRvd25sb2FkIGJ1dHRvbiBmb3IgU1ZHXG4gICAgICogQHBhcmFtIGlkIHtTdHJpbmd9IHRoZSBidXR0b24gZG9tIElEXG4gICAgICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9IHRoZSBTVkcgZG9tIElEIHRvIGdyYWIgYW5kIGRvd25sb2FkXG4gICAgICogQHBhcmFtIG91dGZpbGVOYW1lIHtTdHJpbmd9IHRoZSBkb3dubG9hZCBmaWxlIG5hbWVcbiAgICAgKiBAcGFyYW0gY2xvbmVJZCB7U3RyaW5nfSB0aGUgY2xvbmVkIFNWRyBkb20gSURcbiAgICAgKiBAcGFyYW0gaWNvbiB7U3RyaW5nfSBhIGZvbnRhd2Vzb21lJ3MgaWNvbiBjbGFzcyBuYW1lXG4gICAgICovXG4gICAgY3JlYXRlRG93bmxvYWRTdmdCdXR0b24oaWQsIHN2Z0lkLCBvdXRmaWxlTmFtZSwgY2xvbmVJZCwgaWNvbj0nZmEtZG93bmxvYWQnKXtcbiAgICAgICAgY29uc3QgJGJ1dHRvbiA9IHRoaXMuY3JlYXRlQnV0dG9uKGlkLCBpY29uKTtcbiAgICAgICAgc2VsZWN0KGAjJHtpZH1gKVxuICAgICAgICAgICAgLm9uKCdjbGljaycsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZFN2ZyhzdmdJZCwgb3V0ZmlsZU5hbWUsIGNsb25lSWQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuc2hvdyhcIkRvd25sb2FkXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjcmVhdGVSZXNldEJ1dHRvbihpZCwgY2FsbGJhY2ssIGljb249J2ZhLWV4cGFuZC1hcnJvd3MtYWx0Jyl7XG4gICAgICAgIGNvbnN0ICRidXR0b24gPSB0aGlzLmNyZWF0ZUJ1dHRvbihpZCwgaWNvbik7XG4gICAgICAgIHNlbGVjdChgIyR7aWR9YClcbiAgICAgICAgICAgIC5vbignY2xpY2snLCBjYWxsYmFjaylcbiAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuc2hvdyhcIlJlc2V0IHRoZSBzY2FsZXNcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNyZWF0ZSBhIGJ1dHRvbiB0byB0aGUgdG9vbGJhclxuICAgICAqIEBwYXJhbSBpZCB7U3RyaW5nfSB0aGUgYnV0dG9uJ3MgaWRcbiAgICAgKiBAcGFyYW0gaWNvbiB7U3RyaW5nfSBhIGZvbnRhd2Vzb21lIGljb24gY2xhc3NcbiAgICAgKiBEZXBlbmRlbmNpZXM6IEJvb3RzdHJhcCwgalF1ZXJ5LCBGb250YXdlc29tZVxuICAgICAqL1xuICAgIGNyZWF0ZUJ1dHRvbihpZCwgaWNvbj0nZmEtZG93bmxvYWQnKXtcbiAgICAgICAgY29uc3QgJGJ1dHRvbiA9ICQoJzxhLz4nKS5hdHRyKCdpZCcsIGlkKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdidG4gYnRuLWRlZmF1bHQnKS5hcHBlbmRUbyh0aGlzLmJhcik7XG4gICAgICAgICQoJzxpLz4nKS5hZGRDbGFzcyhgZmEgJHtpY29ufWApLmFwcGVuZFRvKCRidXR0b24pO1xuICAgICAgICB0aGlzLmJ1dHRvbnNbaWRdID0gJGJ1dHRvbjtcbiAgICAgICAgcmV0dXJuICRidXR0b247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYXR0YWNoIGEgdG9vbHRpcCBkb20gd2l0aCB0aGUgdG9vbGJhclxuICAgICAqIEBwYXJhbSB0b29sdGlwIHtUb29sdGlwfVxuICAgICAqL1xuICAgIGF0dGFjaFRvb2x0aXAodG9vbHRpcCl7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRvb2x0aXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRG93bmxvYWQgU1ZHIG9ialxuICAgICAqIEBwYXJhbSBzdmdJZCB7U3RyaW5nfSB0aGUgU1ZHIGRvbSBJRFxuICAgICAqIEBwYXJhbSBmaWxlTmFtZSB7U3RyaW5nfSB0aGUgb3V0cHV0IGZpbGUgbmFtZVxuICAgICAqIEBwYXJhbSBjbG9uZUlkIHtTdHJpbmd9IHRoZSB0ZW1wb3JhcnkgZG9tIElEIHRvIGNvcHkgdGhlIFNWRyB0b1xuICAgICAqIERlcGVuZGVuY2llczogRmlsZVNhdmVyXG4gICAgICovXG4gICAgZG93bmxvYWRTdmcoc3ZnSWQsIGZpbGVOYW1lLCBjbG9uZUlkKXtcbiAgICAgICAgLy8gbGV0IHN2Z09iaiA9ICQoJCgkKGAke1wiI1wiICtzdmdJZH0gc3ZnYCkpWzBdKTsgLy8gY29tcGxpY2F0ZWQgalF1ZXJ5IHRvIGdldCB0byB0aGUgU1ZHIG9iamVjdFxuICAgICAgICBsZXQgc3ZnT2JqID0gJCgkKCQoYCR7XCIjXCIgK3N2Z0lkfWApKVswXSk7XG4gICAgICAgIGxldCAkc3ZnQ29weSA9IHN2Z09iai5jbG9uZSgpXG4gICAgICAgIC5hdHRyKFwidmVyc2lvblwiLCBcIjEuMVwiKVxuICAgICAgICAuYXR0cihcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG5cbiAgICAgICAgLy8gcGFyc2UgYW5kIGFkZCBhbGwgdGhlIENTUyBzdHlsaW5nIHVzZWQgYnkgdGhlIFNWR1xuICAgICAgICBsZXQgc3R5bGVzID0gcGFyc2VDc3NTdHlsZXMoc3ZnT2JqLmdldCgpKTtcbiAgICAgICAgJHN2Z0NvcHkucHJlcGVuZChzdHlsZXMpO1xuXG4gICAgICAgICQoXCIjXCIgKyBjbG9uZUlkKS5odG1sKCcnKS5oaWRlKCk7IC8vIG1ha2Ugc3VyZSB0aGUgY29weUlEIGlzIGludmlzaWJsZVxuICAgICAgICBsZXQgc3ZnSHRtbCA9ICQoYCMke2Nsb25lSWR9YCkuYXBwZW5kKCRzdmdDb3B5KS5odG1sKCk7XG5cbiAgICAgICAgbGV0IHN2Z0Jsb2IgPSBuZXcgQmxvYihbc3ZnSHRtbF0sIHt0eXBlOiBcImltYWdlL3N2Zyt4bWxcIn0pO1xuICAgICAgICBzYXZlQXMoc3ZnQmxvYiwgZmlsZU5hbWUpOyAvLyB0aGlzIGlzIGEgRmlsZVNhdmVyIGZ1bmN0aW9uLi4uLlxuXG4gICAgICAgIC8vIGNsZWFyIHRoZSB0ZW1wIGRvd25sb2FkIGRpdlxuICAgICAgICAkKGAjJHtjbG9uZUlkfWApLmh0bWwoJycpLmhpZGUoKTtcbiAgICB9XG59IiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuaW1wb3J0IHtzZWxlY3QsIGV2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3RyYW5zaXRpb259IGZyb20gXCJkMy10cmFuc2l0aW9uXCI7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbHRpcCB7XG4gICAgY29uc3RydWN0b3IoaWQsIHZlcmJvc2U9ZmFsc2UsIG9mZnNldFg9MzAsIG9mZnNldFk9LTQwLCBkdXJhdGlvbj0xMDApe1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMudmVyYm9zZSA9IHZlcmJvc2U7XG4gICAgICAgIHRoaXMub2Zmc2V0WCA9IG9mZnNldFg7XG4gICAgICAgIHRoaXMub2Zmc2V0WSA9IG9mZnNldFk7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB9XG5cbiAgICBzaG93KGluZm8pIHtcbiAgICAgICAgaWYodGhpcy52ZXJib3NlKSBjb25zb2xlLmxvZyhpbmZvKTtcbiAgICAgICAgdGhpcy5lZGl0KGluZm8pO1xuICAgICAgICB0aGlzLm1vdmUoKTtcbiAgICAgICAgc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJpbmxpbmVcIilcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbih0aGlzLmR1cmF0aW9uKVxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAxLjApXG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbih0aGlzLmR1cmF0aW9uKVxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjApO1xuICAgICAgICB0aGlzLmVkaXQoXCJcIik7XG4gICAgfVxuXG4gICAgbW92ZSh4ID0gZXZlbnQucGFnZVgsIHkgPSBldmVudC5wYWdlWSkge1xuICAgICAgICBpZiAodGhpcy52ZXJib3NlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh4KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHkpO1xuICAgICAgICB9XG4gICAgICAgIHggPSB4ICsgdGhpcy5vZmZzZXRYOyAvLyBUT0RPOiBnZXQgcmlkIG9mIHRoZSBoYXJkLWNvZGVkIGFkanVzdG1lbnRcbiAgICAgICAgeSA9ICh5ICsgdGhpcy5vZmZzZXRZKTwwPzEwOnkrdGhpcy5vZmZzZXRZO1xuICAgICAgICBjb25zdCB0ID0gc2VsZWN0KCcjJyt0aGlzLmlkKVxuICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCBgJHt4fXB4YClcbiAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCBgJHt5fXB4YClcbiAgICB9XG5cbiAgICBlZGl0KGluZm8pIHtcbiAgICAgICAgc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC5odG1sKGluZm8pXG4gICAgfVxufVxuXG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcblxudmFyIHRvcCA9IDEsXG4gICAgcmlnaHQgPSAyLFxuICAgIGJvdHRvbSA9IDMsXG4gICAgbGVmdCA9IDQsXG4gICAgZXBzaWxvbiA9IDFlLTY7XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVgoeCkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyAoeCArIDAuNSkgKyBcIiwwKVwiO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVZKHkpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyAoeSArIDAuNSkgKyBcIilcIjtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHNjYWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2VudGVyKHNjYWxlKSB7XG4gIHZhciBvZmZzZXQgPSBNYXRoLm1heCgwLCBzY2FsZS5iYW5kd2lkdGgoKSAtIDEpIC8gMjsgLy8gQWRqdXN0IGZvciAwLjVweCBvZmZzZXQuXG4gIGlmIChzY2FsZS5yb3VuZCgpKSBvZmZzZXQgPSBNYXRoLnJvdW5kKG9mZnNldCk7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKSArIG9mZnNldDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW50ZXJpbmcoKSB7XG4gIHJldHVybiAhdGhpcy5fX2F4aXM7XG59XG5cbmZ1bmN0aW9uIGF4aXMob3JpZW50LCBzY2FsZSkge1xuICB2YXIgdGlja0FyZ3VtZW50cyA9IFtdLFxuICAgICAgdGlja1ZhbHVlcyA9IG51bGwsXG4gICAgICB0aWNrRm9ybWF0ID0gbnVsbCxcbiAgICAgIHRpY2tTaXplSW5uZXIgPSA2LFxuICAgICAgdGlja1NpemVPdXRlciA9IDYsXG4gICAgICB0aWNrUGFkZGluZyA9IDMsXG4gICAgICBrID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBsZWZ0ID8gLTEgOiAxLFxuICAgICAgeCA9IG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT09IHJpZ2h0ID8gXCJ4XCIgOiBcInlcIixcbiAgICAgIHRyYW5zZm9ybSA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gYm90dG9tID8gdHJhbnNsYXRlWCA6IHRyYW5zbGF0ZVk7XG5cbiAgZnVuY3Rpb24gYXhpcyhjb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlcyA9IHRpY2tWYWx1ZXMgPT0gbnVsbCA/IChzY2FsZS50aWNrcyA/IHNjYWxlLnRpY2tzLmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IHNjYWxlLmRvbWFpbigpKSA6IHRpY2tWYWx1ZXMsXG4gICAgICAgIGZvcm1hdCA9IHRpY2tGb3JtYXQgPT0gbnVsbCA/IChzY2FsZS50aWNrRm9ybWF0ID8gc2NhbGUudGlja0Zvcm1hdC5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBpZGVudGl0eSkgOiB0aWNrRm9ybWF0LFxuICAgICAgICBzcGFjaW5nID0gTWF0aC5tYXgodGlja1NpemVJbm5lciwgMCkgKyB0aWNrUGFkZGluZyxcbiAgICAgICAgcmFuZ2UgPSBzY2FsZS5yYW5nZSgpLFxuICAgICAgICByYW5nZTAgPSArcmFuZ2VbMF0gKyAwLjUsXG4gICAgICAgIHJhbmdlMSA9ICtyYW5nZVtyYW5nZS5sZW5ndGggLSAxXSArIDAuNSxcbiAgICAgICAgcG9zaXRpb24gPSAoc2NhbGUuYmFuZHdpZHRoID8gY2VudGVyIDogbnVtYmVyKShzY2FsZS5jb3B5KCkpLFxuICAgICAgICBzZWxlY3Rpb24gPSBjb250ZXh0LnNlbGVjdGlvbiA/IGNvbnRleHQuc2VsZWN0aW9uKCkgOiBjb250ZXh0LFxuICAgICAgICBwYXRoID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbbnVsbF0pLFxuICAgICAgICB0aWNrID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi50aWNrXCIpLmRhdGEodmFsdWVzLCBzY2FsZSkub3JkZXIoKSxcbiAgICAgICAgdGlja0V4aXQgPSB0aWNrLmV4aXQoKSxcbiAgICAgICAgdGlja0VudGVyID0gdGljay5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwidGlja1wiKSxcbiAgICAgICAgbGluZSA9IHRpY2suc2VsZWN0KFwibGluZVwiKSxcbiAgICAgICAgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKTtcblxuICAgIHBhdGggPSBwYXRoLm1lcmdlKHBhdGguZW50ZXIoKS5pbnNlcnQoXCJwYXRoXCIsIFwiLnRpY2tcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvbWFpblwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiMwMDBcIikpO1xuXG4gICAgdGljayA9IHRpY2subWVyZ2UodGlja0VudGVyKTtcblxuICAgIGxpbmUgPSBsaW5lLm1lcmdlKHRpY2tFbnRlci5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiIzAwMFwiKVxuICAgICAgICAuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKSk7XG5cbiAgICB0ZXh0ID0gdGV4dC5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjMDAwXCIpXG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAuYXR0cihcImR5XCIsIG9yaWVudCA9PT0gdG9wID8gXCIwZW1cIiA6IG9yaWVudCA9PT0gYm90dG9tID8gXCIwLjcxZW1cIiA6IFwiMC4zMmVtXCIpKTtcblxuICAgIGlmIChjb250ZXh0ICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgIHBhdGggPSBwYXRoLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0aWNrID0gdGljay50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgbGluZSA9IGxpbmUudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRleHQgPSB0ZXh0LnRyYW5zaXRpb24oY29udGV4dCk7XG5cbiAgICAgIHRpY2tFeGl0ID0gdGlja0V4aXQudHJhbnNpdGlvbihjb250ZXh0KVxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGlzRmluaXRlKGQgPSBwb3NpdGlvbihkKSkgPyB0cmFuc2Zvcm0oZCkgOiB0aGlzLmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTsgfSk7XG5cbiAgICAgIHRpY2tFbnRlclxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgdmFyIHAgPSB0aGlzLnBhcmVudE5vZGUuX19heGlzOyByZXR1cm4gdHJhbnNmb3JtKHAgJiYgaXNGaW5pdGUocCA9IHAoZCkpID8gcCA6IHBvc2l0aW9uKGQpKTsgfSk7XG4gICAgfVxuXG4gICAgdGlja0V4aXQucmVtb3ZlKCk7XG5cbiAgICBwYXRoXG4gICAgICAgIC5hdHRyKFwiZFwiLCBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09IHJpZ2h0XG4gICAgICAgICAgICA/IFwiTVwiICsgayAqIHRpY2tTaXplT3V0ZXIgKyBcIixcIiArIHJhbmdlMCArIFwiSDAuNVZcIiArIHJhbmdlMSArIFwiSFwiICsgayAqIHRpY2tTaXplT3V0ZXJcbiAgICAgICAgICAgIDogXCJNXCIgKyByYW5nZTAgKyBcIixcIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCJWMC41SFwiICsgcmFuZ2UxICsgXCJWXCIgKyBrICogdGlja1NpemVPdXRlcik7XG5cbiAgICB0aWNrXG4gICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCAxKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB0cmFuc2Zvcm0ocG9zaXRpb24oZCkpOyB9KTtcblxuICAgIGxpbmVcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcik7XG5cbiAgICB0ZXh0XG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAudGV4dChmb3JtYXQpO1xuXG4gICAgc2VsZWN0aW9uLmZpbHRlcihlbnRlcmluZylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcImZvbnQtc2l6ZVwiLCAxMClcbiAgICAgICAgLmF0dHIoXCJmb250LWZhbWlseVwiLCBcInNhbnMtc2VyaWZcIilcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBvcmllbnQgPT09IHJpZ2h0ID8gXCJzdGFydFwiIDogb3JpZW50ID09PSBsZWZ0ID8gXCJlbmRcIiA6IFwibWlkZGxlXCIpO1xuXG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkgeyB0aGlzLl9fYXhpcyA9IHBvc2l0aW9uOyB9KTtcbiAgfVxuXG4gIGF4aXMuc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGUgPSBfLCBheGlzKSA6IHNjYWxlO1xuICB9O1xuXG4gIGF4aXMudGlja3MgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGlja0FyZ3VtZW50cyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKSwgYXhpcztcbiAgfTtcblxuICBheGlzLnRpY2tBcmd1bWVudHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0FyZ3VtZW50cyA9IF8gPT0gbnVsbCA/IFtdIDogc2xpY2UuY2FsbChfKSwgYXhpcykgOiB0aWNrQXJndW1lbnRzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tWYWx1ZXMgPSBfID09IG51bGwgPyBudWxsIDogc2xpY2UuY2FsbChfKSwgYXhpcykgOiB0aWNrVmFsdWVzICYmIHRpY2tWYWx1ZXMuc2xpY2UoKTtcbiAgfTtcblxuICBheGlzLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0Zvcm1hdCA9IF8sIGF4aXMpIDogdGlja0Zvcm1hdDtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSB0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVJbm5lcjtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVJbm5lciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZU91dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZU91dGVyO1xuICB9O1xuXG4gIGF4aXMudGlja1BhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1BhZGRpbmcgPSArXywgYXhpcykgOiB0aWNrUGFkZGluZztcbiAgfTtcblxuICByZXR1cm4gYXhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNUb3Aoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXModG9wLCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzUmlnaHQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMocmlnaHQsIHNjYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNCb3R0b20oc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMoYm90dG9tLCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzTGVmdChzY2FsZSkge1xuICByZXR1cm4gYXhpcyhsZWZ0LCBzY2FsZSk7XG59XG4iLCJ2YXIgcGkgPSBNYXRoLlBJLFxuICAgIHRhdSA9IDIgKiBwaSxcbiAgICBlcHNpbG9uID0gMWUtNixcbiAgICB0YXVFcHNpbG9uID0gdGF1IC0gZXBzaWxvbjtcblxuZnVuY3Rpb24gUGF0aCgpIHtcbiAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl94MSA9IHRoaXMuX3kxID0gbnVsbDsgLy8gZW5kIG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl8gPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gbmV3IFBhdGg7XG59XG5cblBhdGgucHJvdG90eXBlID0gcGF0aC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQYXRoLFxuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3gxICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xuICAgICAgdGhpcy5fICs9IFwiWlwiO1xuICAgIH1cbiAgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIlFcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiQ1wiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAoK3gyKSArIFwiLFwiICsgKCt5MikgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBhcmNUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHIpIHtcbiAgICB4MSA9ICt4MSwgeTEgPSAreTEsIHgyID0gK3gyLCB5MiA9ICt5MiwgciA9ICtyO1xuICAgIHZhciB4MCA9IHRoaXMuX3gxLFxuICAgICAgICB5MCA9IHRoaXMuX3kxLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLFxuICAgICAgICB5MjEgPSB5MiAtIHkxLFxuICAgICAgICB4MDEgPSB4MCAtIHgxLFxuICAgICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgICBsMDFfMiA9IHgwMSAqIHgwMSArIHkwMSAqIHkwMTtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MSx5MSkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgwLHkwKT8gRG8gbm90aGluZy5cbiAgICBlbHNlIGlmICghKGwwMV8yID4gZXBzaWxvbikpIHt9XG5cbiAgICAvLyBPciwgYXJlICh4MCx5MCksICh4MSx5MSkgYW5kICh4Mix5MikgY29sbGluZWFyP1xuICAgIC8vIEVxdWl2YWxlbnRseSwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgyLHkyKT9cbiAgICAvLyBPciwgaXMgdGhlIHJhZGl1cyB6ZXJvPyBMaW5lIHRvICh4MSx5MSkuXG4gICAgZWxzZSBpZiAoIShNYXRoLmFicyh5MDEgKiB4MjEgLSB5MjEgKiB4MDEpID4gZXBzaWxvbikgfHwgIXIpIHtcbiAgICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9IHgxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEpO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgZHJhdyBhbiBhcmMhXG4gICAgZWxzZSB7XG4gICAgICB2YXIgeDIwID0geDIgLSB4MCxcbiAgICAgICAgICB5MjAgPSB5MiAtIHkwLFxuICAgICAgICAgIGwyMV8yID0geDIxICogeDIxICsgeTIxICogeTIxLFxuICAgICAgICAgIGwyMF8yID0geDIwICogeDIwICsgeTIwICogeTIwLFxuICAgICAgICAgIGwyMSA9IE1hdGguc3FydChsMjFfMiksXG4gICAgICAgICAgbDAxID0gTWF0aC5zcXJ0KGwwMV8yKSxcbiAgICAgICAgICBsID0gciAqIE1hdGgudGFuKChwaSAtIE1hdGguYWNvcygobDIxXzIgKyBsMDFfMiAtIGwyMF8yKSAvICgyICogbDIxICogbDAxKSkpIC8gMiksXG4gICAgICAgICAgdDAxID0gbCAvIGwwMSxcbiAgICAgICAgICB0MjEgPSBsIC8gbDIxO1xuXG4gICAgICAvLyBJZiB0aGUgc3RhcnQgdGFuZ2VudCBpcyBub3QgY29pbmNpZGVudCB3aXRoICh4MCx5MCksIGxpbmUgdG8uXG4gICAgICBpZiAoTWF0aC5hYnModDAxIC0gMSkgPiBlcHNpbG9uKSB7XG4gICAgICAgIHRoaXMuXyArPSBcIkxcIiArICh4MSArIHQwMSAqIHgwMSkgKyBcIixcIiArICh5MSArIHQwMSAqIHkwMSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDAsXCIgKyAoKyh5MDEgKiB4MjAgPiB4MDEgKiB5MjApKSArIFwiLFwiICsgKHRoaXMuX3gxID0geDEgKyB0MjEgKiB4MjEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSArIHQyMSAqIHkyMSk7XG4gICAgfVxuICB9LFxuICBhcmM6IGZ1bmN0aW9uKHgsIHksIHIsIGEwLCBhMSwgY2N3KSB7XG4gICAgeCA9ICt4LCB5ID0gK3ksIHIgPSArcjtcbiAgICB2YXIgZHggPSByICogTWF0aC5jb3MoYTApLFxuICAgICAgICBkeSA9IHIgKiBNYXRoLnNpbihhMCksXG4gICAgICAgIHgwID0geCArIGR4LFxuICAgICAgICB5MCA9IHkgKyBkeSxcbiAgICAgICAgY3cgPSAxIF4gY2N3LFxuICAgICAgICBkYSA9IGNjdyA/IGEwIC0gYTEgOiBhMSAtIGEwO1xuXG4gICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgwLHkwKS5cbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuXyArPSBcIk1cIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgwLHkwKSBub3QgY29pbmNpZGVudCB3aXRoIHRoZSBwcmV2aW91cyBwb2ludD8gTGluZSB0byAoeDAseTApLlxuICAgIGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuX3gxIC0geDApID4gZXBzaWxvbiB8fCBNYXRoLmFicyh0aGlzLl95MSAtIHkwKSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkxcIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBlbXB0eT8gV2XigJlyZSBkb25lLlxuICAgIGlmICghcikgcmV0dXJuO1xuXG4gICAgLy8gRG9lcyB0aGUgYW5nbGUgZ28gdGhlIHdyb25nIHdheT8gRmxpcCB0aGUgZGlyZWN0aW9uLlxuICAgIGlmIChkYSA8IDApIGRhID0gZGEgJSB0YXUgKyB0YXU7XG5cbiAgICAvLyBJcyB0aGlzIGEgY29tcGxldGUgY2lyY2xlPyBEcmF3IHR3byBhcmNzIHRvIGNvbXBsZXRlIHRoZSBjaXJjbGUuXG4gICAgaWYgKGRhID4gdGF1RXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAoeCAtIGR4KSArIFwiLFwiICsgKHkgLSBkeSkgKyBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geDApICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MCk7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgbm9uLWVtcHR5PyBEcmF3IGFuIGFyYyFcbiAgICBlbHNlIGlmIChkYSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLFwiICsgKCsoZGEgPj0gcGkpKSArIFwiLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHggKyByICogTWF0aC5jb3MoYTEpKSArIFwiLFwiICsgKHRoaXMuX3kxID0geSArIHIgKiBNYXRoLnNpbihhMSkpO1xuICAgIH1cbiAgfSxcbiAgcmVjdDogZnVuY3Rpb24oeCwgeSwgdywgaCkge1xuICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KSArIFwiaFwiICsgKCt3KSArIFwidlwiICsgKCtoKSArIFwiaFwiICsgKC13KSArIFwiWlwiO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuXztcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcGF0aDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbnN0YW50KCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IHZhciBhYnMgPSBNYXRoLmFicztcbmV4cG9ydCB2YXIgYXRhbjIgPSBNYXRoLmF0YW4yO1xuZXhwb3J0IHZhciBjb3MgPSBNYXRoLmNvcztcbmV4cG9ydCB2YXIgbWF4ID0gTWF0aC5tYXg7XG5leHBvcnQgdmFyIG1pbiA9IE1hdGgubWluO1xuZXhwb3J0IHZhciBzaW4gPSBNYXRoLnNpbjtcbmV4cG9ydCB2YXIgc3FydCA9IE1hdGguc3FydDtcblxuZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtMTI7XG5leHBvcnQgdmFyIHBpID0gTWF0aC5QSTtcbmV4cG9ydCB2YXIgaGFsZlBpID0gcGkgLyAyO1xuZXhwb3J0IHZhciB0YXUgPSAyICogcGk7XG5cbmV4cG9ydCBmdW5jdGlvbiBhY29zKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gMCA6IHggPCAtMSA/IHBpIDogTWF0aC5hY29zKHgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNpbih4KSB7XG4gIHJldHVybiB4ID49IDEgPyBoYWxmUGkgOiB4IDw9IC0xID8gLWhhbGZQaSA6IE1hdGguYXNpbih4KTtcbn1cbiIsImZ1bmN0aW9uIExpbmVhcihjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5MaW5lYXIucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpOyBicmVhaztcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBMaW5lYXIoY29udGV4dCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24geChwKSB7XG4gIHJldHVybiBwWzBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24geShwKSB7XG4gIHJldHVybiBwWzFdO1xufVxuIiwiaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vY3VydmUvbGluZWFyXCI7XG5pbXBvcnQgbGluZSBmcm9tIFwiLi9saW5lXCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4MCA9IHBvaW50WCxcbiAgICAgIHgxID0gbnVsbCxcbiAgICAgIHkwID0gY29uc3RhbnQoMCksXG4gICAgICB5MSA9IHBvaW50WSxcbiAgICAgIGRlZmluZWQgPSBjb25zdGFudCh0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gYXJlYShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIGosXG4gICAgICAgIGssXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyLFxuICAgICAgICB4MHogPSBuZXcgQXJyYXkobiksXG4gICAgICAgIHkweiA9IG5ldyBBcnJheShuKTtcblxuICAgIGlmIChjb250ZXh0ID09IG51bGwpIG91dHB1dCA9IGN1cnZlKGJ1ZmZlciA9IHBhdGgoKSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IG47ICsraSkge1xuICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICBpZiAoZGVmaW5lZDAgPSAhZGVmaW5lZDApIHtcbiAgICAgICAgICBqID0gaTtcbiAgICAgICAgICBvdXRwdXQuYXJlYVN0YXJ0KCk7XG4gICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICAgIGZvciAoayA9IGkgLSAxOyBrID49IGo7IC0taykge1xuICAgICAgICAgICAgb3V0cHV0LnBvaW50KHgweltrXSwgeTB6W2tdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgICBvdXRwdXQuYXJlYUVuZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5lZDApIHtcbiAgICAgICAgeDB6W2ldID0gK3gwKGQsIGksIGRhdGEpLCB5MHpbaV0gPSAreTAoZCwgaSwgZGF0YSk7XG4gICAgICAgIG91dHB1dC5wb2ludCh4MSA/ICt4MShkLCBpLCBkYXRhKSA6IHgweltpXSwgeTEgPyAreTEoZCwgaSwgZGF0YSkgOiB5MHpbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhbGluZSgpIHtcbiAgICByZXR1cm4gbGluZSgpLmRlZmluZWQoZGVmaW5lZCkuY3VydmUoY3VydmUpLmNvbnRleHQoY29udGV4dCk7XG4gIH1cblxuICBhcmVhLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgeDEgPSBudWxsLCBhcmVhKSA6IHgwO1xuICB9O1xuXG4gIGFyZWEueDAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB4MDtcbiAgfTtcblxuICBhcmVhLngxID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgxID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHgxO1xuICB9O1xuXG4gIGFyZWEueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB5MSA9IG51bGwsIGFyZWEpIDogeTA7XG4gIH07XG5cbiAgYXJlYS55MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHkwO1xuICB9O1xuXG4gIGFyZWEueTEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTEgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeTE7XG4gIH07XG5cbiAgYXJlYS5saW5lWDAgPVxuICBhcmVhLmxpbmVZMCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTApO1xuICB9O1xuXG4gIGFyZWEubGluZVkxID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MSk7XG4gIH07XG5cbiAgYXJlYS5saW5lWDEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgxKS55KHkwKTtcbiAgfTtcblxuICBhcmVhLmRlZmluZWQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYXJlYSkgOiBkZWZpbmVkO1xuICB9O1xuXG4gIGFyZWEuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY3VydmUgPSBfLCBjb250ZXh0ICE9IG51bGwgJiYgKG91dHB1dCA9IGN1cnZlKGNvbnRleHQpKSwgYXJlYSkgOiBjdXJ2ZTtcbiAgfTtcblxuICBhcmVhLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gY29udGV4dCA9IG91dHB1dCA9IG51bGwgOiBvdXRwdXQgPSBjdXJ2ZShjb250ZXh0ID0gXyksIGFyZWEpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gYXJlYTtcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGN1cnZlTGluZWFyIGZyb20gXCIuL2N1cnZlL2xpbmVhclwiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuL3BvaW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgeCA9IHBvaW50WCxcbiAgICAgIHkgPSBwb2ludFksXG4gICAgICBkZWZpbmVkID0gY29uc3RhbnQodHJ1ZSksXG4gICAgICBjb250ZXh0ID0gbnVsbCxcbiAgICAgIGN1cnZlID0gY3VydmVMaW5lYXIsXG4gICAgICBvdXRwdXQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGxpbmUoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGQsXG4gICAgICAgIGRlZmluZWQwID0gZmFsc2UsXG4gICAgICAgIGJ1ZmZlcjtcblxuICAgIGlmIChjb250ZXh0ID09IG51bGwpIG91dHB1dCA9IGN1cnZlKGJ1ZmZlciA9IHBhdGgoKSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IG47ICsraSkge1xuICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICBpZiAoZGVmaW5lZDAgPSAhZGVmaW5lZDApIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgZWxzZSBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmluZWQwKSBvdXRwdXQucG9pbnQoK3goZCwgaSwgZGF0YSksICt5KGQsIGksIGRhdGEpKTtcbiAgICB9XG5cbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gb3V0cHV0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICB9XG5cbiAgbGluZS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluZSkgOiB4O1xuICB9O1xuXG4gIGxpbmUueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmUpIDogeTtcbiAgfTtcblxuICBsaW5lLmRlZmluZWQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgbGluZSkgOiBkZWZpbmVkO1xuICB9O1xuXG4gIGxpbmUuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY3VydmUgPSBfLCBjb250ZXh0ICE9IG51bGwgJiYgKG91dHB1dCA9IGN1cnZlKGNvbnRleHQpKSwgbGluZSkgOiBjdXJ2ZTtcbiAgfTtcblxuICBsaW5lLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gY29udGV4dCA9IG91dHB1dCA9IG51bGwgOiBvdXRwdXQgPSBjdXJ2ZShjb250ZXh0ID0gXyksIGxpbmUpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gbGluZTtcbn1cbiIsImZ1bmN0aW9uIHNpZ24oeCkge1xuICByZXR1cm4geCA8IDAgPyAtMSA6IDE7XG59XG5cbi8vIENhbGN1bGF0ZSB0aGUgc2xvcGVzIG9mIHRoZSB0YW5nZW50cyAoSGVybWl0ZS10eXBlIGludGVycG9sYXRpb24pIGJhc2VkIG9uXG4vLyB0aGUgZm9sbG93aW5nIHBhcGVyOiBTdGVmZmVuLCBNLiAxOTkwLiBBIFNpbXBsZSBNZXRob2QgZm9yIE1vbm90b25pY1xuLy8gSW50ZXJwb2xhdGlvbiBpbiBPbmUgRGltZW5zaW9uLiBBc3Ryb25vbXkgYW5kIEFzdHJvcGh5c2ljcywgVm9sLiAyMzksIE5PLlxuLy8gTk9WKElJKSwgUC4gNDQzLCAxOTkwLlxuZnVuY3Rpb24gc2xvcGUzKHRoYXQsIHgyLCB5Mikge1xuICB2YXIgaDAgPSB0aGF0Ll94MSAtIHRoYXQuX3gwLFxuICAgICAgaDEgPSB4MiAtIHRoYXQuX3gxLFxuICAgICAgczAgPSAodGhhdC5feTEgLSB0aGF0Ll95MCkgLyAoaDAgfHwgaDEgPCAwICYmIC0wKSxcbiAgICAgIHMxID0gKHkyIC0gdGhhdC5feTEpIC8gKGgxIHx8IGgwIDwgMCAmJiAtMCksXG4gICAgICBwID0gKHMwICogaDEgKyBzMSAqIGgwKSAvIChoMCArIGgxKTtcbiAgcmV0dXJuIChzaWduKHMwKSArIHNpZ24oczEpKSAqIE1hdGgubWluKE1hdGguYWJzKHMwKSwgTWF0aC5hYnMoczEpLCAwLjUgKiBNYXRoLmFicyhwKSkgfHwgMDtcbn1cblxuLy8gQ2FsY3VsYXRlIGEgb25lLXNpZGVkIHNsb3BlLlxuZnVuY3Rpb24gc2xvcGUyKHRoYXQsIHQpIHtcbiAgdmFyIGggPSB0aGF0Ll94MSAtIHRoYXQuX3gwO1xuICByZXR1cm4gaCA/ICgzICogKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gaCAtIHQpIC8gMiA6IHQ7XG59XG5cbi8vIEFjY29yZGluZyB0byBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DdWJpY19IZXJtaXRlX3NwbGluZSNSZXByZXNlbnRhdGlvbnNcbi8vIFwieW91IGNhbiBleHByZXNzIGN1YmljIEhlcm1pdGUgaW50ZXJwb2xhdGlvbiBpbiB0ZXJtcyBvZiBjdWJpYyBCw6l6aWVyIGN1cnZlc1xuLy8gd2l0aCByZXNwZWN0IHRvIHRoZSBmb3VyIHZhbHVlcyBwMCwgcDAgKyBtMCAvIDMsIHAxIC0gbTEgLyAzLCBwMVwiLlxuZnVuY3Rpb24gcG9pbnQodGhhdCwgdDAsIHQxKSB7XG4gIHZhciB4MCA9IHRoYXQuX3gwLFxuICAgICAgeTAgPSB0aGF0Ll95MCxcbiAgICAgIHgxID0gdGhhdC5feDEsXG4gICAgICB5MSA9IHRoYXQuX3kxLFxuICAgICAgZHggPSAoeDEgLSB4MCkgLyAzO1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oeDAgKyBkeCwgeTAgKyBkeCAqIHQwLCB4MSAtIGR4LCB5MSAtIGR4ICogdDEsIHgxLCB5MSk7XG59XG5cbmZ1bmN0aW9uIE1vbm90b25lWChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5Nb25vdG9uZVgucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPVxuICAgIHRoaXMuX3QwID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICAgIGNhc2UgMzogcG9pbnQodGhpcywgdGhpcy5fdDAsIHNsb3BlMih0aGlzLCB0aGlzLl90MCkpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgdDEgPSBOYU47XG5cbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBpZiAoeCA9PT0gdGhpcy5feDEgJiYgeSA9PT0gdGhpcy5feTEpIHJldHVybjsgLy8gSWdub3JlIGNvaW5jaWRlbnQgcG9pbnRzLlxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgcG9pbnQodGhpcywgc2xvcGUyKHRoaXMsIHQxID0gc2xvcGUzKHRoaXMsIHgsIHkpKSwgdDEpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHRoaXMuX3QwLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gICAgdGhpcy5fdDAgPSB0MTtcbiAgfVxufVxuXG5mdW5jdGlvbiBNb25vdG9uZVkoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gbmV3IFJlZmxlY3RDb250ZXh0KGNvbnRleHQpO1xufVxuXG4oTW9ub3RvbmVZLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTW9ub3RvbmVYLnByb3RvdHlwZSkpLnBvaW50ID0gZnVuY3Rpb24oeCwgeSkge1xuICBNb25vdG9uZVgucHJvdG90eXBlLnBvaW50LmNhbGwodGhpcywgeSwgeCk7XG59O1xuXG5mdW5jdGlvbiBSZWZsZWN0Q29udGV4dChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5SZWZsZWN0Q29udGV4dC5wcm90b3R5cGUgPSB7XG4gIG1vdmVUbzogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh5LCB4KTsgfSxcbiAgY2xvc2VQYXRoOiBmdW5jdGlvbigpIHsgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTsgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuX2NvbnRleHQubGluZVRvKHksIHgpOyB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkgeyB0aGlzLl9jb250ZXh0LmJlemllckN1cnZlVG8oeTEsIHgxLCB5MiwgeDIsIHksIHgpOyB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbW9ub3RvbmVYKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBNb25vdG9uZVgoY29udGV4dCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb25vdG9uZVkoY29udGV4dCkge1xuICByZXR1cm4gbmV3IE1vbm90b25lWShjb250ZXh0KTtcbn1cbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oKSB7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oKSB7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7ZHJhZ0Rpc2FibGUsIGRyYWdFbmFibGV9IGZyb20gXCJkMy1kcmFnXCI7XG5pbXBvcnQge2ludGVycG9sYXRlfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7Y3VzdG9tRXZlbnQsIGV2ZW50LCBtb3VzZSwgc2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2ludGVycnVwdH0gZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IEJydXNoRXZlbnQgZnJvbSBcIi4vZXZlbnRcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudFwiO1xuXG52YXIgTU9ERV9EUkFHID0ge25hbWU6IFwiZHJhZ1wifSxcbiAgICBNT0RFX1NQQUNFID0ge25hbWU6IFwic3BhY2VcIn0sXG4gICAgTU9ERV9IQU5ETEUgPSB7bmFtZTogXCJoYW5kbGVcIn0sXG4gICAgTU9ERV9DRU5URVIgPSB7bmFtZTogXCJjZW50ZXJcIn07XG5cbnZhciBYID0ge1xuICBuYW1lOiBcInhcIixcbiAgaGFuZGxlczogW1wiZVwiLCBcIndcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeCwgZSkgeyByZXR1cm4geCAmJiBbW3hbMF0sIGVbMF1bMV1dLCBbeFsxXSwgZVsxXVsxXV1dOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSAmJiBbeHlbMF1bMF0sIHh5WzFdWzBdXTsgfVxufTtcblxudmFyIFkgPSB7XG4gIG5hbWU6IFwieVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwic1wiXS5tYXAodHlwZSksXG4gIGlucHV0OiBmdW5jdGlvbih5LCBlKSB7IHJldHVybiB5ICYmIFtbZVswXVswXSwgeVswXV0sIFtlWzFdWzBdLCB5WzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVsxXSwgeHlbMV1bMV1dOyB9XG59O1xuXG52YXIgWFkgPSB7XG4gIG5hbWU6IFwieHlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcImVcIiwgXCJzXCIsIFwid1wiLCBcIm53XCIsIFwibmVcIiwgXCJzZVwiLCBcInN3XCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHk7IH1cbn07XG5cbnZhciBjdXJzb3JzID0ge1xuICBvdmVybGF5OiBcImNyb3NzaGFpclwiLFxuICBzZWxlY3Rpb246IFwibW92ZVwiLFxuICBuOiBcIm5zLXJlc2l6ZVwiLFxuICBlOiBcImV3LXJlc2l6ZVwiLFxuICBzOiBcIm5zLXJlc2l6ZVwiLFxuICB3OiBcImV3LXJlc2l6ZVwiLFxuICBudzogXCJud3NlLXJlc2l6ZVwiLFxuICBuZTogXCJuZXN3LXJlc2l6ZVwiLFxuICBzZTogXCJud3NlLXJlc2l6ZVwiLFxuICBzdzogXCJuZXN3LXJlc2l6ZVwiXG59O1xuXG52YXIgZmxpcFggPSB7XG4gIGU6IFwid1wiLFxuICB3OiBcImVcIixcbiAgbnc6IFwibmVcIixcbiAgbmU6IFwibndcIixcbiAgc2U6IFwic3dcIixcbiAgc3c6IFwic2VcIlxufTtcblxudmFyIGZsaXBZID0ge1xuICBuOiBcInNcIixcbiAgczogXCJuXCIsXG4gIG53OiBcInN3XCIsXG4gIG5lOiBcInNlXCIsXG4gIHNlOiBcIm5lXCIsXG4gIHN3OiBcIm53XCJcbn07XG5cbnZhciBzaWduc1ggPSB7XG4gIG92ZXJsYXk6ICsxLFxuICBzZWxlY3Rpb246ICsxLFxuICBuOiBudWxsLFxuICBlOiArMSxcbiAgczogbnVsbCxcbiAgdzogLTEsXG4gIG53OiAtMSxcbiAgbmU6ICsxLFxuICBzZTogKzEsXG4gIHN3OiAtMVxufTtcblxudmFyIHNpZ25zWSA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IC0xLFxuICBlOiBudWxsLFxuICBzOiArMSxcbiAgdzogbnVsbCxcbiAgbnc6IC0xLFxuICBuZTogLTEsXG4gIHNlOiArMSxcbiAgc3c6ICsxXG59O1xuXG5mdW5jdGlvbiB0eXBlKHQpIHtcbiAgcmV0dXJuIHt0eXBlOiB0fTtcbn1cblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyKCkge1xuICByZXR1cm4gIWV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEV4dGVudCgpIHtcbiAgdmFyIHN2ZyA9IHRoaXMub3duZXJTVkdFbGVtZW50IHx8IHRoaXM7XG4gIHJldHVybiBbWzAsIDBdLCBbc3ZnLndpZHRoLmJhc2VWYWwudmFsdWUsIHN2Zy5oZWlnaHQuYmFzZVZhbC52YWx1ZV1dO1xufVxuXG4vLyBMaWtlIGQzLmxvY2FsLCBidXQgd2l0aCB0aGUgbmFtZSDigJxfX2JydXNo4oCdIHJhdGhlciB0aGFuIGF1dG8tZ2VuZXJhdGVkLlxuZnVuY3Rpb24gbG9jYWwobm9kZSkge1xuICB3aGlsZSAoIW5vZGUuX19icnVzaCkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybjtcbiAgcmV0dXJuIG5vZGUuX19icnVzaDtcbn1cblxuZnVuY3Rpb24gZW1wdHkoZXh0ZW50KSB7XG4gIHJldHVybiBleHRlbnRbMF1bMF0gPT09IGV4dGVudFsxXVswXVxuICAgICAgfHwgZXh0ZW50WzBdWzFdID09PSBleHRlbnRbMV1bMV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFNlbGVjdGlvbihub2RlKSB7XG4gIHZhciBzdGF0ZSA9IG5vZGUuX19icnVzaDtcbiAgcmV0dXJuIHN0YXRlID8gc3RhdGUuZGltLm91dHB1dChzdGF0ZS5zZWxlY3Rpb24pIDogbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoWCgpIHtcbiAgcmV0dXJuIGJydXNoKFgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hZKCkge1xuICByZXR1cm4gYnJ1c2goWSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gYnJ1c2goWFkpO1xufVxuXG5mdW5jdGlvbiBicnVzaChkaW0pIHtcbiAgdmFyIGV4dGVudCA9IGRlZmF1bHRFeHRlbnQsXG4gICAgICBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goYnJ1c2gsIFwic3RhcnRcIiwgXCJicnVzaFwiLCBcImVuZFwiKSxcbiAgICAgIGhhbmRsZVNpemUgPSA2LFxuICAgICAgdG91Y2hlbmRpbmc7XG5cbiAgZnVuY3Rpb24gYnJ1c2goZ3JvdXApIHtcbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwXG4gICAgICAgIC5wcm9wZXJ0eShcIl9fYnJ1c2hcIiwgaW5pdGlhbGl6ZSlcbiAgICAgIC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgLmRhdGEoW3R5cGUoXCJvdmVybGF5XCIpXSk7XG5cbiAgICBvdmVybGF5LmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwib3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSlcbiAgICAgIC5tZXJnZShvdmVybGF5KVxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZXh0ZW50ID0gbG9jYWwodGhpcykuZXh0ZW50O1xuICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAuYXR0cihcInhcIiwgZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcInlcIiwgZXh0ZW50WzBdWzFdKVxuICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGV4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdKTtcbiAgICAgICAgfSk7XG5cbiAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXG4gICAgICAuZGF0YShbdHlwZShcInNlbGVjdGlvblwiKV0pXG4gICAgICAuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJzZWxlY3Rpb25cIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiM3NzdcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgMC4zKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiNmZmZcIilcbiAgICAgICAgLmF0dHIoXCJzaGFwZS1yZW5kZXJpbmdcIiwgXCJjcmlzcEVkZ2VzXCIpO1xuXG4gICAgdmFyIGhhbmRsZSA9IGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgIC5kYXRhKGRpbS5oYW5kbGVzLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGU7IH0pO1xuXG4gICAgaGFuZGxlLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgIGhhbmRsZS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcImhhbmRsZSBoYW5kbGUtLVwiICsgZC50eXBlOyB9KVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjdXJzb3JzW2QudHlwZV07IH0pO1xuXG4gICAgZ3JvdXBcbiAgICAgICAgLmVhY2gocmVkcmF3KVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKVxuICAgICAgICAub24oXCJtb3VzZWRvd24uYnJ1c2ggdG91Y2hzdGFydC5icnVzaFwiLCBzdGFydGVkKTtcbiAgfVxuXG4gIGJydXNoLm1vdmUgPSBmdW5jdGlvbihncm91cCwgc2VsZWN0aW9uKSB7XG4gICAgaWYgKGdyb3VwLnNlbGVjdGlvbikge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAub24oXCJzdGFydC5icnVzaFwiLCBmdW5jdGlvbigpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmJlZm9yZXN0YXJ0KCkuc3RhcnQoKTsgfSlcbiAgICAgICAgICAub24oXCJpbnRlcnJ1cHQuYnJ1c2ggZW5kLmJydXNoXCIsIGZ1bmN0aW9uKCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kKCk7IH0pXG4gICAgICAgICAgLnR3ZWVuKFwiYnJ1c2hcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24wID0gc3RhdGUuc2VsZWN0aW9uLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjEgPSBkaW0uaW5wdXQodHlwZW9mIHNlbGVjdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgICAgaSA9IGludGVycG9sYXRlKHNlbGVjdGlvbjAsIHNlbGVjdGlvbjEpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB0d2Vlbih0KSB7XG4gICAgICAgICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHQgPT09IDEgJiYgZW1wdHkoc2VsZWN0aW9uMSkgPyBudWxsIDogaSh0KTtcbiAgICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbjAgJiYgc2VsZWN0aW9uMSA/IHR3ZWVuIDogdHdlZW4oMSk7XG4gICAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGF0LCBhcmdzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmdzKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgICAgICAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24xID09IG51bGwgfHwgZW1wdHkoc2VsZWN0aW9uMSkgPyBudWxsIDogc2VsZWN0aW9uMTtcbiAgICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgICAgZW1pdC5zdGFydCgpLmJydXNoKCkuZW5kKCk7XG4gICAgICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHJlZHJhdygpIHtcbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhpcyksXG4gICAgICAgIHNlbGVjdGlvbiA9IGxvY2FsKHRoaXMpLnNlbGVjdGlvbjtcblxuICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIHNlbGVjdGlvblswXVswXSlcbiAgICAgICAgICAuYXR0cihcInlcIiwgc2VsZWN0aW9uWzBdWzFdKVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgc2VsZWN0aW9uWzFdWzBdIC0gc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSk7XG5cbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZVtkLnR5cGUubGVuZ3RoIC0gMV0gPT09IFwiZVwiID8gc2VsZWN0aW9uWzFdWzBdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMF0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlWzBdID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVsxXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzFdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGUgPT09IFwiblwiIHx8IGQudHlwZSA9PT0gXCJzXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0gKyBoYW5kbGVTaXplIDogaGFuZGxlU2l6ZTsgfSlcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGUgPT09IFwiZVwiIHx8IGQudHlwZSA9PT0gXCJ3XCIgPyBzZWxlY3Rpb25bMV1bMV0gLSBzZWxlY3Rpb25bMF1bMV0gKyBoYW5kbGVTaXplIDogaGFuZGxlU2l6ZTsgfSk7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uLC5oYW5kbGVcIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBudWxsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbWl0dGVyKHRoYXQsIGFyZ3MpIHtcbiAgICByZXR1cm4gdGhhdC5fX2JydXNoLmVtaXR0ZXIgfHwgbmV3IEVtaXR0ZXIodGhhdCwgYXJncyk7XG4gIH1cblxuICBmdW5jdGlvbiBFbWl0dGVyKHRoYXQsIGFyZ3MpIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5zdGF0ZSA9IHRoYXQuX19icnVzaDtcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gIH1cblxuICBFbWl0dGVyLnByb3RvdHlwZSA9IHtcbiAgICBiZWZvcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkgdGhpcy5zdGF0ZS5lbWl0dGVyID0gdGhpcywgdGhpcy5zdGFydGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnN0YXJ0aW5nKSB0aGlzLnN0YXJ0aW5nID0gZmFsc2UsIHRoaXMuZW1pdChcInN0YXJ0XCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBicnVzaDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmVtaXQoXCJicnVzaFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRoaXMuYWN0aXZlID09PSAwKSBkZWxldGUgdGhpcy5zdGF0ZS5lbWl0dGVyLCB0aGlzLmVtaXQoXCJlbmRcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIGN1c3RvbUV2ZW50KG5ldyBCcnVzaEV2ZW50KGJydXNoLCB0eXBlLCBkaW0ub3V0cHV0KHRoaXMuc3RhdGUuc2VsZWN0aW9uKSksIGxpc3RlbmVycy5hcHBseSwgbGlzdGVuZXJzLCBbdHlwZSwgdGhpcy50aGF0LCB0aGlzLmFyZ3NdKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gc3RhcnRlZCgpIHtcbiAgICBpZiAoZXZlbnQudG91Y2hlcykgeyBpZiAoZXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoIDwgZXZlbnQudG91Y2hlcy5sZW5ndGgpIHJldHVybiBub2V2ZW50KCk7IH1cbiAgICBlbHNlIGlmICh0b3VjaGVuZGluZykgcmV0dXJuO1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcblxuICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgdHlwZSA9IGV2ZW50LnRhcmdldC5fX2RhdGFfXy50eXBlLFxuICAgICAgICBtb2RlID0gKGV2ZW50Lm1ldGFLZXkgPyB0eXBlID0gXCJvdmVybGF5XCIgOiB0eXBlKSA9PT0gXCJzZWxlY3Rpb25cIiA/IE1PREVfRFJBRyA6IChldmVudC5hbHRLZXkgPyBNT0RFX0NFTlRFUiA6IE1PREVfSEFORExFKSxcbiAgICAgICAgc2lnblggPSBkaW0gPT09IFkgPyBudWxsIDogc2lnbnNYW3R5cGVdLFxuICAgICAgICBzaWduWSA9IGRpbSA9PT0gWCA/IG51bGwgOiBzaWduc1lbdHlwZV0sXG4gICAgICAgIHN0YXRlID0gbG9jYWwodGhhdCksXG4gICAgICAgIGV4dGVudCA9IHN0YXRlLmV4dGVudCxcbiAgICAgICAgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uLFxuICAgICAgICBXID0gZXh0ZW50WzBdWzBdLCB3MCwgdzEsXG4gICAgICAgIE4gPSBleHRlbnRbMF1bMV0sIG4wLCBuMSxcbiAgICAgICAgRSA9IGV4dGVudFsxXVswXSwgZTAsIGUxLFxuICAgICAgICBTID0gZXh0ZW50WzFdWzFdLCBzMCwgczEsXG4gICAgICAgIGR4LFxuICAgICAgICBkeSxcbiAgICAgICAgbW92aW5nLFxuICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZICYmIGV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICBsb2NrWCxcbiAgICAgICAgbG9ja1ksXG4gICAgICAgIHBvaW50MCA9IG1vdXNlKHRoYXQpLFxuICAgICAgICBwb2ludCA9IHBvaW50MCxcbiAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJndW1lbnRzKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgaWYgKHR5cGUgPT09IFwib3ZlcmxheVwiKSB7XG4gICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24gPSBbXG4gICAgICAgIFt3MCA9IGRpbSA9PT0gWSA/IFcgOiBwb2ludDBbMF0sIG4wID0gZGltID09PSBYID8gTiA6IHBvaW50MFsxXV0sXG4gICAgICAgIFtlMCA9IGRpbSA9PT0gWSA/IEUgOiB3MCwgczAgPSBkaW0gPT09IFggPyBTIDogbjBdXG4gICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB3MCA9IHNlbGVjdGlvblswXVswXTtcbiAgICAgIG4wID0gc2VsZWN0aW9uWzBdWzFdO1xuICAgICAgZTAgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBzMCA9IHNlbGVjdGlvblsxXVsxXTtcbiAgICB9XG5cbiAgICB3MSA9IHcwO1xuICAgIG4xID0gbjA7XG4gICAgZTEgPSBlMDtcbiAgICBzMSA9IHMwO1xuXG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoYXQpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xuXG4gICAgdmFyIG92ZXJsYXkgPSBncm91cC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5vbihcInRvdWNobW92ZS5icnVzaFwiLCBtb3ZlZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJ0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gc2VsZWN0KGV2ZW50LnZpZXcpXG4gICAgICAgICAgLm9uKFwia2V5ZG93bi5icnVzaFwiLCBrZXlkb3duZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwia2V5dXAuYnJ1c2hcIiwga2V5dXBwZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcIm1vdXNldXAuYnJ1c2hcIiwgZW5kZWQsIHRydWUpO1xuXG4gICAgICBkcmFnRGlzYWJsZShldmVudC52aWV3KTtcbiAgICB9XG5cbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgaW50ZXJydXB0KHRoYXQpO1xuICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgIGVtaXQuc3RhcnQoKTtcblxuICAgIGZ1bmN0aW9uIG1vdmVkKCkge1xuICAgICAgdmFyIHBvaW50MSA9IG1vdXNlKHRoYXQpO1xuICAgICAgaWYgKHNoaWZ0aW5nICYmICFsb2NrWCAmJiAhbG9ja1kpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKHBvaW50MVswXSAtIHBvaW50WzBdKSA+IE1hdGguYWJzKHBvaW50MVsxXSAtIHBvaW50WzFdKSkgbG9ja1kgPSB0cnVlO1xuICAgICAgICBlbHNlIGxvY2tYID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBvaW50ID0gcG9pbnQxO1xuICAgICAgbW92aW5nID0gdHJ1ZTtcbiAgICAgIG5vZXZlbnQoKTtcbiAgICAgIG1vdmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3ZlKCkge1xuICAgICAgdmFyIHQ7XG5cbiAgICAgIGR4ID0gcG9pbnRbMF0gLSBwb2ludDBbMF07XG4gICAgICBkeSA9IHBvaW50WzFdIC0gcG9pbnQwWzFdO1xuXG4gICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgY2FzZSBNT0RFX1NQQUNFOlxuICAgICAgICBjYXNlIE1PREVfRFJBRzoge1xuICAgICAgICAgIGlmIChzaWduWCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgaWYgKHNpZ25ZKSBkeSA9IE1hdGgubWF4KE4gLSBuMCwgTWF0aC5taW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfSEFORExFOiB7XG4gICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSB3MCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwO1xuICAgICAgICAgIGVsc2UgaWYgKHNpZ25YID4gMCkgZHggPSBNYXRoLm1heChXIC0gZTAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgIGlmIChzaWduWSA8IDApIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gbjAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMDtcbiAgICAgICAgICBlbHNlIGlmIChzaWduWSA+IDApIGR5ID0gTWF0aC5tYXgoTiAtIHMwLCBNYXRoLm1pbihTIC0gczAsIGR5KSksIG4xID0gbjAsIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfQ0VOVEVSOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIHcwIC0gZHggKiBzaWduWCkpLCBlMSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIGUwICsgZHggKiBzaWduWCkpO1xuICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBuMCAtIGR5ICogc2lnblkpKSwgczEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBzMCArIGR5ICogc2lnblkpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZTEgPCB3MSkge1xuICAgICAgICBzaWduWCAqPSAtMTtcbiAgICAgICAgdCA9IHcwLCB3MCA9IGUwLCBlMCA9IHQ7XG4gICAgICAgIHQgPSB3MSwgdzEgPSBlMSwgZTEgPSB0O1xuICAgICAgICBpZiAodHlwZSBpbiBmbGlwWCkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBYW3R5cGVdXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzMSA8IG4xKSB7XG4gICAgICAgIHNpZ25ZICo9IC0xO1xuICAgICAgICB0ID0gbjAsIG4wID0gczAsIHMwID0gdDtcbiAgICAgICAgdCA9IG4xLCBuMSA9IHMxLCBzMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBZKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFlbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUhXG4gICAgICBpZiAobG9ja1gpIHcxID0gc2VsZWN0aW9uWzBdWzBdLCBlMSA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIGlmIChsb2NrWSkgbjEgPSBzZWxlY3Rpb25bMF1bMV0sIHMxID0gc2VsZWN0aW9uWzFdWzFdO1xuXG4gICAgICBpZiAoc2VsZWN0aW9uWzBdWzBdICE9PSB3MVxuICAgICAgICAgIHx8IHNlbGVjdGlvblswXVsxXSAhPT0gbjFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMF0gIT09IGUxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzFdICE9PSBzMSkge1xuICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBbW3cxLCBuMV0sIFtlMSwgczFdXTtcbiAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRlZCgpIHtcbiAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAgIGlmIChldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgICAgIGdyb3VwLm9uKFwidG91Y2htb3ZlLmJydXNoIHRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhZ0VuYWJsZShldmVudC52aWV3LCBtb3ZpbmcpO1xuICAgICAgICB2aWV3Lm9uKFwia2V5ZG93bi5icnVzaCBrZXl1cC5icnVzaCBtb3VzZW1vdmUuYnJ1c2ggbW91c2V1cC5icnVzaFwiLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGdyb3VwLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKTtcbiAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpO1xuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUgKG9uIHN0YXJ0KSFcbiAgICAgIGlmIChlbXB0eShzZWxlY3Rpb24pKSBzdGF0ZS5zZWxlY3Rpb24gPSBudWxsLCByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgIGVtaXQuZW5kKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga2V5ZG93bmVkKCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFKSB7XG4gICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFOyB0YWtlcyBwcmlvcml0eSBvdmVyIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSB8fCBtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMSAtIGR4OyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzEgLSBkeDtcbiAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczEgLSBkeTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xIC0gZHk7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9TUEFDRTtcbiAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbik7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXl1cHBlZCgpIHtcbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDE2OiB7IC8vIFNISUZUXG4gICAgICAgICAgaWYgKHNoaWZ0aW5nKSB7XG4gICAgICAgICAgICBsb2NrWCA9IGxvY2tZID0gc2hpZnRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRVxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX1NQQUNFKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogcmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9ldmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fX2JydXNoIHx8IHtzZWxlY3Rpb246IG51bGx9O1xuICAgIHN0YXRlLmV4dGVudCA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHN0YXRlLmRpbSA9IGRpbTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBicnVzaC5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbWytfWzBdWzBdLCArX1swXVsxXV0sIFsrX1sxXVswXSwgK19bMV1bMV1dXSksIGJydXNoKSA6IGV4dGVudDtcbiAgfTtcblxuICBicnVzaC5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBicnVzaCkgOiBmaWx0ZXI7XG4gIH07XG5cbiAgYnJ1c2guaGFuZGxlU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChoYW5kbGVTaXplID0gK18sIGJydXNoKSA6IGhhbmRsZVNpemU7XG4gIH07XG5cbiAgYnJ1c2gub24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gYnJ1c2ggOiB2YWx1ZTtcbiAgfTtcblxuICByZXR1cm4gYnJ1c2g7XG59XG4iLCJpbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IG5vZXZlbnQgZnJvbSBcIi4vbm9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2aWV3KSB7XG4gIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBzZWxlY3Rpb24gPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuX19ub3NlbGVjdCA9IHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdDtcbiAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSBcIm5vbmVcIjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24geWVzZHJhZyh2aWV3LCBub2NsaWNrKSB7XG4gIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBzZWxlY3Rpb24gPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBudWxsKTtcbiAgaWYgKG5vY2xpY2spIHtcbiAgICBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHNlbGVjdGlvbi5vbihcImNsaWNrLmRyYWdcIiwgbnVsbCk7IH0sIDApO1xuICB9XG4gIGlmIChcIm9uc2VsZWN0c3RhcnRcIiBpbiByb290KSB7XG4gICAgc2VsZWN0aW9uLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBudWxsKTtcbiAgfSBlbHNlIHtcbiAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSByb290Ll9fbm9zZWxlY3Q7XG4gICAgZGVsZXRlIHJvb3QuX19ub3NlbGVjdDtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odGFyZ2V0LCB0eXBlLCBzZWxlY3Rpb24pIHtcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuaW1wb3J0IHttZWFuLCBxdWFudGlsZSwgZGV2aWF0aW9ufSBmcm9tIFwiZDMtYXJyYXlcIjtcblxuXG4vLyByZWZlcmVuY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0tlcm5lbF8oc3RhdGlzdGljcylcbi8vIHJlZmVyZW5jZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvS2VybmVsX2RlbnNpdHlfZXN0aW1hdGlvblxuZXhwb3J0IGNvbnN0IGtlcm5lbCA9IHtcbiAgICBlcGFuZWNobmlrb3Y6IGZ1bmN0aW9uKHUpe3JldHVybiBNYXRoLmFicyh1KSA8PSAxPyAoMy80KSooMS11KnUpOjB9LFxuICAgIGdhdXNzaWFuOiBmdW5jdGlvbih1KXtyZXR1cm4gMS9NYXRoLnNxcnQoMipNYXRoLlBJKSpNYXRoLmV4cCgtLjUqdSp1KX1cbn07XG5cbi8vIHJlZmVyZW5jZTogaHR0cHM6Ly9naXRodWIuY29tL2phc29uZGF2aWVzL3NjaWVuY2UuanMvYmxvYi9tYXN0ZXIvc3JjL3N0YXRzL2JhbmR3aWR0aC5qc1xuZXhwb3J0IGNvbnN0IGtlcm5lbEJhbmR3aWR0aCA9IHtcbiAgICAvLyBCYW5kd2lkdGggc2VsZWN0b3JzIGZvciBHYXVzc2lhbiBrZXJuZWxzLlxuICAgIG5yZDogZnVuY3Rpb24oeCkge1xuICAgICAgICBsZXQgaXFyID0gcXVhbnRpbGUoeCwgMC43NSkgLSBxdWFudGlsZSh4LCAwLjI1KTtcbiAgICAgICAgbGV0IGggPSBpcXIgLyAxLjM0O1xuICAgICAgICByZXR1cm4gMS4wNiAqIE1hdGgubWluKGRldmlhdGlvbih4KSwgaCkgKiBNYXRoLnBvdyh4Lmxlbmd0aCwgLTEvNSk7XG4gICAgfVxufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIGtlcm5lbDogdGhlIGtlcm5lbCBmdW5jdGlvbiwgc3VjaCBhcyBnYXVzc2lhblxuICogQHBhcmFtIFg6IGxpc3Qgb2YgYmluc1xuICogQHBhcmFtIGg6IHRoZSBiYW5kd2lkdGgsIGVpdGhlciBhIG51bWVyaWNhbCB2YWx1ZSBnaXZlbiBieSB0aGUgdXNlciBvciBjYWxjdWxhdGVkIHVzaW5nIHRoZSBmdW5jdGlvbiBrZXJuZWxCYW5kd2lkdGhcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn06IHRoZSBrZXJuZWwgZGVuc2l0eSBlc3RpbWF0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGtlcm5lbERlbnNpdHlFc3RpbWF0b3Ioa2VybmVsLCBYLCBoKXtcbiAgICByZXR1cm4gZnVuY3Rpb24oVikge1xuICAgICAgICAvLyBYIGlzIHRoZSBiaW5zXG4gICAgICAgIHJldHVybiBYLm1hcCgoeCkgPT4gW3gsIG1lYW4oViwgKHYpID0+IGtlcm5lbCgoeC12KS9oKSkvaF0pO1xuICAgIH1cbn1cblxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG0gPSBuLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBzdW0gPSAwO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZXNbaV0pKSkgc3VtICs9IHZhbHVlO1xuICAgICAgZWxzZSAtLW07XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkgc3VtICs9IHZhbHVlO1xuICAgICAgZWxzZSAtLW07XG4gICAgfVxuICB9XG5cbiAgaWYgKG0pIHJldHVybiBzdW0gLyBtO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuLypcbklucHV0IGRhdGEgc3RydWN0dXJlOiBhIGxpc3Qgb2YgZGF0YSBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHN0cnVjdHVyZTpcbltcbiAgICB7XG4gICAgICAgIGdyb3VwOiBcImdyb3VwMVwiXG4gICAgICAgIGxhYmVsOiBcImRhdGFzZXQgMVwiLFxuICAgICAgICB2YWx1ZXM6IFthIGxpc3Qgb2YgbnVtZXJpY2FsIHZhbHVlc11cbiAgICAgfSxcbiAgICAge1xuICAgICAgICBncm91cDogXCJncm91cDFcIlxuICAgICAgICBsYWJlbDogXCJkYXRhc2V0IDJcIixcbiAgICAgICAgdmFsdWVzOiBbYSBsaXN0IG9mIG51bWVyaWNhbCB2YWx1ZXNdXG4gICAgIH0sXG4gICAgIHtcbiAgICAgICAgZ3JvdXA6IFwiZ3JvdXAyXCJcbiAgICAgICAgbGFiZWw6IFwiZGF0YXNldCAzXCIsXG4gICAgICAgIHZhbHVlczogW2EgbGlzdCBvZiBudW1lcmljYWwgdmFsdWVzXVxuICAgICB9XG5dXG4qL1xuXG5pbXBvcnQge2V4dGVudCwgbWVkaWFuLCBhc2NlbmRpbmcsIHF1YW50aWxlLCBtYXgsIG1pbn0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge25lc3R9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge3NjYWxlQmFuZCwgc2NhbGVMaW5lYXJ9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0IHthcmVhfSBmcm9tIFwiZDMtc2hhcGVcIjtcbmltcG9ydCB7YXhpc1RvcCwgYXhpc0JvdHRvbSwgYXhpc0xlZnR9IGZyb20gXCJkMy1heGlzXCI7XG5pbXBvcnQge3NlbGVjdCwgc2VsZWN0QWxsLCBldmVudH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHticnVzaH0gZnJvbSBcImQzLWJydXNoXCI7XG5pbXBvcnQge3JhbmRvbU5vcm1hbH0gZnJvbSBcImQzLXJhbmRvbVwiO1xuXG5pbXBvcnQge2tlcm5lbERlbnNpdHlFc3RpbWF0b3IsIGtlcm5lbCwga2VybmVsQmFuZHdpZHRofSBmcm9tIFwiLi9rZGVcIjtcbmltcG9ydCBUb29sdGlwIGZyb20gXCIuL1Rvb2x0aXBcIjtcbmltcG9ydCBUb29sYmFyIGZyb20gXCIuL1Rvb2xiYXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JvdXBlZFZpb2xpbiB7XG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3IgZm9yIEdyb3VwZWRWaW9saW5cbiAgICAgKiBAcGFyYW0gZGF0YSB7TGlzdH06IGEgbGlzdCBvZiBvYmplY3RzIHdpdGggYXR0cmlidXRlczogZ3JvdXA6IHtTdHJpbmd9LCBsYWJlbDoge1N0cmluZ30sIHZhbHVlczoge0xpc3R9IG9mIG51bWVyaWNhbCB2YWx1ZXMsIHNpemU6IGludGVnZXIsIG9wdGlvbmFsXG4gICAgICogQHBhcmFtIGdyb3VwSW5mbyB7RGljdGlvbmFyeX06IG1ldGFkYXRhIG9mIHRoZSBncm91cCwgaW5kZXhlZCBieSBncm91cCBJRFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIGdyb3VwSW5mbyA9IHt9KXtcbiAgICAgICAgdGhpcy5fc2FuaXR5Q2hlY2soZGF0YSk7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuZ3JvdXBJbmZvID0gZ3JvdXBJbmZvO1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb20ge0RPTX0gdGhlIFNWRyBkb20gb2JqZWN0IHRvIGFwcGVuZCB0aGUgdmlvbGluIHBsb3QgdG9cbiAgICAgKiBAcGFyYW0gd2lkdGgge0Zsb2F0fVxuICAgICAqIEBwYXJhbSBoZWlnaHQge0Zsb2F0fVxuICAgICAqIEBwYXJhbSB4UGFkZGluZyB7RmxvYXR9IHBhZGRpbmcgb2YgdGhlIHggYXhpc1xuICAgICAqIEBwYXJhbSB4RG9tYWluIHtMaXN0fSB0aGUgb3JkZXIgb2YgWCBncm91cHNcbiAgICAgKiBAcGFyYW0geURvbWFpbiAge0xpc3R9IHRoZSBtaW4gYW5kIG1heCB2YWx1ZXMgb2YgdGhlIHkgZG9tYWluLiBTZXQgdG8gZW1wdHkgYXJyYXkgb3IgdW5kZWZpbmVkIHRvIGF1dG8tY2FsY3VsYXRlLlxuICAgICAqIEBwYXJhbSB5TGFiZWwge1N0cmluZ31cbiAgICAgKiBAcGFyYW0gc2hvd1hcbiAgICAgKiBAcGFyYW0gc2hvd1N1YlhcbiAgICAgKiBAcGFyYW0gc3ViWEFuZ2xlXG4gICAgICogQHBhcmFtIHNob3dXaGlza2VyXG4gICAgICogQHBhcmFtIHNob3dEaXZpZGVyXG4gICAgICogQHBhcmFtIHNob3dMZWdlbmRcbiAgICAgKiBAcGFyYW0gc2hvd1NpemVcbiAgICAgKiBAcGFyYW0gc29ydFN1YlhcbiAgICAgKiBAcGFyYW0gc2hvd091dGxpZXJzXG4gICAgICogQHBhcmFtIG51bVBvaW50cyB7SW50ZWdlcn0gTnVtYmVyIG9mIHBvaW50cyByZXF1aXJlZCB0byByZW5kZXIgdmlvbGluIHBsb3QuIERpc3BsYXlzIHBvaW50cyBpZiBuIDwgbnVtUG9pbnRzLlxuICAgICAqL1xuXG4gICAgcmVuZGVyKGRvbSxcbiAgICAgICAgICAgd2lkdGg9NTAwLFxuICAgICAgICAgICBoZWlnaHQ9MzU3LFxuICAgICAgICAgICB4UGFkZGluZz0wLjA1LFxuICAgICAgICAgICB4RG9tYWluPXVuZGVmaW5lZCxcbiAgICAgICAgICAgeURvbWFpbj1bLTMsM10sXG4gICAgICAgICAgIHlMYWJlbD1cIlkgYXhpc1wiLFxuICAgICAgICAgICBzaG93WD10cnVlLFxuICAgICAgICAgICB4QW5nbGU9MzAsXG4gICAgICAgICAgIHNob3dTdWJYPXRydWUsXG4gICAgICAgICAgIHN1YlhBbmdsZT0wLFxuICAgICAgICAgICBzaG93V2hpc2tlcj1mYWxzZSxcbiAgICAgICAgICAgc2hvd0RpdmlkZXI9ZmFsc2UsXG4gICAgICAgICAgIHNob3dMZWdlbmQ9ZmFsc2UsXG4gICAgICAgICAgIHNob3dTaXplPWZhbHNlLFxuICAgICAgICAgICBzb3J0U3ViWD1mYWxzZSxcbiAgICAgICAgICAgc2hvd091dGxpZXJzPWZhbHNlLFxuICAgICAgICAgICBudW1Qb2ludHM9MCl7XG5cbiAgICAgICAgLy8gZGVmaW5lIHRoZSByZXNldCBmb3IgdGhpcyBwbG90XG4gICAgICAgIHRoaXMucmVzZXQgPSAoKSA9PiB7XG4gICAgICAgICAgICBkb20uc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKGRvbSwgd2lkdGgsIGhlaWdodCwgeFBhZGRpbmcsIHhEb21haW4sIHlEb21haW4sIHlMYWJlbCwgc2hvd1gsIHhBbmdsZSwgc2hvd1N1YlgsIHN1YlhBbmdsZSwgc2hvd1doaXNrZXIsIHNob3dEaXZpZGVyLCBzaG93TGVnZW5kLCBzaG93U2l6ZSwgc29ydFN1YlgsIHNob3dPdXRsaWVycyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy51cGRhdGVZU2NhbGUgPSBmdW5jdGlvbih5TGFiZWw9dW5kZWZpbmVkLCB5U2NhbGU9dW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkb20uc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGlmICh5U2NhbGUgPT09IHVuZGVmaW5lZCkgeVNjYWxlID0gW107XG4gICAgICAgICAgICB0aGlzLnJlbmRlcihkb20sIHdpZHRoLCBoZWlnaHQsIHhQYWRkaW5nLCB4RG9tYWluLCBbXSwgeUxhYmVsLCBzaG93WCwgeEFuZ2xlLCBzaG93U3ViWCwgc3ViWEFuZ2xlLCBzaG93V2hpc2tlciwgc2hvd0RpdmlkZXIsIHNob3dMZWdlbmQsIHNob3dTaXplLCBzb3J0U3ViWCwgc2hvd091dGxpZXJzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnVwZGF0ZVhTY2FsZSA9IGZ1bmN0aW9uKHhEb21haW49dW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoeERvbWFpbiA9PT0gdW5kZWZpbmVkKSBjb25zb2xlLmVycm9yKCd1cGRhdGVYU2NhbGUgY2FsbGVkIHdpdGhvdXQgbmV3IFggZG9tYWluJyk7XG4gICAgICAgICAgICBkb20uc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKGRvbSwgd2lkdGgsIGhlaWdodCwgeFBhZGRpbmcsIHhEb21haW4sIFtdLCB5TGFiZWwsIHNob3dYLCB4QW5nbGUsIHNob3dTdWJYLCBzdWJYQW5nbGUsIHNob3dXaGlza2VyLCBzaG93RGl2aWRlciwgc2hvd0xlZ2VuZCwgc2hvd1NpemUsIHNvcnRTdWJYLCBzaG93T3V0bGllcnMpO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZGVmaW5lcyB0aGUgWCwgc3ViWCwgWSwgWiBzY2FsZXNcbiAgICAgICAgaWYgKHlEb21haW49PT11bmRlZmluZWQgfHwgMCA9PSB5RG9tYWluLmxlbmd0aCl7XG4gICAgICAgICAgICBsZXQgYWxsViA9IFtdO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmZvckVhY2goKGQpID0+IGFsbFYgPSBhbGxWLmNvbmNhdChkLnZhbHVlcykpO1xuICAgICAgICAgICAgeURvbWFpbiA9IGV4dGVudChhbGxWKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlLW9yZ2FuaXplZCB0aGlzLmRhdGEgaW5kZXhlZCBieSBncm91cHNcbiAgICAgICAgdGhpcy5ncm91cHMgPSBuZXN0KClcbiAgICAgICAgICAgIC5rZXkoKGQpID0+IGQuZ3JvdXApXG4gICAgICAgICAgICAuZW50cmllcyh0aGlzLmRhdGEpO1xuXG4gICAgICAgIHRoaXMuc2NhbGUgPSB7XG4gICAgICAgICAgICB4OiBzY2FsZUJhbmQoKVxuICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kKFswLCB3aWR0aF0pXG4gICAgICAgICAgICAgICAgLmRvbWFpbih4RG9tYWlufHx0aGlzLmdyb3Vwcy5tYXAoKGQpID0+IGQua2V5KSlcbiAgICAgICAgICAgICAgICAucGFkZGluZ0lubmVyKHhQYWRkaW5nKSxcbiAgICAgICAgICAgIHN1Yng6IHNjYWxlQmFuZCgpLFxuICAgICAgICAgICAgeTogc2NhbGVMaW5lYXIoKVxuICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kKFtoZWlnaHQsIDBdKVxuICAgICAgICAgICAgICAgIC5kb21haW4oeURvbWFpbiksXG4gICAgICAgICAgICB6OiBzY2FsZUxpbmVhcigpIC8vIHRoaXMgaXMgdGhlIHZpb2xpbiB3aWR0aCwgdGhlIGRvbWFpbiBhbmQgcmFuZ2UgYXJlIGRldGVybWluZWQgbGF0ZXIgaW5kaXZpZHVhbGx5IGZvciBlYWNoIHZpb2xpblxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGZvciBlYWNoIGdyb3VwXG4gICAgICAgIHRoaXMuZ3JvdXBzLmZvckVhY2goKGcpID0+IHtcbiAgICAgICAgICAgIGxldCBncm91cCA9IGcua2V5O1xuICAgICAgICAgICAgbGV0IGVudHJpZXMgPSBnLnZhbHVlcztcbiAgICAgICAgICAgIGxldCBpbmZvID0gdGhpcy5ncm91cEluZm9bZ3JvdXBdOyAvLyBvcHRpb25hbFxuICAgICAgICAgICAgZy5pbmRleCA9IHRoaXMuc2NhbGUueC5kb21haW4oKS5pbmRleE9mKGdyb3VwKTtcblxuICAgICAgICAgICAgaWYgKGluZm8gIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgIC8vIHJlbmRlcnMgZ3JvdXAgaW5mbyBzdWNoIGFzIHAtdmFsdWUsIGdyb3VwIG5hbWVcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cEluZm9Eb20gPSBkb20uYXBwZW5kKFwiZ1wiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cExhYmVscyA9IGdyb3VwSW5mb0RvbS5zZWxlY3RBbGwoXCIudmlvbGluLWdyb3VwLWxhYmVsXCIpXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKFsncHZhbHVlJ10pO1xuICAgICAgICAgICAgICAgIGdyb3VwTGFiZWxzLmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKSAvLyBDb2RlIHJldmlldzogY29uc2lkZXIgbW92aW5nIHRoaXMgcGFydCB0byB0aGUgZVFUTCBkYXNoYm9hcmRcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAwKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLWdyb3VwLWxhYmVsXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJjZW50ZXJcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpbmZvWydwdmFsdWVUaHJlc2hvbGQnXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZD09J3B2YWx1ZScmJnBhcnNlRmxvYXQoaW5mb1tkXSk8PXBhcnNlRmxvYXQoaW5mb1sncHZhbHVlVGhyZXNob2xkJ10pP1wib3JhbmdlcmVkXCI6XCJTbGF0ZUdyYXlcIlxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHggPSB0aGlzLnNjYWxlLngoZ3JvdXApICsgdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpLzI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeSA9IHRoaXMuc2NhbGUueSh5RG9tYWluWzBdKSArIDUwOyAvLyB0b2RvOiBhdm9pZCBoYXJkLWNvZGVkIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSlgXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50ZXh0KChkKSA9PiBgJHtkfTogJHtwYXJzZUZsb2F0KHBhcnNlRmxvYXQoaW5mb1tkXSkudG9QcmVjaXNpb24oMykpLnRvRXhwb25lbnRpYWwoKX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZGVmaW5lcyB0aGUgdGhpcy5zY2FsZS5zdWJ4IGJhc2VkIG9uIHRoaXMuc2NhbGUueFxuICAgICAgICAgICAgaWYgKHNvcnRTdWJYKSB7XG4gICAgICAgICAgICAgICAgZW50cmllcy5zb3J0KChhLGIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEubGFiZWwgPCBiLmxhYmVsKSByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGEubGFiZWwgPiBiLmxhYmVsKSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2NhbGUuc3VieFxuICAgICAgICAgICAgICAgIC5kb21haW4oZW50cmllcy5tYXAoKGQpID0+IGQubGFiZWwpKVxuICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kKFt0aGlzLnNjYWxlLngoZ3JvdXApLCB0aGlzLnNjYWxlLngoZ3JvdXApICsgdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpXSk7XG5cbiAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcblxuICAgICAgICAgICAgICAgIGlmICgwID09IGVudHJ5LnZhbHVlcy5sZW5ndGgpIHJldHVybjsgLy8gbm8gZnVydGhlciByZW5kZXJpbmcgaWYgdGhpcyBncm91cCBoYXMgbm8gZW50cmllc1xuICAgICAgICAgICAgICAgIGVudHJ5LnZhbHVlcyA9IGVudHJ5LnZhbHVlcy5zb3J0KGFzY2VuZGluZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhd1Zpb2xpbihkb20sIGVudHJ5LCBzaG93V2hpc2tlciwgZy5pbmRleCwgc2hvd091dGxpZXJzLCBudW1Qb2ludHMpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGFkZHMgdGhlIHN1Yi14IGF4aXMgaWYgdGhlcmUgYXJlIG1vcmUgdGhhbiBvbmUgZW50cmllc1xuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IDE4O1xuICAgICAgICAgICAgaWYgKHNob3dTaXplKXtcbiAgICAgICAgICAgICAgICAgY29uc3Qgc2l6ZVNjYWxlID0gc2NhbGVCYW5kKClcbiAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihlbnRyaWVzLm1hcCgoZCkgPT4ge3JldHVybiBkLnNpemU9PXVuZGVmaW5lZD8nKDApJzpgKCR7ZC5zaXplfHwwfSlgfSkpXG4gICAgICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kKFt0aGlzLnNjYWxlLngoZ3JvdXApLCB0aGlzLnNjYWxlLngoZ3JvdXApICsgdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpXSk7XG4gICAgICAgICAgICAgICAgIGNvbnN0IHNpemV4RyA9IGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLXNpemUtYXhpc1wiKVxuICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAke2hlaWdodCArIGJ1ZmZlcn0pYClcbiAgICAgICAgICAgICAgICAgICAgIC5jYWxsKGF4aXNCb3R0b20oc2l6ZVNjYWxlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzaG93U3ViWCkge1xuICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSA1O1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1YnhHID0gZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1zdWItYXhpc1wiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKDAsICR7aGVpZ2h0ICsgYnVmZmVyfSlgKVxuICAgICAgICAgICAgICAgICAgICAuY2FsbChheGlzQm90dG9tKHRoaXMuc2NhbGUuc3VieCkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHN1YlhBbmdsZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VieEcuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgcm90YXRlKCR7c3ViWEFuZ2xlfSwgMiwgMTApYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVuZGVycyB0aGUgeCBheGlzXG4gICAgICAgIGxldCBidWZmZXIgPSBzaG93U3ViWD81NTowOyAvLyBDb2RlIHJldmlldzogaGFyZC1jb2RlZCB2YWx1ZXNcbiAgICAgICAgdGhpcy54QXhpcyA9IHNob3dYP2F4aXNCb3R0b20odGhpcy5zY2FsZS54KTpheGlzQm90dG9tKHRoaXMuc2NhbGUueCkudGlja0Zvcm1hdChcIlwiKTtcbiAgICAgICAgZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4teC1heGlzIGF4aXMtLXhcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwgJHtoZWlnaHQgKyBidWZmZXJ9KWApXG4gICAgICAgICAgICAuY2FsbCh0aGlzLnhBeGlzKSAvLyBzZXQgdGlja0Zvcm1hdChcIlwiKSB0byBzaG93IHRpY2sgbWFya3Mgd2l0aG91dCB0ZXh0IGxhYmVsc1xuICAgICAgICAgICAgLnNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHJvdGF0ZSgke3hBbmdsZX0sIC0xMCwgMTApYCk7XG5cbiAgICAgICAgLy8gYWRkcyB0aGUgeSBBeGlzXG4gICAgICAgIGJ1ZmZlciA9IDU7XG4gICAgICAgIHRoaXMueUF4aXMgPSBheGlzTGVmdCh0aGlzLnNjYWxlLnkpXG4gICAgICAgICAgICAgICAgICAgIC50aWNrVmFsdWVzKHRoaXMuc2NhbGUueS50aWNrcyg1KSk7XG4gICAgICAgIGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLXktYXhpcyBheGlzLS15XCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKC0ke2J1ZmZlcn0sIDApYClcbiAgICAgICAgICAgIC5jYWxsKHRoaXMueUF4aXMpO1xuXG4gICAgICAgIC8vIGFkZHMgdGhlIHRleHQgbGFiZWwgZm9yIHRoZSB5IGF4aXNcbiAgICAgICAgZG9tLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tYXhpcy1sYWJlbFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgtJHtidWZmZXIgKiAyICsgc2VsZWN0KCcudmlvbGluLXktYXhpcycpLm5vZGUoKS5nZXRCQm94KCkud2lkdGh9LCAke3RoaXMuc2NhbGUueS5yYW5nZSgpWzBdICsgKHRoaXMuc2NhbGUueS5yYW5nZSgpWzFdIC0gdGhpcy5zY2FsZS55LnJhbmdlKClbMF0pLzJ9KSByb3RhdGUoLTkwKWApXG4gICAgICAgICAgICAudGV4dCh5TGFiZWwpO1xuXG4gICAgICAgIC8vIHBsb3QgbW91c2UgZXZlbnRzXG4gICAgICAgIGRvbS5vbihcIm1vdXNlb3V0XCIsICgpPT57XG4gICAgICAgICAgICBpZih0aGlzLnRvb2x0aXAgIT09IHVuZGVmaW5lZCkgdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYWRkIGdyb3VwIGRpdmlkZXJzXG4gICAgICAgIGlmKHNob3dEaXZpZGVyKXtcbiAgICAgICAgICAgIHRoaXMuX2FkZEdyb3VwRGl2aWRlcihkb20pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIGNvbG9yIGxlZ2VuZFxuICAgICAgICBpZiAoc2hvd0xlZ2VuZCkge1xuICAgICAgICAgICAgY29uc3QgbGVnZW5kRyA9IGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBcInZpb2xpbkxlZ2VuZFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwgMClgKTtcblxuICAgICAgICAgICAgbGVnZW5kRy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHRoaXMuc2NhbGUueC5yYW5nZSgpWzBdKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtMzUpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCA2MCoodGhpcy5ncm91cHNbMF0udmFsdWVzLmxlbmd0aCkgKyAxMClcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCAyNClcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcInNpbHZlclwiKTtcblxuICAgICAgICAgICAgY29uc3QgbGVnZW5kcyA9IGxlZ2VuZEcuc2VsZWN0QWxsKFwiLnZpb2xpbi1sZWdlbmRcIikuZGF0YSh0aGlzLmdyb3Vwc1swXS52YWx1ZXMpO1xuXG5cbiAgICAgICAgICAgIGNvbnN0IGcgPSBsZWdlbmRzLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5jbGFzc2VkKFwidmlvbGluLWxlZ2VuZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIGNvbnN0IHcgPSAxMDtcbiAgICAgICAgICAgIGcuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCwgaSkgPT4gNSArIDYwKihpKSAgKyB0aGlzLnNjYWxlLngucmFuZ2UoKVswXSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgLTI4KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdylcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCB3KVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQpID0+IGQuY29sb3IpO1xuXG4gICAgICAgICAgICBnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLWxlZ2VuZC10ZXh0XCIpXG4gICAgICAgICAgICAgICAgLnRleHQoKGQpID0+IGQubGFiZWwpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkLCBpKSA9PiAxNyArIDYwKihpKSArIHRoaXMuc2NhbGUueC5yYW5nZSgpWzBdKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtMjApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkUGxvdFRpdGxlKGRvbSwgdGl0bGUpe1xuICAgICAgICBsZXQgeCA9ICh0aGlzLnNjYWxlLngucmFuZ2UoKVsxXS10aGlzLnNjYWxlLngucmFuZ2UoKVswXSArIDEpIC8yO1xuICAgICAgICBsZXQgeSA9ICh0aGlzLnNjYWxlLnkucmFuZ2UoKVsxXSAtIDEwKTtcbiAgICAgICAgZG9tLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tdGl0bGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSlgKVxuICAgICAgICAgICAgLnRleHQodGl0bGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgdG9vbHRpcCBvYmplY3RcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2x0aXAncyBkb20gSURcbiAgICAgKiBAcmV0dXJucyB7VG9vbHRpcH1cbiAgICAgKi9cbiAgICBjcmVhdGVUb29sdGlwKGRvbUlkKXtcbiAgICAgICAgaWYgKCQoYCMke2RvbUlkfWApLmxlbmd0aCA9PSAwKSAkKCc8ZGl2Lz4nKS5hdHRyKCdpZCcsIGRvbUlkKS5hcHBlbmRUbygkKCdib2R5JykpO1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSBuZXcgVG9vbHRpcChkb21JZCk7XG4gICAgICAgIHNlbGVjdChgIyR7ZG9tSWR9YCkuY2xhc3NlZCgndmlvbGluLXRvb2x0aXAnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbHRpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHRvb2xiYXIgcGFuZWxcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2xiYXIncyBkb20gSURcbiAgICAgKiBAcGFyYW0gdG9vbHRpcCB7VG9vbHRpcH1cbiAgICAgKiBAcmV0dXJucyB7VG9vbGJhcn1cbiAgICAgKi9cblxuICAgIGNyZWF0ZVRvb2xiYXIoZG9tSWQsIHRvb2x0aXApe1xuICAgICAgICAvLyBpZiAodG9vbHRpcCA9PT0gdW5kZWZpbmVkKSB0b29sdGlwID0gdGhpcy5jcmVhdGVUb29sdGlwKGRvbUlkKTtcbiAgICAgICAgdGhpcy50b29sYmFyID0gbmV3IFRvb2xiYXIoZG9tSWQsIHRvb2x0aXApO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sYmFyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGJydXNoIHRvIHRoZSBwbG90XG4gICAgICogQHBhcmFtIGRvbSB7RDN9IERvbSBlbGVtZW50XG4gICAgICovXG4gICAgYWRkQnJ1c2goZG9tKXtcbiAgICAgICAgY29uc3QgdGhlQnJ1c2ggPSBicnVzaCgpO1xuICAgICAgICB0aGVCcnVzaC5vbihcImVuZFwiLCAoKT0+e3RoaXMuem9vbShkb20sIHRoZUJydXNoKX0pO1xuICAgICAgICBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJydXNoXCIpXG4gICAgICAgICAgICAuY2FsbCh0aGVCcnVzaCk7XG4gICAgfVxuXG4gICAgem9vbShkb20sIHRoZUJydXNoKXtcbiAgICAgICAgbGV0IHMgPSBldmVudC5zZWxlY3Rpb24sXG4gICAgICAgICAgICBpZGVsVGltZW91dCxcbiAgICAgICAgICAgIGlkZWxEZWxheSA9IDM1MDtcbiAgICAgICAgaWYgKHRoZUJydXNoID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFzKSB7XG4gICAgICAgICAgICBpZiAoIWlkZWxUaW1lb3V0KSByZXR1cm4gaWRlbFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZGVsVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICB9LCBpZGVsRGVsYXkpO1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyByZXNldCB0aGUgY3VycmVudCBzY2FsZXMnIGRvbWFpbnMgYmFzZWQgb24gdGhlIGJydXNoZWQgd2luZG93XG4gICAgICAgICAgICB0aGlzLnNjYWxlLnguZG9tYWluKHRoaXMuc2NhbGUueC5kb21haW4oKS5maWx0ZXIoKGQsIGkpPT57XG4gICAgICAgICAgICAgICAgICBjb25zdCBsb3dCb3VuZCA9IE1hdGguZmxvb3Ioc1swXVswXS90aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkpO1xuICAgICAgICAgICAgICAgICAgY29uc3QgdXBwZXJCb3VuZCA9IE1hdGguZmxvb3Ioc1sxXVswXS90aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPj0gbG93Qm91bmQgJiYgaSA8PXVwcGVyQm91bmQ7XG4gICAgICAgICAgICB9KSk7IC8vIFRPRE86IGFkZCBjb21tZW50c1xuXG4gICAgICAgICAgICBjb25zdCBtaW4gPSBNYXRoLmZsb29yKHRoaXMuc2NhbGUueS5pbnZlcnQoc1sxXVsxXSkpO1xuICAgICAgICAgICAgY29uc3QgbWF4ID0gTWF0aC5mbG9vcih0aGlzLnNjYWxlLnkuaW52ZXJ0KHNbMF1bMV0pKTtcbiAgICAgICAgICAgIHRoaXMuc2NhbGUueS5kb21haW4oW21pbiwgbWF4XSk7IC8vIHRvZG86IGRlYnVnXG5cbiAgICAgICAgICAgIGRvbS5zZWxlY3QoXCIuYnJ1c2hcIikuY2FsbCh0aGVCcnVzaC5tb3ZlLCBudWxsKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgIC8vIHpvb21cbiAgICAgICAgbGV0IHQgPSBkb20udHJhbnNpdGlvbigpLmR1cmF0aW9uKDc1MCk7XG4gICAgICAgIGRvbS5zZWxlY3QoXCIuYXhpcy0teFwiKS50cmFuc2l0aW9uKHQpLmNhbGwodGhpcy54QXhpcyk7XG4gICAgICAgIGRvbS5zZWxlY3QoXCIuYXhpcy0teVwiKS50cmFuc2l0aW9uKHQpLmNhbGwodGhpcy55QXhpcyk7XG5cbiAgICAgICAgdGhpcy5ncm91cHMuZm9yRWFjaCgoZ2csIGkpPT4ge1xuICAgICAgICAgICAgbGV0IGdyb3VwID0gZ2cua2V5O1xuICAgICAgICAgICAgbGV0IGVudHJpZXMgPSBnZy52YWx1ZXM7XG5cbiAgICAgICAgICAgIC8vIHJlLWRlZmluZSB0aGUgc3VieCdzIHJhbmdlXG4gICAgICAgICAgICB0aGlzLnNjYWxlLnN1YnhcbiAgICAgICAgICAgICAgICAucmFuZ2VSb3VuZChbdGhpcy5zY2FsZS54KGdyb3VwKSwgdGhpcy5zY2FsZS54KGdyb3VwKSArIHRoaXMuc2NhbGUueC5iYW5kd2lkdGgoKV0pO1xuXG4gICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT0gZW50cnkudmFsdWVzLmxlbmd0aCkgcmV0dXJuOyAvLyBubyBmdXJ0aGVyIHJlbmRlcmluZyBpZiB0aGlzIGdyb3VwIGhhcyBubyBlbnRyaWVzXG4gICAgICAgICAgICAgICAgY29uc3QgZ0luZGV4ID0gdGhpcy5zY2FsZS54LmRvbWFpbigpLmluZGV4T2YoZ3JvdXApO1xuXG5cbiAgICAgICAgICAgICAgICAvLyByZS1kZWZpbmUgdGhlIHNjYWxlLnoncyByYW5nZVxuICAgICAgICAgICAgICAgIHRoaXMuc2NhbGUuelxuICAgICAgICAgICAgICAgICAgICAucmFuZ2UoW3RoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCksIHRoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCkgKyB0aGlzLnNjYWxlLnN1YnguYmFuZHdpZHRoKCldKTtcblxuICAgICAgICAgICAgICAgIC8vIHJlLXJlbmRlciB0aGUgdmlvbGluXG4gICAgICAgICAgICAgICAgY29uc3QgZyA9IGRvbS5zZWxlY3QoYCN2aW9saW4ke2dnLmluZGV4fS0ke2VudHJ5LmxhYmVsfWApO1xuICAgICAgICAgICAgICAgIGcuc2VsZWN0KFwiLnZpb2xpblwiKVxuICAgICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbih0KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgYXJlYSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAueDAoKGQpID0+IHRoaXMuc2NhbGUueihkWzFdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC54MSgoZCkgPT4gdGhpcy5zY2FsZS56KC1kWzFdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC55KChkKSA9PiB0aGlzLnNjYWxlLnkoZFswXSkpXG4gICAgICAgICAgICAgICAgICAgICk7XG5cblxuICAgICAgICAgICAgICAgIC8vIHJlLXJlbmRlciB0aGUgYm94IHBsb3RcbiAgICAgICAgICAgICAgICAvLyBpbnRlcnF1YXJ0aWxlIHJhbmdlXG4gICAgICAgICAgICAgICAgY29uc3QgcTEgPSBxdWFudGlsZShlbnRyeS52YWx1ZXMsIDAuMjUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHEzID0gcXVhbnRpbGUoZW50cnkudmFsdWVzLCAwLjc1KTtcbiAgICAgICAgICAgICAgICBjb25zdCB6ID0gMC4xO1xuICAgICAgICAgICAgICAgIGcuc2VsZWN0KFwiLnZpb2xpbi1pclwiKVxuICAgICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbih0KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy5zY2FsZS56KC16KSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIHRoaXMuc2NhbGUueShxMykpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgTWF0aC5hYnModGhpcy5zY2FsZS56KC16KSAtIHRoaXMuc2NhbGUueih6KSkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIE1hdGguYWJzKHRoaXMuc2NhbGUueShxMykgLSB0aGlzLnNjYWxlLnkocTEpKSk7XG5cbiAgICAgICAgICAgICAgICAvLyB0aGUgbWVkaWFuIGxpbmVcbiAgICAgICAgICAgICAgICBjb25zdCBtZWQgPSBtZWRpYW4oZW50cnkudmFsdWVzKTtcbiAgICAgICAgICAgICAgICBnLnNlbGVjdChcIi52aW9saW4tbWVkaWFuXCIpXG4gICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKHQpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgdGhpcy5zY2FsZS56KC16KSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCB0aGlzLnNjYWxlLnooeikpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgdGhpcy5zY2FsZS55KG1lZCkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgdGhpcy5zY2FsZS55KG1lZCkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZW5kZXIgdGhlIHZpb2xpbiBhbmQgYm94IHBsb3RzXG4gICAgICogQHBhcmFtIGRvbSB7RDMgRE9NfVxuICAgICAqIEBwYXJhbSBlbnRyeSB7T2JqZWN0fSB3aXRoIGF0dHJzOiB2YWx1ZXMsIGxhYmVsXG4gICAgICogQHBhcmFtIHNob3dXaGlza2VyIHtCb29sZWFufVxuICAgICAqIEBwYXJhbSBnSW5kZXhcbiAgICAgKiBAcGFyYW0gc2hvd091dGxpZXJzIHtCb29sZWFufVxuICAgICAqIEBwYXJhbSBzaG93UG9pbnRzIHtCb29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2RyYXdWaW9saW4oZG9tLCBlbnRyeSwgc2hvd1doaXNrZXIsIGdJbmRleCwgc2hvd091dGxpZXJzLCBudW1Qb2ludHMpe1xuXG4gICAgICAgIC8vIGdlbmVyYXRlIHRoZSB2ZXJ0aWNlcyBmb3IgdGhlIHZpb2xpbiBwYXRoIHVzZSBhIGtkZVxuICAgICAgICBsZXQga2RlID0ga2VybmVsRGVuc2l0eUVzdGltYXRvcihcbiAgICAgICAgICAgIGtlcm5lbC5nYXVzc2lhbixcbiAgICAgICAgICAgIHRoaXMuc2NhbGUueS50aWNrcygxMDApLCAvLyB1c2UgdXAgdG8gMTAwIHZlcnRpY2VzIGFsb25nIHRoZSBZIGF4aXMgKHRvIGNyZWF0ZSB0aGUgdmlvbGluIHBhdGgpXG4gICAgICAgICAgICBrZXJuZWxCYW5kd2lkdGgubnJkKGVudHJ5LnZhbHVlcykgLy8gZXN0aW1hdGUgdGhlIGJhbmR3aWR0aCBiYXNlZCBvbiB0aGUgZGF0YVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBlRG9tYWluID0gZXh0ZW50KGVudHJ5LnZhbHVlcyk7IC8vIGdldCB0aGUgbWF4IGFuZCBtaW4gaW4gZW50cnkudmFsdWVzXG4gICAgICAgIGNvbnN0IHZlcnRpY2VzID0ga2RlKGVudHJ5LnZhbHVlcykuZmlsdGVyKChkKT0+ZFswXT49ZURvbWFpblswXSYmZFswXTw9ZURvbWFpblsxXSk7IC8vIGZpbHRlciB0aGUgdmVydGljZXMgdGhhdCBhcmVuJ3QgaW4gdGhlIGVudHJ5LnZhbHVlc1xuXG4gICAgICAgIGNvbnN0IHZpb2xpbkcgPSBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsIGB2aW9saW4ke2dJbmRleH0tJHtlbnRyeS5sYWJlbH1gKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd2aW9saW4tZycpXG4gICAgICAgICAgICAgICAgLmRhdHVtKGVudHJ5KTtcblxuICAgICAgICAvLyB2aW9saW4gcGxvdCBhbmQgYm94IGNhbiBvbmx5IGJlIGRyYXduIHdoZW4gdmVydGljZXMgZXhpc3QgYW5kIHRoZXJlIGFyZSBubyBOYU4gcG9pbnRzXG4gICAgICAgIGlmIChlbnRyeS52YWx1ZXMubGVuZ3RoID49IG51bVBvaW50cyAmJiB2ZXJ0aWNlcy5sZW5ndGggJiYgdGhpcy5fdmFsaWRWZXJ0aWNlcyh2ZXJ0aWNlcykpIHtcbiAgICAgICAgICAgIC8vIGRlZmluZSB0aGUgeiBzY2FsZSAtLSB0aGUgdmlvbGluIHdpZHRoXG4gICAgICAgICAgICBsZXQgek1heCA9IG1heCh2ZXJ0aWNlcywgKGQpPT5NYXRoLmFicyhkWzFdKSk7IC8vIGZpbmQgdGhlIGFicyh2YWx1ZSkgaW4gZW50cnkudmFsdWVzXG4gICAgICAgICAgICB0aGlzLnNjYWxlLnpcbiAgICAgICAgICAgICAgICAuZG9tYWluKFstek1heCwgek1heF0pXG4gICAgICAgICAgICAgICAgLnJhbmdlKFt0aGlzLnNjYWxlLnN1YngoZW50cnkubGFiZWwpLCB0aGlzLnNjYWxlLnN1YngoZW50cnkubGFiZWwpICsgdGhpcy5zY2FsZS5zdWJ4LmJhbmR3aWR0aCgpXSk7XG5cbiAgICAgICAgICAgIC8vIHZpc3VhbCByZW5kZXJpbmdcbiAgICAgICAgICAgIGxldCB2aW9saW4gPSBhcmVhKClcbiAgICAgICAgICAgICAgICAueDAoKGQpID0+IHRoaXMuc2NhbGUueihkWzFdKSlcbiAgICAgICAgICAgICAgICAueDEoKGQpID0+IHRoaXMuc2NhbGUueigtZFsxXSkpXG4gICAgICAgICAgICAgICAgLnkoKGQpID0+IHRoaXMuc2NhbGUueShkWzBdKSk7XG4gICAgICAgICAgICBjb25zdCB2UGF0aCA9IHZpb2xpbkcuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgICAgIC5kYXR1bSh2ZXJ0aWNlcylcbiAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgdmlvbGluKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwidmlvbGluXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoKT0+e1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkuY29sb3IgIT09IHVuZGVmaW5lZCkgcmV0dXJuIGVudHJ5LmNvbG9yO1xuICAgICAgICAgICAgICAgICAgICAvLyBhbHRlcm5hdGUgdGhlIG9kZCBhbmQgZXZlbiBjb2xvcnMsIG1heWJlIHdlIGRvbid0IHdhbnQgdGhpcyBmZWF0dXJlXG4gICAgICAgICAgICAgICAgICAgIGlmKGdJbmRleCUyID09IDApIHJldHVybiBcIiM5MGMxYzFcIjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiIzk0YThiOFwiO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBib3hwbG90XG4gICAgICAgICAgICBjb25zdCBxMSA9IHF1YW50aWxlKGVudHJ5LnZhbHVlcywgMC4yNSk7XG4gICAgICAgICAgICBjb25zdCBxMyA9IHF1YW50aWxlKGVudHJ5LnZhbHVlcywgMC43NSk7XG4gICAgICAgICAgICBjb25zdCB6ID0gdGhpcy5zY2FsZS56LmRvbWFpbigpWzFdLzM7XG5cbiAgICAgICAgICAgIGlmKHNob3dXaGlza2VyKXtcbiAgICAgICAgICAgICAgICAvLyB0aGUgdXBwZXIgYW5kIGxvd2VyIGxpbWl0cyBvZiBlbnRyeS52YWx1ZXNcbiAgICAgICAgICAgICAgICBjb25zdCBpcXIgPSBNYXRoLmFicyhxMy1xMSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXBwZXIgPSBtYXgoZW50cnkudmFsdWVzLmZpbHRlcigoZCk9PmQ8PXEzKyhpcXIqMS41KSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvd2VyID0gbWluKGVudHJ5LnZhbHVlcy5maWx0ZXIoKGQpPT5kPj1xMS0oaXFyKjEuNSkpKTtcbiAgICAgICAgICAgICAgICBkb20uYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZChcIndoaXNrZXJcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCB0aGlzLnNjYWxlLnooMCkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgdGhpcy5zY2FsZS56KDApKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInkxXCIsIHRoaXMuc2NhbGUueSh1cHBlcikpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgdGhpcy5zY2FsZS55KGxvd2VyKSlcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwiI2ZmZlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaW50ZXJxdWFydGlsZSByYW5nZVxuICAgICAgICAgICAgdmlvbGluRy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHRoaXMuc2NhbGUueigteikpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIHRoaXMuc2NhbGUueShxMykpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBNYXRoLmFicyh0aGlzLnNjYWxlLnooLXopLXRoaXMuc2NhbGUueih6KSkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgTWF0aC5hYnModGhpcy5zY2FsZS55KHEzKSAtIHRoaXMuc2NhbGUueShxMSkpKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4taXJcIik7XG5cbiAgICAgICAgICAgIC8vIG1lZGlhblxuICAgICAgICAgICAgY29uc3QgbWVkID0gbWVkaWFuKGVudHJ5LnZhbHVlcyk7XG4gICAgICAgICAgICB2aW9saW5HLmFwcGVuZChcImxpbmVcIikgLy8gdGhlIG1lZGlhbiBsaW5lXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCB0aGlzLnNjYWxlLnooLXopKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgdGhpcy5zY2FsZS56KHopKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgdGhpcy5zY2FsZS55KG1lZCkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCB0aGlzLnNjYWxlLnkobWVkKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLW1lZGlhblwiKTtcblxuICAgICAgICAgICAgLy8gb3V0bGllcnNcbiAgICAgICAgICAgICBpZiAoc2hvd091dGxpZXJzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGppdHRlciA9IHJhbmRvbU5vcm1hbCgwLCB6LzIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlxciA9IE1hdGguYWJzKHEzLXExKTtcbiAgICAgICAgICAgICAgICBjb25zdCB1cHBlciA9IG1heChlbnRyeS52YWx1ZXMuZmlsdGVyKChkKT0+ZDw9cTMrKGlxcioxLjUpKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbG93ZXIgPSBtaW4oZW50cnkudmFsdWVzLmZpbHRlcigoZCk9PmQ+PXExLShpcXIqMS41KSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG91dGxpZXJzID0gZW50cnkudmFsdWVzLmZpbHRlcigoZCk9PmQ8bG93ZXJ8fGQ+dXBwZXIpO1xuICAgICAgICAgICAgICAgIHZpb2xpbkcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLW91dGxpZXJzXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEob3V0bGllcnMpXG4gICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gLmF0dHIoXCJjeFwiLCAoKT0+dGhpcy5zY2FsZS56KDApKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImN4XCIsICgpPT50aGlzLnNjYWxlLnooaml0dGVyKCkpKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImN5XCIsIChkKT0+dGhpcy5zY2FsZS55KGQpKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgMik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG1vdXNlIGV2ZW50c1xuICAgICAgICAgICAgdmlvbGluRy5vbihcIm1vdXNlb3ZlclwiLCAoKT0+e1xuICAgICAgICAgICAgICAgIHZQYXRoLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlbnRyeSk7XG4gICAgICAgICAgICAgICAgaWYodGhpcy50b29sdGlwID09PSB1bmRlZmluZWQpIGNvbnNvbGUud2FybihcIkdyb3VwVmlvbGluIFdhcm5pbmc6IHRvb2x0aXAgbm90IGRlZmluZWRcIik7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5zaG93KFxuICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkuZ3JvdXAgKyBcIjxici8+XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkubGFiZWwgKyBcIjxici8+XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJNZWRpYW46IFwiICsgbWVkLnRvUHJlY2lzaW9uKDQpICsgXCI8YnIvPlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZpb2xpbkcub24oXCJtb3VzZW91dFwiLCAoKT0+e1xuICAgICAgICAgICAgICAgIHZQYXRoLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChudW1Qb2ludHMpIHtcbiAgICAgICAgICAgIC8vIGRlZmluZSB0aGUgeiBzY2FsZSAtLSB0aGUgdmlvbGluIHdpZHRoXG4gICAgICAgICAgICBsZXQgek1heCA9IG1heChlbnRyeS52YWx1ZXMsIChkKT0+TWF0aC5hYnMoZCkpOyAvLyBmaW5kIHRoZSBhYnModmFsdWUpIGluIGVudHJ5LnZhbHVlc1xuICAgICAgICAgICAgdGhpcy5zY2FsZS56XG4gICAgICAgICAgICAgICAgLmRvbWFpbihbLXpNYXgsIHpNYXhdKVxuICAgICAgICAgICAgICAgIC5yYW5nZShbdGhpcy5zY2FsZS5zdWJ4KGVudHJ5LmxhYmVsKSwgdGhpcy5zY2FsZS5zdWJ4KGVudHJ5LmxhYmVsKSArIHRoaXMuc2NhbGUuc3VieC5iYW5kd2lkdGgoKV0pO1xuICAgICAgICAgICAgY29uc3QgeiA9IHRoaXMuc2NhbGUuei5kb21haW4oKVsxXS8zO1xuICAgICAgICAgICAgbGV0IGppdHRlciA9IHJhbmRvbU5vcm1hbCgwLCB6LzIpO1xuXG4gICAgICAgICAgICB2aW9saW5HLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLXBvaW50c1wiKVxuICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgICAuZGF0YShlbnRyeS52YWx1ZXMpXG4gICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCAoKT0+dGhpcy5zY2FsZS56KGppdHRlcigpKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcImN5XCIsIChkKT0+dGhpcy5zY2FsZS55KGQpKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCAyKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgX3Nhbml0eUNoZWNrKGRhdGEpe1xuICAgICAgICBjb25zdCBhdHRyID0gW1wiZ3JvdXBcIiwgXCJsYWJlbFwiLCBcInZhbHVlc1wiXTtcblxuICAgICAgICBkYXRhLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgICAgIGF0dHIuZm9yRWFjaCgoYSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkW2FdID09PSB1bmRlZmluZWQpIHRocm93IFwiR3JvdXBlZFZpb2xpbjogaW5wdXQgZGF0YSBlcnJvci5cIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBpZiAoMCA9PSBkLnZhbHVlcy5sZW5ndGgpIHRocm93IFwiVmlvbGluOiBJbnB1dCBkYXRhIGVycm9yXCI7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9hZGRHcm91cERpdmlkZXIoZG9tKXtcbiAgICAgICAgY29uc3QgZ3JvdXBzID0gdGhpcy5zY2FsZS54LmRvbWFpbigpO1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gTWF0aC5hYnModGhpcy5zY2FsZS54KHRoaXMuc2NhbGUueC5kb21haW4oKVsxXSkgLSB0aGlzLnNjYWxlLngodGhpcy5zY2FsZS54LmRvbWFpbigpWzBdKSAtIHRoaXMuc2NhbGUueC5iYW5kd2lkdGgoKSk7XG5cbiAgICAgICAgY29uc3QgZ2V0WCA9IChnLCBpKT0+IHtcbiAgICAgICAgICAgIGlmIChpICE9PSBncm91cHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYWxlLngoZykgKyArdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpICsgKHBhZGRpbmcvMilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGRvbS5zZWxlY3RBbGwoXCIudmxpbmVcIikuZGF0YShncm91cHMpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgIC5jbGFzc2VkKFwidmxpbmVcIiwgdHJ1ZSlcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgZ2V0WClcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgZ2V0WClcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgdGhpcy5zY2FsZS55LnJhbmdlKClbMF0pXG4gICAgICAgICAgICAuYXR0cihcInkyXCIsIHRoaXMuc2NhbGUueS5yYW5nZSgpWzFdKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIChnLCBpKT0+aSE9Z3JvdXBzLmxlbmd0aC0xPzE6MClcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcInJnYig4Niw5OCwxMDcpXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDAuNSlcblxuICAgIH1cblxuICAgIF92YWxpZFZlcnRpY2VzKHZlcnRpY2VzKSB7XG4gICAgICAgIGxldCB2YWxzID0gdmVydGljZXMucmVkdWNlKChhLCBiKT0+YS5jb25jYXQoYiksIFtdKTtcbiAgICAgICAgbGV0IGludmFsaWRWZXJ0aWNlcyA9IHZhbHMuZmlsdGVyKGQ9PmlzTmFOKGQpKTtcblxuICAgICAgICByZXR1cm4gIShpbnZhbGlkVmVydGljZXMubGVuZ3RoKTtcbiAgICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5cbi8qXG5UT0RPXG4xLiByZWZhY3RvcmluZ1xuICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQge2NyZWF0ZVN2ZywgZ2VuZXJhdGVSYW5kb21NYXRyaXgsIGNoZWNrRG9tSWQsIGNyZWF0ZUNhbnZhc30gZnJvbSBcIi4vbW9kdWxlcy91dGlsc1wiO1xuaW1wb3J0IHtyYW5nZX0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3JhbmRvbU5vcm1hbH0gZnJvbSBcImQzLXJhbmRvbVwiO1xuaW1wb3J0IEhlYXRtYXAgZnJvbSBcIi4vbW9kdWxlcy9IZWF0bWFwXCI7XG5pbXBvcnQgRGVuZHJvSGVhdG1hcENvbmZpZyBmcm9tIFwiLi9tb2R1bGVzL0RlbmRyb0hlYXRtYXBDb25maWdcIjtcbmltcG9ydCBEZW5kcm9IZWF0bWFwIGZyb20gXCIuL21vZHVsZXMvRGVuZHJvSGVhdG1hcFwiO1xuaW1wb3J0IEdyb3VwZWRWaW9saW4gZnJvbSBcIi4vbW9kdWxlcy9Hcm91cGVkVmlvbGluXCI7XG5pbXBvcnQgSXNvZm9ybVRyYWNrVmlld2VyIGZyb20gXCIuL21vZHVsZXMvSXNvZm9ybVRyYWNrVmlld2VyXCI7XG5pbXBvcnQgQnViYmxlTWFwIGZyb20gXCIuL21vZHVsZXMvQnViYmxlTWFwXCI7XG5pbXBvcnQgSGFsZk1hcCBmcm9tIFwiLi9tb2R1bGVzL0hhbGZNYXBcIjtcblxuZXhwb3J0IGNvbnN0IGRlbW9EYXRhID0ge1xuICAgIGhlYXRtYXA6Z2VuZXJhdGVSYW5kb21NYXRyaXgoe3g6NTAsIHk6MTAsIHNjYWxlRmFjdG9yOjEwMDB9KSxcbiAgICBkZW5kcm9IZWF0bWFwOiB7XG4gICAgICAgIHJvd1RyZWU6IFwiKCgoVFA1MzowLjE3LFNMSzowLjE3KToxLjE4LE5EUkc0OjEuMzQpOjEuMzMsQUNUTjM6Mi42Nyk7XCIsXG4gICAgICAgIGNvbFRyZWU6IFwiKCgoQWRpcG9zZSBWaXNjZXJhbCBPbWVudHVtOjAuMDYsQWRpcG9zZSBTdWJjdXRhbmVvdXM6MC4wNik6MC4wMCxCbGFkZGVyOjAuMDYpOjAuMTYsQWRyZW5hbCBHbGFuZDowLjIyKTtcIixcbiAgICAgICAgaGVhdG1hcDogW1xuICAgIHtcbiAgICAgIFwieVwiOiBcIlNMS1wiLFxuICAgICAgXCJ2YWx1ZVwiOiAzNS41MDUsXG4gICAgICBcInhcIjogXCJBZGlwb3NlIFN1YmN1dGFuZW91c1wiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIlNMS1wiLFxuICAgICAgXCJ2YWx1ZVwiOiAyOS4yOCxcbiAgICAgIFwieFwiOiBcIkFkaXBvc2UgVmlzY2VyYWwgT21lbnR1bVwiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIlNMS1wiLFxuICAgICAgXCJ2YWx1ZVwiOiAxNy40MDUsXG4gICAgICBcInhcIjogXCJBZHJlbmFsIEdsYW5kXCIsXG4gICAgICBcInVuaXRcIjogXCJUUE1cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ5XCI6IFwiU0xLXCIsXG4gICAgICBcInZhbHVlXCI6IDUzLjI5LFxuICAgICAgXCJ4XCI6IFwiQmxhZGRlclwiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIk5EUkc0XCIsXG4gICAgICBcInZhbHVlXCI6IDEyLjAzNSxcbiAgICAgIFwieFwiOiBcIkFkaXBvc2UgU3ViY3V0YW5lb3VzXCIsXG4gICAgICBcInVuaXRcIjogXCJUUE1cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ5XCI6IFwiTkRSRzRcIixcbiAgICAgIFwidmFsdWVcIjogNi41MzEwMDAwMDAwMDAwMDEsXG4gICAgICBcInhcIjogXCJBZGlwb3NlIFZpc2NlcmFsIE9tZW50dW1cIixcbiAgICAgIFwidW5pdFwiOiBcIlRQTVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInlcIjogXCJORFJHNFwiLFxuICAgICAgXCJ2YWx1ZVwiOiAxMzQuOCxcbiAgICAgIFwieFwiOiBcIkFkcmVuYWwgR2xhbmRcIixcbiAgICAgIFwidW5pdFwiOiBcIlRQTVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInlcIjogXCJORFJHNFwiLFxuICAgICAgXCJ2YWx1ZVwiOiA3LjExNjAwMDAwMDAwMDAwMDUsXG4gICAgICBcInhcIjogXCJCbGFkZGVyXCIsXG4gICAgICBcInVuaXRcIjogXCJUUE1cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ5XCI6IFwiVFA1M1wiLFxuICAgICAgXCJ2YWx1ZVwiOiAyOS45MzUsXG4gICAgICBcInhcIjogXCJBZGlwb3NlIFN1YmN1dGFuZW91c1wiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIlRQNTNcIixcbiAgICAgIFwidmFsdWVcIjogMjMuNTUsXG4gICAgICBcInhcIjogXCJBZGlwb3NlIFZpc2NlcmFsIE9tZW50dW1cIixcbiAgICAgIFwidW5pdFwiOiBcIlRQTVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInlcIjogXCJUUDUzXCIsXG4gICAgICBcInZhbHVlXCI6IDE4LjUxNSxcbiAgICAgIFwieFwiOiBcIkFkcmVuYWwgR2xhbmRcIixcbiAgICAgIFwidW5pdFwiOiBcIlRQTVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInlcIjogXCJUUDUzXCIsXG4gICAgICBcInZhbHVlXCI6IDQwLjUxLFxuICAgICAgXCJ4XCI6IFwiQmxhZGRlclwiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIkFDVE4zXCIsXG4gICAgICBcInZhbHVlXCI6IDAuMzMxNDUsXG4gICAgICBcInhcIjogXCJBZGlwb3NlIFN1YmN1dGFuZW91c1wiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIkFDVE4zXCIsXG4gICAgICBcInZhbHVlXCI6IDAuMzMxNyxcbiAgICAgIFwieFwiOiBcIkFkaXBvc2UgVmlzY2VyYWwgT21lbnR1bVwiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIkFDVE4zXCIsXG4gICAgICBcInZhbHVlXCI6IDAuMTAwMDA1LFxuICAgICAgXCJ4XCI6IFwiQWRyZW5hbCBHbGFuZFwiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIkFDVE4zXCIsXG4gICAgICBcInZhbHVlXCI6IDAuNDgxMDAwMDAwMDAwMDAwMDQsXG4gICAgICBcInhcIjogXCJCbGFkZGVyXCIsXG4gICAgICBcInVuaXRcIjogXCJUUE1cIlxuICAgIH1cbiAgXVxuICAgIH0sXG4gICAgZ3JvdXBlZFZpb2xpblBsb3Q6IFtcbiAgICAgICAge1xuICAgICAgICAgICBncm91cDogXCJHcm91cCAxXCIsXG4gICAgICAgICAgIGxhYmVsOiBcIkdlbmUgMVwiLFxuICAgICAgICAgICB2YWx1ZXM6IHJhbmdlKDAsIDIwMDApLm1hcChyYW5kb21Ob3JtYWwoMiwgMSkpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdyb3VwOiBcIkdyb3VwIDFcIixcbiAgICAgICAgICAgIGxhYmVsOiBcIkdlbmUgMlwiLFxuICAgICAgICAgICAgdmFsdWVzOiByYW5nZSgwLCAyMDAwKS5tYXAocmFuZG9tTm9ybWFsKDUsIDEpKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBncm91cDogXCJHcm91cCAxXCIsXG4gICAgICAgICAgICBsYWJlbDogXCJHZW5lIDNcIixcbiAgICAgICAgICAgIHZhbHVlczogcmFuZ2UoMCwgMjAwMCkubWFwKHJhbmRvbU5vcm1hbCgxMCwgMSkpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgZ3JvdXA6IFwiR3JvdXAgMlwiLFxuICAgICAgICAgICBsYWJlbDogXCJHZW5lIDFcIixcbiAgICAgICAgICAgdmFsdWVzOiByYW5nZSgwLCAyMDAwKS5tYXAocmFuZG9tTm9ybWFsKDUsIDEpKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBncm91cDogXCJHcm91cCAyXCIsXG4gICAgICAgICAgICBsYWJlbDogXCJHZW5lIDJcIixcbiAgICAgICAgICAgIHZhbHVlczogcmFuZ2UoMCwgMjAwMCkubWFwKHJhbmRvbU5vcm1hbCgzLCAxKSlcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZ3JvdXA6IFwiR3JvdXAgMlwiLFxuICAgICAgICAgICAgbGFiZWw6IFwiR2VuZSAzXCIsXG4gICAgICAgICAgICB2YWx1ZXM6IHJhbmdlKDAsIDIwMDApLm1hcChyYW5kb21Ob3JtYWwoMSwgMSkpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgZ3JvdXA6IFwiR3JvdXAgM1wiLFxuICAgICAgICAgICBsYWJlbDogXCJHZW5lIDFcIixcbiAgICAgICAgICAgdmFsdWVzOiByYW5nZSgwLCAyMDAwKS5tYXAocmFuZG9tTm9ybWFsKDIsIDEpKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBncm91cDogXCJHcm91cCAzXCIsXG4gICAgICAgICAgICBsYWJlbDogXCJHZW5lIDJcIixcbiAgICAgICAgICAgIHZhbHVlczogcmFuZ2UoMCwgMjAwMCkubWFwKHJhbmRvbU5vcm1hbCgzLCAxKSlcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZ3JvdXA6IFwiR3JvdXAgM1wiLFxuICAgICAgICAgICAgbGFiZWw6IFwiR2VuZSAzXCIsXG4gICAgICAgICAgICB2YWx1ZXM6IHJhbmdlKDAsIDIwMDApLm1hcChyYW5kb21Ob3JtYWwoNSwgMSkpXG4gICAgICAgIH1cbiAgICBdLFxuICAgIHRyYW5zY3JpcHRUcmFja3M6IHtcbiAgICAgICAgXCJleG9uc1wiOiB7XG4gICAgICAgICAgICBcIkVOU1QwMDAwMDMxMTU5NS45XCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21cIjogXCIxN1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNocm9tRW5kXCI6IDc3MDcxMTcyLFxuICAgICAgICAgICAgICAgICAgICBcImV4b25JZFwiOiBcIkVOU0UwMDAwMjcxMzkzMy4xXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhvbk51bWJlclwiOiBcIjFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbVN0YXJ0XCI6IDc3MDcxMTUxLFxuICAgICAgICAgICAgICAgICAgICBcInN0cmFuZFwiOiBcIitcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImNocm9tXCI6IFwiMTdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbUVuZFwiOiA3NzA3MzU3OSxcbiAgICAgICAgICAgICAgICAgICAgXCJleG9uSWRcIjogXCJFTlNFMDAwMDM2NzI2MjguMVwiLFxuICAgICAgICAgICAgICAgICAgICBcImV4b25OdW1iZXJcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21TdGFydFwiOiA3NzA3MzUxMixcbiAgICAgICAgICAgICAgICAgICAgXCJzdHJhbmRcIjogXCIrXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbVwiOiBcIjE3XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21FbmRcIjogNzcwNzM5NDYsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhvbklkXCI6IFwiRU5TRTAwMDAzNDc1MjgxLjFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleG9uTnVtYmVyXCI6IFwiM1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNocm9tU3RhcnRcIjogNzcwNzM3NDUsXG4gICAgICAgICAgICAgICAgICAgIFwic3RyYW5kXCI6IFwiK1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21cIjogXCIxN1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNocm9tRW5kXCI6IDc3MDc1NzE5LFxuICAgICAgICAgICAgICAgICAgICBcImV4b25JZFwiOiBcIkVOU0UwMDAwMTExMTcxMy4xXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhvbk51bWJlclwiOiBcIjRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbVN0YXJ0XCI6IDc3MDc1NTcxLFxuICAgICAgICAgICAgICAgICAgICBcInN0cmFuZFwiOiBcIitcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImNocm9tXCI6IFwiMTdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbUVuZFwiOiA3NzA3NjQ0NixcbiAgICAgICAgICAgICAgICAgICAgXCJleG9uSWRcIjogXCJFTlNFMDAwMDM2NTEyNTAuMVwiLFxuICAgICAgICAgICAgICAgICAgICBcImV4b25OdW1iZXJcIjogXCI1XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21TdGFydFwiOiA3NzA3NjI4OSxcbiAgICAgICAgICAgICAgICAgICAgXCJzdHJhbmRcIjogXCIrXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbVwiOiBcIjE3XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21FbmRcIjogNzcwNzcxNTUsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhvbklkXCI6IFwiRU5TRTAwMDAzNjA3NzczLjFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleG9uTnVtYmVyXCI6IFwiNlwiLFxuICAgICAgICAgICAgICAgICAgICBcImNocm9tU3RhcnRcIjogNzcwNzcwMDcsXG4gICAgICAgICAgICAgICAgICAgIFwic3RyYW5kXCI6IFwiK1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21cIjogXCIxN1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNocm9tRW5kXCI6IDc3MDc4NjEyLFxuICAgICAgICAgICAgICAgICAgICBcImV4b25JZFwiOiBcIkVOU0UwMDAwMjcyMDkyNC4xXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhvbk51bWJlclwiOiBcIjdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbVN0YXJ0XCI6IDc3MDc3OTgwLFxuICAgICAgICAgICAgICAgICAgICBcInN0cmFuZFwiOiBcIitcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0cmFuc2NyaXB0c1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJjaHJvbW9zb21lXCI6IFwiMTdcIixcbiAgICAgICAgICAgICAgICBcImVuZFwiOiA3NzA3ODYxMixcbiAgICAgICAgICAgICAgICBcImdlbmNvZGVJZFwiOiBcIkVOU0cwMDAwMDE2NzI4MC4xMlwiLFxuICAgICAgICAgICAgICAgIFwiZ2VuZVN5bWJvbFwiOiBcIkVOR0FTRVwiLFxuICAgICAgICAgICAgICAgIFwic3RhcnRcIjogNzcwNzExNTEsXG4gICAgICAgICAgICAgICAgXCJzdHJhbmRcIjogXCIrXCIsXG4gICAgICAgICAgICAgICAgXCJ0cmFuc2NyaXB0SWRcIjogXCJFTlNUMDAwMDAzMTE1OTUuOVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIGJ1YmJsZU1hcDpnZW5lcmF0ZVJhbmRvbU1hdHJpeCh7eDo1MCwgeToxMCwgc2NhbGVGYWN0b3I6IDEsIGRpdmVyZ2luZzogdHJ1ZSwgYnViYmxlOiB0cnVlfSksXG4gICAgbGRQbG90OiBnZW5lcmF0ZVJhbmRvbU1hdHJpeCh7eDoyLCB5OjIsIHNjYWxlRmFjdG9yOiAxfSlcbn07XG5cbmNvbnN0IGxkUGxvdERlbW9Db25maWcgPSB7XG4gICAgaWQ6ICdndGV4Vml6TGRQbG90JyxcbiAgICBkYXRhOiBkZW1vRGF0YS5sZFBsb3QsXG4gICAgY3V0b2ZmOiAwLjAsXG4gICAgd2lkdGg6IDEwMDAsIC8vIG91dGVyIHdpZHRoXG4gICAgbWFyZ2luTGVmdDogMTAwLFxuICAgIG1hcmdpblJpZ2h0OiAyMDAsXG4gICAgbWFyZ2luVG9wOiAyMCxcbiAgICBtYXJnaW5Cb3R0b206IDEwMCxcbiAgICBjb2xvclNjaGVtZTogXCJHcmV5c1wiLFxuICAgIGxhYmVsSGVpZ2h0OiAyMCxcbiAgICBzaG93TGFiZWxzOiB0cnVlLFxuICAgIGxhYmVsQW5nbGU6IDMwLFxuICAgIGxlZ2VuZFNwYWNlOiA1MCxcbiAgICB1c2VMb2c6IGZhbHNlLFxuICAgIGxvZ0Jhc2U6IHVuZGVmaW5lZFxufTtcbmV4cG9ydCBmdW5jdGlvbiBsZFBsb3QocGFyPWxkUGxvdERlbW9Db25maWcpe1xuICAgIGxldCBtYXJnaW4gPSB7XG4gICAgICAgIGxlZnQ6IHBhci5tYXJnaW5MZWZ0LFxuICAgICAgICB0b3A6IHBhci5zaG93TGFiZWxzP3Bhci5tYXJnaW5Ub3ArcGFyLmxhYmVsSGVpZ2h0OnBhci5tYXJnaW5Ub3AsXG4gICAgICAgIHJpZ2h0OiBwYXIubWFyZ2luUmlnaHQsXG4gICAgICAgIGJvdHRvbTogcGFyLm1hcmdpbkJvdHRvbVxuICAgIH07XG4gICAgbGV0IGluV2lkdGggPSBwYXIud2lkdGggLSAocGFyLm1hcmdpbkxlZnQgKyBwYXIubWFyZ2luUmlnaHQpO1xuICAgIGxldCBpbkhlaWdodCA9IHBhci53aWR0aCAtIChwYXIubWFyZ2luVG9wICsgcGFyLm1hcmdpbkJvdHRvbSk7XG4gICAgaW5XaWR0aCA9IGluV2lkdGg+aW5IZWlnaHQ/aW5IZWlnaHQ6aW5XaWR0aDsgLy8gYWRqdXN0IHRoZSBkaW1lbnNpb25zIGJhc2VkIG9uIHRoZSBtaW5pbXVtIHJlcXVpcmVkIHNwYWNlXG4gICAgbGV0IGxkQ2FudmFzID0gbmV3IEhhbGZNYXAocGFyLmRhdGEsIHBhci5jdXRvZmYsIHBhci51c2VMb2csIHBhci5sb2dCYXNlLCBwYXIuY29sb3JTY2hlbWUpO1xuICAgIGxkQ2FudmFzLmFkZFRvb2x0aXAocGFyLmlkKTtcbiAgICBsZXQgY2FudmFzID0gY3JlYXRlQ2FudmFzKHBhci5pZCwgcGFyLndpZHRoLCBwYXIud2lkdGgsIG1hcmdpbik7XG4gICAgbGV0IHN2ZyA9IGNyZWF0ZVN2ZyhwYXIuaWQsIHBhci53aWR0aCwgcGFyLndpZHRoLCBtYXJnaW4sIHVuZGVmaW5lZCwgXCJhYnNvbHV0ZVwiKTtcbiAgICBsZENhbnZhcy5kcmF3KGNhbnZhcywgc3ZnLCB7dzppbldpZHRoLCB0b3A6IG1hcmdpbi50b3AsIGxlZnQ6IG1hcmdpbi5sZWZ0fSwgWzAsIDFdLCBwYXIuc2hvd0xhYmVscywgcGFyLmxhYmVsQW5nbGUpO1xuICAgIGxkQ2FudmFzLmRyYXdDb2xvckxlZ2VuZChzdmcsIHt4OiAwLCB5OiAxMDB9LCAxMCwgXCJWYWx1ZVwiKTtcbn1cblxuY29uc3QgdHJhbnNjcmlwdFRyYWNrc0NvbmZpZyA9IHtcbiAgICBpZDogJ2d0ZXhUcmFuc2NyaXB0VHJhY2tzJyxcbiAgICBkYXRhOiBkZW1vRGF0YS50cmFuc2NyaXB0VHJhY2tzLFxuICAgIHdpZHRoOiAxMjAwLFxuICAgIGhlaWdodDogODAsXG4gICAgbWFyZ2luTGVmdDogMTAwLFxuICAgIG1hcmdpblJpZ2h0OiAyMCxcbiAgICBtYXJnaW5Ub3A6IDAsXG4gICAgbWFyZ2luQm90dG9tOiAyMCxcbiAgICBsYWJlbFBvczogJ2xlZnQnXG59O1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zY3JpcHRUcmFja3MocGFyPXRyYW5zY3JpcHRUcmFja3NDb25maWcpe1xuICAgIGxldCBtYXJnaW4gPSB7XG4gICAgICAgIHRvcDogcGFyLm1hcmdpblRvcCxcbiAgICAgICAgcmlnaHQ6IHBhci5tYXJnaW5SaWdodCxcbiAgICAgICAgYm90dG9tOiBwYXIubWFyZ2luQm90dG9tLFxuICAgICAgICBsZWZ0OiBwYXIubWFyZ2luTGVmdFxuICAgIH07XG4gICAgbGV0IGluV2lkdGggPSBwYXIud2lkdGggLSAocGFyLm1hcmdpbkxlZnQgKyBwYXIubWFyZ2luUmlnaHQpO1xuICAgIGxldCBpbkhlaWdodCA9IHBhci5oZWlnaHQgLSAocGFyLm1hcmdpblRvcCArIHBhci5tYXJnaW5Cb3R0b20pO1xuXG4gICAgLy8gdGVzdCBpbnB1dCBwYXJhbXNcbiAgICBjaGVja0RvbUlkKHBhci5pZCk7XG5cbiAgICAvLyBjcmVhdGUgdGhlIFNWR1xuICAgICAgICBsZXQgc3ZnID0gY3JlYXRlU3ZnKHBhci5pZCwgcGFyLndpZHRoLCBwYXIuaGVpZ2h0LCBtYXJnaW4pO1xuXG4gICAgLy8gcmVuZGVyIHRoZSB0cmFuc2NyaXB0c1xuICAgIGxldCB0b29sdGlwSWQgPSBgJHtwYXIuaWR9VG9vbHRpcGA7XG4gICAgbGV0IGNvbmZpZyA9IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMCxcbiAgICAgICAgdzogaW5XaWR0aCxcbiAgICAgICAgaDogaW5IZWlnaHQsXG4gICAgICAgIGxhYmVsT246IHBhci5sYWJlbFBvc1xuICAgIH07XG4gICAgbGV0IHZpZXdlciA9IG5ldyBJc29mb3JtVHJhY2tWaWV3ZXIocGFyLmRhdGEudHJhbnNjcmlwdHMsIHBhci5kYXRhLmV4b25zLCB1bmRlZmluZWQsIGNvbmZpZyk7XG4gICAgdmlld2VyLnJlbmRlcihmYWxzZSwgc3ZnLCBwYXIubGFiZWxQb3MpO1xuXG59XG5cbmNvbnN0IGJ1YmJsZW1hcERlbW9Db25maWcgPSB7XG4gICAgaWQ6ICdndGV4Vml6QnViYmxlbWFwJyxcbiAgICBkYXRhOiBkZW1vRGF0YS5idWJibGVNYXAsXG4gICAgd2lkdGg6IDEyMDAsIC8vd2luZG93LmlubmVyV2lkdGgqMC45LFxuICAgIGhlaWdodDogNDAwLCAvLyBUT0RPOiB1c2UgYSBkeW5hbWljIHdpZHRoIGJhc2VkIG9uIHRoZSBtYXRyaXggc2l6ZVxuICAgIG1hcmdpblRvcDogMTAwLFxuICAgIG1hcmdpblJpZ2h0OiAxMDAsXG4gICAgbWFyZ2luQm90dG9tOiAzMCxcbiAgICBtYXJnaW5MZWZ0OiAzMCxcbiAgICBsYWJlbHM6IHtcbiAgICAgICAgY29sdW1uOiB7XG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgaGVpZ2h0OiAxMDAsXG4gICAgICAgICAgICBhbmdsZTogOTAsXG4gICAgICAgICAgICBhZGp1c3Q6IDEwLFxuICAgICAgICAgICAgbG9jYXRpb246ICdib3R0b20nLFxuICAgICAgICAgICAgdGV4dEFsaWduOiAnbGVmdCdcbiAgICAgICAgfSxcbiAgICAgICAgcm93OiB7XG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgd2lkdGg6IDE1MCxcbiAgICAgICAgICAgIGFuZ2xlOiAwLFxuICAgICAgICAgICAgYWRqdXN0OiAwLFxuICAgICAgICAgICAgbG9jYXRpb246ICdsZWZ0JyxcbiAgICAgICAgICAgIHRleHRBbGlnbjogJ3JpZ2h0J1xuICAgICAgICB9XG4gICAgfSxcbiAgICB1c2VMb2c6IGZhbHNlLFxuICAgIGxvZ0Jhc2U6IDEwLFxuICAgIGNvbG9yU2NoZW1lOiBcIlJkQnVcIiwgLy8gYSBkaXZlcmdpbmcgY29sb3Igc2NoZW1lXG4gICAgY29sb3JTY2FsZURvbWFpbjogWy0wLjc1LCAwLjc1XSxcbiAgICB1c2VDYW52YXM6IGZhbHNlXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGJ1YmJsZW1hcChwYXI9YnViYmxlbWFwRGVtb0NvbmZpZyl7XG4gICAgbGV0IG1hcmdpbiA9IHtcbiAgICAgICAgbGVmdDogcGFyLnNob3dMYWJlbHM/cGFyLm1hcmdpbkxlZnQgKyBwYXIucm93TGFiZWxXaWR0aDogcGFyLm1hcmdpbkxlZnQsXG4gICAgICAgIHRvcDogcGFyLm1hcmdpblRvcCxcbiAgICAgICAgcmlnaHQ6IHBhci5tYXJnaW5SaWdodCxcbiAgICAgICAgYm90dG9tOiBwYXIuc2hvd0xhYmVscz9wYXIubWFyZ2luQm90dG9tICsgcGFyLmNvbHVtbkxhYmVsSGVpZ2h0OnBhci5tYXJnaW5Cb3R0b21cbiAgICB9O1xuICAgIGxldCBpbldpZHRoID0gcGFyLndpZHRoIC0gKHBhci5sYWJlbHMucm93LndpZHRoICsgcGFyLm1hcmdpbkxlZnQgKyBwYXIubWFyZ2luUmlnaHQpO1xuICAgIGxldCBpbkhlaWdodCA9IHBhci5oZWlnaHQgLSAocGFyLmxhYmVscy5jb2x1bW4uaGVpZ2h0ICsgcGFyLm1hcmdpblRvcCArIHBhci5tYXJnaW5Cb3R0b20pO1xuICAgIGlmKHBhci51c2VDYW52YXMpIHtcbiAgICAgICAgbGV0IGJtYXBDYW52YXMgPSBuZXcgQnViYmxlTWFwKHBhci5kYXRhLCBwYXIudXNlTG9nLCBwYXIubG9nQmFzZSwgcGFyLmNvbG9yU2NoZW1lKTtcbiAgICAgICAgYm1hcENhbnZhcy5hZGRUb29sdGlwKGNhbnZhc0lkKTtcbiAgICAgICAgbGV0IGNhbnZhcyA9IGNyZWF0ZUNhbnZhcyhwYXIuaWQsIHBhci53aWR0aCwgcGFyLmhlaWdodCwgbWFyZ2luKTtcbiAgICAgICAgYm1hcENhbnZhcy5kcmF3Q2FudmFzKFxuICAgICAgICAgICAgY2FudmFzLFxuICAgICAgICAgICAge3c6aW5XaWR0aCwgaDppbkhlaWdodCwgdG9wOiBtYXJnaW4udG9wLCBsZWZ0OiBtYXJnaW4ubGVmdH0sXG4gICAgICAgICAgICBwYXIuY29sb3JTY2FsZURvbWFpbixcbiAgICAgICAgICAgIHBhci5sYWJlbHNcbiAgICAgICAgKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IGJtYXAgPSBuZXcgQnViYmxlTWFwKHBhci5kYXRhLCBwYXIudXNlTG9nLCBwYXIubG9nQmFzZSwgcGFyLmNvbG9yU2NoZW1lKTtcbiAgICAgICAgYm1hcC5hZGRUb29sdGlwKHBhci5pZCk7XG4gICAgICAgIGxldCBzdmcgPSBjcmVhdGVTdmcocGFyLmlkLCBwYXIud2lkdGgsIHBhci5oZWlnaHQsIG1hcmdpbik7XG4gICAgICAgIGJtYXAuZHJhd1N2ZyhzdmcsIHt3OmluV2lkdGgsIGg6aW5IZWlnaHQsIHRvcDowLCBsZWZ0OjB9LCBwYXIuY29sb3JTY2FsZURvbWFpbiwgMCwgcGFyLmxhYmVscyk7XG4gICAgICAgIGJtYXAuZHJhd0NvbG9yTGVnZW5kKHN2Zywge3g6IDAsIHk6IC00MH0sIDMsIFwiTkVTXCIpO1xuICAgICAgICBibWFwLmRyYXdCdWJibGVMZWdlbmQoc3ZnLCB7eDogNTAwLCB5Oi00MCwgdGl0bGU6IFwiLWxvZzEwKHAtdmFsdWUpXCJ9LCA1LCBcIi1sb2cxMChwLXZhbHVlKVwiKTtcbiAgICB9XG59XG5cbmNvbnN0IGhlYXRtYXBEZW1vQ29uZmlnID0ge1xuICAgIGlkOiAnZ3RleFZpekhlYXRtYXAnLFxuICAgIGRhdGE6IGRlbW9EYXRhLmhlYXRtYXAsXG4gICAgd2lkdGg6IDEyMDAsIC8vIG91dGVyIHdpZHRoXG4gICAgaGVpZ2h0OiAzMDAsIC8vIG91dGVyIGhlaWdodFxuICAgIG1hcmdpbkxlZnQ6IDIwLFxuICAgIG1hcmdpblJpZ2h0OiA0MCxcbiAgICBtYXJnaW5Ub3A6IDUwLFxuICAgIG1hcmdpbkJvdHRvbTogNTAsXG4gICAgY29sb3JTY2hlbWU6IFwiWWxHbkJ1XCIsXG4gICAgY29ybmVyUmFkaXVzOiAyLFxuICAgIGNvbHVtbkxhYmVsSGVpZ2h0OiAyMCxcbiAgICBjb2x1bW5MYWJlbEFuZ2xlOiA2MCxcbiAgICBjb2x1bW5MYWJlbFBvc0FkanVzdDogMTAsXG4gICAgcm93TGFiZWxXaWR0aDogMTAwLFxuICAgIGxlZ2VuZFNwYWNlOiA1MCxcbiAgICB1c2VMb2c6IHRydWUsXG4gICAgbG9nQmFzZTogMTBcbn07XG4vKipcbiAqIFJlbmRlciBhIDJEIEhlYXRtYXBcbiAqIEBwYXJhbSBwYXJhbXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhlYXRtYXAocGFyPWhlYXRtYXBEZW1vQ29uZmlnKXtcbiAgICBsZXQgbWFyZ2luID0ge1xuICAgICAgICB0b3A6IHBhci5tYXJnaW5Ub3AsXG4gICAgICAgIHJpZ2h0OiBwYXIubWFyZ2luUmlnaHQsXG4gICAgICAgIGJvdHRvbTogcGFyLm1hcmdpbkJvdHRvbSxcbiAgICAgICAgbGVmdDogcGFyLm1hcmdpbkxlZnRcbiAgICB9O1xuICAgIGxldCBpbldpZHRoID0gcGFyLndpZHRoIC0gKHBhci5tYXJnaW5MZWZ0ICsgcGFyLm1hcmdpblJpZ2h0ICsgcGFyLnJvd0xhYmVsV2lkdGgpO1xuICAgIGxldCBpbkhlaWdodCA9IHBhci5oZWlnaHQgLSAocGFyLm1hcmdpblRvcCArIHBhci5tYXJnaW5Cb3R0b20gKyBwYXIuY29sdW1uTGFiZWxIZWlnaHQpO1xuXG4gICAgLy8gdGVzdCBpbnB1dCBwYXJhbXNcbiAgICBjaGVja0RvbUlkKHBhci5pZCk7XG5cbiAgICAvLyBjcmVhdGUgdGhlIFNWR1xuICAgIGxldCBzdmcgPSBjcmVhdGVTdmcocGFyLmlkLCBwYXIud2lkdGgsIHBhci5oZWlnaHQsIG1hcmdpbik7XG5cbiAgICAvLyByZW5kZXIgdGhlIGhlYXRtYXBcbiAgICBsZXQgdG9vbHRpcElkID0gYCR7cGFyLmlkfVRvb2x0aXBgO1xuICAgIGxldCBoID0gbmV3IEhlYXRtYXAocGFyLmRhdGEsIHBhci51c2VMb2csIHBhci5sb2dCYXNlLCBwYXIuY29sb3JTY2hlbWUsIHBhci5jb3JuZXJSYWRpdXMsIHRvb2x0aXBJZCk7XG4gICAgaC5kcmF3KHN2Zywge3c6aW5XaWR0aCwgaDppbkhlaWdodH0sIHBhci5jb2x1bW5MYWJlbEFuZ2xlLCBmYWxzZSwgcGFyLmNvbHVtbkxhYmVsUG9zQWRqdXN0KTtcbiAgICBoLmRyYXdDb2xvckxlZ2VuZChzdmcsIHt4OjIwLCB5OiAtMjB9LCAxMCk7XG59XG5cbmNvbnN0IGRlbmRyb0hlYXRtYXBEZW1vQ29uZmlnID0ge1xuICAgIGlkOiAnZ3RleFZpekRlbmRyb0hlYXRtYXAnLFxuICAgIGRhdGE6IGRlbW9EYXRhLmRlbmRyb0hlYXRtYXAsXG4gICAgdXNlTG9nOiB0cnVlLFxuICAgIGxvZ0Jhc2U6IDEwLFxuICAgIHdpZHRoOiA2MDAsIC8vIG91dGVyIHdpZHRoXG4gICAgaGVpZ2h0OiAzMDAsIC8vIG91dGVyIGhlaWdodFxuICAgIG1hcmdpbkxlZnQ6IDIwLFxuICAgIG1hcmdpblJpZ2h0OiA0MCxcbiAgICBtYXJnaW5Ub3A6IDUwLFxuICAgIG1hcmdpbkJvdHRvbTogNTAsXG4gICAgcm93VHJlZVBhbmVsV2lkdGg6IDEwMCxcbiAgICBjb2xUcmVlUGFuZWxIZWlnaHQ6IDEwMCxcbiAgICBjb2xvclNjaGVtZTogXCJCbHVlc1wiLFxuICAgIGNvcm5lclJhZGl1czogMixcbiAgICBjb2x1bW5MYWJlbEhlaWdodDogMjAwLFxuICAgIGNvbHVtbkxhYmVsQW5nbGU6IDYwLFxuICAgIGNvbHVtbkxhYmVsUG9zQWRqdXN0OiAxMCxcbiAgICByb3dMYWJlbFdpZHRoOiAyMDAsXG4gICAgbGVnZW5kU3BhY2U6IDUwXG59O1xuLyoqXG4gKiBSZW5kZXIgYSBEZW5kcm9IZWF0bWFwXG4gKiBAcGFyYW0gcGFyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZW5kcm9IZWF0bWFwKHBhcj1kZW5kcm9IZWF0bWFwRGVtb0NvbmZpZyl7XG4gICAgbGV0IG1hcmdpbiA9IHtcbiAgICAgICAgdG9wOiBwYXIubWFyZ2luVG9wLFxuICAgICAgICByaWdodDogcGFyLm1hcmdpblJpZ2h0ICsgcGFyLnJvd0xhYmVsV2lkdGgsXG4gICAgICAgIGJvdHRvbTogcGFyLm1hcmdpbkJvdHRvbSArIHBhci5jb2x1bW5MYWJlbEhlaWdodCxcbiAgICAgICAgbGVmdDogcGFyLm1hcmdpbkxlZnRcbiAgICB9O1xuXG4gICAgLy8gdGVzdCBpbnB1dCBwYXJhbXNcbiAgICBjaGVja0RvbUlkKHBhci5pZCk7XG5cbiAgICBsZXQgaW5XaWR0aCA9IHBhci53aWR0aCAtIChwYXIubWFyZ2luTGVmdCArIHBhci5tYXJnaW5SaWdodCArIHBhci5yb3dMYWJlbFdpZHRoKTtcbiAgICBsZXQgaW5IZWlnaHQgPSBwYXIuaGVpZ2h0IC0gKHBhci5tYXJnaW5Ub3AgKyBwYXIubWFyZ2luQm90dG9tICsgcGFyLmNvbHVtbkxhYmVsSGVpZ2h0KTtcblxuICAgIGxldCBzdmdJZCA9IGAke3Bhci5pZH1TdmdgO1xuICAgIGxldCB0b29sdGlwSWQgPSBgJHtwYXIuaWR9VG9vbHRpcGA7XG4gICAgbGV0IGRtYXBDb25maWcgPSBuZXcgRGVuZHJvSGVhdG1hcENvbmZpZyhwYXIud2lkdGgsIHBhci5yb3dUcmVlUGFuZWxXaWR0aCwgcGFyLmNvbFRyZWVQYW5lbEhlaWdodCwgbWFyZ2luKTtcbiAgICBsZXQgZG1hcCA9IG5ldyBEZW5kcm9IZWF0bWFwKHBhci5kYXRhLmNvbFRyZWUsIHBhci5kYXRhLnJvd1RyZWUsIHBhci5kYXRhLmhlYXRtYXAsIHBhci5jb2xvclNjaGVtZSwgcGFyLmNvcm5lclJhZGl1cywgZG1hcENvbmZpZywgdG9vbHRpcElkLCBwYXIudXNlTG9nLCBwYXIubG9nQmFzZSlcbiAgICBsZXQgc2hvd0NvbFRyZWUgPSBwYXIuZGF0YS5jb2xUcmVlICE9PSB1bmRlZmluZWQ7XG4gICAgbGV0IHNob3dSb3dUcmVlID0gcGFyLmRhdGEucm93VHJlZSAhPT0gdW5kZWZpbmVkO1xuICAgIGRtYXAucmVuZGVyKHBhci5pZCwgc3ZnSWQsIHNob3dDb2xUcmVlLCBzaG93Um93VHJlZSwgXCJ0b3BcIiwgOCk7XG59XG5cbmNvbnN0IHZpb2xpbkRlbW9Db25maWcgPSB7XG4gICAgaWQ6ICdndGV4R3JvdXBlZFZpb2xpblBsb3QnLFxuICAgIGRhdGE6IGRlbW9EYXRhLmdyb3VwZWRWaW9saW5QbG90LFxuICAgIHdpZHRoOiA1MDAsXG4gICAgaGVpZ2h0OiAzMDAsXG4gICAgbWFyZ2luTGVmdDogMTAwLFxuICAgIG1hcmdpblJpZ2h0OiAyMCxcbiAgICBtYXJnaW5Ub3A6IDUwLFxuICAgIG1hcmdpbkJvdHRvbTogMTAwLFxuICAgIHNob3dEaXZpZGVyOiB0cnVlLFxuICAgIHhQYWRkaW5nOiAwLjMsXG4gICAgeUxhYmVsOiBcIlJhbmRvbSBWYWx1ZVwiLFxuICAgIHNob3dTdWJYOiB0cnVlLFxuICAgIHNob3dYOiB0cnVlLFxuICAgIHhBbmdsZTogMCxcbiAgICBzdWJYQW5nbGU6IDAsXG4gICAgc2hvd1doaXNrZXI6IGZhbHNlLFxuICAgIHNob3dMZWdlbmQ6IGZhbHNlLFxuICAgIHNob3dTYW1wbGVTaXplOiB0cnVlXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwZWRWaW9saW5QbG90KHBhcj12aW9saW5EZW1vQ29uZmlnKXtcbiAgICBjb25zb2xlLmxvZyhwYXIuZGF0YSk7XG4gICAgbGV0IG1hcmdpbiA9IHtcbiAgICAgICAgdG9wOiBwYXIubWFyZ2luVG9wLFxuICAgICAgICByaWdodDogcGFyLm1hcmdpblJpZ2h0LFxuICAgICAgICBib3R0b206IHBhci5tYXJnaW5Cb3R0b20sXG4gICAgICAgIGxlZnQ6IHBhci5tYXJnaW5MZWZ0XG4gICAgfTtcbiAgICAvLyB0ZXN0IGlucHV0IHBhcmFtc1xuICAgIGNoZWNrRG9tSWQocGFyLmlkKTtcblxuICAgIGxldCBpbldpZHRoID0gcGFyLndpZHRoIC0gKHBhci5tYXJnaW5MZWZ0ICsgcGFyLm1hcmdpblJpZ2h0KTtcbiAgICBsZXQgaW5IZWlnaHQgPSBwYXIuaGVpZ2h0IC0gKHBhci5tYXJnaW5Ub3AgKyBwYXIubWFyZ2luQm90dG9tKTtcblxuICAgIGxldCBzdmdJZCA9IGAke3Bhci5pZH1TdmdgO1xuICAgIGxldCB0b29sdGlwSWQgPSBgJHtwYXIuaWR9VG9vbHRpcGA7XG5cbiAgICAvLyBjcmVhdGUgdGhlIFNWR1xuICAgIGxldCBzdmcgPSBjcmVhdGVTdmcocGFyLmlkLCBwYXIud2lkdGgsIHBhci5oZWlnaHQsIG1hcmdpbik7XG5cbiAgICBjb25zdCBnVmlvbGluID0gbmV3IEdyb3VwZWRWaW9saW4ocGFyLmRhdGEpO1xuICAgIGdWaW9saW4ucmVuZGVyKFxuICAgICAgICBzdmcsXG4gICAgICAgIGluV2lkdGgsXG4gICAgICAgIGluSGVpZ2h0LFxuICAgICAgICBwYXIueFBhZGRpbmcsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgW10sXG4gICAgICAgIHBhci55TGFiZWwsXG4gICAgICAgIHBhci5zaG93WCxcbiAgICAgICAgcGFyLnhBbmdsZSxcbiAgICAgICAgcGFyLnNob3dTdWJYLFxuICAgICAgICBwYXIuc3ViWEFuZ2xlLFxuICAgICAgICBwYXIuc2hvd1doaXNrZXIsXG4gICAgICAgIHBhci5zaG93RGl2aWRlcixcbiAgICAgICAgcGFyLnNob3dMZWdlbmQsXG4gICAgICAgIHBhci5zaG93U2FtcGxlU2l6ZSxcbiAgICAgICAgcGFyLnNvcnRTdWJYLFxuICAgICAgICBwYXIuc2hvd091dGxpZXJzLFxuICAgICAgICBwYXIubnVtUG9pbnRzKTtcbiAgICBzdmcuc2VsZWN0QWxsKFwiLnZpb2xpbi1zaXplLWF4aXNcIikuY2xhc3NlZChcInZpb2xpbi1zaXplLWF4aXMtaGlkZVwiLCB0cnVlKS5jbGFzc2VkKFwidmlvbGluLXNpemUtYXhpc1wiLCBmYWxzZSk7XG5cbiAgICBnVmlvbGluLmNyZWF0ZVRvb2x0aXAodG9vbHRpcElkKTtcbiAgICByZXR1cm4gc3ZnO1xuXG59XG5cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQge2pzb259IGZyb20gXCJkMy1mZXRjaFwiO1xuaW1wb3J0IHtjaGVja0RvbUlkfSBmcm9tIFwiLi9tb2R1bGVzL3V0aWxzXCI7XG5pbXBvcnQge1xuICAgIGdldEd0ZXhVcmxzLFxuICAgIHBhcnNlRHluRXF0bFxufSBmcm9tIFwiLi9tb2R1bGVzL2d0ZXhEYXRhUGFyc2VyXCI7XG5pbXBvcnQge2dyb3VwZWRWaW9saW5QbG90fSBmcm9tIFwiLi9HVEV4Vml6XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIocGFyLCBnZW5jb2RlSWQsIHZhcmlhbnRJZCwgdGlzc3VlSWQsIGdyb3VwTmFtZT11bmRlZmluZWQsIHVybHM9Z2V0R3RleFVybHMoKSl7XG4gICAganNvbih1cmxzWydkeW5lcXRsJ10gKyBgP3ZhcmlhbnRJZD0ke3ZhcmlhbnRJZH0mZ2VuY29kZUlkPSR7Z2VuY29kZUlkfSZ0aXNzdWVTaXRlRGV0YWlsSWQ9JHt0aXNzdWVJZH1gLCB7Y3JlZGVudGlhbHM6J2luY2x1ZGUnfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oanNvbil7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IHBhcnNlRHluRXF0bChqc29uKTtcbiAgICAgICAgICAgIC8vIGNvbnN0cnVjdCB0aGUgZHluRXF0bCBkYXRhIGZvciB0aGUgdGhyZWUgZ2Vub3R5cGVzOiByZWYsIGhldCwgYWx0XG4gICAgICAgICAgICBwYXIuZGF0YSA9IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwOiBncm91cE5hbWV8fGRhdGEudGlzc3VlU2l0ZURldGFpbElkLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogZGF0YS5yZWYubGVuZ3RoPjI/XCJyZWZcIjpkYXRhLnJlZixcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogZGF0YS5ob21vUmVmRXhwLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBkYXRhLmhvbW9SZWZFeHBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IGdyb3VwTmFtZXx8ZGF0YS50aXNzdWVTaXRlRGV0YWlsSWQsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBkYXRhLmhldC5sZW5ndGg+Mj9cImhldFwiOmRhdGEuaGV0LFxuICAgICAgICAgICAgICAgICAgICBzaXplOiBkYXRhLmhldGVyb0V4cC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogZGF0YS5oZXRlcm9FeHBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IGdyb3VwTmFtZXx8ZGF0YS50aXNzdWVTaXRlRGV0YWlsSWQsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBkYXRhLmFsdC5sZW5ndGg+Mj9cImFsdFwiOmRhdGEuYWx0LFxuICAgICAgICAgICAgICAgICAgICBzaXplOiBkYXRhLmhvbW9BbHRFeHAubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IGRhdGEuaG9tb0FsdEV4cFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBwYXIubnVtUG9pbnRzID0gMTA7XG4gICAgICAgICAgICBncm91cGVkVmlvbGluUGxvdChwYXIpO1xuICAgICAgICB9KVxuXG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5cInVzZSBzdHJpY3RcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRHdGV4VXJscygpe1xuICAgIGNvbnN0IGhvc3QgPSAnaHR0cHM6Ly9ndGV4cG9ydGFsLm9yZy9yZXN0L3YxLyc7XG4gICAgLy8gY29uc3QgaG9zdCA9ICdodHRwczovL2Rldi5ndGV4cG9ydGFsLm9yZy9yZXN0L3YxLyc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gZ2VuZS1lcXRsIHZpc3VhbGl6ZXIgc3BlY2lmaWNcbiAgICAgICAgc2luZ2xlVGlzc3VlRXF0bDogaG9zdCArICdhc3NvY2lhdGlvbi9zaW5nbGVUaXNzdWVFcXRsP2Zvcm1hdD1qc29uJmRhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuICAgICAgICBsZDogaG9zdCArICdkYXRhc2V0L2xkP2Zvcm1hdD1qc29uJmRhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuXG4gICAgICAgIC8vIGVxdGwgRGFzaGJvYXJkIHNwZWNpZmljXG4gICAgICAgIGR5bmVxdGw6IGhvc3QgKyAnYXNzb2NpYXRpb24vZHluZXF0bCcsXG4gICAgICAgIHNucDogaG9zdCArICdyZWZlcmVuY2UvdmFyaWFudD9mb3JtYXQ9anNvbiZzbnBJZD0nLFxuICAgICAgICB2YXJpYW50SWQ6IGhvc3QgKyAnZGF0YXNldC92YXJpYW50P2Zvcm1hdD1qc29uJnZhcmlhbnRJZD0nLFxuXG4gICAgICAgIC8vIHRyYW5zY3JpcHQsIGV4b24sIGp1bmN0aW9uIGV4cHJlc3Npb24gc3BlY2lmaWNcbiAgICAgICAgZXhvbkV4cDogaG9zdCArICdleHByZXNzaW9uL21lZGlhbkV4b25FeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmhjbHVzdGVyPXRydWUmZ2VuY29kZUlkPScsXG4gICAgICAgIHRyYW5zY3JpcHRFeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9tZWRpYW5UcmFuc2NyaXB0RXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92NyZoY2x1c3Rlcj10cnVlJmdlbmNvZGVJZD0nLFxuICAgICAgICBqdW5jdGlvbkV4cDogaG9zdCArICdleHByZXNzaW9uL21lZGlhbkp1bmN0aW9uRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92NyZoY2x1c3Rlcj10cnVlJmdlbmNvZGVJZD0nLFxuICAgICAgICB0cmFuc2NyaXB0OiBob3N0ICsgJ3JlZmVyZW5jZS90cmFuc2NyaXB0P2RhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuICAgICAgICBleG9uOiBob3N0ICsgJ3JlZmVyZW5jZS9leG9uP2RhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuICAgICAgICBnZW5lTW9kZWw6IGhvc3QgKyAnZGF0YXNldC9jb2xsYXBzZWRHZW5lTW9kZWxFeG9uP2RhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuICAgICAgICBnZW5lTW9kZWxVbmZpbHRlcmVkOiBob3N0ICsgJ2RhdGFzZXQvZnVsbENvbGxhcHNlZEdlbmVNb2RlbEV4b24/ZGF0YXNldElkPWd0ZXhfdjcmZ2VuY29kZUlkPScsXG5cbiAgICAgICAgLy8gZ2VuZSBleHByZXNzaW9uIHZpb2xpbiBwbG90IHNwZWNpZmljXG4gICAgICAgIGdlbmVFeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9nZW5lRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92NyZnZW5jb2RlSWQ9JyxcblxuICAgICAgICAvLyBnZW5lIGV4cHJlc3Npb24gaGVhdCBtYXAgc3BlY2lmaWNcbiAgICAgICAgbWVkR2VuZUV4cDogaG9zdCArICdleHByZXNzaW9uL21lZGlhbkdlbmVFeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmhjbHVzdGVyPXRydWUmcGFnZVNpemU9MTAwMDAnLFxuXG4gICAgICAgIC8vIGdlbmUgZXhwcmVzc2lvbiBib3hwbG90IHNwZWNpZmljXG4gICAgICAgIGdlbmVFeHBCb3hwbG90OiBob3N0ICsgJ2V4cHJlc3Npb24vZ2VuZUV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjcmYm94cGxvdERldGFpbD1mdWxsJmdlbmNvZGVJZD0nLFxuXG4gICAgICAgIC8vIHRvcCBleHByZXNzZWQgZ2VuZSBleHByZXNzaW9uIHNwZWNpZmljXG4gICAgICAgIHRvcEluVGlzc3VlRmlsdGVyZWQ6IGhvc3QgKyAnZXhwcmVzc2lvbi90b3BFeHByZXNzZWRHZW5lP2RhdGFzZXRJZD1ndGV4X3Y3JmZpbHRlck10R2VuZT10cnVlJnNvcnRCeT1tZWRpYW4mc29ydERpcmVjdGlvbj1kZXNjJnBhZ2VTaXplPTUwJnRpc3N1ZVNpdGVEZXRhaWxJZD0nLFxuICAgICAgICB0b3BJblRpc3N1ZTogaG9zdCArICdleHByZXNzaW9uL3RvcEV4cHJlc3NlZEdlbmU/ZGF0YXNldElkPWd0ZXhfdjcmc29ydEJ5PW1lZGlhbiZzb3J0RGlyZWN0aW9uPWRlc2MmcGFnZVNpemU9NTAmdGlzc3VlU2l0ZURldGFpbElkPScsXG5cbiAgICAgICAgZ2VuZUlkOiBob3N0ICsgJ3JlZmVyZW5jZS9nZW5lP2Zvcm1hdD1qc29uJmdlbmNvZGVWZXJzaW9uPXYxOSZnZW5vbWVCdWlsZD1HUkNoMzclMkZoZzE5JmdlbmVJZD0nLFxuXG4gICAgICAgIC8vIHRpc3N1ZSBtZW51IHNwZWNpZmljXG4gICAgICAgIHRpc3N1ZTogIGhvc3QgKyAnZGF0YXNldC90aXNzdWVJbmZvP2Zvcm1hdD1qc29uJmRhdGFzZXRJZD1ndGV4X3Y3JyxcblxuICAgICAgICAvLyBsb2NhbCBzdGF0aWMgZmlsZXNcbiAgICAgICAgc2FtcGxlOiAndG1wU3VtbWFyeURhdGEvZ3RleC5TYW1wbGUuY3N2JyxcbiAgICAgICAgcm5hc2VxQ3JhbTogJ3RtcFN1bW1hcnlEYXRhL3JuYXNlcV9jcmFtX2ZpbGVzX3Y3X2RiR2FQXzAxMTUxNi50eHQnLFxuICAgICAgICB3Z3NDcmFtOiAndG1wU3VtbWFyeURhdGEvd2dzX2NyYW1fZmlsZXNfdjdfaGczOF9kYkdhUF8wMTE1MTYudHh0JyxcblxuICAgICAgICAvLyBmaXJlQ2xvdWRcbiAgICAgICAgZmNCaWxsaW5nOiAnaHR0cHM6Ly9hcGkuZmlyZWNsb3VkLm9yZy9hcGkvcHJvZmlsZS9iaWxsaW5nJyxcbiAgICAgICAgZmNXb3JrU3BhY2U6ICdodHRwczovL2FwaS5maXJlY2xvdWQub3JnL2FwaS93b3Jrc3BhY2VzJyxcbiAgICAgICAgZmNQb3J0YWxXb3JrU3BhY2U6ICdodHRwczovL3BvcnRhbC5maXJlY2xvdWQub3JnLyN3b3Jrc3BhY2VzJ1xuICAgIH1cbn1cblxuLyoqXG4gKiBwYXJzZSBHVEV4IGR5bmVxdGwganNvblxuICogQHBhcmFtIGRhdGEge0pTT059IGZyb20gR1RFeCBkeW5lcXRsIHdlYiBzZXJ2aWNlXG4gKiBAcmV0dXJucyBkYXRhIHtKU09OfSBtb2RpZmllZCBkYXRhXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VEeW5FcXRsKGpzb24pe1xuICAgIC8vIGNoZWNrIHJlcXVpcmVkIGpzb24gYXR0cmlidXRlc1xuICAgIFsnZGF0YScsICdnZW5vdHlwZXMnLCAncFZhbHVlJywgJ3BWYWx1ZVRocmVzaG9sZCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZighanNvbi5oYXNPd25Qcm9wZXJ0eShkKSl7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGpzb24pO1xuICAgICAgICAgICAgdGhyb3cgJ1BhcnNlIEVycm9yOiBSZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgZDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAganNvbi5leHByZXNzaW9uX3ZhbHVlcyA9IGpzb24uZGF0YS5tYXAoKGQpPT5wYXJzZUZsb2F0KGQpKTtcbiAgICBqc29uLmdlbm90eXBlcyA9IGpzb24uZ2Vub3R5cGVzLm1hcCgoZCk9PnBhcnNlRmxvYXQoZCkpO1xuXG4gICAganNvbi5ob21vUmVmRXhwID0ganNvbi5leHByZXNzaW9uX3ZhbHVlcy5maWx0ZXIoKGQsaSkgPT4ge1xuICAgICAgICByZXR1cm4ganNvbi5nZW5vdHlwZXNbaV0gPT0gMFxuICAgIH0pO1xuICAgIGpzb24uaG9tb0FsdEV4cCA9IGpzb24uZXhwcmVzc2lvbl92YWx1ZXMuZmlsdGVyKChkLGkpID0+IHtcbiAgICAgICAgcmV0dXJuIGpzb24uZ2Vub3R5cGVzW2ldID09IDJcbiAgICB9KTtcbiAgICBqc29uLmhldGVyb0V4cCA9IGpzb24uZXhwcmVzc2lvbl92YWx1ZXMuZmlsdGVyKChkLGkpID0+IHtcbiAgICAgICAgcmV0dXJuIGpzb24uZ2Vub3R5cGVzW2ldID09IDFcbiAgICB9KTtcblxuICAgIC8vIGdlbmVyYXRlIGdlbm90eXBlIHRleHQgbGFiZWxzXG4gICAgbGV0IHJlZiA9IGpzb24udmFyaWFudElkLnNwbGl0KC9fLylbMl07XG4gICAgbGV0IGFsdCA9IGpzb24udmFyaWFudElkLnNwbGl0KC9fLylbM107XG4gICAganNvbi5oZXQgPSByZWYgKyBhbHQ7XG4gICAganNvbi5yZWYgPSByZWYgKyByZWY7XG4gICAganNvbi5hbHQgPSBhbHQgKyBhbHQ7XG5cbiAgICByZXR1cm4ganNvbjtcbn1cblxuXG4vKipcbiAqIFBhcnNlIHRoZSBzaW5nbGUgdGlzc3VlIGVxdGxzIGZyb20gR1RFeCB3ZWIgc2VydmljZVxuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcGFyYW0gdGlzc3VlU2l0ZVRhYmxlIHtKc29ufSBvcHRpb25hbCBmb3IgbWFwcGluZyB0aXNzdWVTaXRlRGV0YWlsSWQgdG8gdGlzc3VlU2l0ZURldGFpbCwgYSBkaWN0aW9uYXJ5IG9mIHRpc3N1ZVNpdGUgb2JqZWN0cyAod2l0aCB0aGUgYXR0ciB0aXNzdWVTaXRlRGV0YWlsKSBpbmRleGVkIGJ5IHRpc3N1ZVNpdGVEZXRhaWxJZCwgYW5kXG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgZXF0bHMgd2l0aCBhdHRyaWJ1dGVzIHJlcXVpcmVkIGZvciBHRVYgcmVuZGVyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNpbmdsZVRpc3N1ZUVxdGxzKGRhdGEsIHRpc3N1ZVNpdGVUYWJsZSA9IHVuZGVmaW5lZCl7XG4gICAgY29uc3QgYXR0ciA9ICdzaW5nbGVUaXNzdWVFcXRsJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgXCJQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBhdHRyaWJ1dGUgaXMgbm90IGZvdW5kOiBcIiArIGF0dHI7XG4gICAgWyd2YXJpYW50SWQnLCAndGlzc3VlU2l0ZURldGFpbElkJywgJ25lcycsICdwVmFsdWUnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICBpZiAoIWRhdGFbYXR0cl1bMF0uaGFzT3duUHJvcGVydHkoaykpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgfSk7XG5cblxuICAgIHJldHVybiBkYXRhW2F0dHJdLm1hcCgoZCk9PntcbiAgICAgICAgZC54ID0gZC52YXJpYW50SWQ7XG4gICAgICAgIGQuZGlzcGxheVggPSBnZW5lcmF0ZVNob3J0VmFyaWFudElkKGQudmFyaWFudElkKTtcbiAgICAgICAgZC55ID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGlmICh0aXNzdWVTaXRlVGFibGUpIGQuZGlzcGxheVkgPSB0aXNzdWVTaXRlVGFibGVbZC50aXNzdWVTaXRlRGV0YWlsSWRdLnRpc3N1ZVNpdGVEZXRhaWw7XG4gICAgICAgIGQudmFsdWUgPSBkLm5lcztcbiAgICAgICAgZC5kaXNwbGF5VmFsdWUgPSBkLm5lcy50b1ByZWNpc2lvbigzKTtcbiAgICAgICAgZC5yID0gLU1hdGgubG9nMTAoZC5wVmFsdWUpOyAvLyBzZXQgciB0byBiZSB0aGUgLWxvZzEwKHAtdmFsdWUpXG4gICAgICAgIGQuckRpc3BsYXlWYWx1ZSA9IHBhcnNlRmxvYXQoZC5wVmFsdWUudG9FeHBvbmVudGlhbCgpKS50b1ByZWNpc2lvbigzKTtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgfSlcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2VuZXMgZnJvbSBHVEV4IHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBnZW5lc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VHZW5lcyhkYXRhLCBzaW5nbGU9ZmFsc2UsIGdlbmVJZD1udWxsKXtcbiAgICBjb25zdCBhdHRyID0gJ2dlbmUnO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IGF0dHJpYnV0ZSBnZW5lIGRvZXNuJ3QgZXhpc3QuXCI7XG4gICAgaWYgKGRhdGEuZ2VuZS5sZW5ndGg9PTApe1xuICAgICAgICAgYWxlcnQoXCJObyBnZW5lIGlzIGZvdW5kXCIpO1xuICAgICAgICAgdGhyb3cgXCJGYXRhbCBFcnJvcjogZ2VuZShzKSBub3QgZm91bmRcIjtcbiAgICAgfVxuICAgIGlmIChzaW5nbGUpe1xuICAgICAgICBpZiAoZ2VuZUlkID09PSBudWxsKSB0aHJvdyBcIlBsZWFzZSBwcm92aWRlIGEgZ2VuZSBJRCBmb3Igc2VhcmNoIHJlc3VsdHMgdmFsaWRhdGlvblwiO1xuICAgICAgICBpZiAoZGF0YS5nZW5lLmxlbmd0aD4xKSB7IC8vIHdoZW4gYSBzaW5nbGUgZ2VuZSBJRCBoYXMgbXVsdGlwbGUgbWF0Y2hlc1xuICAgICAgICAgICAgIGxldCBmaWx0ZXJlZCA9IGRhdGEuZ2VuZS5maWx0ZXIoKGcpPT57XG4gICAgICAgICAgICAgICAgIHJldHVybiBnLmdlbmVTeW1ib2xVcHBlcj09Z2VuZUlkLnRvVXBwZXJDYXNlKCkgfHwgZy5nZW5jb2RlSWQgPT0gZ2VuZUlkLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICBpZiAoZmlsdGVyZWQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICBhbGVydChcIkZhdGFsIEVycm9yOiBpbnB1dCBnZW5lIElEIGlzIG5vdCB1bmlxdWUuXCIpO1xuICAgICAgICAgICAgICAgICB0aHJvdyBcIkZhdGFsIEVycm9yOiBpbnB1dCBnZW5lIElEIGlzIG5vdCB1bmlxdWUuXCI7XG4gICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyZWQubGVuZ3RoID09IDApe1xuICAgICAgICAgICAgICAgICBhbGVydChcIk5vIGdlbmUgaXMgZm91bmQgd2l0aCBcIiArIGdlbmVJZCk7XG4gICAgICAgICAgICAgICAgIHRocm93IFwiRmF0YWwgRXJyb3I6IGdlbmUgbm90IGZvdW5kXCI7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgIGRhdGEuZ2VuZSA9IGZpbHRlcmVkXG4gICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgICAgcmV0dXJuIGRhdGEuZ2VuZVswXVxuICAgIH1cbiAgICBlbHNlIHJldHVybiBkYXRhW2F0dHJdO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSB0aXNzdWVzXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEByZXR1cm5zIHtMaXN0fSBvZiB0aXNzdWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpc3N1ZXMoanNvbil7XG4gICAgY29uc3QgYXR0ciA9ICd0aXNzdWVJbmZvJztcbiAgICBpZighanNvbi5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0ciBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBjb25zdCB0aXNzdWVzID0ganNvblthdHRyXTtcblxuICAgIC8vIHNhbml0eSBjaGVja1xuICAgIFsndGlzc3VlU2l0ZURldGFpbElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWwnLCAnY29sb3JIZXgnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIXRpc3N1ZXNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHIgaXMgbWlzc2luZzogJyArIGQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGlzc3Vlcztcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgdGlzc3VlcyBhbmQgcmV0dXJuIGEgbG9va3VwIHRhYmxlIGluZGV4ZWQgYnkgdGlzc3VlU2l0ZURldGFpbElkXG4gKiBAcGFyYW0ganNvbiBmcm9tIHdlYiBzZXJ2aWNlIHRpc3N1ZVNpdGVEZXRhaWxcbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaXNzdWVEaWN0KGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAndGlzc3VlSW5mbyc7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHIgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgY29uc3QgdGlzc3VlcyA9IGpzb25bYXR0cl07XG4gICAgLy8gc2FuaXR5IGNoZWNrXG4gICAgWyd0aXNzdWVTaXRlRGV0YWlsSWQnLCAndGlzc3VlU2l0ZURldGFpbCcsICdjb2xvckhleCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghdGlzc3Vlc1swXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0ciBpcyBtaXNzaW5nOiAnICsgZDtcbiAgICB9KTtcbiAgICByZXR1cm4gdGlzc3Vlcy5yZWR1Y2UoKGFyciwgZCk9PnthcnJbZC50aXNzdWVTaXRlRGV0YWlsSWRdID0gZDsgcmV0dXJuIGFycjt9LHt9KTtcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgdGlzc3VlcyBzYW1wbGUgY291bnRzLCBHVEV4IHJlbGVhc2Ugc3BlY2lmaWNcbiAqIEBwYXJhbSBqc29uIGZyb20gd2ViIHNlcnZpY2UgdGlzc3VlSW5mb1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaXNzdWVTYW1wbGVDb3VudHMoanNvbil7XG4gICAgY29uc3QgYXR0ciA9ICd0aXNzdWVJbmZvJztcbiAgICBpZighanNvbi5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0ciBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBjb25zdCB0aXNzdWVzID0ganNvblthdHRyXTtcblxuICAgIC8vIGNoZWNrIGpzb24gc3RydWN0dXJlXG4gICAgY29uc3QgdGlzc3VlID0gdGlzc3Vlc1swXTtcbiAgICBpZiAoIXRpc3N1ZS5oYXNPd25Qcm9wZXJ0eSgndGlzc3VlU2l0ZURldGFpbElkJykpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBhdHRyIGlzIG1pc3Npbmc6IHRpc3N1ZVNpdGVEZXRhaWxJZCc7XG4gICAgaWYgKCF0aXNzdWUuaGFzT3duUHJvcGVydHkoJ3JuYVNlcUFuZEdlbm90eXBlU2FtcGxlQ291bnQnKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGF0dHIgaXMgbWlzc2luZzogcm5hU2VxQW5kR2Vub3R5cGVTYW1wbGVDb3VudCc7XG4gICAgcmV0dXJuIHRpc3N1ZXM7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZSBncm91cHNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHBhcmFtIGZvckVxdGwge0Jvb2xlYW59IHJlc3RyaWN0IHRvIGVxdGwgdGlzc3Vlc1xuICogQHJldHVybnMge0RpY3Rpb25hcnl9IG9mIGxpc3RzIG9mIHRpc3N1ZXMgaW5kZXhlZCBieSB0aGUgdGlzc3VlIGdyb3VwIG5hbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3VlU2l0ZXMoZGF0YSwgZm9yRXF0bD1mYWxzZSl7XG4gICAgLy8gdGhlIGxpc3Qgb2YgaW52YWxpZCBlcXRsIHRpc3N1ZXMgZHVlIHRvIHNhbXBsZSBzaXplIDwgNzBcbiAgICAvLyBhIGhhcmQtY29kZWQgbGlzdCBiZWNhdXNlIHRoZSBzYW1wbGUgc2l6ZSBpcyBub3QgZWFzeSB0byByZXRyaWV2ZVxuICAgIGNvbnN0IGludmFsaWRUaXNzdWVzID0gWydCbGFkZGVyJywgJ0NlcnZpeF9FY3RvY2Vydml4JywgJ0NlcnZpeF9FbmRvY2Vydml4JywgJ0ZhbGxvcGlhbl9UdWJlJywgJ0tpZG5leV9Db3J0ZXgnXTtcblxuICAgIGNvbnN0IGF0dHIgPSAndGlzc3VlSW5mbyc7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBsZXQgdGlzc3VlcyA9IGRhdGFbYXR0cl07XG4gICAgWyd0aXNzdWVTaXRlJywndGlzc3VlU2l0ZURldGFpbElkJywndGlzc3VlU2l0ZURldGFpbCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghdGlzc3Vlc1swXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgYHBhcnNlVGlzc3VlU2l0ZXMgYXR0ciBlcnJvci4gJHtkfSBpcyBub3QgZm91bmRgO1xuICAgIH0pO1xuICAgIHRpc3N1ZXMgPSBmb3JFcXRsPT1mYWxzZT90aXNzdWVzOnRpc3N1ZXMuZmlsdGVyKChkKT0+e3JldHVybiAhaW52YWxpZFRpc3N1ZXMuaW5jbHVkZXMoZC50aXNzdWVTaXRlRGV0YWlsSWQpfSk7IC8vIGFuIGFycmF5IG9mIHRpc3N1ZVNpdGVEZXRhaWxJZCBvYmplY3RzXG5cbiAgICAvLyBidWlsZCB0aGUgdGlzc3VlR3JvdXBzIGxvb2t1cCBkaWN0aW9uYXJ5IGluZGV4ZWQgYnkgdGhlIHRpc3N1ZSBncm91cCBuYW1lIChpLmUuIHRoZSB0aXNzdWUgbWFpbiBzaXRlIG5hbWUpXG4gICAgbGV0IHRpc3N1ZUdyb3VwcyA9IHRpc3N1ZXMucmVkdWNlKChhcnIsIGQpPT57XG4gICAgICAgIGxldCBncm91cE5hbWUgPSBkLnRpc3N1ZVNpdGU7XG4gICAgICAgIGxldCBzaXRlID0ge1xuICAgICAgICAgICAgaWQ6IGQudGlzc3VlU2l0ZURldGFpbElkLFxuICAgICAgICAgICAgbmFtZTogZC50aXNzdWVTaXRlRGV0YWlsXG4gICAgICAgIH07XG4gICAgICAgIGlmICghYXJyLmhhc093blByb3BlcnR5KGdyb3VwTmFtZSkpIGFycltncm91cE5hbWVdID0gW107IC8vIGluaXRpYXRlIGFuIGFycmF5XG4gICAgICAgIGFycltncm91cE5hbWVdLnB1c2goc2l0ZSk7XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfSwge30pO1xuXG4gICAgLy8gbW9kaWZ5IHRoZSB0aXNzdWUgZ3JvdXBzIHRoYXQgaGF2ZSBvbmx5IGEgc2luZ2xlIHNpdGVcbiAgICAvLyBieSByZXBsYWNpbmcgdGhlIGdyb3VwJ3MgbmFtZSB3aXRoIHRoZSBzaW5nbGUgc2l0ZSdzIG5hbWUgLS0gcmVzdWx0aW5nIGEgYmV0dGVyIEFscGhhYmV0aWNhbCBvcmRlciBvZiB0aGUgdGlzc3VlIGdyb3Vwc1xuXG4gICAgT2JqZWN0LmtleXModGlzc3VlR3JvdXBzKS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAodGlzc3VlR3JvdXBzW2RdLmxlbmd0aCA9PSAxKXsgLy8gYSBzaW5nbGUtc2l0ZSBncm91cFxuICAgICAgICAgICAgbGV0IHNpdGUgPSB0aXNzdWVHcm91cHNbZF1bMF07IC8vIHRoZSBzaW5nbGUgc2l0ZVxuICAgICAgICAgICAgZGVsZXRlIHRpc3N1ZUdyb3Vwc1tkXTsgLy8gcmVtb3ZlIHRoZSBvbGQgZ3JvdXAgaW4gdGhlIGRpY3Rpb25hcnlcbiAgICAgICAgICAgIHRpc3N1ZUdyb3Vwc1tzaXRlLm5hbWVdID0gW3NpdGVdOyAvLyBjcmVhdGUgYSBuZXcgZ3JvdXAgd2l0aCB0aGUgc2l0ZSdzIG5hbWVcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aXNzdWVHcm91cHM7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGV4b25zXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEBwYXJhbSBmdWxsIHtCb29sZWFufVxuICogQHJldHVybnMge0xpc3R9IG9mIGV4b25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1vZGVsRXhvbnMoanNvbil7XG4gICAgY29uc3QgYXR0ciA9ICdjb2xsYXBzZWRHZW5lTW9kZWxFeG9uJztcbiAgICBpZighanNvbi5oYXNPd25Qcm9wZXJ0eShhdHRyKSl7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoanNvbik7XG4gICAgICAgIHRocm93ICdQYXJzaW5nIEVycm9yOiBSZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICB9XG4gICAgLy8gc2FuaXR5IGNoZWNrXG4gICAgWydzdGFydCcsICdlbmQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWpzb25bYXR0cl1bMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93ICdQYXJzaW5nIEVycm9yOiBSZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgZDtcbiAgICB9KTtcbiAgICByZXR1cm4ganNvblthdHRyXS5tYXAoKGQpPT57XG4gICAgICAgIGQuY2hyb21TdGFydCA9IGQuc3RhcnQ7XG4gICAgICAgIGQuY2hyb21FbmQgPSBkLmVuZDtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGp1bmN0aW9uc1xuICogQHBhcmFtIGRhdGFcbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBqdW5jdGlvbnNcbiAqIC8vIGp1bmN0aW9uIGFubm90YXRpb25zIGFyZSBub3Qgc3RvcmVkIGluIE1vbmdvXG4gICAgLy8gc28gaGVyZSB3ZSB1c2UgdGhlIGp1bmN0aW9uIGV4cHJlc3Npb24gd2ViIHNlcnZpY2UgdG8gcGFyc2UgdGhlIGp1bmN0aW9uIElEIGZvciBpdHMgZ2Vub21pYyBsb2NhdGlvblxuICAgIC8vIGFzc3VtaW5nIHRoYXQgZWFjaCB0aXNzdWUgaGFzIHRoZSBzYW1lIGp1bmN0aW9ucyxcbiAgICAvLyB0byBncmFiIGFsbCB0aGUga25vd24ganVuY3Rpb25zIG9mIGEgZ2VuZSwgd2Ugb25seSBuZWVkIHRvIHF1ZXJ5IG9uZSB0aXNzdWVcbiAgICAvLyBoZXJlIHdlIGFyYml0cmFyaWx5IHBpY2sgTGl2ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUp1bmN0aW9ucyhqc29uKXtcblxuICAgIGNvbnN0IGF0dHIgPSAnbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uJztcbiAgICBpZighanNvbi5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHBhcnNlSnVuY3Rpb25zIGlucHV0IGVycm9yLiAnICsgYXR0cjtcblxuICAgIC8vIGNoZWNrIHJlcXVpcmVkIGpzb24gYXR0cmlidXRlc1xuICAgIFsndGlzc3VlU2l0ZURldGFpbElkJywgJ2p1bmN0aW9uSWQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICAvLyB1c2UgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGpzb24gb2JqZWN0cyBhcyBhIHRlc3QgY2FzZVxuICAgICAgICBpZighanNvblthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShkKSl7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGpzb25bYXR0cl1bMF0pO1xuICAgICAgICAgICAgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGp1bmN0aW9uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgZDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBqc29uW2F0dHJdLmZpbHRlcigoZCk9PmQudGlzc3VlU2l0ZURldGFpbElkPT0nTGl2ZXInKVxuICAgICAgICAgICAgICAgICAgICAubWFwKChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG9zID0gZC5qdW5jdGlvbklkLnNwbGl0KCdfJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tOiBwb3NbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21TdGFydDogcG9zWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tRW5kOiBwb3NbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganVuY3Rpb25JZDogZC5qdW5jdGlvbklkXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXMgZnJvbSB0aGUgR1RFeCB3ZWIgc2VydmljZTogJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIHJldHVybnMgYSBkaWN0aW9uYXJ5IG9mIHRyYW5zY3JpcHQgZXhvbiBvYmplY3QgbGlzdHMgaW5kZXhlZCBieSB0cmFuc2NyaXB0IElEcyAtLSBFTlNUIElEc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFeG9ucyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ2V4b24nO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogZXhvbic7XG4gICAgcmV0dXJuIGpzb25bYXR0cl0ucmVkdWNlKChhLCBkKT0+e1xuICAgICAgICAvLyBjaGVjayByZXF1aXJlZCBhdHRyaWJ1dGVzXG4gICAgICAgIFsndHJhbnNjcmlwdElkJywgJ2Nocm9tb3NvbWUnLCAnc3RhcnQnLCAnZW5kJywgJ2V4b25OdW1iZXInLCAnZXhvbklkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChhW2QudHJhbnNjcmlwdElkXSA9PT0gdW5kZWZpbmVkKSBhW2QudHJhbnNjcmlwdElkXSA9IFtdO1xuICAgICAgICBkLmNocm9tID0gZC5jaHJvbW9zb21lO1xuICAgICAgICBkLmNocm9tU3RhcnQgPSBkLnN0YXJ0O1xuICAgICAgICBkLmNocm9tRW5kID0gZC5lbmQ7XG4gICAgICAgIGFbZC50cmFuc2NyaXB0SWRdLnB1c2goZCk7XG4gICAgICAgIHJldHVybiBhO1xuICAgIH0sIHt9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGlzb2Zvcm1zIGZyb20gdGhlIEdURXggd2ViIHNlcnZpY2U6ICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9yZWxlYXNlPXY3JmdlbmNvZGVfaWQ9J1xuICogQHBhcmFtIGRhdGEge0pzb259IGZyb20gd2ViIHNlcnZpY2UgZXhvblxuICogcmV0dXJucyBhIGxpc3Qgb2YgYWxsIEV4b25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV4b25zVG9MaXN0KGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAnZXhvbic7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBleG9uJztcbiAgICByZXR1cm4ganNvblthdHRyXTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGlzb2Zvcm1zXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn0gZnJvbSBHVEV4IHdlYiBzZXJ2aWNlICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9yZWxlYXNlPXY3JmdlbmNvZGVfaWQ9J1xuICogcmV0dXJucyBhIGxpc3Qgb2YgaXNvZm9ybSBvYmplY3RzIHNvcnRlZCBieSBsZW5ndGggaW4gZGVzY2VuZGluZyBvcmRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUcmFuc2NyaXB0cyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ3RyYW5zY3JpcHQnO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdygncGFyc2VJc29mb3JtcyBpbnB1dCBlcnJvcicpO1xuXG4gICAgLy8gY2hlY2sgcmVxdWlyZWQgYXR0cmlidXRlcywgdXNlIHRoZSBmaXJzdCB0cmFuc2NyaXB0IGFzIHRoZSB0ZXN0IGNhc2VcbiAgICBbJ3RyYW5zY3JpcHRJZCcsICdzdGFydCcsICdlbmQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICBpZighanNvblthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsga1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ganNvblthdHRyXS5zb3J0KChhLCBiKT0+e1xuICAgICAgICBjb25zdCBsMSA9IE1hdGguYWJzKGEuZW5kIC0gYS5zdGFydCkgKyAxO1xuICAgICAgICBjb25zdCBsMiA9IE1hdGguYWJzKGIuZW5kIC0gYi5zdGFydCkgKyAxO1xuICAgICAgICByZXR1cm4gLShsMS1sMik7IC8vIHNvcnQgYnkgaXNvZm9ybSBsZW5ndGggaW4gZGVzY2VuZGluZyBvcmRlclxuICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIGZpbmFsIChtYXNrZWQpIGdlbmUgbW9kZWwgZXhvbiBleHByZXNzaW9uXG4gKiBleHByZXNzaW9uIGlzIG5vcm1hbGl6ZWQgdG8gcmVhZHMgcGVyIGtiXG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gb2YgZXhvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gZXhvbnMge0xpc3R9IG9mIGV4b25zIHdpdGggcG9zaXRpb25zXG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgZXhvbiBvYmplY3RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV4b25FeHByZXNzaW9uKGRhdGEsIGV4b25zKXtcbiAgICBjb25zdCBleG9uRGljdCA9IGV4b25zLnJlZHVjZSgoYSwgZCk9PnthW2QuZXhvbklkXSA9IGQ7IHJldHVybiBhO30sIHt9KTtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhbkV4b25FeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ3BhcnNlRXhvbkV4cHJlc3Npb24gaW5wdXQgZXJyb3InKTtcblxuICAgIGNvbnN0IGV4b25PYmplY3RzID0gZGF0YVthdHRyXTtcbiAgICAvLyBlcnJvci1jaGVja2luZ1xuICAgIFsnbWVkaWFuJywgJ2V4b25JZCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWV4b25PYmplY3RzWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlRXhvbkV4cHJlc3Npb24gYXR0ciBub3QgZm91bmQ6ICcgKyBkO1xuICAgIH0pO1xuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGV4b24gY291bnRzXG4gICAgZXhvbk9iamVjdHMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBjb25zdCBleG9uID0gZXhvbkRpY3RbZC5leG9uSWRdOyAvLyBmb3IgcmV0cmlldmluZyBleG9uIHBvc2l0aW9uc1xuICAgICAgICAvLyBlcnJvci1jaGVja2luZ1xuICAgICAgICBbJ2VuZCcsICdzdGFydCddLmZvckVhY2goKHApPT57XG4gICAgICAgICAgICBpZiAoIWV4b24uaGFzT3duUHJvcGVydHkocCkpIHRocm93ICdGYXRhbCBFcnJvcjogcGFyc2VFeG9uRXhwcmVzc2lvbiBwb3NpdGlvbiBhdHRyIG5vdCBmb3VuZDogJyArIHA7XG4gICAgICAgIH0pO1xuICAgICAgICBkLmwgPSBleG9uLmVuZCAtIGV4b24uc3RhcnQgKyAxO1xuICAgICAgICBkLnZhbHVlID0gTnVtYmVyKGQubWVkaWFuKS9kLmw7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKGQubWVkaWFuKS9kLmw7XG4gICAgICAgIGQueCA9IGQuZXhvbklkO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLmNocm9tU3RhcnQgPSBleG9uLnN0YXJ0O1xuICAgICAgICBkLmNocm9tRW5kID0gZXhvbi5lbmQ7XG4gICAgICAgIGQudW5pdCA9ICdtZWRpYW4gJyArIGQudW5pdCArICcgcGVyIGJhc2UnO1xuICAgICAgICBkLnRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGV4b25PYmplY3RzLnNvcnQoKGEsYik9PntcbiAgICAgICAgaWYgKGEuY2hyb21TdGFydDxiLmNocm9tU3RhcnQpIHJldHVybiAtMTtcbiAgICAgICAgaWYgKGEuY2hyb21TdGFydD5iLmNocm9tU3RhcnQpIHJldHVybiAxO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTsgLy8gc29ydCBieSBnZW5vbWljIGxvY2F0aW9uIGluIGFzY2VuZGluZyBvcmRlclxufVxuXG4vKipcbiAqIFBhcnNlIGp1bmN0aW9uIG1lZGlhbiByZWFkIGNvdW50IGRhdGFcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBvZiB0aGUganVuY3Rpb24gZXhwcmVzc2lvbiB3ZWIgc2VydmljZVxuICogQHJldHVybnMge0xpc3R9IG9mIGp1bmN0aW9uIG9iamVjdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSnVuY3Rpb25FeHByZXNzaW9uKGRhdGEpe1xuICAgIGNvbnN0IGF0dHIgPSAnbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ3BhcnNlSnVuY3Rpb25FeHByZXNzaW9uIGlucHV0IGVycm9yJyk7XG5cbiAgICBjb25zdCBqdW5jdGlvbnMgPSBkYXRhW2F0dHJdO1xuXG4gICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICBpZiAoanVuY3Rpb25zID09PSB1bmRlZmluZWQgfHwganVuY3Rpb25zLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignTm8ganVuY3Rpb24gZGF0YSBmb3VuZCcpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuXG4gICAgLy8gcGFyc2UgR1RFeCBtZWRpYW4ganVuY3Rpb24gcmVhZCBjb3VudHNcbiAgICBqdW5jdGlvbnMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBbJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdqdW5jdGlvbklkJywgJ21lZGlhbicsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYgKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2luZ3IgRXJyb3I6IHBhcnNlSnVuY3Rpb25FeHByZXNzaW9uIGF0dHIgbm90IGZvdW5kOiAnICsgaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBtZWRpYW4gPSBkLm1lZGlhbjtcbiAgICAgICAgbGV0IHRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQudGlzc3VlSWQgPSB0aXNzdWVJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLnggPSBkLmp1bmN0aW9uSWQ7XG4gICAgICAgIGQueSA9IHRpc3N1ZUlkO1xuICAgICAgICBkLnZhbHVlID0gTnVtYmVyKG1lZGlhbik7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKG1lZGlhbik7XG4gICAgfSk7XG5cbiAgICAvLyBzb3J0IGJ5IGdlbm9taWMgbG9jYXRpb24gaW4gYXNjZW5kaW5nIG9yZGVyXG4gICAgcmV0dXJuIGp1bmN0aW9ucy5zb3J0KChhLGIpPT57XG4gICAgICAgIGlmIChhLmp1bmN0aW9uSWQ+Yi5qdW5jdGlvbklkKSByZXR1cm4gMTtcbiAgICAgICAgZWxzZSBpZiAoYS5qdW5jdGlvbklkPGIuanVuY3Rpb25JZCkgcmV0dXJuIC0xO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGV4cHJlc3Npb25cbiAqIEBwYXJhbSBkYXRhXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb24oZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5UcmFuc2NyaXB0RXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdQYXJzaW5nIEVycm9yOiBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uIGlucHV0IGVycm9yJyk7XG4gICAgLy8gcGFyc2UgR1RFeCBpc29mb3JtIG1lZGlhbiBUUE1cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgWydtZWRpYW4nLCAndHJhbnNjcmlwdElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93KCdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCB0cmFuc2NpcHQgYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGQudmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IE51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQueCA9IGQudHJhbnNjcmlwdElkO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLnRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGF0YVthdHRyXTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGV4cHJlc3Npb24sIGFuZCB0cmFuc3Bvc2UgdGhlIG1hdHJpeFxuICogQHBhcmFtIGRhdGFcbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvblRyYW5zcG9zZShkYXRhKXtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhblRyYW5zY3JpcHRFeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGRhdGEpO1xuICAgICAgICB0aHJvdygnUGFyc2luZyBFcnJvcjogcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvblRyYW5zcG9zZSBpbnB1dCBlcnJvci4nKTtcbiAgICB9XG4gICAgLy8gcGFyc2UgR1RFeCBpc29mb3JtIG1lZGlhbiBUUE1cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgWydtZWRpYW4nLCAndHJhbnNjcmlwdElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93KCdQYXJzaW5nIEVycm9yOiBSZXF1aXJlZCB0cmFuc2NyaXB0IGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBtZWRpYW4gPSBkLm1lZGlhbjtcbiAgICAgICAgY29uc3QgdGlzc3VlSWQgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC52YWx1ZSA9IE51bWJlcihtZWRpYW4pO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IE51bWJlcihtZWRpYW4pO1xuICAgICAgICBkLnkgPSBkLnRyYW5zY3JpcHRJZDtcbiAgICAgICAgZC54ID0gdGlzc3VlSWQ7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZDtcbiAgICAgICAgZC50aXNzdWVJZCA9IHRpc3N1ZUlkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogcGFyc2UgbWVkaWFuIGdlbmUgZXhwcmVzc2lvblxuICogQHBhcmFtIGRhdGEge0pzb259IHdpdGggYXR0ciBtZWRpYW5HZW5lRXhwcmVzc2lvblxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1lZGlhbkV4cHJlc3Npb24oZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5HZW5lRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBjb25zdCBhZGp1c3QgPSAxO1xuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGdlbmUgZXhwcmVzc2lvblxuICAgIC8vIGVycm9yLWNoZWNraW5nIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGVzOlxuICAgIGlmIChkYXRhW2F0dHJdLmxlbmd0aCA9PSAwKSB0aHJvdyAncGFyc2VNZWRpYW5FeHByZXNzaW9uIGZpbmRzIG5vIGRhdGEuJztcbiAgICBbJ21lZGlhbicsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnZ2VuY29kZUlkJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCFkYXRhW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGQpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGRhdGFbYXR0cl1bMF0pO1xuICAgICAgICAgICAgdGhyb3cgYFBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3NpbmdwOiAke2R9YDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGxldCByZXN1bHRzID0gZGF0YVthdHRyXTtcbiAgICByZXN1bHRzLmZvckVhY2goZnVuY3Rpb24oZCl7XG4gICAgICAgIGQudmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pO1xuICAgICAgICBkLnggPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC55ID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKGQubWVkaWFuKTtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGV4cHJlc3Npb24gZGF0YSBvZiBhIGdlbmUgZm9yIGEgZ3JvdXBlZCB2aW9saW4gcGxvdFxuICogQHBhcmFtIGRhdGEge0pTT059IGZyb20gR1RFeCBnZW5lIGV4cHJlc3Npb24gd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBjb2xvcnMge0RpY3Rpb25hcnl9IHRoZSB2aW9saW4gY29sb3IgZm9yIGdlbmVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVFeHByZXNzaW9uRm9yVmlvbGluKGRhdGEsIHVzZUxvZz10cnVlLCBjb2xvcnM9dW5kZWZpbmVkKXtcbiAgICBjb25zdCBhdHRyID0gJ2dlbmVFeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIGRhdGFbYXR0cl0uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgWydkYXRhJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5lU3ltYm9sJywgJ2dlbmNvZGVJZCddLmZvckVhY2goKGspPT57XG4gICAgICAgICAgICBpZighZC5oYXNPd25Qcm9wZXJ0eShrKSl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkLnZhbHVlcyA9IHVzZUxvZz9kLmRhdGEubWFwKChkZCk9PntyZXR1cm4gTWF0aC5sb2cxMCgrZGQrMSl9KTpkLmRhdGE7XG4gICAgICAgIGQuZ3JvdXAgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC5sYWJlbCA9IGQuZ2VuZVN5bWJvbDtcbiAgICAgICAgZC5jb2xvciA9IGNvbG9ycz09PXVuZGVmaW5lZD8nIzkwYzFjMSc6Y29sb3JzW2QuZ2VuY29kZUlkXTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGF0YVthdHRyXTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0aGUgTEQgKGxpbmthZ2UgZGlzZXF1aWxpYnJpdW0gZGF0YSlcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggbGQgd2ViIHNlcnZpY2VcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTEQoZGF0YSkge1xuICAgIGNvbnN0IGF0dHIgPSAnbGQnO1xuICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIGxldCBwYXJzZWQgPSBbXTtcbiAgICBsZXQgdW5pcXVlID0ge307XG4gICAgZGF0YVthdHRyXS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIGxldCBsYWJlbHMgPSBkWzBdLnNwbGl0KFwiLFwiKS5zb3J0KCk7IC8vIHNvcnQgdGhlIHZhcmlhbnQgSURzXG4gICAgICAgIHVuaXF1ZVtsYWJlbHNbMF1dID0gdHJ1ZTtcbiAgICAgICAgdW5pcXVlW2xhYmVsc1sxXV0gPSB0cnVlO1xuICAgICAgICBwYXJzZWQucHVzaCh7XG4gICAgICAgICAgICB4OiBsYWJlbHNbMF0sXG4gICAgICAgICAgICBkaXNwbGF5WDogZ2VuZXJhdGVTaG9ydFZhcmlhbnRJZChsYWJlbHNbMF0pLFxuICAgICAgICAgICAgeTogbGFiZWxzWzFdLFxuICAgICAgICAgICAgZGlzcGxheVk6IGdlbmVyYXRlU2hvcnRWYXJpYW50SWQobGFiZWxzWzFdKSxcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZUZsb2F0KGRbMV0pLFxuICAgICAgICAgICAgZGlzcGxheVZhbHVlOiBwYXJzZUZsb2F0KGRbMV0pLnRvUHJlY2lzaW9uKDMpIC8vIHRvUHJlY2lzaW9uKCkgcmV0dXJucyBhIHN0cmluZ1xuICAgICAgICB9KVxuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKHVuaXF1ZSkuZm9yRWFjaCgoZCk9PntcbiAgICAgICAgcGFyc2VkLnB1c2goe1xuICAgICAgICAgICAgeDogZCxcbiAgICAgICAgICAgIGRpc3BsYXlYOiBnZW5lcmF0ZVNob3J0VmFyaWFudElkKGQpLFxuICAgICAgICAgICAgeTogZCxcbiAgICAgICAgICAgIGRpc3BsYXlZOiBnZW5lcmF0ZVNob3J0VmFyaWFudElkKGQpLFxuICAgICAgICAgICAgdmFsdWU6IDEsXG4gICAgICAgICAgICBkaXNwbGF5VmFsdWU6IFwiMVwiXG4gICAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnNlZDtcbn1cblxuLyogcGFyc2UgdGhlIGV4cHJlc3Npb24gZGF0YSBvZiBhIGdlbmUgZm9yIGJveHBsb3RcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggZ2VuZSBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gdGlzc3VlcyB7T2JqZWN0fSBtYXBwaW5nIG9mIHRpc3N1ZSBpZHMgdG8gbGFiZWxzICh0aXNzdWUgbmFtZSlcbiAqIEBwYXJhbSBjb2xvcnMge09iamVjdH0gbWFwcGluZyBvZiB0aXNzdWUgaWRzIHRvIGJveHBsb3QgY29sb3JzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVFeHByZXNzaW9uRm9yQm94cGxvdChkYXRhLCB0aXNzdWVzPXVuZGVmaW5lZCwgY29sb3JzPXVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGF0dHIgPSAnZ2VuZUV4cHJlc3Npb24nO1xuXG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KGBQYXJzaW5nIGVycm9yOiByZXF1aXJlZCBKU09OIGF0dHJpYnV0ZSAke2F0dHJ9IG1pc3NpbmcuYCk7XG5cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpPT57XG4gICAgICAgIFsnZGF0YScsICdnZW5jb2RlSWQnLCAnZ2VuZVN5bWJvbCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYgKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBgUGFyc2luZyBlcnJvcjogcmVxdWlyZWQgSlNPTiBhdHRyaWJ1dGUgJHtrfSBpcyBtaXNzaW5nIGZyb20gYSByZWNvcmQuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGQubGFiZWwgPSB0aXNzdWVzPT09dW5kZWZpbmVkP2QudGlzc3VlU2l0ZURldGFpbElkOnRpc3N1ZXNbZC50aXNzdWVTaXRlRGV0YWlsSWRdO1xuICAgICAgICBkLmNvbG9yID0gY29sb3JzPT09dW5kZWZpbmVkPycjNDY4MmI0Jzpjb2xvcnNbZC50aXNzdWVTaXRlRGV0YWlsSWRdO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogZ2VuZXJhdGUgdmFyaWFudCBJRCBzaG9ydGhhbmRcbiAqIEBwYXJhbSBpZFxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlU2hvcnRWYXJpYW50SWQoaWQpe1xuICAgIGxldCB0ZW1wID0gaWQuc3BsaXQoXCJfXCIpO1xuICAgIGlmKHRlbXBbMl0ubGVuZ3RoID09IDEgJiYgdGVtcFszXS5sZW5ndGggPT0gMSkgcmV0dXJuIGlkO1xuICAgIGlmKHRlbXBbMl0ubGVuZ3RoID4gdGVtcFszXS5sZW5ndGgpIHtcbiAgICAgICAgdGVtcFsyXSA9IFwiZGVsXCI7XG4gICAgICAgIHRlbXAuc3BsaWNlKDMsIDEpOyAvLyBkZWxldGUgdGhlIGFsdFxuICAgIH1cbiAgICBlbHNlIGlmKHRlbXBbM10ubGVuZ3RoID4gdGVtcFsyXS5sZW5ndGgpIHtcbiAgICAgICAgdGVtcFszXSA9IFwiaW5zXCI7XG4gICAgICAgIHRlbXAuc3BsaWNlKDIsIDEpOyAvLyBkZWxldGUgdGhlIHJlZlxuICAgIH1cbiAgICBlbHNlIHsgLy8gdGVtcFszXS5sZW5ndGggPT0gdGVtcFsyXS5sZW5ndGggYW5kIHRlbXBbM10ubGVuZ3RoID4gMVxuICAgICAgICB0ZW1wWzNdID0gXCJzdWJcIjtcbiAgICAgICAgdGVtcC5zcGxpY2UoMiwgMSk7IC8vIGRlbGV0ZSB0aGUgcmVmXG4gICAgfVxuICAgIHJldHVybiB0ZW1wLmpvaW4oXCJfXCIpO1xufVxuIl0sIm5hbWVzIjpbIkVPTCIsIkVPRiIsIlFVT1RFIiwiTkVXTElORSIsIlJFVFVSTiIsIm9iamVjdENvbnZlcnRlciIsImNvbHVtbnMiLCJGdW5jdGlvbiIsIm1hcCIsIm5hbWUiLCJpIiwiSlNPTiIsInN0cmluZ2lmeSIsImpvaW4iLCJkZWxpbWl0ZXIiLCJyZUZvcm1hdCIsIlJlZ0V4cCIsIkRFTElNSVRFUiIsImNoYXJDb2RlQXQiLCJwYXJzZVJvd3MiLCJ0ZXh0IiwiZiIsInQiLCJyb3dzIiwiTiIsImxlbmd0aCIsIkkiLCJuIiwiZW9mIiwiZW9sIiwidG9rZW4iLCJjIiwiaiIsInNsaWNlIiwicmVwbGFjZSIsInJvdyIsInB1c2giLCJmb3JtYXRSb3ciLCJmb3JtYXRWYWx1ZSIsInRlc3QiLCJwYXJzZSIsImNvbnZlcnQiLCJvYmplY3QiLCJjdXN0b21Db252ZXJ0ZXIiLCJmb3JtYXQiLCJjb2x1bW5TZXQiLCJPYmplY3QiLCJjcmVhdGUiLCJmb3JFYWNoIiwiY29sdW1uIiwiaW5mZXJDb2x1bW5zIiwiY29uY2F0IiwiZm9ybWF0Um93cyIsImRzdiIsInJlc3BvbnNlSnNvbiIsInJlc3BvbnNlIiwib2siLCJFcnJvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJqc29uIiwieGh0bWwiLCJzdmciLCJ4bGluayIsInhtbCIsInhtbG5zIiwicHJlZml4IiwiaW5kZXhPZiIsIm5hbWVzcGFjZXMiLCJoYXNPd25Qcm9wZXJ0eSIsInNwYWNlIiwibG9jYWwiLCJmdWxsbmFtZSIsIm5hbWVzcGFjZSIsInRoaXMiLCJvd25lckRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiZG9jdW1lbnQiLCJ1cmkiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwibm9uZSIsInNlbGVjdG9yIiwicXVlcnlTZWxlY3RvciIsImVtcHR5IiwicXVlcnlTZWxlY3RvckFsbCIsIm1hdGNoZXIiLCJtYXRjaGVzIiwiZWxlbWVudCIsInZlbmRvck1hdGNoZXMiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJjYWxsIiwidXBkYXRlIiwiQXJyYXkiLCJFbnRlck5vZGUiLCJwYXJlbnQiLCJkYXR1bSIsIl9uZXh0IiwiX3BhcmVudCIsIl9fZGF0YV9fIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJhcHBlbmRDaGlsZCIsImNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwibmV4dCIsImtleVByZWZpeCIsImJpbmRJbmRleCIsImdyb3VwIiwiZW50ZXIiLCJleGl0IiwiZGF0YSIsIm5vZGUiLCJncm91cExlbmd0aCIsImRhdGFMZW5ndGgiLCJiaW5kS2V5Iiwia2V5Iiwia2V5VmFsdWUiLCJub2RlQnlLZXlWYWx1ZSIsImtleVZhbHVlcyIsImFzY2VuZGluZyIsImEiLCJiIiwiTmFOIiwiZGVmYXVsdFZpZXciLCJzdHlsZVZhbHVlIiwic3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImNsYXNzQXJyYXkiLCJzdHJpbmciLCJ0cmltIiwic3BsaXQiLCJjbGFzc0xpc3QiLCJDbGFzc0xpc3QiLCJfbm9kZSIsIl9uYW1lcyIsImdldEF0dHJpYnV0ZSIsImNsYXNzZWRBZGQiLCJuYW1lcyIsImxpc3QiLCJhZGQiLCJjbGFzc2VkUmVtb3ZlIiwicmVtb3ZlIiwidGV4dFJlbW92ZSIsInRleHRDb250ZW50IiwiaHRtbFJlbW92ZSIsImlubmVySFRNTCIsInJhaXNlIiwibmV4dFNpYmxpbmciLCJwYXJlbnROb2RlIiwibG93ZXIiLCJwcmV2aW91c1NpYmxpbmciLCJmaXJzdENoaWxkIiwiY29uc3RhbnROdWxsIiwicmVtb3ZlQ2hpbGQiLCJzZWxlY3Rpb25fY2xvbmVTaGFsbG93IiwiY2xvbmVOb2RlIiwic2VsZWN0aW9uX2Nsb25lRGVlcCIsInNldEF0dHJpYnV0ZSIsInNwbGljZSIsImNvbnRhaW5zIiwiZmlsdGVyRXZlbnRzIiwiZXZlbnQiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsImZpbHRlckNvbnRleHRMaXN0ZW5lciIsImxpc3RlbmVyIiwiaW5kZXgiLCJjb250ZXh0TGlzdGVuZXIiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZXZlbnQxIiwiZXZlbnQwIiwib25SZW1vdmUiLCJ0eXBlbmFtZSIsIm9uIiwiX19vbiIsIm8iLCJtIiwidHlwZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYXB0dXJlIiwib25BZGQiLCJ2YWx1ZSIsIndyYXAiLCJkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJwYXJhbXMiLCJ3aW5kb3ciLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZXRhaWwiLCJyb290IiwiU2VsZWN0aW9uIiwiZ3JvdXBzIiwicGFyZW50cyIsIl9ncm91cHMiLCJfcGFyZW50cyIsInNlbGVjdGlvbiIsInNvdXJjZSIsImN1cnJlbnQiLCJzb3VyY2VFdmVudCIsImNoYW5nZWRUb3VjaGVzIiwib3duZXJTVkdFbGVtZW50IiwiY3JlYXRlU1ZHUG9pbnQiLCJwb2ludCIsIngiLCJjbGllbnRYIiwieSIsImNsaWVudFkiLCJtYXRyaXhUcmFuc2Zvcm0iLCJnZXRTY3JlZW5DVE0iLCJpbnZlcnNlIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJjbGllbnRMZWZ0IiwidG9wIiwiY2xpZW50VG9wIiwic2VsZWN0Iiwic3ViZ3JvdXBzIiwic3Vibm9kZSIsInN1Ymdyb3VwIiwic2VsZWN0QWxsIiwic2VsZWN0b3JBbGwiLCJmaWx0ZXIiLCJtYXRjaCIsInNpemUiLCJlYWNoIiwiYmluZCIsImVudGVyR3JvdXAiLCJ1cGRhdGVHcm91cCIsInByZXZpb3VzIiwiaTAiLCJpMSIsIl9lbnRlciIsIl9leGl0Iiwic3BhcnNlIiwibWVyZ2UiLCJncm91cHMwIiwiZ3JvdXBzMSIsIm0wIiwibTEiLCJNYXRoIiwibWluIiwibWVyZ2VzIiwiZ3JvdXAwIiwiZ3JvdXAxIiwib3JkZXIiLCJzb3J0IiwiY29tcGFyZSIsImNvbXBhcmVOb2RlIiwic29ydGdyb3VwcyIsInNvcnRncm91cCIsImNhbGxiYWNrIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJub2RlcyIsImF0dHIiLCJnZXRBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlIiwidiIsInNldEF0dHJpYnV0ZU5TIiwicHJpb3JpdHkiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFByb3BlcnR5IiwicHJvcGVydHkiLCJjbGFzc2VkIiwiaHRtbCIsImFwcGVuZCIsImNyZWF0b3IiLCJpbnNlcnQiLCJiZWZvcmUiLCJjbG9uZSIsImRlZXAiLCJ0eXBlbmFtZXMiLCJwYXJzZVR5cGVuYW1lcyIsImRpc3BhdGNoIiwiYmlzZWN0UmlnaHQiLCJsbyIsImhpIiwibWlkIiwicmlnaHQiLCJhcnJheSIsInZhbHVlcyIsInZhbHVlb2YiLCJkZWx0YSIsIm1lYW4iLCJzdW0iLCJpc05hTiIsIm51bWJlciIsInZhcmlhbmNlIiwic3FydCIsIm1heCIsInN0YXJ0Iiwic3RvcCIsInN0ZXAiLCJjZWlsIiwicmFuZ2UiLCJlMTAiLCJlNSIsImUyIiwidGlja0luY3JlbWVudCIsImNvdW50IiwicG93ZXIiLCJmbG9vciIsImxvZyIsIkxOMTAiLCJlcnJvciIsInBvdyIsInAiLCJ2YWx1ZTAiLCJudW1iZXJzIiwicXVhbnRpbGUiLCJjaGVja0RvbUlkIiwiaWQiLCIkIiwiY29uc29sZSIsIndhcm4iLCJnZW5lcmF0ZVJhbmRvbU1hdHJpeCIsInBhciIsInNjYWxlRmFjdG9yIiwiZGl2ZXJnaW5nIiwiYnViYmxlIiwiWCIsIlkiLCJ0b1N0cmluZyIsInJhbmRvbSIsImRpc3BsYXlWYWx1ZSIsInBhcnNlRmxvYXQiLCJ0b0V4cG9uZW50aWFsIiwidG9QcmVjaXNpb24iLCJyIiwidW5kZWZpbmVkIiwic291cmNlUmFuZG9tTm9ybWFsIiwicmFuZG9tTm9ybWFsIiwibXUiLCJzaWdtYSIsIk1hcCIsInNldCIsImlzQXJyYXkiLCJzb3J0VmFsdWVzIiwicm9sbHVwIiwibmVzdCIsImtleXMiLCJzb3J0S2V5cyIsImRlcHRoIiwiY3JlYXRlUmVzdWx0Iiwic2V0UmVzdWx0IiwidmFsdWVzQnlLZXkiLCJyZXN1bHQiLCJnZXQiLCJjcmVhdGVPYmplY3QiLCJzZXRPYmplY3QiLCJjcmVhdGVNYXAiLCJzZXRNYXAiLCJlbnRyaWVzIiwic29ydEtleSIsImsiLCJTZXQiLCJoYXMiLCJjbGVhciIsInByb3RvIiwiaW1wbGljaXQiLCJiYW5kIiwiYmFuZHdpZHRoIiwic2NhbGUiLCJvcmRpbmFsIiwiZG9tYWluIiwidW5rbm93biIsIl8iLCJjb3B5Iiwib3JkaW5hbFJhbmdlIiwicm91bmQiLCJwYWRkaW5nSW5uZXIiLCJwYWRkaW5nT3V0ZXIiLCJhbGlnbiIsInJlc2NhbGUiLCJyZXZlcnNlIiwic2VxdWVuY2UiLCJyYW5nZVJvdW5kIiwicGFkZGluZyIsImZhY3RvcnkiLCJleHRlbmQiLCJkZWZpbml0aW9uIiwiQ29sb3IiLCJyZUkiLCJyZU4iLCJyZVAiLCJyZUhleDMiLCJyZUhleDYiLCJyZVJnYkludGVnZXIiLCJyZVJnYlBlcmNlbnQiLCJyZVJnYmFJbnRlZ2VyIiwicmVSZ2JhUGVyY2VudCIsInJlSHNsUGVyY2VudCIsInJlSHNsYVBlcmNlbnQiLCJuYW1lZCIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiY29sb3IiLCJ0b0xvd2VyQ2FzZSIsImV4ZWMiLCJSZ2IiLCJwYXJzZUludCIsInJnYm4iLCJyZ2JhIiwiaHNsYSIsImciLCJyZ2JDb252ZXJ0IiwicmdiIiwib3BhY2l0eSIsImhleCIsImgiLCJzIiwibCIsIkhzbCIsImhzbDJyZ2IiLCJtMiIsImRlZmluZSIsImRpc3BsYXlhYmxlIiwiYnJpZ2h0ZXIiLCJkYXJrZXIiLCJoc2xDb252ZXJ0IiwiZGVnMnJhZCIsIlBJIiwicmFkMmRlZyIsIlhuIiwiWW4iLCJabiIsInQwIiwidDEiLCJ0MiIsInQzIiwibGFiQ29udmVydCIsIkxhYiIsIkhjbCIsImNvcyIsInNpbiIsInoiLCJyZ2IybHJnYiIsInh5ejJsYWIiLCJsYWIyeHl6IiwibHJnYjJyZ2IiLCJhdGFuMiIsImhjbENvbnZlcnQiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkVEIiwiRUIiLCJCQ19EQSIsImN1YmVoZWxpeCIsIkN1YmVoZWxpeCIsImJsIiwiY3ViZWhlbGl4Q29udmVydCIsImxpbmVhciIsImdhbW1hIiwibm9nYW1tYSIsImV4cG9uZW50aWFsIiwiY29uc3RhbnQiLCJjb3NoIiwic2luaCIsInJnYkdhbW1hIiwiZW5kIiwiY29sb3JSZ2IiLCJzcGxpbmUiLCJyZ2JCYXNpcyIsInYxIiwidjIiLCJ2MCIsInYzIiwiYmFzaXMiLCJjb2xvcnMiLCJyZUEiLCJyZUIiLCJhbSIsImJtIiwiYnMiLCJiaSIsImxhc3RJbmRleCIsInEiLCJvbmUiLCJ6ZXJvIiwiRGF0ZSIsInNldFRpbWUiLCJuYiIsIm5hIiwidmFsdWVPZiIsImNzc05vZGUiLCJjc3NSb290IiwiY3NzVmlldyIsInN2Z05vZGUiLCJkZWdyZWVzIiwiaWRlbnRpdHkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInJvdGF0ZSIsInNrZXdYIiwic2NhbGVYIiwic2NhbGVZIiwiZSIsImF0YW4iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJwb3AiLCJ4YSIsInlhIiwieGIiLCJ5YiIsInRyYW5zbGF0ZSIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwidHJhbnNmb3JtIiwiZGVjb21wb3NlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmciLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJtYXRyaXgiLCJTUVJUMiIsImh1ZSIsImN1YmVoZWxpeEdhbW1hIiwiY29sb3JDdWJlaGVsaXgiLCJjdWJlaGVsaXhMb25nIiwidW5pdCIsImRlaW50ZXJwb2xhdGVMaW5lYXIiLCJiaW1hcCIsImRlaW50ZXJwb2xhdGUiLCJyZWludGVycG9sYXRlIiwiZDAiLCJkMSIsInIwIiwicjEiLCJwb2x5bWFwIiwiYmlzZWN0IiwiY29lZmZpY2llbnQiLCJmb3JtYXREZWNpbWFsIiwiYWJzIiwicHJlZml4RXhwb25lbnQiLCJyZSIsImZvcm1hdFNwZWNpZmllciIsInNwZWNpZmllciIsIkZvcm1hdFNwZWNpZmllciIsImZpbGwiLCJzaWduIiwic3ltYm9sIiwid2lkdGgiLCJjb21tYSIsInByZWNpc2lvbiIsImV4cG9uZW50IiwiJSIsInRvRml4ZWQiLCJmb3JtYXRSb3VuZGVkIiwidG9VcHBlckNhc2UiLCJsb2NhbGUiLCJmb3JtYXRQcmVmaXgiLCJwcmVmaXhlcyIsImdyb3VwaW5nIiwidGhvdXNhbmRzIiwic3Vic3RyaW5nIiwiY3VycmVuY3kiLCJkZWNpbWFsIiwibnVtZXJhbHMiLCJmb3JtYXROdW1lcmFscyIsInBlcmNlbnQiLCJuZXdGb3JtYXQiLCJmb3JtYXRUeXBlcyIsInN1ZmZpeCIsImZvcm1hdFR5cGUiLCJtYXliZVN1ZmZpeCIsInZhbHVlUHJlZml4IiwidmFsdWVTdWZmaXgiLCJ2YWx1ZU5lZ2F0aXZlIiwib3V0IiwiZm9ybWF0VHJpbSIsIkluZmluaXR5Iiwic3RlcDAiLCJzdGVwMSIsInRpY2tTdGVwIiwicHJlY2lzaW9uUHJlZml4IiwicHJlY2lzaW9uUm91bmQiLCJwcmVjaXNpb25GaXhlZCIsImxpbmVhcmlzaCIsInRpY2tzIiwiaXNGaW5pdGUiLCJ0aWNrRm9ybWF0IiwibmljZSIsInBpZWNld2lzZSIsIm91dHB1dCIsImlucHV0IiwiaW50ZXJwb2xhdGUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiY2xhbXAiLCJkZWludGVycG9sYXRlQ2xhbXAiLCJpbnZlcnQiLCJyZWludGVycG9sYXRlQ2xhbXAiLCJpbnRlcnBvbGF0ZVJvdW5kIiwiY29udGludW91cyIsImZvcm1hdExvY2FsZSIsIm5ld0ludGVydmFsIiwiZmxvb3JpIiwib2Zmc2V0aSIsImZpZWxkIiwiaW50ZXJ2YWwiLCJkYXRlIiwib2Zmc2V0IiwiZXZlcnkiLCJtaWxsaXNlY29uZCIsImR1cmF0aW9uTWludXRlIiwiZHVyYXRpb25XZWVrIiwiZGF5IiwiZ2V0VVRDU2Vjb25kcyIsImdldE1pbnV0ZXMiLCJnZXRUaW1lem9uZU9mZnNldCIsImdldEhvdXJzIiwic2V0SG91cnMiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsIndlZWtkYXkiLCJnZXREYXkiLCJzdW5kYXkiLCJtb25kYXkiLCJ0aHVyc2RheSIsInllYXIiLCJzZXRNb250aCIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJzZXRGdWxsWWVhciIsInNldFVUQ1NlY29uZHMiLCJnZXRVVENNaW51dGVzIiwic2V0VVRDTWludXRlcyIsImdldFVUQ0hvdXJzIiwidXRjRGF5Iiwic2V0VVRDSG91cnMiLCJzZXRVVENEYXRlIiwiZ2V0VVRDRGF0ZSIsInV0Y1dlZWtkYXkiLCJnZXRVVENEYXkiLCJ1dGNTdW5kYXkiLCJ1dGNNb25kYXkiLCJ1dGNUaHVyc2RheSIsInV0Y1llYXIiLCJzZXRVVENNb250aCIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRnVsbFllYXIiLCJzZXRVVENGdWxsWWVhciIsImxvY2FsRGF0ZSIsIkgiLCJNIiwiUyIsIkwiLCJ1dGNEYXRlIiwiVVRDIiwibmV3WWVhciIsInV0Y0Zvcm1hdCIsInV0Y1BhcnNlIiwicGFkcyIsIi0iLCIwIiwibnVtYmVyUmUiLCJwZXJjZW50UmUiLCJyZXF1b3RlUmUiLCJwYWQiLCJyZXF1b3RlIiwiZm9ybWF0UmUiLCJmb3JtYXRMb29rdXAiLCJwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXkiLCJ3IiwicGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5IiwidSIsInBhcnNlV2Vla051bWJlclN1bmRheSIsIlUiLCJwYXJzZVdlZWtOdW1iZXJJU08iLCJWIiwicGFyc2VXZWVrTnVtYmVyTW9uZGF5IiwiVyIsInBhcnNlRnVsbFllYXIiLCJwYXJzZVllYXIiLCJwYXJzZVpvbmUiLCJaIiwicGFyc2VNb250aE51bWJlciIsInBhcnNlRGF5T2ZNb250aCIsInBhcnNlRGF5T2ZZZWFyIiwicGFyc2VIb3VyMjQiLCJwYXJzZU1pbnV0ZXMiLCJwYXJzZVNlY29uZHMiLCJwYXJzZU1pbGxpc2Vjb25kcyIsInBhcnNlTWljcm9zZWNvbmRzIiwicGFyc2VMaXRlcmFsUGVyY2VudCIsInBhcnNlVW5peFRpbWVzdGFtcCIsIlEiLCJwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzIiwiZm9ybWF0RGF5T2ZNb250aCIsImZvcm1hdEhvdXIyNCIsImZvcm1hdEhvdXIxMiIsImZvcm1hdERheU9mWWVhciIsInRpbWVEYXkiLCJ0aW1lWWVhciIsImZvcm1hdE1pbGxpc2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsImZvcm1hdE1pY3Jvc2Vjb25kcyIsImZvcm1hdE1vbnRoTnVtYmVyIiwiZm9ybWF0TWludXRlcyIsImZvcm1hdFNlY29uZHMiLCJnZXRTZWNvbmRzIiwiZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSIsImZvcm1hdFdlZWtOdW1iZXJTdW5kYXkiLCJ0aW1lU3VuZGF5IiwiZm9ybWF0V2Vla051bWJlcklTTyIsInRpbWVUaHVyc2RheSIsImZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVyTW9uZGF5IiwidGltZU1vbmRheSIsImZvcm1hdFllYXIiLCJmb3JtYXRGdWxsWWVhciIsImZvcm1hdFpvbmUiLCJmb3JtYXRVVENEYXlPZk1vbnRoIiwiZm9ybWF0VVRDSG91cjI0IiwiZm9ybWF0VVRDSG91cjEyIiwiZm9ybWF0VVRDRGF5T2ZZZWFyIiwiZm9ybWF0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZm9ybWF0VVRDTWljcm9zZWNvbmRzIiwiZm9ybWF0VVRDTW9udGhOdW1iZXIiLCJmb3JtYXRVVENNaW51dGVzIiwiZm9ybWF0VVRDU2Vjb25kcyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkiLCJkb3ciLCJmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlcklTTyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5IiwiZm9ybWF0VVRDWWVhciIsImZvcm1hdFVUQ0Z1bGxZZWFyIiwiZm9ybWF0VVRDWm9uZSIsImZvcm1hdExpdGVyYWxQZXJjZW50IiwiZm9ybWF0VW5peFRpbWVzdGFtcCIsImZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzIiwibG9jYWxlX2RhdGVUaW1lIiwiZGF0ZVRpbWUiLCJsb2NhbGVfZGF0ZSIsImxvY2FsZV90aW1lIiwidGltZSIsImxvY2FsZV9wZXJpb2RzIiwicGVyaW9kcyIsImxvY2FsZV93ZWVrZGF5cyIsImRheXMiLCJsb2NhbGVfc2hvcnRXZWVrZGF5cyIsInNob3J0RGF5cyIsImxvY2FsZV9tb250aHMiLCJtb250aHMiLCJsb2NhbGVfc2hvcnRNb250aHMiLCJzaG9ydE1vbnRocyIsInBlcmlvZFJlIiwicGVyaW9kTG9va3VwIiwid2Vla2RheVJlIiwid2Vla2RheUxvb2t1cCIsInNob3J0V2Vla2RheVJlIiwic2hvcnRXZWVrZGF5TG9va3VwIiwibW9udGhSZSIsIm1vbnRoTG9va3VwIiwic2hvcnRNb250aFJlIiwic2hvcnRNb250aExvb2t1cCIsImZvcm1hdHMiLCJ1dGNGb3JtYXRzIiwicGFyc2VzIiwicGFyc2VTcGVjaWZpZXIiLCJjaGFyQXQiLCJuZXdQYXJzZSIsIm5ld0RhdGUiLCJ3ZWVrIiwidG9JU09TdHJpbmciLCJub29wIiwiRGlzcGF0Y2giLCJ0eXBlcyIsIlQiLCJ0aGF0IiwiYXJncyIsInRhc2tIZWFkIiwidGFza1RhaWwiLCJmcmFtZSIsInRpbWVvdXQiLCJwb2tlRGVsYXkiLCJjbG9ja0xhc3QiLCJjbG9ja05vdyIsImNsb2NrU2tldyIsImNsb2NrIiwicGVyZm9ybWFuY2UiLCJub3ciLCJzZXRGcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJjbGVhck5vdyIsIlRpbWVyIiwiX2NhbGwiLCJfdGltZSIsInRpbWVyIiwiZGVsYXkiLCJyZXN0YXJ0Iiwid2FrZSIsInRpbWVyRmx1c2giLCJzbGVlcCIsIm5hcCIsInBva2UiLCJjbGVhclRpbWVvdXQiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJlbGFwc2VkIiwiVHlwZUVycm9yIiwiZW1wdHlPbiIsImVtcHR5VHdlZW4iLCJDUkVBVEVEIiwiU0NIRURVTEVEIiwiU1RBUlRJTkciLCJTVEFSVEVEIiwiUlVOTklORyIsIkVORElORyIsIkVOREVEIiwidGltaW5nIiwic2NoZWR1bGVzIiwiX190cmFuc2l0aW9uIiwic2VsZiIsInR3ZWVuIiwic3RhdGUiLCJ0aWNrIiwiZHVyYXRpb24iLCJlYXNlIiwiaW5pdCIsInNjaGVkdWxlIiwiYWN0aXZlIiwidHdlZW5WYWx1ZSIsInRyYW5zaXRpb24iLCJfaWQiLCJpbnRlcnBvbGF0ZU51bWJlciIsImludGVycG9sYXRlUmdiIiwiaW50ZXJwb2xhdGVTdHJpbmciLCJUcmFuc2l0aW9uIiwiX25hbWUiLCJuZXdJZCIsInNlbGVjdGlvbl9wcm90b3R5cGUiLCJjaGlsZHJlbiIsImluaGVyaXQiLCJpZDAiLCJpZDEiLCJvbjAiLCJvbjEiLCJzaXQiLCJvbkZ1bmN0aW9uIiwiYXR0clR3ZWVuIiwidmFsdWUwMCIsInZhbHVlMTAiLCJpbnRlcnBvbGF0ZTAiLCJ2YWx1ZTEiLCJfdmFsdWUiLCJzdHlsZVR3ZWVuIiwic3R5bGVSZW1vdmUiLCJzdHlsZVJlbW92ZUVuZCIsInN0eWxlRnVuY3Rpb24iLCJzdHlsZUNvbnN0YW50IiwidGV4dEZ1bmN0aW9uIiwidGV4dENvbnN0YW50IiwidHdlZW4wIiwidHdlZW4xIiwiZWFzZUNvbnN0YW50IiwiZGVmYXVsdFRpbWluZyIsInNjaGVtZSIsImludGVycG9sYXRlUmdiQmFzaXMiLCJpbnRlcnJ1cHQiLCJyYW1wIiwiaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nIiwiVG9vbGJhciIsIltvYmplY3QgT2JqZWN0XSIsImRvbUlkIiwidG9vbHRpcCIsInZlcnRpY2FsIiwic2hvdyIsImJ0bkNsYXNzZXMiLCJiYXIiLCJhZGRDbGFzcyIsImFwcGVuZFRvIiwiYnV0dG9ucyIsInN2Z0lkIiwib3V0ZmlsZU5hbWUiLCJjbG9uZUlkIiwiaWNvbiIsImNyZWF0ZUJ1dHRvbiIsImRvd25sb2FkU3ZnIiwiaGlkZSIsIiRidXR0b24iLCJmaWxlTmFtZSIsInN2Z09iaiIsIiRzdmdDb3B5Iiwic3R5bGVzIiwiZG9tIiwidXNlZCIsInNoZWV0cyIsInN0eWxlU2hlZXRzIiwiY3NzUnVsZXMiLCJydWxlcyIsInJ1bGUiLCJlbGVtcyIsInNlbGVjdG9yVGV4dCIsImZpbmQiLCJjc3NUZXh0IiwicGFyc2VDc3NTdHlsZXMiLCJwcmVwZW5kIiwic3ZnSHRtbCIsInN2Z0Jsb2IiLCJCbG9iIiwic2F2ZUFzIiwiVG9vbHRpcCIsInZlcmJvc2UiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImluZm8iLCJlZGl0IiwibW92ZSIsInBhZ2VYIiwicGFnZVkiLCJib3R0b20iLCJlcHNpbG9uIiwiZW50ZXJpbmciLCJfX2F4aXMiLCJheGlzIiwib3JpZW50IiwidGlja0FyZ3VtZW50cyIsInRpY2tWYWx1ZXMiLCJ0aWNrU2l6ZUlubmVyIiwidGlja1NpemVPdXRlciIsInRpY2tQYWRkaW5nIiwiY29udGV4dCIsInNwYWNpbmciLCJyYW5nZTAiLCJyYW5nZTEiLCJwb3NpdGlvbiIsInBhdGgiLCJ0aWNrRXhpdCIsInRpY2tFbnRlciIsImxpbmUiLCJ0aWNrU2l6ZSIsImF4aXNCb3R0b20iLCJwaSIsInRhdSIsInRhdUVwc2lsb24iLCJQYXRoIiwiX3gwIiwiX3kwIiwiX3gxIiwiX3kxIiwibW92ZVRvIiwiY2xvc2VQYXRoIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsIngxIiwieTEiLCJiZXppZXJDdXJ2ZVRvIiwieDIiLCJ5MiIsImFyY1RvIiwieDAiLCJ5MCIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwieDIwIiwieTIwIiwibDIxXzIiLCJsMjBfMiIsImwyMSIsImwwMSIsImFjb3MiLCJ0MDEiLCJ0MjEiLCJhcmMiLCJhMCIsImExIiwiY2N3IiwiZHgiLCJkeSIsImN3IiwiZGEiLCJMaW5lYXIiLCJfY29udGV4dCIsInBvaW50WCIsInBvaW50WSIsImRlZmluZWQiLCJjdXJ2ZSIsImN1cnZlTGluZWFyIiwiYXJlYSIsImJ1ZmZlciIsImRlZmluZWQwIiwieDB6IiwieTB6IiwiYXJlYVN0YXJ0IiwibGluZVN0YXJ0IiwibGluZUVuZCIsImFyZWFFbmQiLCJhcmVhbGluZSIsImxpbmVYMCIsImxpbmVZMCIsImxpbmVZMSIsImxpbmVYMSIsInNsb3BlMyIsImgwIiwiaDEiLCJzMCIsInMxIiwic2xvcGUyIiwiTW9ub3RvbmVYIiwiUmVmbGVjdENvbnRleHQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm5vcHJvcGFnYXRpb24iLCJfbGluZSIsIl9wb2ludCIsIl90MCIsIk1PREVfRFJBRyIsIk1PREVfU1BBQ0UiLCJNT0RFX0hBTkRMRSIsIk1PREVfQ0VOVEVSIiwiaGFuZGxlcyIsInh5IiwiWFkiLCJjdXJzb3JzIiwib3ZlcmxheSIsIm53IiwibmUiLCJzZSIsInN3IiwiZmxpcFgiLCJmbGlwWSIsInNpZ25zWCIsInNpZ25zWSIsImRlZmF1bHRGaWx0ZXIiLCJidXR0b24iLCJkZWZhdWx0RXh0ZW50IiwiaGVpZ2h0IiwiX19icnVzaCIsImV4dGVudCIsImRpbSIsInRvdWNoZW5kaW5nIiwibGlzdGVuZXJzIiwiYnJ1c2giLCJoYW5kbGVTaXplIiwiaW5pdGlhbGl6ZSIsImhhbmRsZSIsInJlZHJhdyIsInN0YXJ0ZWQiLCJlbWl0dGVyIiwiRW1pdHRlciIsInRvdWNoZXMiLCJub2V2ZW50IiwidzAiLCJ3MSIsIm4wIiwibjEiLCJlMCIsImUxIiwibW92aW5nIiwibG9ja1giLCJsb2NrWSIsInRhcmdldCIsIm1vZGUiLCJtZXRhS2V5IiwiYWx0S2V5Iiwic2lnblgiLCJzaWduWSIsInNoaWZ0aW5nIiwic2hpZnRLZXkiLCJwb2ludDAiLCJtb3VzZSIsImVtaXQiLCJiZWZvcmVzdGFydCIsIm1vdmVkIiwiZW5kZWQiLCJ2aWV3Iiwia2V5Q29kZSIsIl9fbm9zZWxlY3QiLCJNb3pVc2VyU2VsZWN0IiwiZHJhZ0Rpc2FibGUiLCJwb2ludDEiLCJub2NsaWNrIiwiZHJhZ0VuYWJsZSIsInNlbGVjdGlvbjAiLCJzZWxlY3Rpb24xIiwic3RhcnRpbmciLCJjdXN0b21FdmVudCIsImtlcm5lbCIsImVwYW5lY2huaWtvdiIsImdhdXNzaWFuIiwiZXhwIiwia2VybmVsQmFuZHdpZHRoIiwibnJkIiwiZGV2aWF0aW9uIiwia2VybmVsRGVuc2l0eUVzdGltYXRvciIsIkdyb3VwZWRWaW9saW4iLCJncm91cEluZm8iLCJfc2FuaXR5Q2hlY2siLCJ0b29sYmFyIiwieFBhZGRpbmciLCJ4RG9tYWluIiwieURvbWFpbiIsInlMYWJlbCIsInNob3dYIiwieEFuZ2xlIiwic2hvd1N1YlgiLCJzdWJYQW5nbGUiLCJzaG93V2hpc2tlciIsInNob3dEaXZpZGVyIiwic2hvd0xlZ2VuZCIsInNob3dTaXplIiwic29ydFN1YlgiLCJzaG93T3V0bGllcnMiLCJudW1Qb2ludHMiLCJyZXNldCIsInJlbmRlciIsInVwZGF0ZVlTY2FsZSIsInlTY2FsZSIsInVwZGF0ZVhTY2FsZSIsImFsbFYiLCJzY2FsZUJhbmQiLCJzdWJ4Iiwic2NhbGVMaW5lYXIiLCJsYWJlbCIsImVudHJ5IiwiX2RyYXdWaW9saW4iLCJzaXplU2NhbGUiLCJzdWJ4RyIsInhBeGlzIiwieUF4aXMiLCJnZXRCQm94IiwiX2FkZEdyb3VwRGl2aWRlciIsImxlZ2VuZEciLCJ0aXRsZSIsInRoZUJydXNoIiwiem9vbSIsImlkZWxUaW1lb3V0IiwibG93Qm91bmQiLCJ1cHBlckJvdW5kIiwiZ2ciLCJxMSIsInEzIiwibWVkIiwibWVkaWFuIiwiZ0luZGV4Iiwia2RlIiwiZURvbWFpbiIsInZlcnRpY2VzIiwidmlvbGluRyIsIl92YWxpZFZlcnRpY2VzIiwiek1heCIsInZpb2xpbiIsInZQYXRoIiwiaXFyIiwidXBwZXIiLCJqaXR0ZXIiLCJvdXRsaWVycyIsImdldFgiLCJyZWR1Y2UiLCJ2aW9saW5EZW1vQ29uZmlnIiwiaGVhdG1hcCIsImRlbmRyb0hlYXRtYXAiLCJyb3dUcmVlIiwiY29sVHJlZSIsImdyb3VwZWRWaW9saW5QbG90IiwidHJhbnNjcmlwdFRyYWNrcyIsImV4b25zIiwiRU5TVDAwMDAwMzExNTk1LjkiLCJjaHJvbSIsImNocm9tRW5kIiwiZXhvbklkIiwiZXhvbk51bWJlciIsImNocm9tU3RhcnQiLCJzdHJhbmQiLCJ0cmFuc2NyaXB0cyIsImNocm9tb3NvbWUiLCJnZW5jb2RlSWQiLCJnZW5lU3ltYm9sIiwidHJhbnNjcmlwdElkIiwiYnViYmxlTWFwIiwibGRQbG90IiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwic2hvd1NhbXBsZVNpemUiLCJtYXJnaW4iLCJpbldpZHRoIiwiaW5IZWlnaHQiLCJ0b29sdGlwSWQiLCJjcmVhdGVTdmciLCJnVmlvbGluIiwiY3JlYXRlVG9vbHRpcCIsInZhcmlhbnRJZCIsInRpc3N1ZUlkIiwiZ3JvdXBOYW1lIiwidXJscyIsImhvc3QiLCJzaW5nbGVUaXNzdWVFcXRsIiwibGQiLCJkeW5lcXRsIiwic25wIiwiZXhvbkV4cCIsInRyYW5zY3JpcHRFeHAiLCJqdW5jdGlvbkV4cCIsInRyYW5zY3JpcHQiLCJleG9uIiwiZ2VuZU1vZGVsIiwiZ2VuZU1vZGVsVW5maWx0ZXJlZCIsImdlbmVFeHAiLCJtZWRHZW5lRXhwIiwiZ2VuZUV4cEJveHBsb3QiLCJ0b3BJblRpc3N1ZUZpbHRlcmVkIiwidG9wSW5UaXNzdWUiLCJnZW5lSWQiLCJ0aXNzdWUiLCJzYW1wbGUiLCJybmFzZXFDcmFtIiwid2dzQ3JhbSIsImZjQmlsbGluZyIsImZjV29ya1NwYWNlIiwiZmNQb3J0YWxXb3JrU3BhY2UiLCJnZXRHdGV4VXJscyIsImNyZWRlbnRpYWxzIiwiZmV0Y2giLCJ0aGVuIiwiZXhwcmVzc2lvbl92YWx1ZXMiLCJnZW5vdHlwZXMiLCJob21vUmVmRXhwIiwiaG9tb0FsdEV4cCIsImhldGVyb0V4cCIsInJlZiIsImFsdCIsImhldCIsInBhcnNlRHluRXF0bCIsInRpc3N1ZVNpdGVEZXRhaWxJZCJdLCJtYXBwaW5ncyI6IjRDQUFBLElBQUlBLEtBQ0FDLEtBQ0FDLEVBQVEsR0FDUkMsRUFBVSxHQUNWQyxFQUFTLEdBRWIsU0FBU0MsRUFBZ0JDLEdBQ3ZCLE9BQU8sSUFBSUMsU0FBUyxJQUFLLFdBQWFELEVBQVFFLElBQUksU0FBU0MsRUFBTUMsR0FDL0QsT0FBT0MsS0FBS0MsVUFBVUgsR0FBUSxPQUFTQyxFQUFJLE1BQzFDRyxLQUFLLEtBQU8sS0EwQkYsV0FBU0MsR0FDdEIsSUFBSUMsRUFBVyxJQUFJQyxPQUFPLEtBQVFGLEVBQVksU0FDMUNHLEVBQVlILEVBQVVJLFdBQVcsR0FXckMsU0FBU0MsRUFBVUMsRUFBTUMsR0FDdkIsSUFJSUMsRUFKQUMsS0FDQUMsRUFBSUosRUFBS0ssT0FD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QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSx5REFDQSwrREFDQSxzRUFDQTNDLElBQUlnbkIsS0NFUzRZLEdBWkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSx5REFDQSwrREFDQSxzRUFDQTNDLElBQUlnbkIsS0NFUzRZLEdBWkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSx5REFDQSwrREFDQSxzRUFDQTNDLElBQUlnbkIsS0NFUzRZLEdBWkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSx5REFDQSwrREFDQSxzRUFDQTNDLElBQUlnbkIsS0NFUzRZLEdBWkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSx5REFDQSwrREFDQSxzRUFDQTNDLElBQUlnbkIsS0NFUzRZLEdBWkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSx5REFDQSwrREFDQSxzRUFDQTNDLElBQUlnbkIsS0NFUzRZLEdBWkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSx5REFDQSwrREFDQSxzRUFDQTNDLElBQUlnbkIsS0NBUzRZLEdBVkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTNDLElBQUlnbkIsS0NFUzRZLEdBVkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTNDLElBQUlnbkIsS0NFUzRZLEdBVkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTNDLElBQUlnbkIsS0NFUzRZLEdBVkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTNDLElBQUlnbkIsS0NFUzRZLEdBVkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTNDLElBQUlnbkIsS0NFUzRZLEdBVkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTNDLElBQUlnbkIsS0NFUzRZLEdBVkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTNDLElBQUlnbkIsS0NFUzRZLEdBVkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTNDLElBQUlnbkIsS0NFUzRZLEdBVkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTNDLElBQUlnbkIsS0NFUzRZLEdBVkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTNDLElBQUlnbkIsS0NFUzRZLEdBVkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTNDLElBQUlnbkIsS0NFUzRZLEdBVkssSUFBSW42QixNQUFNLEdBQUc5QyxPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTNDLElBQUlnbkIsS0NFUzRZLEdBVkssSUFBSW42QixNQUFN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
