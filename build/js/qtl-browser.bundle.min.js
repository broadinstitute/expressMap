var QTLBrowser=function(t){"use strict";var e={},n={},a=34,r=10,i=13;function c(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}var o=function(t){var o=new RegExp('["'+t+"\n\r]"),f=t.charCodeAt(0);function l(t,c){var o,l=[],s=t.length,u=0,d=0,h=s<=0,b=!1;function p(){if(h)return n;if(b)return b=!1,e;var c,o,l=u;if(t.charCodeAt(l)===a){for(;u++<s&&t.charCodeAt(u)!==a||t.charCodeAt(++u)===a;);return(c=u)>=s?h=!0:(o=t.charCodeAt(u++))===r?b=!0:o===i&&(b=!0,t.charCodeAt(u)===r&&++u),t.slice(l+1,c-1).replace(/""/g,'"')}for(;u<s;){if((o=t.charCodeAt(c=u++))===r)b=!0;else if(o===i)b=!0,t.charCodeAt(u)===r&&++u;else if(o!==f)continue;return t.slice(l,c)}return h=!0,t.slice(l,s)}for(t.charCodeAt(s-1)===r&&--s,t.charCodeAt(s-1)===i&&--s;(o=p())!==n;){for(var g=[];o!==e&&o!==n;)g.push(o),o=p();c&&null==(g=c(g,d++))||l.push(g)}return l}function s(e){return e.map(u).join(t)}function u(t){return null==t?"":o.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,a,r=l(t,function(t,r){if(n)return n(t,r-1);a=t,n=e?function(t,e){var n=c(t);return function(a,r){return e(n(a),r,t)}}(t,e):c(t)});return r.columns=a||[],r},parseRows:l,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var a in t)a in e||n.push(e[a]=a)}),n}(e)),[n.map(u).join(t)].concat(e.map(function(e){return n.map(function(t){return u(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(s).join("\n")}}},f=o(",").parse,l=o("\t").parse;function s(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var u=function(t,e){return fetch(t,e).then(s)};function d(t){return function(e,n,a){return 2===arguments.length&&"function"==typeof n&&(a=n,n=void 0),u(e,n).then(function(e){return t(e,a)})}}d(f);var h=d(l),b="http://www.w3.org/1999/xhtml",p={svg:"http://www.w3.org/2000/svg",xhtml:b,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},g=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),p.hasOwnProperty(e)?{space:p[e],local:t}:t};var m=function(t){var e=g(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===b&&e.documentElement.namespaceURI===b?e.createElement(t):e.createElementNS(n,t)}})(e)};function y(){}var v=function(t){return null==t?y:function(){return this.querySelector(t)}};function w(){return[]}var x=function(t){return null==t?w:function(){return this.querySelectorAll(t)}},_=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var S=document.documentElement;if(!S.matches){var M=S.webkitMatchesSelector||S.msMatchesSelector||S.mozMatchesSelector||S.oMatchesSelector;_=function(t){return function(){return M.call(this,t)}}}}var A=_,k=function(t){return new Array(t.length)};function T(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}T.prototype={constructor:T,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var C="$";function N(t,e,n,a,r,i){for(var c,o=0,f=e.length,l=i.length;o<l;++o)(c=e[o])?(c.__data__=i[o],a[o]=c):n[o]=new T(t,i[o]);for(;o<f;++o)(c=e[o])&&(r[o]=c)}function D(t,e,n,a,r,i,c){var o,f,l,s={},u=e.length,d=i.length,h=new Array(u);for(o=0;o<u;++o)(f=e[o])&&(h[o]=l=C+c.call(f,f.__data__,o,e),l in s?r[o]=f:s[l]=f);for(o=0;o<d;++o)(f=s[l=C+c.call(t,i[o],o,i)])?(a[o]=f,f.__data__=i[o],s[l]=null):n[o]=new T(t,i[o]);for(o=0;o<u;++o)(f=e[o])&&s[h[o]]===f&&(r[o]=f)}function L(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var E=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function F(t,e){return t.style.getPropertyValue(e)||E(t).getComputedStyle(t,null).getPropertyValue(e)}function U(t){return t.trim().split(/^|\s+/)}function P(t){return t.classList||new Y(t)}function Y(t){this._node=t,this._names=U(t.getAttribute("class")||"")}function q(t,e){for(var n=P(t),a=-1,r=e.length;++a<r;)n.add(e[a])}function B(t,e){for(var n=P(t),a=-1,r=e.length;++a<r;)n.remove(e[a])}Y.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function V(){this.textContent=""}function O(){this.innerHTML=""}function j(){this.nextSibling&&this.parentNode.appendChild(this)}function I(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function z(){return null}function X(){var t=this.parentNode;t&&t.removeChild(this)}function H(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function R(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var G={},W=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(G={mouseenter:"mouseover",mouseleave:"mouseout"}));function Z(t,e,n){return t=Q(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function Q(t,e,n){return function(a){var r=W;W=a;try{t.call(this,this.__data__,e,n)}finally{W=r}}}function J(t){return function(){var e=this.__on;if(e){for(var n,a=0,r=-1,i=e.length;a<i;++a)n=e[a],t.type&&n.type!==t.type||n.name!==t.name?e[++r]=n:this.removeEventListener(n.type,n.listener,n.capture);++r?e.length=r:delete this.__on}}}function K(t,e,n){var a=G.hasOwnProperty(t.type)?Z:Q;return function(r,i,c){var o,f=this.__on,l=a(e,i,c);if(f)for(var s=0,u=f.length;s<u;++s)if((o=f[s]).type===t.type&&o.name===t.name)return this.removeEventListener(o.type,o.listener,o.capture),this.addEventListener(o.type,o.listener=l,o.capture=n),void(o.value=e);this.addEventListener(t.type,l,n),o={type:t.type,name:t.name,value:e,listener:l,capture:n},f?f.push(o):this.__on=[o]}}function tt(t,e,n){var a=E(t),r=a.CustomEvent;"function"==typeof r?r=new r(e,n):(r=a.document.createEvent("Event"),n?(r.initEvent(e,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(e,!1,!1)),t.dispatchEvent(r)}var et=[null];function nt(t,e){this._groups=t,this._parents=e}function at(){return new nt([[document.documentElement]],et)}nt.prototype=at.prototype={constructor:nt,select:function(t){"function"!=typeof t&&(t=v(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,c,o=e[r],f=o.length,l=a[r]=new Array(f),s=0;s<f;++s)(i=o[s])&&(c=t.call(i,i.__data__,s,o))&&("__data__"in i&&(c.__data__=i.__data__),l[s]=c);return new nt(a,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=x(t));for(var e=this._groups,n=e.length,a=[],r=[],i=0;i<n;++i)for(var c,o=e[i],f=o.length,l=0;l<f;++l)(c=o[l])&&(a.push(t.call(c,c.__data__,l,o)),r.push(c));return new nt(a,r)},filter:function(t){"function"!=typeof t&&(t=A(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,c=e[r],o=c.length,f=a[r]=[],l=0;l<o;++l)(i=c[l])&&t.call(i,i.__data__,l,c)&&f.push(i);return new nt(a,this._parents)},data:function(t,e){if(!t)return b=new Array(this.size()),s=-1,this.each(function(t){b[++s]=t}),b;var n,a=e?D:N,r=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var c=i.length,o=new Array(c),f=new Array(c),l=new Array(c),s=0;s<c;++s){var u=r[s],d=i[s],h=d.length,b=t.call(u,u&&u.__data__,s,r),p=b.length,g=f[s]=new Array(p),m=o[s]=new Array(p);a(u,d,g,m,l[s]=new Array(h),b,e);for(var y,v,w=0,x=0;w<p;++w)if(y=g[w]){for(w>=x&&(x=w+1);!(v=m[x])&&++x<p;);y._next=v||null}}return(o=new nt(o,r))._enter=f,o._exit=l,o},enter:function(){return new nt(this._enter||this._groups.map(k),this._parents)},exit:function(){return new nt(this._exit||this._groups.map(k),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,a=e.length,r=n.length,i=Math.min(a,r),c=new Array(a),o=0;o<i;++o)for(var f,l=e[o],s=n[o],u=l.length,d=c[o]=new Array(u),h=0;h<u;++h)(f=l[h]||s[h])&&(d[h]=f);for(;o<a;++o)c[o]=e[o];return new nt(c,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var a,r=t[e],i=r.length-1,c=r[i];--i>=0;)(a=r[i])&&(c&&c!==a.nextSibling&&c.parentNode.insertBefore(a,c),c=a);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=L);for(var n=this._groups,a=n.length,r=new Array(a),i=0;i<a;++i){for(var c,o=n[i],f=o.length,l=r[i]=new Array(f),s=0;s<f;++s)(c=o[s])&&(l[s]=c);l.sort(e)}return new nt(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var a=t[e],r=0,i=a.length;r<i;++r){var c=a[r];if(c)return c}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,a=e.length;n<a;++n)for(var r,i=e[n],c=0,o=i.length;c<o;++c)(r=i[c])&&t.call(r,r.__data__,c,i);return this},attr:function(t,e){var n=g(t);if(arguments.length<2){var a=this.node();return n.local?a.getAttributeNS(n.space,n.local):a.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var a=e.apply(this,arguments);null==a?this.style.removeProperty(t):this.style.setProperty(t,a,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):F(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=U(t+"");if(arguments.length<2){for(var a=P(this.node()),r=-1,i=n.length;++r<i;)if(!a.contains(n[r]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?q:B)(this,t)}}:e?function(t){return function(){q(this,t)}}:function(t){return function(){B(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?V:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?O:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(j)},lower:function(){return this.each(I)},append:function(t){var e="function"==typeof t?t:m(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:m(t),a=null==e?z:"function"==typeof e?e:v(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),a.apply(this,arguments)||null)})},remove:function(){return this.each(X)},clone:function(t){return this.select(t?R:H)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var a,r,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),c=i.length;if(!(arguments.length<2)){for(o=e?K:J,null==n&&(n=!1),a=0;a<c;++a)this.each(o(i[a],e,n));return this}var o=this.node().__on;if(o)for(var f,l=0,s=o.length;l<s;++l)for(a=0,f=o[l];a<c;++a)if((r=i[a]).type===f.type&&r.name===f.name)return f.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return tt(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return tt(this,t,e)}})(t,e))}};var rt=function(t){return"string"==typeof t?new nt([[document.querySelector(t)]],[document.documentElement]):new nt([[t]],et)},it=function(){for(var t,e=W;t=e.sourceEvent;)e=t;return e},ct=function(t){var e=it();return e.changedTouches&&(e=e.changedTouches[0]),function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var a=n.createSVGPoint();return a.x=e.clientX,a.y=e.clientY,[(a=a.matrixTransform(t.getScreenCTM().inverse())).x,a.y]}var r=t.getBoundingClientRect();return[e.clientX-r.left-t.clientLeft,e.clientY-r.top-t.clientTop]}(t,e)},ot=function(t){return"string"==typeof t?new nt([document.querySelectorAll(t)],[document.documentElement]):new nt([null==t?[]:t],et)},ft=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN};var lt,st,ut=(1===(lt=ft).length&&(st=lt,lt=function(t,e){return ft(st(t),e)}),{left:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){var r=n+a>>>1;lt(t[r],e)<0?n=r+1:a=r}return n},right:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){var r=n+a>>>1;lt(t[r],e)>0?a=r:n=r+1}return n}}).right,dt=function(t,e,n){t=+t,e=+e,n=(r=arguments.length)<2?(e=t,t=0,1):r<3?1:+n;for(var a=-1,r=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(r);++a<r;)i[a]=t+a*n;return i},ht=Math.sqrt(50),bt=Math.sqrt(10),pt=Math.sqrt(2),gt=function(t,e,n){var a,r,i,c,o=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((a=e<t)&&(r=t,t=e,e=r),0===(c=mt(t,e,n))||!isFinite(c))return[];if(c>0)for(t=Math.ceil(t/c),e=Math.floor(e/c),i=new Array(r=Math.ceil(e-t+1));++o<r;)i[o]=(t+o)*c;else for(t=Math.floor(t*c),e=Math.ceil(e*c),i=new Array(r=Math.ceil(t-e+1));++o<r;)i[o]=(t-o)/c;return a&&i.reverse(),i};function mt(t,e,n){var a=(e-t)/Math.max(0,n),r=Math.floor(Math.log(a)/Math.LN10),i=a/Math.pow(10,r);return r>=0?(i>=ht?10:i>=bt?5:i>=pt?2:1)*Math.pow(10,r):-Math.pow(10,-r)/(i>=ht?10:i>=bt?5:i>=pt?2:1)}var yt=function(t,e){var n,a,r=t.length,i=-1;if(null==e){for(;++i<r;)if(null!=(n=t[i])&&n>=n)for(a=n;++i<r;)null!=(n=t[i])&&n>a&&(a=n)}else for(;++i<r;)if(null!=(n=e(t[i],i,t))&&n>=n)for(a=n;++i<r;)null!=(n=e(t[i],i,t))&&n>a&&(a=n);return a},vt=function(t,e){var n,a,r=t.length,i=-1;if(null==e){for(;++i<r;)if(null!=(n=t[i])&&n>=n)for(a=n;++i<r;)null!=(n=t[i])&&a>n&&(a=n)}else for(;++i<r;)if(null!=(n=e(t[i],i,t))&&n>=n)for(a=n;++i<r;)null!=(n=e(t[i],i,t))&&a>n&&(a=n);return a};function wt(){}function xt(t,e){var n=new wt;if(t instanceof wt)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var a,r=-1,i=t.length;if(null==e)for(;++r<i;)n.set(r,t[r]);else for(;++r<i;)n.set(e(a=t[r],r,t),a)}else if(t)for(var c in t)n.set(c,t[c]);return n}wt.prototype=xt.prototype={constructor:wt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var _t=function(){var t,e,n,a=[],r=[];function i(n,r,c,o){if(r>=a.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var f,l,s,u=-1,d=n.length,h=a[r++],b=xt(),p=c();++u<d;)(s=b.get(f=h(l=n[u])+""))?s.push(l):b.set(f,[l]);return b.each(function(t,e){o(p,e,i(t,r,c,o))}),p}return n={object:function(t){return i(t,0,St,Mt)},map:function(t){return i(t,0,At,kt)},entries:function(t){return function t(n,i){if(++i>a.length)return n;var c,o=r[i-1];return null!=e&&i>=a.length?c=n.entries():(c=[],n.each(function(e,n){c.push({key:n,values:t(e,i)})})),null!=o?c.sort(function(t,e){return o(t.key,e.key)}):c}(i(t,0,At,kt),0)},key:function(t){return a.push(t),n},sortKeys:function(t){return r[a.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}};function St(){return{}}function Mt(t,e,n){t[e]=n}function At(){return xt()}function kt(t,e,n){t.set(e,n)}var Tt=Array.prototype,$t=Tt.map,Ct=Tt.slice,Nt={name:"implicit"};function Dt(){var t,e,n=function t(e){var n=xt(),a=[],r=Nt;function i(t){var i=t+"",c=n.get(i);if(!c){if(r!==Nt)return r;n.set(i,c=a.push(t))}return e[(c-1)%e.length]}return e=null==e?[]:Ct.call(e),i.domain=function(t){if(!arguments.length)return a.slice();a=[],n=xt();for(var e,r,c=-1,o=t.length;++c<o;)n.has(r=(e=t[c])+"")||n.set(r,a.push(e));return i},i.range=function(t){return arguments.length?(e=Ct.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return t().domain(a).range(e).unknown(r)},i}().unknown(void 0),a=n.domain,r=n.range,i=[0,1],c=!1,o=0,f=0,l=.5;function s(){var n=a().length,s=i[1]<i[0],u=i[s-0],d=i[1-s];t=(d-u)/Math.max(1,n-o+2*f),c&&(t=Math.floor(t)),u+=(d-u-t*(n-o))*l,e=t*(1-o),c&&(u=Math.round(u),e=Math.round(e));var h=dt(n).map(function(e){return u+t*e});return r(s?h.reverse():h)}return delete n.unknown,n.domain=function(t){return arguments.length?(a(t),s()):a()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],s()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],c=!0,s()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(c=!!t,s()):c},n.padding=function(t){return arguments.length?(o=f=Math.max(0,Math.min(1,t)),s()):o},n.paddingInner=function(t){return arguments.length?(o=Math.max(0,Math.min(1,t)),s()):o},n.paddingOuter=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),s()):f},n.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),s()):l},n.copy=function(){return Dt().domain(a()).range(i).round(c).paddingInner(o).paddingOuter(f).align(l)},s()}var Lt=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function Et(t,e){var n=Object.create(t.prototype);for(var a in e)n[a]=e[a];return n}function Ft(){}var Ut="\\s*([+-]?\\d+)\\s*",Pt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Yt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",qt=/^#([0-9a-f]{3})$/,Bt=/^#([0-9a-f]{6})$/,Vt=new RegExp("^rgb\\("+[Ut,Ut,Ut]+"\\)$"),Ot=new RegExp("^rgb\\("+[Yt,Yt,Yt]+"\\)$"),jt=new RegExp("^rgba\\("+[Ut,Ut,Ut,Pt]+"\\)$"),It=new RegExp("^rgba\\("+[Yt,Yt,Yt,Pt]+"\\)$"),zt=new RegExp("^hsl\\("+[Pt,Yt,Yt]+"\\)$"),Xt=new RegExp("^hsla\\("+[Pt,Yt,Yt,Pt]+"\\)$"),Ht={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Rt(t){var e;return t=(t+"").trim().toLowerCase(),(e=qt.exec(t))?new Jt((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=Bt.exec(t))?Gt(parseInt(e[1],16)):(e=Vt.exec(t))?new Jt(e[1],e[2],e[3],1):(e=Ot.exec(t))?new Jt(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=jt.exec(t))?Wt(e[1],e[2],e[3],e[4]):(e=It.exec(t))?Wt(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=zt.exec(t))?te(e[1],e[2]/100,e[3]/100,1):(e=Xt.exec(t))?te(e[1],e[2]/100,e[3]/100,e[4]):Ht.hasOwnProperty(t)?Gt(Ht[t]):"transparent"===t?new Jt(NaN,NaN,NaN,0):null}function Gt(t){return new Jt(t>>16&255,t>>8&255,255&t,1)}function Wt(t,e,n,a){return a<=0&&(t=e=n=NaN),new Jt(t,e,n,a)}function Zt(t){return t instanceof Ft||(t=Rt(t)),t?new Jt((t=t.rgb()).r,t.g,t.b,t.opacity):new Jt}function Qt(t,e,n,a){return 1===arguments.length?Zt(t):new Jt(t,e,n,null==a?1:a)}function Jt(t,e,n,a){this.r=+t,this.g=+e,this.b=+n,this.opacity=+a}function Kt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function te(t,e,n,a){return a<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new ee(t,e,n,a)}function ee(t,e,n,a){this.h=+t,this.s=+e,this.l=+n,this.opacity=+a}function ne(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Lt(Ft,Rt,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),Lt(Jt,Qt,Et(Ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Jt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Jt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Kt(this.r)+Kt(this.g)+Kt(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Lt(ee,function(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof ee)return new ee(t.h,t.s,t.l,t.opacity);if(t instanceof Ft||(t=Rt(t)),!t)return new ee;if(t instanceof ee)return t;var e=(t=t.rgb()).r/255,n=t.g/255,a=t.b/255,r=Math.min(e,n,a),i=Math.max(e,n,a),c=NaN,o=i-r,f=(i+r)/2;return o?(c=e===i?(n-a)/o+6*(n<a):n===i?(a-e)/o+2:(e-n)/o+4,o/=f<.5?i+r:2-i-r,c*=60):o=f>0&&f<1?0:c,new ee(c,o,f,t.opacity)}(t):new ee(t,e,n,null==a?1:a)},Et(Ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ee(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ee(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,a=n+(n<.5?n:1-n)*e,r=2*n-a;return new Jt(ne(t>=240?t-240:t+120,r,a),ne(t,r,a),ne(t<120?t+240:t-120,r,a),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var ae=Math.PI/180,re=180/Math.PI,ie=.96422,ce=1,oe=.82521,fe=4/29,le=6/29,se=3*le*le,ue=le*le*le;function de(t){if(t instanceof he)return new he(t.l,t.a,t.b,t.opacity);if(t instanceof ye){if(isNaN(t.h))return new he(t.l,0,0,t.opacity);var e=t.h*ae;return new he(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof Jt||(t=Zt(t));var n,a,r=me(t.r),i=me(t.g),c=me(t.b),o=be((.2225045*r+.7168786*i+.0606169*c)/ce);return r===i&&i===c?n=a=o:(n=be((.4360747*r+.3850649*i+.1430804*c)/ie),a=be((.0139322*r+.0971045*i+.7141733*c)/oe)),new he(116*o-16,500*(n-o),200*(o-a),t.opacity)}function he(t,e,n,a){this.l=+t,this.a=+e,this.b=+n,this.opacity=+a}function be(t){return t>ue?Math.pow(t,1/3):t/se+fe}function pe(t){return t>le?t*t*t:se*(t-fe)}function ge(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function me(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function ye(t,e,n,a){this.h=+t,this.c=+e,this.l=+n,this.opacity=+a}Lt(he,function(t,e,n,a){return 1===arguments.length?de(t):new he(t,e,n,null==a?1:a)},Et(Ft,{brighter:function(t){return new he(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new he(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Jt(ge(3.1338561*(e=ie*pe(e))-1.6168667*(t=ce*pe(t))-.4906146*(n=oe*pe(n))),ge(-.9787684*e+1.9161415*t+.033454*n),ge(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Lt(ye,function(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof ye)return new ye(t.h,t.c,t.l,t.opacity);if(t instanceof he||(t=de(t)),0===t.a&&0===t.b)return new ye(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*re;return new ye(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new ye(t,e,n,null==a?1:a)},Et(Ft,{brighter:function(t){return new ye(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new ye(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return de(this).rgb()}}));var ve=-.14861,we=1.78277,xe=-.29227,_e=-.90649,Se=1.97294,Me=Se*_e,Ae=Se*we,ke=we*xe-_e*ve;function Te(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof $e)return new $e(t.h,t.s,t.l,t.opacity);t instanceof Jt||(t=Zt(t));var e=t.r/255,n=t.g/255,a=t.b/255,r=(ke*a+Me*e-Ae*n)/(ke+Me-Ae),i=a-r,c=(Se*(n-r)-xe*i)/_e,o=Math.sqrt(c*c+i*i)/(Se*r*(1-r)),f=o?Math.atan2(c,i)*re-120:NaN;return new $e(f<0?f+360:f,o,r,t.opacity)}(t):new $e(t,e,n,null==a?1:a)}function $e(t,e,n,a){this.h=+t,this.s=+e,this.l=+n,this.opacity=+a}function Ce(t,e,n,a,r){var i=t*t,c=i*t;return((1-3*t+3*i-c)*e+(4-6*i+3*c)*n+(1+3*t+3*i-3*c)*a+c*r)/6}Lt($e,Te,Et(Ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new $e(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new $e(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*ae,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),a=Math.cos(t),r=Math.sin(t);return new Jt(255*(e+n*(ve*a+we*r)),255*(e+n*(xe*a+_e*r)),255*(e+n*(Se*a)),this.opacity)}}));var Ne=function(t){return function(){return t}};function De(t,e){return function(n){return t+n*e}}function Le(t){return 1==(t=+t)?Ee:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(a){return Math.pow(t+a*e,n)}}(e,n,t):Ne(isNaN(e)?n:e)}}function Ee(t,e){var n=e-t;return n?De(t,n):Ne(isNaN(t)?e:t)}var Fe=function t(e){var n=Le(e);function a(t,e){var a=n((t=Qt(t)).r,(e=Qt(e)).r),r=n(t.g,e.g),i=n(t.b,e.b),c=Ee(t.opacity,e.opacity);return function(e){return t.r=a(e),t.g=r(e),t.b=i(e),t.opacity=c(e),t+""}}return a.gamma=t,a}(1);function Ue(t){return function(e){var n,a,r=e.length,i=new Array(r),c=new Array(r),o=new Array(r);for(n=0;n<r;++n)a=Qt(e[n]),i[n]=a.r||0,c[n]=a.g||0,o[n]=a.b||0;return i=t(i),c=t(c),o=t(o),a.opacity=1,function(t){return a.r=i(t),a.g=c(t),a.b=o(t),a+""}}}var Pe=Ue(function(t){var e=t.length-1;return function(n){var a=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),r=t[a],i=t[a+1],c=a>0?t[a-1]:2*r-i,o=a<e-1?t[a+2]:2*i-r;return Ce((n-a/e)*e,c,r,i,o)}}),Ye=(Ue(function(t){var e=t.length;return function(n){var a=Math.floor(((n%=1)<0?++n:n)*e),r=t[(a+e-1)%e],i=t[a%e],c=t[(a+1)%e],o=t[(a+2)%e];return Ce((n-a/e)*e,r,i,c,o)}}),function(t,e){return e-=t=+t,function(n){return t+e*n}}),qe=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Be=new RegExp(qe.source,"g");var Ve,Oe,je,Ie,ze=function(t,e){var n,a,r,i=qe.lastIndex=Be.lastIndex=0,c=-1,o=[],f=[];for(t+="",e+="";(n=qe.exec(t))&&(a=Be.exec(e));)(r=a.index)>i&&(r=e.slice(i,r),o[c]?o[c]+=r:o[++c]=r),(n=n[0])===(a=a[0])?o[c]?o[c]+=a:o[++c]=a:(o[++c]=null,f.push({i:c,x:Ye(n,a)})),i=Be.lastIndex;return i<e.length&&(r=e.slice(i),o[c]?o[c]+=r:o[++c]=r),o.length<2?f[0]?function(t){return function(e){return t(e)+""}}(f[0].x):function(t){return function(){return t}}(e):(e=f.length,function(t){for(var n,a=0;a<e;++a)o[(n=f[a]).i]=n.x(t);return o.join("")})},Xe=function(t,e){var n,a=typeof e;return null==e||"boolean"===a?Ne(e):("number"===a?Ye:"string"===a?(n=Rt(e))?(e=n,Fe):ze:e instanceof Rt?Fe:e instanceof Date?function(t,e){var n=new Date;return e-=t=+t,function(a){return n.setTime(t+e*a),n}}:Array.isArray(e)?function(t,e){var n,a=e?e.length:0,r=t?Math.min(a,t.length):0,i=new Array(r),c=new Array(a);for(n=0;n<r;++n)i[n]=Xe(t[n],e[n]);for(;n<a;++n)c[n]=e[n];return function(t){for(n=0;n<r;++n)c[n]=i[n](t);return c}}:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?function(t,e){var n,a={},r={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?a[n]=Xe(t[n],e[n]):r[n]=e[n];return function(t){for(n in a)r[n]=a[n](t);return r}}:Ye)(t,e)},He=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},Re=180/Math.PI,Ge={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},We=function(t,e,n,a,r,i){var c,o,f;return(c=Math.sqrt(t*t+e*e))&&(t/=c,e/=c),(f=t*n+e*a)&&(n-=t*f,a-=e*f),(o=Math.sqrt(n*n+a*a))&&(n/=o,a/=o,f/=o),t*a<e*n&&(t=-t,e=-e,f=-f,c=-c),{translateX:r,translateY:i,rotate:Math.atan2(e,t)*Re,skewX:Math.atan(f)*Re,scaleX:c,scaleY:o}};function Ze(t,e,n,a){function r(t){return t.length?t.pop()+" ":""}return function(i,c){var o=[],f=[];return i=t(i),c=t(c),function(t,a,r,i,c,o){if(t!==r||a!==i){var f=c.push("translate(",null,e,null,n);o.push({i:f-4,x:Ye(t,r)},{i:f-2,x:Ye(a,i)})}else(r||i)&&c.push("translate("+r+e+i+n)}(i.translateX,i.translateY,c.translateX,c.translateY,o,f),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(r(n)+"rotate(",null,a)-2,x:Ye(t,e)})):e&&n.push(r(n)+"rotate("+e+a)}(i.rotate,c.rotate,o,f),function(t,e,n,i){t!==e?i.push({i:n.push(r(n)+"skewX(",null,a)-2,x:Ye(t,e)}):e&&n.push(r(n)+"skewX("+e+a)}(i.skewX,c.skewX,o,f),function(t,e,n,a,i,c){if(t!==n||e!==a){var o=i.push(r(i)+"scale(",null,",",null,")");c.push({i:o-4,x:Ye(t,n)},{i:o-2,x:Ye(e,a)})}else 1===n&&1===a||i.push(r(i)+"scale("+n+","+a+")")}(i.scaleX,i.scaleY,c.scaleX,c.scaleY,o,f),i=c=null,function(t){for(var e,n=-1,a=f.length;++n<a;)o[(e=f[n]).i]=e.x(t);return o.join("")}}}var Qe=Ze(function(t){return"none"===t?Ge:(Ve||(Ve=document.createElement("DIV"),Oe=document.documentElement,je=document.defaultView),Ve.style.transform=t,t=je.getComputedStyle(Oe.appendChild(Ve),null).getPropertyValue("transform"),Oe.removeChild(Ve),t=t.slice(7,-1).split(","),We(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Je=Ze(function(t){return null==t?Ge:(Ie||(Ie=document.createElementNS("http://www.w3.org/2000/svg","g")),Ie.setAttribute("transform",t),(t=Ie.transform.baseVal.consolidate())?(t=t.matrix,We(t.a,t.b,t.c,t.d,t.e,t.f)):Ge)},", ",")",")");function Ke(t){return function e(n){function a(e,a){var r=t((e=Te(e)).h,(a=Te(a)).h),i=Ee(e.s,a.s),c=Ee(e.l,a.l),o=Ee(e.opacity,a.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=c(Math.pow(t,n)),e.opacity=o(t),e+""}}return n=+n,a.gamma=e,a}(1)}Ke(function(t,e){var n=e-t;return n?De(t,n>180||n<-180?n-360*Math.round(n/360):n):Ne(isNaN(t)?e:t)});var tn=Ke(Ee),en=function(t){return function(){return t}},nn=function(t){return+t},an=[0,1];function rn(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:en(e)}function cn(t,e,n,a){var r=t[0],i=t[1],c=e[0],o=e[1];return i<r?(r=n(i,r),c=a(o,c)):(r=n(r,i),c=a(c,o)),function(t){return c(r(t))}}function on(t,e,n,a){var r=Math.min(t.length,e.length)-1,i=new Array(r),c=new Array(r),o=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++o<r;)i[o]=n(t[o],t[o+1]),c[o]=a(e[o],e[o+1]);return function(e){var n=ut(t,e,1,r)-1;return c[n](i[n](e))}}function fn(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function ln(t,e){var n,a,r,i=an,c=an,o=Xe,f=!1;function l(){return n=Math.min(i.length,c.length)>2?on:cn,a=r=null,s}function s(e){return(a||(a=n(i,c,f?function(t){return function(e,n){var a=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:a(t)}}}(t):t,o)))(+e)}return s.invert=function(t){return(r||(r=n(c,i,rn,f?function(t){return function(e,n){var a=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:a(t)}}}(e):e)))(+t)},s.domain=function(t){return arguments.length?(i=$t.call(t,nn),l()):i.slice()},s.range=function(t){return arguments.length?(c=Ct.call(t),l()):c.slice()},s.rangeRound=function(t){return c=Ct.call(t),o=He,l()},s.clamp=function(t){return arguments.length?(f=!!t,l()):f},s.interpolate=function(t){return arguments.length?(o=t,l()):o},l()}var sn=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,a=t.slice(0,n);return[a.length>1?a[0]+a.slice(2):a,+t.slice(n+1)]},un=function(t){return(t=sn(Math.abs(t)))?t[1]:NaN},dn=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function hn(t){return new bn(t)}function bn(t){if(!(e=dn.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}hn.prototype=bn.prototype,bn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var pn,gn,mn,yn,vn=function(t){t:for(var e,n=t.length,a=1,r=-1;a<n;++a)switch(t[a]){case".":r=e=a;break;case"0":0===r&&(r=a),e=a;break;default:if(r>0){if(!+t[a])break t;r=0}}return r>0?t.slice(0,r)+t.slice(e+1):t},wn=function(t,e){var n=sn(t,e);if(!n)return t+"";var a=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+a:a.length>r+1?a.slice(0,r+1)+"."+a.slice(r+1):a+new Array(r-a.length+2).join("0")},xn={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return wn(100*t,e)},r:wn,s:function(t,e){var n=sn(t,e);if(!n)return t+"";var a=n[0],r=n[1],i=r-(pn=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,c=a.length;return i===c?a:i>c?a+new Array(i-c+1).join("0"):i>0?a.slice(0,i)+"."+a.slice(i):"0."+new Array(1-i).join("0")+sn(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},_n=function(t){return t},Sn=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];gn=function(t){var e,n,a=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,a){for(var r=t.length,i=[],c=0,o=e[0],f=0;r>0&&o>0&&(f+o+1>a&&(o=Math.max(1,a-f)),i.push(t.substring(r-=o,r+o)),!((f+=o+1)>a));)o=e[c=(c+1)%e.length];return i.reverse().join(n)}):_n,r=t.currency,i=t.decimal,c=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):_n,o=t.percent||"%";function f(t){var e=(t=hn(t)).fill,n=t.align,f=t.sign,l=t.symbol,s=t.zero,u=t.width,d=t.comma,h=t.precision,b=t.trim,p=t.type;"n"===p?(d=!0,p="g"):xn[p]||(null==h&&(h=12),b=!0,p="g"),(s||"0"===e&&"="===n)&&(s=!0,e="0",n="=");var g="$"===l?r[0]:"#"===l&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",m="$"===l?r[1]:/[%p]/.test(p)?o:"",y=xn[p],v=/[defgprs%]/.test(p);function w(t){var r,o,l,w=g,x=m;if("c"===p)x=y(t)+x,t="";else{var _=(t=+t)<0;if(t=y(Math.abs(t),h),b&&(t=vn(t)),_&&0==+t&&(_=!1),w=(_?"("===f?f:"-":"-"===f||"("===f?"":f)+w,x=("s"===p?Sn[8+pn/3]:"")+x+(_&&"("===f?")":""),v)for(r=-1,o=t.length;++r<o;)if(48>(l=t.charCodeAt(r))||l>57){x=(46===l?i+t.slice(r+1):t.slice(r))+x,t=t.slice(0,r);break}}d&&!s&&(t=a(t,1/0));var S=w.length+t.length+x.length,M=S<u?new Array(u-S+1).join(e):"";switch(d&&s&&(t=a(M+t,M.length?u-x.length:1/0),M=""),n){case"<":t=w+t+x+M;break;case"=":t=w+M+t+x;break;case"^":t=M.slice(0,S=M.length>>1)+w+t+x+M.slice(S);break;default:t=M+w+t+x}return c(t)}return h=null==h?6:/[gprs]/.test(p)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),w.toString=function(){return t+""},w}return{format:f,formatPrefix:function(t,e){var n=f(((t=hn(t)).type="f",t)),a=3*Math.max(-8,Math.min(8,Math.floor(un(e)/3))),r=Math.pow(10,-a),i=Sn[8+a/3];return function(t){return n(r*t)+i}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),mn=gn.format,yn=gn.formatPrefix;var Mn=function(t,e,n){var a,r=t[0],i=t[t.length-1],c=function(t,e,n){var a=Math.abs(e-t)/Math.max(0,n),r=Math.pow(10,Math.floor(Math.log(a)/Math.LN10)),i=a/r;return i>=ht?r*=10:i>=bt?r*=5:i>=pt&&(r*=2),e<t?-r:r}(r,i,null==e?10:e);switch((n=hn(null==n?",f":n)).type){case"s":var o=Math.max(Math.abs(r),Math.abs(i));return null!=n.precision||isNaN(a=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(un(e)/3)))-un(Math.abs(t)))}(c,o))||(n.precision=a),yn(n,o);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(a=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,un(e)-un(t))+1}(c,Math.max(Math.abs(r),Math.abs(i))))||(n.precision=a-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(a=function(t){return Math.max(0,-un(Math.abs(t)))}(c))||(n.precision=a-2*("%"===n.type))}return mn(n)};function An(t){var e=t.domain;return t.ticks=function(t){var n=e();return gt(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return Mn(e(),t,n)},t.nice=function(n){null==n&&(n=10);var a,r=e(),i=0,c=r.length-1,o=r[i],f=r[c];return f<o&&(a=o,o=f,f=a,a=i,i=c,c=a),(a=mt(o,f,n))>0?a=mt(o=Math.floor(o/a)*a,f=Math.ceil(f/a)*a,n):a<0&&(a=mt(o=Math.ceil(o*a)/a,f=Math.floor(f*a)/a,n)),a>0?(r[i]=Math.floor(o/a)*a,r[c]=Math.ceil(f/a)*a,e(r)):a<0&&(r[i]=Math.ceil(o*a)/a,r[c]=Math.floor(f*a)/a,e(r)),t},t}function kn(t,e){return t<0?-Math.pow(-t,e):Math.pow(t,e)}function Tn(){return function t(){var e=1,n=ln(function(t,n){return(n=kn(n,e)-(t=kn(t,e)))?function(a){return(kn(a,e)-t)/n}:en(n)},function(t,n){return n=kn(n,e)-(t=kn(t,e)),function(a){return kn(t+n*a,1/e)}}),a=n.domain;return n.exponent=function(t){return arguments.length?(e=+t,a(a())):e},n.copy=function(){return fn(n,t().exponent(e))},An(n)}().exponent(.5)}var $n=new Date,Cn=new Date;function Nn(t,e,n,a){function r(e){return t(e=new Date(+e)),e}return r.floor=r,r.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},r.round=function(t){var e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},r.range=function(n,a,i){var c,o=[];if(n=r.ceil(n),i=null==i?1:Math.floor(i),!(n<a&&i>0))return o;do{o.push(c=new Date(+n)),e(n,i),t(n)}while(c<n&&n<a);return o},r.filter=function(n){return Nn(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,a){if(t>=t)if(a<0)for(;++a<=0;)for(;e(t,-1),!n(t););else for(;--a>=0;)for(;e(t,1),!n(t););})},n&&(r.count=function(e,a){return $n.setTime(+e),Cn.setTime(+a),t($n),t(Cn),Math.floor(n($n,Cn))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(a?function(e){return a(e)%t==0}:function(e){return r.count(0,e)%t==0}):r:null}),r}var Dn=Nn(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});Dn.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Nn(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):Dn:null};var Ln=6e4,En=6048e5,Fn=(Nn(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),Nn(function(t){t.setTime(Math.floor(t/Ln)*Ln)},function(t,e){t.setTime(+t+e*Ln)},function(t,e){return(e-t)/Ln},function(t){return t.getMinutes()}),Nn(function(t){var e=t.getTimezoneOffset()*Ln%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),Nn(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Ln)/864e5},function(t){return t.getDate()-1}));function Un(t){return Nn(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Ln)/En})}var Pn=Un(0),Yn=Un(1),qn=(Un(2),Un(3),Un(4)),Bn=(Un(5),Un(6),Nn(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Nn(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Bn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Nn(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};Nn(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*Ln)},function(t,e){return(e-t)/Ln},function(t){return t.getUTCMinutes()}),Nn(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()});var Vn=Nn(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1});function On(t){return Nn(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/En})}var jn=On(0),In=On(1),zn=(On(2),On(3),On(4)),Xn=(On(5),On(6),Nn(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Nn(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function Hn(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Rn(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Gn(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}Xn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Nn(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var Wn,Zn,Qn,Jn={"-":"",_:" ",0:"0"},Kn=/^\s*\d+/,ta=/^%/,ea=/[\\^$*+?|[\]().{}]/g;function na(t,e,n){var a=t<0?"-":"",r=(a?-t:t)+"",i=r.length;return a+(i<n?new Array(n-i+1).join(e)+r:r)}function aa(t){return t.replace(ea,"\\$&")}function ra(t){return new RegExp("^(?:"+t.map(aa).join("|")+")","i")}function ia(t){for(var e={},n=-1,a=t.length;++n<a;)e[t[n].toLowerCase()]=n;return e}function ca(t,e,n){var a=Kn.exec(e.slice(n,n+1));return a?(t.w=+a[0],n+a[0].length):-1}function oa(t,e,n){var a=Kn.exec(e.slice(n,n+1));return a?(t.u=+a[0],n+a[0].length):-1}function fa(t,e,n){var a=Kn.exec(e.slice(n,n+2));return a?(t.U=+a[0],n+a[0].length):-1}function la(t,e,n){var a=Kn.exec(e.slice(n,n+2));return a?(t.V=+a[0],n+a[0].length):-1}function sa(t,e,n){var a=Kn.exec(e.slice(n,n+2));return a?(t.W=+a[0],n+a[0].length):-1}function ua(t,e,n){var a=Kn.exec(e.slice(n,n+4));return a?(t.y=+a[0],n+a[0].length):-1}function da(t,e,n){var a=Kn.exec(e.slice(n,n+2));return a?(t.y=+a[0]+(+a[0]>68?1900:2e3),n+a[0].length):-1}function ha(t,e,n){var a=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return a?(t.Z=a[1]?0:-(a[2]+(a[3]||"00")),n+a[0].length):-1}function ba(t,e,n){var a=Kn.exec(e.slice(n,n+2));return a?(t.m=a[0]-1,n+a[0].length):-1}function pa(t,e,n){var a=Kn.exec(e.slice(n,n+2));return a?(t.d=+a[0],n+a[0].length):-1}function ga(t,e,n){var a=Kn.exec(e.slice(n,n+3));return a?(t.m=0,t.d=+a[0],n+a[0].length):-1}function ma(t,e,n){var a=Kn.exec(e.slice(n,n+2));return a?(t.H=+a[0],n+a[0].length):-1}function ya(t,e,n){var a=Kn.exec(e.slice(n,n+2));return a?(t.M=+a[0],n+a[0].length):-1}function va(t,e,n){var a=Kn.exec(e.slice(n,n+2));return a?(t.S=+a[0],n+a[0].length):-1}function wa(t,e,n){var a=Kn.exec(e.slice(n,n+3));return a?(t.L=+a[0],n+a[0].length):-1}function xa(t,e,n){var a=Kn.exec(e.slice(n,n+6));return a?(t.L=Math.floor(a[0]/1e3),n+a[0].length):-1}function _a(t,e,n){var a=ta.exec(e.slice(n,n+1));return a?n+a[0].length:-1}function Sa(t,e,n){var a=Kn.exec(e.slice(n));return a?(t.Q=+a[0],n+a[0].length):-1}function Ma(t,e,n){var a=Kn.exec(e.slice(n));return a?(t.Q=1e3*+a[0],n+a[0].length):-1}function Aa(t,e){return na(t.getDate(),e,2)}function ka(t,e){return na(t.getHours(),e,2)}function Ta(t,e){return na(t.getHours()%12||12,e,2)}function $a(t,e){return na(1+Fn.count(Bn(t),t),e,3)}function Ca(t,e){return na(t.getMilliseconds(),e,3)}function Na(t,e){return Ca(t,e)+"000"}function Da(t,e){return na(t.getMonth()+1,e,2)}function La(t,e){return na(t.getMinutes(),e,2)}function Ea(t,e){return na(t.getSeconds(),e,2)}function Fa(t){var e=t.getDay();return 0===e?7:e}function Ua(t,e){return na(Pn.count(Bn(t),t),e,2)}function Pa(t,e){var n=t.getDay();return t=n>=4||0===n?qn(t):qn.ceil(t),na(qn.count(Bn(t),t)+(4===Bn(t).getDay()),e,2)}function Ya(t){return t.getDay()}function qa(t,e){return na(Yn.count(Bn(t),t),e,2)}function Ba(t,e){return na(t.getFullYear()%100,e,2)}function Va(t,e){return na(t.getFullYear()%1e4,e,4)}function Oa(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+na(e/60|0,"0",2)+na(e%60,"0",2)}function ja(t,e){return na(t.getUTCDate(),e,2)}function Ia(t,e){return na(t.getUTCHours(),e,2)}function za(t,e){return na(t.getUTCHours()%12||12,e,2)}function Xa(t,e){return na(1+Vn.count(Xn(t),t),e,3)}function Ha(t,e){return na(t.getUTCMilliseconds(),e,3)}function Ra(t,e){return Ha(t,e)+"000"}function Ga(t,e){return na(t.getUTCMonth()+1,e,2)}function Wa(t,e){return na(t.getUTCMinutes(),e,2)}function Za(t,e){return na(t.getUTCSeconds(),e,2)}function Qa(t){var e=t.getUTCDay();return 0===e?7:e}function Ja(t,e){return na(jn.count(Xn(t),t),e,2)}function Ka(t,e){var n=t.getUTCDay();return t=n>=4||0===n?zn(t):zn.ceil(t),na(zn.count(Xn(t),t)+(4===Xn(t).getUTCDay()),e,2)}function tr(t){return t.getUTCDay()}function er(t,e){return na(In.count(Xn(t),t),e,2)}function nr(t,e){return na(t.getUTCFullYear()%100,e,2)}function ar(t,e){return na(t.getUTCFullYear()%1e4,e,4)}function rr(){return"+0000"}function ir(){return"%"}function cr(t){return+t}function or(t){return Math.floor(+t/1e3)}!function(t){Wn=function(t){var e=t.dateTime,n=t.date,a=t.time,r=t.periods,i=t.days,c=t.shortDays,o=t.months,f=t.shortMonths,l=ra(r),s=ia(r),u=ra(i),d=ia(i),h=ra(c),b=ia(c),p=ra(o),g=ia(o),m=ra(f),y=ia(f),v={a:function(t){return c[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return f[t.getMonth()]},B:function(t){return o[t.getMonth()]},c:null,d:Aa,e:Aa,f:Na,H:ka,I:Ta,j:$a,L:Ca,m:Da,M:La,p:function(t){return r[+(t.getHours()>=12)]},Q:cr,s:or,S:Ea,u:Fa,U:Ua,V:Pa,w:Ya,W:qa,x:null,X:null,y:Ba,Y:Va,Z:Oa,"%":ir},w={a:function(t){return c[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return f[t.getUTCMonth()]},B:function(t){return o[t.getUTCMonth()]},c:null,d:ja,e:ja,f:Ra,H:Ia,I:za,j:Xa,L:Ha,m:Ga,M:Wa,p:function(t){return r[+(t.getUTCHours()>=12)]},Q:cr,s:or,S:Za,u:Qa,U:Ja,V:Ka,w:tr,W:er,x:null,X:null,y:nr,Y:ar,Z:rr,"%":ir},x={a:function(t,e,n){var a=h.exec(e.slice(n));return a?(t.w=b[a[0].toLowerCase()],n+a[0].length):-1},A:function(t,e,n){var a=u.exec(e.slice(n));return a?(t.w=d[a[0].toLowerCase()],n+a[0].length):-1},b:function(t,e,n){var a=m.exec(e.slice(n));return a?(t.m=y[a[0].toLowerCase()],n+a[0].length):-1},B:function(t,e,n){var a=p.exec(e.slice(n));return a?(t.m=g[a[0].toLowerCase()],n+a[0].length):-1},c:function(t,n,a){return M(t,e,n,a)},d:pa,e:pa,f:xa,H:ma,I:ma,j:ga,L:wa,m:ba,M:ya,p:function(t,e,n){var a=l.exec(e.slice(n));return a?(t.p=s[a[0].toLowerCase()],n+a[0].length):-1},Q:Sa,s:Ma,S:va,u:oa,U:fa,V:la,w:ca,W:sa,x:function(t,e,a){return M(t,n,e,a)},X:function(t,e,n){return M(t,a,e,n)},y:da,Y:ua,Z:ha,"%":_a};function _(t,e){return function(n){var a,r,i,c=[],o=-1,f=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++o<l;)37===t.charCodeAt(o)&&(c.push(t.slice(f,o)),null!=(r=Jn[a=t.charAt(++o)])?a=t.charAt(++o):r="e"===a?" ":"0",(i=e[a])&&(a=i(n,r)),c.push(a),f=o+1);return c.push(t.slice(f,o)),c.join("")}}function S(t,e){return function(n){var a,r,i=Gn(1900);if(M(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=(a=Rn(Gn(i.y))).getUTCDay())>4||0===r?In.ceil(a):In(a),a=Vn.offset(a,7*(i.V-1)),i.y=a.getUTCFullYear(),i.m=a.getUTCMonth(),i.d=a.getUTCDate()+(i.w+6)%7):(a=(r=(a=e(Gn(i.y))).getDay())>4||0===r?Yn.ceil(a):Yn(a),a=Fn.offset(a,7*(i.V-1)),i.y=a.getFullYear(),i.m=a.getMonth(),i.d=a.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),r="Z"in i?Rn(Gn(i.y)).getUTCDay():e(Gn(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(r+5)%7:i.w+7*i.U-(r+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Rn(i)):e(i)}}function M(t,e,n,a){for(var r,i,c=0,o=e.length,f=n.length;c<o;){if(a>=f)return-1;if(37===(r=e.charCodeAt(c++))){if(r=e.charAt(c++),!(i=x[r in Jn?e.charAt(c++):r])||(a=i(t,n,a))<0)return-1}else if(r!=n.charCodeAt(a++))return-1}return a}return v.x=_(n,v),v.X=_(a,v),v.c=_(e,v),w.x=_(n,w),w.X=_(a,w),w.c=_(e,w),{format:function(t){var e=_(t+="",v);return e.toString=function(){return t},e},parse:function(t){var e=S(t+="",Hn);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",w);return e.toString=function(){return t},e},utcParse:function(t){var e=S(t,Rn);return e.toString=function(){return t},e}}}(t),Zn=Wn.utcFormat,Qn=Wn.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Zn("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Qn("%Y-%m-%dT%H:%M:%S.%LZ");var fr=Array.prototype.slice,lr=function(t){return t},sr=1,ur=2,dr=3,hr=4,br=1e-6;function pr(t){return"translate("+(t+.5)+",0)"}function gr(t){return"translate(0,"+(t+.5)+")"}function mr(){return!this.__axis}function yr(t,e){var n=[],a=null,r=null,i=6,c=6,o=3,f=t===sr||t===hr?-1:1,l=t===hr||t===ur?"x":"y",s=t===sr||t===dr?pr:gr;function u(u){var d=null==a?e.ticks?e.ticks.apply(e,n):e.domain():a,h=null==r?e.tickFormat?e.tickFormat.apply(e,n):lr:r,b=Math.max(i,0)+o,p=e.range(),g=+p[0]+.5,m=+p[p.length-1]+.5,y=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),v=u.selection?u.selection():u,w=v.selectAll(".domain").data([null]),x=v.selectAll(".tick").data(d,e).order(),_=x.exit(),S=x.enter().append("g").attr("class","tick"),M=x.select("line"),A=x.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(S),M=M.merge(S.append("line").attr("stroke","currentColor").attr(l+"2",f*i)),A=A.merge(S.append("text").attr("fill","currentColor").attr(l,f*b).attr("dy",t===sr?"0em":t===dr?"0.71em":"0.32em")),u!==v&&(w=w.transition(u),x=x.transition(u),M=M.transition(u),A=A.transition(u),_=_.transition(u).attr("opacity",br).attr("transform",function(t){return isFinite(t=y(t))?s(t):this.getAttribute("transform")}),S.attr("opacity",br).attr("transform",function(t){var e=this.parentNode.__axis;return s(e&&isFinite(e=e(t))?e:y(t))})),_.remove(),w.attr("d",t===hr||t==ur?c?"M"+f*c+","+g+"H0.5V"+m+"H"+f*c:"M0.5,"+g+"V"+m:c?"M"+g+","+f*c+"V0.5H"+m+"V"+f*c:"M"+g+",0.5H"+m),x.attr("opacity",1).attr("transform",function(t){return s(y(t))}),M.attr(l+"2",f*i),A.attr(l,f*b).text(h),v.filter(mr).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===ur?"start":t===hr?"end":"middle"),v.each(function(){this.__axis=y})}return u.scale=function(t){return arguments.length?(e=t,u):e},u.ticks=function(){return n=fr.call(arguments),u},u.tickArguments=function(t){return arguments.length?(n=null==t?[]:fr.call(t),u):n.slice()},u.tickValues=function(t){return arguments.length?(a=null==t?null:fr.call(t),u):a&&a.slice()},u.tickFormat=function(t){return arguments.length?(r=t,u):r},u.tickSize=function(t){return arguments.length?(i=c=+t,u):i},u.tickSizeInner=function(t){return arguments.length?(i=+t,u):i},u.tickSizeOuter=function(t){return arguments.length?(c=+t,u):c},u.tickPadding=function(t){return arguments.length?(o=+t,u):o},u}var vr={value:function(){}};function wr(){for(var t,e=0,n=arguments.length,a={};e<n;++e){if(!(t=arguments[e]+"")||t in a)throw new Error("illegal type: "+t);a[t]=[]}return new xr(a)}function xr(t){this._=t}function _r(t,e){for(var n,a=0,r=t.length;a<r;++a)if((n=t[a]).name===e)return n.value}function Sr(t,e,n){for(var a=0,r=t.length;a<r;++a)if(t[a].name===e){t[a]=vr,t=t.slice(0,a).concat(t.slice(a+1));break}return null!=n&&t.push({name:e,value:n}),t}xr.prototype=wr.prototype={constructor:xr,on:function(t,e){var n,a,r=this._,i=(a=r,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!a.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),c=-1,o=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++c<o;)if(n=(t=i[c]).type)r[n]=Sr(r[n],t.name,e);else if(null==e)for(n in r)r[n]=Sr(r[n],t.name,null);return this}for(;++c<o;)if((n=(t=i[c]).type)&&(n=_r(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new xr(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,a,r=new Array(n),i=0;i<n;++i)r[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(a=this._[t]).length;i<n;++i)a[i].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var a=this._[t],r=0,i=a.length;r<i;++r)a[r].value.apply(e,n)}};var Mr=function(){W.preventDefault(),W.stopImmediatePropagation()},Ar=function(t){var e=t.document.documentElement,n=rt(t).on("dragstart.drag",Mr,!0);"onselectstart"in e?n.on("selectstart.drag",Mr,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")};var kr,Tr,$r=0,Cr=0,Nr=0,Dr=1e3,Lr=0,Er=0,Fr=0,Ur="object"==typeof performance&&performance.now?performance:Date,Pr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Yr(){return Er||(Pr(qr),Er=Ur.now()+Fr)}function qr(){Er=0}function Br(){this._call=this._time=this._next=null}function Vr(t,e,n){var a=new Br;return a.restart(t,e,n),a}function Or(){Er=(Lr=Ur.now())+Fr,$r=Cr=0;try{!function(){Yr(),++$r;for(var t,e=kr;e;)(t=Er-e._time)>=0&&e._call.call(null,t),e=e._next;--$r}()}finally{$r=0,function(){var t,e,n=kr,a=1/0;for(;n;)n._call?(a>n._time&&(a=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:kr=e);Tr=t,Ir(a)}(),Er=0}}function jr(){var t=Ur.now(),e=t-Lr;e>Dr&&(Fr-=e,Lr=t)}function Ir(t){$r||(Cr&&(Cr=clearTimeout(Cr)),t-Er>24?(t<1/0&&(Cr=setTimeout(Or,t-Ur.now()-Fr)),Nr&&(Nr=clearInterval(Nr))):(Nr||(Lr=Ur.now(),Nr=setInterval(jr,Dr)),$r=1,Pr(Or)))}Br.prototype=Vr.prototype={constructor:Br,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Yr():+n)+(null==e?0:+e),this._next||Tr===this||(Tr?Tr._next=this:kr=this,Tr=this),this._call=t,this._time=n,Ir()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ir())}};var zr=function(t,e,n){var a=new Br;return e=null==e?0:+e,a.restart(function(n){a.stop(),t(n+e)},e,n),a},Xr=wr("start","end","interrupt"),Hr=[],Rr=0,Gr=1,Wr=2,Zr=3,Qr=4,Jr=5,Kr=6,ti=function(t,e,n,a,r,i){var c=t.__transition;if(c){if(n in c)return}else t.__transition={};!function(t,e,n){var a,r=t.__transition;function i(f){var l,s,u,d;if(n.state!==Gr)return o();for(l in r)if((d=r[l]).name===n.name){if(d.state===Zr)return zr(i);d.state===Qr?(d.state=Kr,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete r[l]):+l<e&&(d.state=Kr,d.timer.stop(),delete r[l])}if(zr(function(){n.state===Zr&&(n.state=Qr,n.timer.restart(c,n.delay,n.time),c(f))}),n.state=Wr,n.on.call("start",t,t.__data__,n.index,n.group),n.state===Wr){for(n.state=Zr,a=new Array(u=n.tween.length),l=0,s=-1;l<u;++l)(d=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(a[++s]=d);a.length=s+1}}function c(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(o),n.state=Jr,1),i=-1,c=a.length;++i<c;)a[i].call(null,r);n.state===Jr&&(n.on.call("end",t,t.__data__,n.index,n.group),o())}function o(){for(var a in n.state=Kr,n.timer.stop(),delete r[e],r)return;delete t.__transition}r[e]=n,n.timer=Vr(function(t){n.state=Gr,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)},0,n.time)}(t,n,{name:e,index:a,group:r,on:Xr,tween:Hr,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:Rr})};function ei(t,e){var n=ai(t,e);if(n.state>Rr)throw new Error("too late; already scheduled");return n}function ni(t,e){var n=ai(t,e);if(n.state>Wr)throw new Error("too late; already started");return n}function ai(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var ri=function(t,e){var n,a,r,i=t.__transition,c=!0;if(i){for(r in e=null==e?null:e+"",i)(n=i[r]).name===e?(a=n.state>Wr&&n.state<Jr,n.state=Kr,n.timer.stop(),a&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete i[r]):c=!1;c&&delete t.__transition}};function ii(t,e,n){var a=t._id;return t.each(function(){var t=ni(this,a);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return ai(t,a).value[e]}}var ci=function(t,e){var n;return("number"==typeof e?Ye:e instanceof Rt?Fe:(n=Rt(e))?(e=n,Fe):ze)(t,e)};var oi=at.prototype.constructor;var fi=0;function li(t,e,n,a){this._groups=t,this._parents=e,this._name=n,this._id=a}function si(){return++fi}var ui=at.prototype;li.prototype=function(t){return at().transition(t)}.prototype={constructor:li,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=v(t));for(var a=this._groups,r=a.length,i=new Array(r),c=0;c<r;++c)for(var o,f,l=a[c],s=l.length,u=i[c]=new Array(s),d=0;d<s;++d)(o=l[d])&&(f=t.call(o,o.__data__,d,l))&&("__data__"in o&&(f.__data__=o.__data__),u[d]=f,ti(u[d],e,n,d,u,ai(o,n)));return new li(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=x(t));for(var a=this._groups,r=a.length,i=[],c=[],o=0;o<r;++o)for(var f,l=a[o],s=l.length,u=0;u<s;++u)if(f=l[u]){for(var d,h=t.call(f,f.__data__,u,l),b=ai(f,n),p=0,g=h.length;p<g;++p)(d=h[p])&&ti(d,e,n,p,h,b);i.push(h),c.push(f)}return new li(i,c,e,n)},filter:function(t){"function"!=typeof t&&(t=A(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,c=e[r],o=c.length,f=a[r]=[],l=0;l<o;++l)(i=c[l])&&t.call(i,i.__data__,l,c)&&f.push(i);return new li(a,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,a=e.length,r=n.length,i=Math.min(a,r),c=new Array(a),o=0;o<i;++o)for(var f,l=e[o],s=n[o],u=l.length,d=c[o]=new Array(u),h=0;h<u;++h)(f=l[h]||s[h])&&(d[h]=f);for(;o<a;++o)c[o]=e[o];return new li(c,this._parents,this._name,this._id)},selection:function(){return new oi(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=si(),a=this._groups,r=a.length,i=0;i<r;++i)for(var c,o=a[i],f=o.length,l=0;l<f;++l)if(c=o[l]){var s=ai(c,e);ti(c,t,n,l,o,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new li(a,this._parents,t,n)},call:ui.call,nodes:ui.nodes,node:ui.node,size:ui.size,empty:ui.empty,each:ui.each,on:function(t,e){var n=this._id;return arguments.length<2?ai(this.node(),n).on.on(t):this.each(function(t,e,n){var a,r,i=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?ei:ni;return function(){var c=i(this,t),o=c.on;o!==a&&(r=(a=o).copy()).on(e,n),c.on=r}}(n,t,e))},attr:function(t,e){var n=g(t),a="transform"===n?Je:ci;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var a,r,i;return function(){var c,o=n(this);if(null!=o)return(c=this.getAttributeNS(t.space,t.local))===o?null:c===a&&o===r?i:i=e(a=c,r=o);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var a,r,i;return function(){var c,o=n(this);if(null!=o)return(c=this.getAttribute(t))===o?null:c===a&&o===r?i:i=e(a=c,r=o);this.removeAttribute(t)}})(n,a,ii(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var a,r;return function(){var i=this.getAttributeNS(t.space,t.local);return i===n?null:i===a?r:r=e(a=i,n)}}:function(t,e,n){var a,r;return function(){var i=this.getAttribute(t);return i===n?null:i===a?r:r=e(a=i,n)}})(n,a,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var a=g(t);return this.tween(n,(a.local?function(t,e){function n(){var n=this,a=e.apply(n,arguments);return a&&function(e){n.setAttributeNS(t.space,t.local,a(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,a=e.apply(n,arguments);return a&&function(e){n.setAttribute(t,a(e))}}return n._value=e,n})(a,e))},style:function(t,e,n){var a="transform"==(t+="")?Qe:ci;return null==e?this.styleTween(t,function(t,e){var n,a,r;return function(){var i=F(this,t),c=(this.style.removeProperty(t),F(this,t));return i===c?null:i===n&&c===a?r:r=e(n=i,a=c)}}(t,a)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var a,r,i;return function(){var c=F(this,t),o=n(this);return null==o&&(this.style.removeProperty(t),o=F(this,t)),c===o?null:c===a&&o===r?i:i=e(a=c,r=o)}}(t,a,ii(this,"style."+t,e)):function(t,e,n){var a,r;return function(){var i=F(this,t);return i===n?null:i===a?r:r=e(a=i,n)}}(t,a,e+""),n)},styleTween:function(t,e,n){var a="style."+(t+="");if(arguments.length<2)return(a=this.tween(a))&&a._value;if(null==e)return this.tween(a,null);if("function"!=typeof e)throw new Error;return this.tween(a,function(t,e,n){function a(){var a=this,r=e.apply(a,arguments);return r&&function(e){a.style.setProperty(t,r(e),n)}}return a._value=e,a}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(ii(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var a,r=ai(this.node(),n).tween,i=0,c=r.length;i<c;++i)if((a=r[i]).name===t)return a.value;return null}return this.each((null==e?function(t,e){var n,a;return function(){var r=ni(this,t),i=r.tween;if(i!==n)for(var c=0,o=(a=n=i).length;c<o;++c)if(a[c].name===e){(a=a.slice()).splice(c,1);break}r.tween=a}}:function(t,e,n){var a,r;if("function"!=typeof n)throw new Error;return function(){var i=ni(this,t),c=i.tween;if(c!==a){r=(a=c).slice();for(var o={name:e,value:n},f=0,l=r.length;f<l;++f)if(r[f].name===e){r[f]=o;break}f===l&&r.push(o)}i.tween=r}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){ei(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){ei(this,t).delay=e}})(e,t)):ai(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){ni(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){ni(this,t).duration=e}})(e,t)):ai(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){ni(this,t).ease=e}}(e,t)):ai(this.node(),e).ease}};var di={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function hi(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return di.time=Yr(),di;return n}at.prototype.interrupt=function(t){return this.each(function(){ri(this,t)})},at.prototype.transition=function(t){var e,n;t instanceof li?(e=t._id,t=t._name):(e=si(),(n=di).time=Yr(),t=null==t?null:t+"");for(var a=this._groups,r=a.length,i=0;i<r;++i)for(var c,o=a[i],f=o.length,l=0;l<f;++l)(c=o[l])&&ti(c,t,e,l,o,n||hi(c,e));return new li(a,this._parents,t,e)};var bi=function(t){return function(){return t}},pi=function(t,e,n){this.target=t,this.type=e,this.selection=n};function gi(){W.stopImmediatePropagation()}var mi=function(){W.preventDefault(),W.stopImmediatePropagation()},yi={name:"drag"},vi={name:"space"},wi={name:"handle"},xi={name:"center"},_i={name:"x",handles:["e","w"].map(Ci),input:function(t,e){return t&&[[t[0],e[0][1]],[t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Si={name:"y",handles:["n","s"].map(Ci),input:function(t,e){return t&&[[e[0][0],t[0]],[e[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Mi=(["n","e","s","w","nw","ne","se","sw"].map(Ci),{overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"}),Ai={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},ki={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Ti={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},$i={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Ci(t){return{type:t}}function Ni(){return!W.button}function Di(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Li(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Ei(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Fi(){return function(t){var e,n=Di,a=Ni,r=wr(c,"start","brush","end"),i=6;function c(e){var n=e.property("__brush",u).selectAll(".overlay").data([Ci("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Mi.overlay).merge(n).each(function(){var t=Li(this).extent;rt(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),e.selectAll(".selection").data([Ci("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Mi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var a=e.selectAll(".handle").data(t.handles,function(t){return t.type});a.exit().remove(),a.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Mi[t.type]}),e.each(o).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",s)}function o(){var t=rt(this),e=Li(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?e[1][0]-i/2:e[0][0]-i/2}).attr("y",function(t){return"s"===t.type[0]?e[1][1]-i/2:e[0][1]-i/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+i:i}).attr("height",function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+i:i})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function f(t,e){return t.__brush.emitter||new l(t,e)}function l(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function s(){if(W.touches){if(W.changedTouches.length<W.touches.length)return mi()}else if(e)return;if(a.apply(this,arguments)){var n,r,i,c,l,s,u,d,h,b,p,g,m,y=this,v=W.target.__data__.type,w="selection"===(W.metaKey?v="overlay":v)?yi:W.altKey?xi:wi,x=t===Si?null:Ti[v],_=t===_i?null:$i[v],S=Li(y),M=S.extent,A=S.selection,k=M[0][0],T=M[0][1],$=M[1][0],C=M[1][1],N=x&&_&&W.shiftKey,D=ct(y),L=D,E=f(y,arguments).beforestart();"overlay"===v?S.selection=A=[[n=t===Si?k:D[0],i=t===_i?T:D[1]],[l=t===Si?$:n,u=t===_i?C:i]]:(n=A[0][0],i=A[0][1],l=A[1][0],u=A[1][1]),r=n,c=i,s=l,d=u;var F=rt(y).attr("pointer-events","none"),U=F.selectAll(".overlay").attr("cursor",Mi[v]);if(W.touches)F.on("touchmove.brush",Y,!0).on("touchend.brush touchcancel.brush",B,!0);else{var P=rt(W.view).on("keydown.brush",function(){switch(W.keyCode){case 16:N=x&&_;break;case 18:w===wi&&(x&&(l=s-h*x,n=r+h*x),_&&(u=d-b*_,i=c+b*_),w=xi,q());break;case 32:w!==wi&&w!==xi||(x<0?l=s-h:x>0&&(n=r-h),_<0?u=d-b:_>0&&(i=c-b),w=vi,U.attr("cursor",Mi.selection),q());break;default:return}mi()},!0).on("keyup.brush",function(){switch(W.keyCode){case 16:N&&(g=m=N=!1,q());break;case 18:w===xi&&(x<0?l=s:x>0&&(n=r),_<0?u=d:_>0&&(i=c),w=wi,q());break;case 32:w===vi&&(W.altKey?(x&&(l=s-h*x,n=r+h*x),_&&(u=d-b*_,i=c+b*_),w=xi):(x<0?l=s:x>0&&(n=r),_<0?u=d:_>0&&(i=c),w=wi),U.attr("cursor",Mi[v]),q());break;default:return}mi()},!0).on("mousemove.brush",Y,!0).on("mouseup.brush",B,!0);Ar(W.view)}gi(),ri(y),o.call(y),E.start()}function Y(){var t=ct(y);!N||g||m||(Math.abs(t[0]-L[0])>Math.abs(t[1]-L[1])?m=!0:g=!0),L=t,p=!0,mi(),q()}function q(){var t;switch(h=L[0]-D[0],b=L[1]-D[1],w){case vi:case yi:x&&(h=Math.max(k-n,Math.min($-l,h)),r=n+h,s=l+h),_&&(b=Math.max(T-i,Math.min(C-u,b)),c=i+b,d=u+b);break;case wi:x<0?(h=Math.max(k-n,Math.min($-n,h)),r=n+h,s=l):x>0&&(h=Math.max(k-l,Math.min($-l,h)),r=n,s=l+h),_<0?(b=Math.max(T-i,Math.min(C-i,b)),c=i+b,d=u):_>0&&(b=Math.max(T-u,Math.min(C-u,b)),c=i,d=u+b);break;case xi:x&&(r=Math.max(k,Math.min($,n-h*x)),s=Math.max(k,Math.min($,l+h*x))),_&&(c=Math.max(T,Math.min(C,i-b*_)),d=Math.max(T,Math.min(C,u+b*_)))}s<r&&(x*=-1,t=n,n=l,l=t,t=r,r=s,s=t,v in Ai&&U.attr("cursor",Mi[v=Ai[v]])),d<c&&(_*=-1,t=i,i=u,u=t,t=c,c=d,d=t,v in ki&&U.attr("cursor",Mi[v=ki[v]])),S.selection&&(A=S.selection),g&&(r=A[0][0],s=A[1][0]),m&&(c=A[0][1],d=A[1][1]),A[0][0]===r&&A[0][1]===c&&A[1][0]===s&&A[1][1]===d||(S.selection=[[r,c],[s,d]],o.call(y),E.brush())}function B(){if(gi(),W.touches){if(W.touches.length)return;e&&clearTimeout(e),e=setTimeout(function(){e=null},500),F.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(t,e){var n=t.document.documentElement,a=rt(t).on("dragstart.drag",null);e&&(a.on("click.drag",Mr,!0),setTimeout(function(){a.on("click.drag",null)},0)),"onselectstart"in n?a.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(W.view,p),P.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);F.attr("pointer-events","all"),U.attr("cursor",Mi.overlay),S.selection&&(A=S.selection),Ei(A)&&(S.selection=null,o.call(y)),E.end()}}function u(){var e=this.__brush||{selection:null};return e.extent=n.apply(this,arguments),e.dim=t,e}return c.move=function(e,n){e.selection?e.on("start.brush",function(){f(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){f(this,arguments).end()}).tween("brush",function(){var e=this,a=e.__brush,r=f(e,arguments),i=a.selection,c=t.input("function"==typeof n?n.apply(this,arguments):n,a.extent),l=Xe(i,c);function s(t){a.selection=1===t&&Ei(c)?null:l(t),o.call(e),r.brush()}return i&&c?s:s(1)}):e.each(function(){var e=arguments,a=this.__brush,r=t.input("function"==typeof n?n.apply(this,e):n,a.extent),i=f(this,e).beforestart();ri(this),a.selection=null==r||Ei(r)?null:r,o.call(this),i.start().brush().end()})},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){!function(t,e,n,a){var r=W;t.sourceEvent=W,W=t;try{e.apply(n,a)}finally{W=r}}(new pi(c,e,t.output(this.state.selection)),r.apply,r,[e,this.that,this.args])}},c.extent=function(t){return arguments.length?(n="function"==typeof t?t:bi([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),c):n},c.filter=function(t){return arguments.length?(a="function"==typeof t?t:bi(!!t),c):a},c.handleSize=function(t){return arguments.length?(i=+t,c):i},c.on=function(){var t=r.on.apply(r,arguments);return t===r?c:t},c}(_i)}var Ui=function(t){for(var e=t.length/6|0,n=new Array(e),a=0;a<e;)n[a]="#"+t.slice(6*a,6*++a);return n};Ui("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Ui("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Ui("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Ui("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Ui("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Ui("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Ui("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Ui("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Ui("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");var Pi=function(t){return Pe(t[t.length-1])};Pi(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Ui)),Pi(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Ui));var Yi=Pi(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Ui)),qi=Pi(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Ui)),Bi=Pi(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Ui)),Vi=Pi(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Ui)),Oi=Pi(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Ui));Pi(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Ui)),Pi(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Ui));var ji=Pi(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Ui));Pi(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Ui)),Pi(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Ui));var Ii=Pi(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Ui));Pi(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Ui));var zi=Pi(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Ui));Pi(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Ui)),Pi(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Ui));var Xi=Pi(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Ui));Pi(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Ui)),Pi(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Ui)),Pi(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Ui));var Hi=Pi(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Ui)),Ri=Pi(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Ui)),Gi=Pi(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Ui)),Wi=Pi(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Ui)),Zi=Pi(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Ui)),Qi=Pi(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Ui));tn(Te(300,.5,0),Te(-240,.5,1));tn(Te(-100,.75,.35),Te(80,1.5,.8)),tn(Te(260,.75,.35),Te(80,1.5,.8)),Te(),Qt();function Ji(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}Ji(Ui("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));Ji(Ui("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Ji(Ui("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Ji(Ui("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function Ki(t,e="YlGnBu",n,a,r=!1){t=t.filter(t=>isFinite(t)),a=void 0===a?yt(t):a,n=void 0===n?vt(t):n;const i=function t(e){var n=0,a=1,r=1,i=!1;function c(t){var a=(t-n)*r;return e(i?Math.max(0,Math.min(1,a)):a)}return c.domain=function(t){return arguments.length?(n=+t[0],a=+t[1],r=n===a?0:1/(a-n),c):[n,a]},c.clamp=function(t){return arguments.length?(i=!!t,c):i},c.interpolator=function(t){return arguments.length?(e=t,c):e},c.copy=function(){return t(e).domain([n,a]).clamp(i)},An(c)}(function(t){const e={BuGn:ji,OrRd:Ii,PuBu:zi,YlGnBu:Xi,Blues:Hi,Oranges:Qi,Greens:Ri,Purples:Wi,Reds:Zi,Greys:Gi,Grays:Gi,RdBu:Bi,RdGy:Vi,PiYG:Yi,PuOr:qi,RdYlBu:Oi};if(!e.hasOwnProperty(t)){const e="Unrecognized color: "+t;throw alert(e),e}return e[t]}(e));return r?i.domain([a,n]):i.domain([n,a]),i}function tc(t,e,n,a,r,i=10,c=10,o={h:10,w:40},f="h",l=!1){let s=[];if(l){let t=[...Array(i+1).keys()],e=n.domain()[1]/i;s=(s=t.map(t=>t*e)).concat(t.filter(t=>0!=t).map(t=>0-t*e)).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}else{let t=[...Array(i+1).keys()],e=n.domain()[1]/i;s=t.map(t=>t*e)}const u=e.append("g").attr("transform",`translate(${a.x}, ${a.y})`).selectAll(".legend").data(s).enter().append("g").classed("legend",!0);"h"==f?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",o.h).attr("transform",`translate(${a.x}, ${a.y})`),u.append("rect").attr("x",(t,e)=>o.w*e).attr("y",5).attr("width",o.w).attr("height",o.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>r?Math.pow(c,t).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>o.w*e).attr("y",0)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${a.x}, ${a.y+o.h*s.length})rotate(90)`),u.append("rect").attr("x",0).attr("y",(t,e)=>o.h*e).attr("width",o.w).attr("height",o.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>r?(Math.pow(c,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",15).attr("y",(t,e)=>o.h*e+o.h/2))}class ec{constructor(t,e,n=1e6){this.data=t,this.center=e,this.window=n,this.scale=void 0,this.tooltip=void 0}render(t,e=1500,n=200,a=!1,r=!0,i="Track",c="#ffffff",o="#ababab",f=!1,l){this.dom=t;let s=[0,e],u=[this.center-this.window,this.center+this.window];if(this.scale=function t(){var e=ln(rn,Ye);return e.copy=function(){return fn(e,t())},An(e)}().rangeRound(s).domain(u),f){this.colorScale=Ki(this.data.map(t=>t.colorValue),"Greys",0);const t=void 0===l?this.data.map(t=>t.colorValue):l;this.maxColor=this.colorScale(t)}let d=this.dom.append("g");d.append("rect").attr("x",0).attr("y",n/2).attr("width",e).attr("height",10).style("fill",c).style("stroke","#ababab").style("stroke-width",1);const h=(t,e)=>{if(0==r)return 0;let n=5;if(e>0){let a=this.data[e-1];if(a.strand!=t.strand)return n;this.scale(t.pos-a.pos)+1<=10&&(n=e%2?n+60:n+30)}return n};d.selectAll(".minibrowser-feature").data(this.data).enter().append("rect").attr("class","minibrowser-feature").attr("x",t=>this.scale(t.pos)).attr("y",(t,e)=>{let r=n/2,i=a?Math.abs(this.scale(t.pos)-this.scale(t.end)+1):0;return"+"==t.strand?r-i-h(t,e):r}).attr("width",1).attr("height",(t,e)=>{return 10+h(t,e)+(a?Math.abs(this.scale(t.pos)-this.scale(t.end)+1):0)}).style("fill",t=>t.pos==this.center?"red":f?isFinite(t.colorValue)?this.colorScale(t.colorValue):this.maxColor:o);if(d.append("text").attr("x",-10).attr("y",n/2+5).style("font-size","9px").style("text-anchor","end").text(i),0==r)return;d.selectAll(".minibrowser-feature-label").data(this.data).enter().append("text").attr("class",(t,e)=>".minibrowser-feature-label").attr("x",0).attr("y",0).style("font-size",t=>t.pos==this.center?"12px":"9px").style("fill",t=>t.pos==this.center?"red":"black").attr("transform",(t,e)=>{let r="+"==t.strad?this.scale(t.pos):this.scale(t.pos)-5,i=n/2,c="+"==t.strand?h(t,e):h(t,e)+5,o=a?Math.abs(this.scale(t.pos)-this.scale(t.end)+1):0;return`translate(${r}, ${i="+"==t.strand?i-o-c:i+10+o+c}) rotate(${"+"==t.strand?-45:45})`}).text(t=>t.featureLabel)}renderAxis(t,e=!0,n=null,a={w:50,h:20}){var r;this.axis=(r=this.scale,yr(sr,r)).tickValues(this.scale.ticks(7));const i=this.dom.append("g");if(i.attr("transform",`translate(0,${t})`).call(this.axis).selectAll("text"),e){const t=()=>{let t=W.selection,e=Math.round(this.scale.invert(t[0])),a=Math.round(this.scale.invert(t[1]));n(e,a)},e=Fi().extent([[0,-a.h],[this.scale.range()[1],20]]).on("brush",t);return i.append("g").attr("class","brush").call(e).call(e.move,[this.scale(this.center)-a.w,this.scale(this.center)+a.h]),e}return null}}class nc{constructor(t,e=!1,n=30,a=-40,r=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=a,this.duration=r}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),rt("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){rt("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=W.pageX,e=W.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;rt("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){rt("#"+this.id).html(t)}}class ac{constructor(t,e=!0,n=10,a="Reds"){this.data=t,this.useLog=e,this.logBase=n,this.colorScheme=a,this.xScale=void 0,this.yScale=void 0,this.colorScale=void 0,this.bubbleScale=void 0,this.toolbar=void 0,this.tooltip=void 0}addTooltip(t){let e=$(`#${t}`),n=t+"-tooltip";0==$(`#${n}`).length&&$("<div/>").attr("id",n).appendTo(e),this.tooltip=new nc(n),rt(`#${n}`).classed("bubblemap-tooltip",!0)}drawCanvas(t,e={w:1e3,h:600,top:20,left:20},n,a={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){this._setScales(e,n);let r=t.node().getContext("2d");r.fillStyle="#ffffff",r.rect(0,0,t.attr("width"),t.attr("height")),r.fill(),this.data.forEach(t=>{r.beginPath(),r.fillStyle=this.colorScale(t.value),r.arc(this.xScale(t.x),this.yScale(t.y),this.bubbleScale(t.r),0,2*Math.PI),r.fill(),r.closePath()});let i=a.column,c=a.row;c.show&&(r.save(),r.textAlign=i.textAlign,r.fillStyle="black",r.font="10px Open Sans",this.yScale.domain().forEach(t=>{r.fillText(t,this.xScale.range()[0]-c.adjust,this.yScale(t)+2)}),r.restore()),i.show&&this.xScale.domain().forEach(t=>{r.save(),r.fillStyle="black",r.font="10px Open Sans",r.textAlign=i.textAlign,r.translate(this.xScale(t)-3,this.yScale.range()[1]+i.adjust),r.rotate(0==i.angle?0:Math.PI/(180/i.angle)),r.fillText(t,0,0),r.restore()})}drawCombo(t,e,n={w:1e3,h:600,top:0,left:0},a,r=!0,i={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){let c={w:n.w,h:n.h2,top:n.top,left:n.left};this.drawSvg(e,c,a,50,i);let o=t.append("g").attr("clip-path","url(#clip)");if(this._setMiniScales(n,a),o.selectAll(".mini-map-cell").data(this.data,t=>t.value).enter().append("circle").attr("class","mini-map-cell").attr("row",t=>`x${this.xScaleMini.domain().indexOf(t.x)}`).attr("col",t=>`y${this.yScaleMini.domain().indexOf(t.y)}`).attr("cx",t=>this.xScaleMini(t.x)).attr("cy",t=>this.yScaleMini(t.y)).attr("r",t=>isFinite(t.r)?this.bubbleScaleMini(t.r):this.bubleScaleMini.range()[1]).style("fill",t=>this.colorScale(t.value)),r){let a=Fi().extent([[0,0],[n.w,n.h]]).on("brush",()=>{this.brushed(e,i)});t.append("g").attr("class","brush").call(a).call(a.move,[0,50*this.xScaleMini.bandwidth()])}}drawSvg(t,e={w:1e3,h:600,top:0,left:0},n,a=50,r={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:10,location:"left",textAlign:"right"}}){this._setScales(e,n,a);let i=this.tooltip;t.append("g").attr("clip-path","url(#clip)").selectAll(".bubble-map-cell").data(this.data,t=>t.value).enter().append("circle").attr("class","bubble-map-cell").attr("row",t=>`x${this.xScale.domain().indexOf(t.x)}`).attr("col",t=>`y${this.yScale.domain().indexOf(t.y)}`).attr("cx",t=>this.xScale(t.x)).attr("cy",t=>this.yScale(t.y)).attr("r",t=>isFinite(t.r)?this.bubbleScale(t.r):this.bubbleScale.range()[1]).style("fill",t=>this.colorScale(t.value)).on("mouseover",function(e){let n=rt(this),a=n.attr("row"),r=n.attr("col");t.selectAll(".bubble-map-xlabel").filter(`.${a}`).classed("highlighted",!0),t.selectAll(".bubble-map-ylabel").filter(`.${r}`).classed("highlighted",!0),n.classed("highlighted",!0);let c=void 0===e.displayValue?parseFloat(e.value.toExponential()).toPrecision(4):e.displayValue,o=void 0===e.rDisplayValue?e.r.toPrecision(4):e.rDisplayValue,f=void 0===e.displayX?e.x:e.displayX,l=void 0===e.displayY?e.y:e.displayY;i.show(`Column: ${f} <br/> Row: ${l}<br/> Value: ${c}<br/> Size: ${o}`)}).on("mouseout",function(){t.selectAll("*").classed("highlighted",!1),i.hide()});let c=r.column,o=r.row;if(c.show){let e={},n=Math.floor(this.xScale.bandwidth()/2)>12?12:Math.floor(this.xScale.bandwidth()/2);_t().key(t=>t.x).entries(this.data).forEach(t=>{e[t.key]=t.values[0].displayX});t.selectAll(".bubble-map-xlabel").data(this.xScale.domain()).enter().append("text").attr("class",(t,e)=>`bubble-map-xlabel x${e}`).attr("x",0).attr("y",0).attr("text-anchor","left"==c.textAlign?"start":"end").style("cursor","default").style("font-size",()=>`${n}px`).attr("transform",t=>{return`translate(${this.xScale(t)-n/2}, ${this.yScale.range()[1]+c.adjust}) rotate(${c.angle})`}).text(t=>e[t]||t)}if(o.show){let e={},n=Math.floor(this.yScale.bandwidth()/1.5)>14?14:Math.floor(this.yScale.bandwidth()/1.5)<10?10:Math.floor(this.yScale.bandwidth()/1.5);_t().key(t=>t.y).entries(this.data).forEach(t=>{e[t.key]=t.values[0].displayY});t.selectAll(".bubble-map-ylabel").data(this.yScale.domain()).enter().append("text").attr("class",(t,e)=>`bubble-map-ylabel y${e}`).attr("x",0).attr("y",0).attr("text-anchor","left"==o.textAlign?"start":"end").style("cursor","default").style("font-size",()=>`${n}px`).attr("transform",t=>{return`translate(${this.xScale.range()[0]-o.adjust}, ${this.yScale(t)}) rotate(${o.angle})`}).text(t=>e[t]||t)}}drawColorLegend(t,e={x:0,y:0},n=5,a=""){tc(a,t,this.colorScale,e,this.useLog,n,this.logBase,{h:10,w:40},"h",!0)}drawBubbleLegend(t,e={x:0,y:0,title:"Bubble legend"},n=5,a=""){t.selectAll(".bmap-bubble-legend").remove();let r=[...Array(n+1).keys()],i=(this.bubbleScale.domain()[1]-this.bubbleScale.domain()[0])/n,c=r.map(t=>this.bubbleScale.domain()[0]+t*i),o=t.append("g").attr("class","bmap-bubble-legend").attr("transform",`translate(${e.x}, ${e.y})`);o.append("text").attr("class","color-legend").text(e.title).attr("x",-10).attr("text-anchor","end").attr("y",10);let f=o.selectAll(".legend").data(c).enter().append("g").classed("legend",!0);f.append("circle").attr("cx",(t,e)=>40*e).attr("cy",10).attr("r",t=>isFinite(t.r)?this.bubbleScale(t.r):this.bubbleScale.range()[1]).style("fill","black"),f.append("text").attr("class","color-legend").text(t=>this.useLog?Math.pow(base,t).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>40*e-5).attr("y",0)}renderWithNewDomain(t,e,n={adjust:0,angle:90}){this.xScale.domain(e);let a=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:a,min:2}),t.selectAll(".bubble-map-cell").attr("cx",t=>{let e=this.xScale(t.x);return void 0===e?0:e}).attr("r",t=>{return void 0===this.xScale(t.x)?0:isFinite(t.r)?this.bubbleScale(t.r):this.bubbleScale.range()[1]});let r=Math.floor(this.xScale.bandwidth()/2)>10?10:Math.floor(this.xScale.bandwidth()/2);t.selectAll(".bubble-map-xlabel").attr("transform",t=>{return`translate(${this.xScale(t)-r/2||0}, ${this.yScale.range()[1]+n.adjust}) rotate(${n.angle})`}).style("font-size",()=>`${r}px`).style("display",t=>{return void 0===this.xScale(t)?"none":"block"})}brushed(t,e){let n=W.selection,a=Math.round(n[0]/this.xScaleMini.step()),r=Math.round(n[1]/this.xScaleMini.step()),i=this.xScaleMini.domain().slice(a,r);return this.renderWithNewDomain(t,i,e.column),i}_setMiniScales(t={w:1e3,h:600,top:20,left:20},e){if(void 0===this.xScaleMini&&(this.xScaleMini=this._setXScaleMini(t)),void 0===this.yScaleMini&&(this.yScaleMini=this._setYScaleMini(t)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(e)),void 0===this.bubbleScaleMini){let t=this._setBubbleMax(!0);this.bubbleScaleMini=this._setBubbleScale({max:t,min:1})}}_setScales(t={w:1e3,h:600,top:20,left:20},e){if(void 0===this.xScale&&(this.xScale=this._setXScale(t)),void 0===this.yScale&&(this.yScale=this._setYScale(t)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(e)),void 0===this.bubbleScale){let t=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:t,min:2})}}_parseXList(){return _t().key(t=>t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}_parseYList(){return _t().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}_setXScaleMini(t={w:1e3,left:20}){let e=this._parseXList();return this._setXScale(t,e)}_setXScale(t={w:1e3,left:20},e){return e=void 0===e?this._parseXList():e,Dt().domain(e).range([t.left,t.left+t.w]).padding(.05)}_setYScaleMini(t={h:600,top:20}){let e=this._parseYList();return this._setYScale(t,e)}_setYScale(t={h:600,top:20},e){return e=void 0===e?this._parseYList():e,Dt().domain(e).range([t.top,t.top+t.h]).padding(.05)}_setColorScale(t){let e=this.useLog;return Ki(void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t,this.colorScheme,void 0,void 0,!0)}_setBubbleMax(t=!1,e=2,n=10){let a=t?this.xScaleMini:this.xScale,r=t?this.yScaleMini:this.yScale,i=yt([a.bandwidth(),r.bandwidth()])/e;return n<i?n:i}_setBubbleScale(t={max:10,min:0}){const e=yt(this.data.filter(t=>isFinite(t.r)).map(t=>t.r));return Tn().domain([3,e]).range([t.min,t.max])}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}function rc(t,e,n,a,r,i="relative"){return function(t){if(0==$(`#${t}`).length){let e=`Input Error: DOM ID ${t} is not found.`;throw console.warn(e),e}}(t),void 0===r&&(r=`${t}-svg`),void 0===a&&(a={top:0,left:0}),rt("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",r).append("g").attr("transform",`translate(${a.left}, ${a.top})`)}class ic{constructor(t,e,n=!1){$(`#${t}`).show();const a=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(a).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,a,r="fa-download"){this.createButton(t,r);rt(`#${t}`).on("click",()=>{this.downloadSvg(e,n,a)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);rt(`#${t}`).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download"){const n=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${e}`).appendTo(n),this.buttons[t]=n,n}attachTooltip(t){this.tooltip=t}downloadSvg(t,e,n){let a=$($($(`${"#"+t}`))[0]),r=a.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),i=function(t){for(var e="",n=document.styleSheets,a=0;a<n.length;a++)try{if(null==n[a].cssRules)continue;for(var r=n[a].cssRules,i=0;i<r.length;i++){var c=r[i];if(void 0!==c.style){var o,f=void 0===c.selectorText?c.selectorText:c.selectorText.replace(`#${t[0].id} `,"");try{o=$(t).find(f)}catch(t){o=[]}o.length>0&&(e+=c.selectorText+" { "+c.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var l=document.createElement("style");return l.setAttribute("type","text/css"),l.innerHTML="<![CDATA[\n"+e+"\n]]>",l}(a.get());r.prepend(i),$("#"+n).html("").hide();let c=$(`#${n}`).append(r).html(),o=new Blob([c],{type:"image/svg+xml"});saveAs(o,e),$(`#${n}`).html("").hide()}}class cc{constructor(t,e=!0,n=10,a="YlGnBu",r=2,i="heatmapTooltip"){this.data=t,this.useLog=e,this.logBase=n,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=r,this.colorScheme=a,0==$(`#${i}`).length&&$("<div/>").attr("id",i).appendTo($("body")),this.tooltip=new nc(i),rt(`#${i}`).classed("heatmap-tooltip",!0),this.toolbar=void 0}createToolbar(t,e){return this.toolbar=new ic(t,e),this.toolbar}drawColorLegend(t,e={x:0,y:0},n=5){tc(this.data[0].unit||"Value",t,this.colorScale,e,this.useLog,n,this.logBase)}redraw(t,e,n,a={w:1e3,h:1e3},r=30){this._setXScale(a.w,e),this._setYScale(a.h,n),this.draw(t,a,r)}draw(t,e={w:1e3,h:600},n=30,a=!1,r=null){void 0===this.xList&&this._setXScale(e.w),void 0===this.yList&&this._setYScale(e.h),void 0===this.colorScale&&this._setColorScale();const i=t.selectAll(".exp-map-xlabel").data(this.xList),c=null==r?this.yScale.range()[1]+2*this.yScale.bandwidth():this.yScale.range()[1]+r;i.attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${c}) rotate(${n})`}),i.enter().append("text").attr("class",(t,e)=>`exp-map-xlabel x${e}`).attr("x",0).attr("y",0).style("text-anchor","start").style("cursor","default").style("font-size",this.xScale.bandwidth()).attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${c}) rotate(${n})`}).merge(i).text(t=>t),i.exit().remove();t.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text(t=>t).attr("x",this.xScale.range()[1]+5).attr("y",t=>this.yScale(t)+10).attr("class",(t,e)=>`exp-map-ylabel y${e}`).attr("text-anchor","start").style("cursor","default").on("click",t=>{alert(`${t} is clicked. To be implemented`)}).on("mouseover",function(t){rt(this).classed("normal",!1).classed("highlighted",!0)}).on("mouseout",function(t){rt(this).classed("normal",!0).classed("highlighted",!1)});const o=t.selectAll(".exp-map-cell").data(this.data,t=>t.value);o.attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`);const f=this;o.enter().append("rect").attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("rx",this.r).attr("ry",this.r).attr("class","exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill","#eeeeee").on("mouseover",function(e){const n=rt(this);f.cellMouseover(e,t,n)}).on("mouseout",function(t){rt(this);f.cellMouseout()}).merge(o).style("fill",t=>a&&0==t.value?"#DDDDDD":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value)),o.exit().remove()}cellMouseout(t){ot("*").classed("highlighted",!1),this.tooltip.hide()}cellMouseover(t,e,n){const a=n.attr("row"),r=n.attr("col");e.selectAll(".exp-map-xlabel").filter(`.${a}`).classed("highlighted",!0),e.selectAll(".exp-map-ylabel").filter(`.${r}`).classed("highlighted",!0),n.classed("highlighted",!0);const i=void 0===t.displayValue?parseFloat(t.value.toExponential()).toPrecision(4):t.displayValue;this.tooltip.show(`Column: ${t.x} <br/> Row: ${t.y}<br/> Value: ${i}`)}_setXScale(t,e){this.xList=void 0!==e?e:_t().key(t=>t.x).entries(this.data).map(t=>t.key),this.xScale=Dt().domain(this.xList).range([0,t]).padding(.05)}_setYScale(t,e){this.yList=void 0!==e?e:_t().key(t=>t.y).entries(this.data).map(t=>t.key),this.yScale=Dt().domain(this.yList).range([0,t]).padding(.05)}_setColorScale(){let t=this.useLog,e=this.data.map(e=>t?this._log(e.value):e.value);this.colorScale=Ki(e,this.colorScheme,0)}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class oc{constructor(t,e=0,n=!0,a=10,r="Greys",i=[0,1]){this.data=this._unique(t),this.dataDict={},this.cutoff=e,this.filteredData=this._filter(this.data,this.cutoff),this.dataDict=this._generateDataDict(this.filteredData),this.useLog=n,this.logBase=a,this.colorScheme=r,this.colorScale=this._setColorScale(i),this.xScale=void 0,this.yScale=void 0,this.labelScale=void 0,this.tooltip=void 0}addTooltip(t){let e=t+"-tooltip";0==$(`#${e}`).length&&$("<div/>").attr("id",e).appendTo($(`#${t}`)),this.tooltip=new nc(e,!1,40,0),rt(`#${e}`).classed("half-map-tooltip",!0)}draw(t,e,n={w:600,top:20,left:20},a=[0,1],r=!0,i=90,c,o){this._drawCanvas(t,n,a,c,o);this.drawSvg(e,n,!1,r,i,a,c,o)}drawColorLegend(t,e={x:0,y:0},n=5,a="",r=[0,1]){void 0===this.colorScale&&this._setColorScale(r),tc(a,t,this.colorScale,e,this.useLog,n,this.logBase,{h:20,w:10},"v")}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}_drawCanvas(t,e={w:600,top:20,left:20},n=[0,1],a,r){this._setScales(e,n,a,r);let i=t.node().getContext("2d");i.save(),i.rotate(-.25*Math.PI),i.clearRect(-e.w,-e.w,2*e.w,2*e.w),this.filteredData.forEach(t=>{let e=this.xScale(t.x)-this.xScale.bandwidth()/2,n=this.yScale(t.y)-this.yScale.bandwidth()/2;void 0!==e&&void 0!==n&&(t.color=0==t.value?"#fff":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value),i.fillStyle=this.colorScale(t.value),i.fillRect(e,n,this.xScale.bandwidth(),this.yScale.bandwidth()))}),i.restore()}drawSvg(t,e,n=!0,a=!0,r=90,i=[0,1],c,o){if(n){this._setScales(e,i,c,o);let n=t.append("g").attr("clip-path","url(#clip)").selectAll(".half-map-cell").data(this.filteredData);n.enter().append("rect").attr("class","half-map-cell").attr("row",t=>`y${this.yScale.domain().indexOf(t.y)}`).attr("column",t=>`x${this.xScale.domain().indexOf(t.x)}`).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("transform","rotate(-45)").merge(n).style("fill",t=>0==t.value?"#fff":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value))}a&&(this._setLabelScale(e),t.selectAll().data(this.labelScale.domain()).enter().append("text").attr("class",(t,e)=>`half-map-label l${e}`).attr("x",0).attr("y",0).attr("text-anchor","start").style("cursor","none").attr("transform",t=>{return`translate(${this.labelScale(t)+this.labelScale.step()/2}, -5) rotate(-${r})`}).text(t=>t));let f=t.append("rect").attr("class","half-map-cursor").attr("x",0).attr("y",0).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("stroke","#d2111b").style("stroke-width","1px").style("fill","none").style("display","none");t.on("mouseout",()=>{f.style("display","none"),this.tooltip.hide(),t.selectAll(".half-map-label").classed("highlighted",!1)}),rt(t.node().parentNode).style("cursor","none").style("position","absolute").on("mousemove",()=>{let e=ct(t.node()),n=e[0],r=e[1],i=.25*Math.PI,c=n*Math.cos(i)-r*Math.sin(i)+this.xScale.step()/2,o=n*Math.sin(i)+r*Math.cos(i)-this.yScale.step()/2;if(n<0||r<0||c<0||o<0)return this.tooltip.hide(),void f.style("display","none");let l=Math.floor(c/this.xScale.step()),s=Math.floor(o/this.yScale.step()),u=this.xScale.domain()[l],d=this.yScale.domain()[s],h=this.dataDict[u+d];void 0!==h?(f.attr("transform",`translate(${n},${r}) rotate(-45)`),f.style("display","block"),this.tooltip.show(`${u}<br/> ${d}<br/> Value: ${h.displayValue}`),a&&(t.selectAll(".half-map-label").classed("highlighted",!1),t.select(`.l${l}`).classed("highlighted",!0),t.select(`.l${s}`).classed("highlighted",!0))):(this.tooltip.hide(),f.style("display","none"))})}_unique(t){t.sort((t,e)=>t.x<e.x?-1:t.x>e.x?1:t.y<e.y?-1:t.y>e.y?1:0);let e={};return t.filter(t=>{let n=t.x+t.y,a=t.y+t.x;return!e.hasOwnProperty(n)&&!e.hasOwnProperty(a)&&(e[n]=!0,!0)})}_filter(t,e){return t.filter(t=>!(t.value<e))}_generateDataDict(t){let e={};return t.forEach(t=>{e[t.x+t.y]=t,e[t.y+t.x]=t}),e}_setScales(t={w:600,top:20,left:20},e=[0,1],n,a){(n||void 0===this.xScale)&&this._setXScale(t,n),(a||void 0===this.yScale)&&this._setYScale(t,a),void 0===this.colorScale&&this._setColorScale(e)}_setXScale(t={w:600},e){void 0===e&&(e=_t().key(t=>t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.xScale=Dt().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setYScale(t={w:600},e){void 0===e&&(e=_t().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.yScale=Dt().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setLabelScale(t={w:600}){void 0===this.xScale&&this._setXScale();let e=this.xScale.domain();this.labelScale=Dt().domain(e).range([0,t.w]).padding(.05)}_setColorScale(t){let e=this.useLog,n=void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t;this.colorScale=Ki(n,this.colorScheme)}}function fc(t,e,n=uc.panels.tssTrack,a=!1,r){let i=n.width-(n.margin.left+n.margin.right),c=n.height-(n.margin.top+n.margin.bottom),o=e.append("g").attr("id",n.id).attr("transform",`translate(${n.margin.left}, ${n.margin.top+n.yPos})`),f=new ec(n.data,n.centerPos);return f.render(o,i,c,!1,n.showLabels,n.label,n.color.background,n.color.feature,a,r),f.svg=o,f}function lc(t,e){rt("#siteMarkers").selectAll("*").remove(),rt("#siteMarkers").remove();let n=e.append("g").attr("id","siteMarkers");t.tss&&t.xScale(t.tss)&&(n.append("line").attr("x1",t.xScale(t.tss)+t.xScale.bandwidth()/2).attr("x2",t.xScale(t.tss)+t.xScale.bandwidth()/2).attr("y1",-10).attr("y2",t.yScale.range()[1]).style("stroke","#94a8b8").style("stroke-width",2),n.append("text").text("TSS").attr("x",t.xScale(t.tss)).attr("y",-12).attr("text-anchor","center").style("font-size","12px")),t.tes&&t.xScale(t.tes)&&(n.append("line").attr("x1",t.xScale(t.tes)+t.xScale.bandwidth()/2).attr("x2",t.xScale(t.tes)+t.xScale.bandwidth()/2).attr("y1",-10).attr("y2",t.yScale.range()[1]).style("stroke","#748797").style("stroke-width",2),n.append("text").text("TES").attr("x",t.xScale(t.tes)).attr("y",-12).attr("text-anchor","center").style("font-size","12px"))}const sc=window.innerWidth,uc={id:"qtl-browser",ldId:"ld-browser",width:sc,height:null,urls:{genes:"../tempData/ACTN3.neighbor.genes.csv",eqtls:"/tempData/ACTN3.eqtls.csv",sqtls:"/tempData/ACTN3.sqtls.csv",ld:"/tempData/ACTN3.ld.csv"},parsers:{genes:t=>(t.start=parseInt(t.start),t.end=parseInt(t.end),t.pos=parseInt(t.tss),t.featureLabel=t.geneSymbol,t.featureType=t.geneType,t),qtlFeatures:t=>(t.chr=t.chromosome,t.start=parseInt(t.pos),t.end=t.start,t.pos=parseInt(t.pos),t.featureType="variant",t.featureLabel=t.snpId||t.variantId,t.strand="+",t.colorValue=-Math.log10(parseFloat(t.pValue)),t),qtlBubbles:(t,e)=>(t.x=t.variantId,t.y=e,t.value=parseFloat(t.nes),t.r=-Math.log10(parseFloat(t.pValue)),t),ld:t=>(t.x=t.snpId1,t.y=t.snpId2,t.value=parseFloat(t.rSquared),t.displayValue=parseFloat(t.value).toPrecision(3),t)},dataFilters:{genes:t=>"protein coding"==t.featureType||"lincRNA"==t.featureType,ld:(t,e)=>e[t.x]&&e[t.y]},dataSort:{features:(t,e)=>parseInt(t.start)-parseInt(e.start)},panels:{gwasMap:{id:"gwas-map",data:null,useLog:!1,logBase:null,margin:{top:40,right:100,bottom:100,left:80},width:sc,height:180,colorScheme:"Greys",cornerRadius:2,columnLabel:{angle:90,adjust:10},rowLabel:{width:100}},tssTrack:{id:"tss-track",label:"TSS location",data:null,centerPos:66546395,yPos:null,margin:{top:50,right:50,bottom:15,left:80},width:sc,height:100,showLabels:!1,color:{background:"#ffffff",feature:"#ababab"}},eqtlTrack:{id:"eqtl-track",label:"ACTN3 eQTLs",data:null,centerPos:66546395,yPos:null,margin:{top:0,right:50,bottom:0,left:80},width:sc,height:20,showLabels:!1,color:{background:"#ffffff",feature:"#ababab"}},sqtlTrack:{id:"sqtl-track",label:"ACTN3 sQTLs",data:null,centerPos:66546395,yPos:null,margin:{top:0,right:50,bottom:0,left:80},width:sc,height:20,showLabels:!1,color:{background:"#ffffff",feature:"#ababab"}},qtlMap:{id:"qtl-map",width:sc,data:null,yPos:null,margin:{top:70,right:50,bottom:70,left:80},height:200,colorScheme:"RdBu",colorScaleDomain:[-1,1],useLog:!1,logBase:null,label:{column:{show:!0,angle:90,adjust:10,location:"bottom",textAlign:"left"},row:{show:!0,width:150,angle:0,adjust:0,location:"left",textAlign:"right"}}}},ld:{id:"ld-browser",data:[],cutoff:.1,width:sc,margin:{top:10,right:50,bottom:0,left:80},colorScheme:"Greys"}};return t.render=function(t,e=uc){e.height=Object.keys(e.panels).reduce((t,n,a)=>{let r=e.panels[n];return a>0&&(r.yPos=t),t+r.height},0);let n=rc(e.id,e.width,e.height,{left:0,top:0});const a=["genes","eqtls","sqtls"].map(t=>h(e.urls[t]));Promise.all(a).then(a=>{let r=function(t,e,n,a=uc){let r=n.map(a.parsers.genes).filter(a.dataFilters.genes);r.sort(a.dataSort.genes),a.panels.gwasMap.data=function(t={x:20,y:20,scaleFactor:1},e=[]){let n=t=>Array.from(Array(t).keys()),a=void 0===e?n(t.x):e,r=n(t.y),i=[];return a.forEach(n=>{n=void 0===e?"col "+n.toString():n,r.forEach(e=>{e="trait "+e.toString();let a=Math.random()*t.scaleFactor,r={x:n,y:e,value:a,displayValue:a.toPrecision(3)};i.push(r)})}),i}({x:r.length,y:4,scaleFactor:1},r.map(t=>t.geneSymbol));const i=function(t,e,n=uc.panels.gwasMap){let a=n.width-(n.margin.left+n.margin.right),r=n.height-(n.margin.top+n.margin.bottom);if(a*r<=0)throw"The inner height and width of the GWAS heatmap panel must be positive values. Check the height and margin configuration of this panel";let i=e.append("g").attr("id",n.id).attr("transform",`translate(${n.margin.left}, ${n.margin.top})`),c=`${n.id}Tooltip`,o=new cc(n.data,!1,void 0,n.colorScheme,n.cornerRadius,c);return o.draw(i,{w:a,h:r},n.columnLabel.angle,!1,n.columnLabel.adjust),o.drawColorLegend(i,{x:20,y:-20},10),i.selectAll(".exp-map-xlabel").attr("fill",e=>e==t?"red":"#000000"),o.svg=i,o}(t,e,a.panels.gwasMap);a.panels.tssTrack.data=r;const c=fc(0,e,a.panels.tssTrack);let o=a.panels.gwasMap,f=a.panels.tssTrack,l=o.margin.left-f.margin.left+i.xScale.bandwidth()/2,s=f.height-(f.margin.top+f.margin.bottom);return c.svg.selectAll(".connect").data(r).enter().append("line").attr("class","connect").attr("x1",t=>i.xScale(t.geneSymbol)+l).attr("x2",t=>c.scale(t.start)).attr("y1",s/2-20).attr("y2",s/2).attr("stroke",e=>e.geneSymbol==t?"red":"#ababab").attr("stroke-width",.5),c.svg.selectAll(".connect2").data(r).enter().append("line").attr("class","connect2").attr("x1",t=>i.xScale(t.geneSymbol)+l).attr("x2",t=>i.xScale(t.geneSymbol)+l).attr("y1",s/2-20).attr("y2",t=>{let e=-(o.margin.bottom+f.margin.top-10)+t.geneSymbol.length*i.yScale.bandwidth();return s/2+(e=e>-20?-20:e)}).attr("stroke",e=>e.geneSymbol==t?"red":"#ababab").attr("stroke-width",.5),r}(t,n,a[0],e).filter(e=>e.geneSymbol==t)[0];console.log(r),function(t,e,n=uc,a,r){let i=a.map(n.parsers.qtlFeatures);i.sort(n.dataSort.features);let c=n.panels.eqtlTrack;c.data=i;let o=r.map(n.parsers.qtlFeatures);o.sort(n.dataSort.features);let f=n.panels.sqtlTrack;f.data=o;let l=n.panels.qtlMap;l.data=[],l.data=l.data.concat(a.map(t=>n.parsers.qtlBubbles(t,"eQTL"))),l.data=l.data.concat(r.map(t=>n.parsers.qtlBubbles(t,"sQTL")));const s=yt(c.data.concat(f.data).filter(t=>isFinite(t.colorValue)).map(t=>t.colorValue)),u=(fc(t.geneSymbol,e,c,!0,s),fc(t.geneSymbol,e,f,!0,s));let d=new ac(l.data,l.useLog,l.logBase,l.colorScheme);d.addTooltip(l.id);let b=e.append("g").attr("id",l.id).attr("class","focus").attr("transform",`translate(${l.margin.left}, ${l.margin.top+l.yPos})`);h(n.urls.ld).then(e=>{let a=l.width-(l.margin.left+l.margin.right),r=l.height-(l.margin.top+l.margin.bottom);d.drawSvg(b,{w:a,h:r,top:0,left:0}),d.fullDomain=d.xScale.domain(),function(t,e){let n="+"==t.strand?t.start:t.end,a="+"==t.strand?t.end:t.start,r=e.fullDomain;const i=t=>r.filter((e,n)=>{let a=parseFloat(e.split("_")[1]);if(a===t)return!0;if(void 0===r[n+1])return!1;let i=parseFloat(r[n+1].split("_")[1])||void 0;return(a-t)*(i-t)<0});let c=i(n),o=i(a);e.tss=c[0],e.tes=o[0]}(t,d),lc(d,b);let i={};d.xScale.domain().forEach(t=>{i[t]=!0});let c=e.map(n.parsers.ld).filter(t=>n.dataFilters.ld(t,i));const o={};c.forEach(t=>{o[t.x]=!0,o[t.y]=!0});let s=n.ld;s.data=c.concat(Object.keys(o).map(t=>({x:t,y:t,value:1,displayValue:"1"})));const h=function(t,e){let n=new oc(t.data,t.cutoff,!1,void 0,t.colorScheme,[0,1]);n.addTooltip(t.id);let a=rt(`#${t.id}`).append("canvas").attr("id",t.id+"-ld-canvas").attr("width",t.width).attr("height",t.width).style("position","absolute");a.node().getContext("2d").translate(t.margin.left,t.margin.top);let r=rc(t.id,t.width,t.width,{top:0,left:0}),i=r.append("g").attr("class","ld").attr("id","ldG").attr("transform",`translate(${t.margin.left}, ${t.margin.top})`);n.drawColorLegend(r,{x:t.margin.left,y:100},10,"LD"),i.selectAll("*").remove();const c={w:t.width-(t.margin.left+t.margin.right),top:0,left:0};return n.draw(a,i,c,[0,1],!1,void 0,e.xScale.domain(),e.xScale.domain()),()=>{i.selectAll("*").remove(),n.draw(a,i,c,[0,1],!1,void 0,e.xScale.domain(),e.xScale.domain())}}(s,d);let p={w:100,h:Math.abs(n.panels.tssTrack.yPos+n.panels.tssTrack.margin.top-(n.panels.sqtlTrack.yPos+n.panels.sqtlTrack.height+20))};u.renderAxis(f.height+30,!0,(t,e)=>{let n=d.fullDomain.filter(n=>{let a=parseInt(n.split("_")[1]);return a>=t&&a<=e});d.renderWithNewDomain(b,n),lc(d,b),h()},p)})}(r,n,e,a[1],a[2])}).catch(t=>{console.error(t)})},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
