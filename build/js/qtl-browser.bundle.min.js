var QTLBrowser=function(e){"use strict";var t={},n={},a=34,r=10,i=13;function c(e){return new Function("d","return {"+e.map(function(e,t){return JSON.stringify(e)+": d["+t+"]"}).join(",")+"}")}var o=function(e){var o=new RegExp('["'+e+"\n\r]"),f=e.charCodeAt(0);function u(e,c){var o,u=[],l=e.length,s=0,d=0,h=l<=0,b=!1;function p(){if(h)return n;if(b)return b=!1,t;var c,o,u=s;if(e.charCodeAt(u)===a){for(;s++<l&&e.charCodeAt(s)!==a||e.charCodeAt(++s)===a;);return(c=s)>=l?h=!0:(o=e.charCodeAt(s++))===r?b=!0:o===i&&(b=!0,e.charCodeAt(s)===r&&++s),e.slice(u+1,c-1).replace(/""/g,'"')}for(;s<l;){if((o=e.charCodeAt(c=s++))===r)b=!0;else if(o===i)b=!0,e.charCodeAt(s)===r&&++s;else if(o!==f)continue;return e.slice(u,c)}return h=!0,e.slice(u,l)}for(e.charCodeAt(l-1)===r&&--l,e.charCodeAt(l-1)===i&&--l;(o=p())!==n;){for(var g=[];o!==t&&o!==n;)g.push(o),o=p();c&&null==(g=c(g,d++))||u.push(g)}return u}function l(t){return t.map(s).join(e)}function s(e){return null==e?"":o.test(e+="")?'"'+e.replace(/"/g,'""')+'"':e}return{parse:function(e,t){var n,a,r=u(e,function(e,r){if(n)return n(e,r-1);a=e,n=t?function(e,t){var n=c(e);return function(a,r){return t(n(a),r,e)}}(e,t):c(e)});return r.columns=a||[],r},parseRows:u,format:function(t,n){return null==n&&(n=function(e){var t=Object.create(null),n=[];return e.forEach(function(e){for(var a in e)a in t||n.push(t[a]=a)}),n}(t)),[n.map(s).join(e)].concat(t.map(function(t){return n.map(function(e){return s(t[e])}).join(e)})).join("\n")},formatRows:function(e){return e.map(l).join("\n")}}},f=o(",").parse,u=o("\t").parse;function l(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.text()}var s=function(e,t){return fetch(e,t).then(l)};function d(e){return function(t,n,a){return 2===arguments.length&&"function"==typeof n&&(a=n,n=void 0),s(t,n).then(function(t){return e(t,a)})}}d(f);var h=d(u),b=function(e,t){return e<t?-1:e>t?1:e>=t?0:NaN};var p,g,m=(1===(p=b).length&&(g=p,p=function(e,t){return b(g(e),t)}),{left:function(e,t,n,a){for(null==n&&(n=0),null==a&&(a=e.length);n<a;){var r=n+a>>>1;p(e[r],t)<0?n=r+1:a=r}return n},right:function(e,t,n,a){for(null==n&&(n=0),null==a&&(a=e.length);n<a;){var r=n+a>>>1;p(e[r],t)>0?a=r:n=r+1}return n}}).right,y=function(e,t,n){e=+e,t=+t,n=(r=arguments.length)<2?(t=e,e=0,1):r<3?1:+n;for(var a=-1,r=0|Math.max(0,Math.ceil((t-e)/n)),i=new Array(r);++a<r;)i[a]=e+a*n;return i},v=Math.sqrt(50),w=Math.sqrt(10),x=Math.sqrt(2),_=function(e,t,n){var a,r,i,c,o=-1;if(n=+n,(e=+e)===(t=+t)&&n>0)return[e];if((a=t<e)&&(r=e,e=t,t=r),0===(c=M(e,t,n))||!isFinite(c))return[];if(c>0)for(e=Math.ceil(e/c),t=Math.floor(t/c),i=new Array(r=Math.ceil(t-e+1));++o<r;)i[o]=(e+o)*c;else for(e=Math.floor(e*c),t=Math.ceil(t*c),i=new Array(r=Math.ceil(e-t+1));++o<r;)i[o]=(e-o)/c;return a&&i.reverse(),i};function M(e,t,n){var a=(t-e)/Math.max(0,n),r=Math.floor(Math.log(a)/Math.LN10),i=a/Math.pow(10,r);return r>=0?(i>=v?10:i>=w?5:i>=x?2:1)*Math.pow(10,r):-Math.pow(10,-r)/(i>=v?10:i>=w?5:i>=x?2:1)}var S=function(e,t){var n,a,r=e.length,i=-1;if(null==t){for(;++i<r;)if(null!=(n=e[i])&&n>=n)for(a=n;++i<r;)null!=(n=e[i])&&n>a&&(a=n)}else for(;++i<r;)if(null!=(n=t(e[i],i,e))&&n>=n)for(a=n;++i<r;)null!=(n=t(e[i],i,e))&&n>a&&(a=n);return a},T=function(e,t){var n,a,r=e.length,i=-1;if(null==t){for(;++i<r;)if(null!=(n=e[i])&&n>=n)for(a=n;++i<r;)null!=(n=e[i])&&a>n&&(a=n)}else for(;++i<r;)if(null!=(n=t(e[i],i,e))&&n>=n)for(a=n;++i<r;)null!=(n=t(e[i],i,e))&&a>n&&(a=n);return a};function A(){}function C(e,t){var n=new A;if(e instanceof A)e.each(function(e,t){n.set(t,e)});else if(Array.isArray(e)){var a,r=-1,i=e.length;if(null==t)for(;++r<i;)n.set(r,e[r]);else for(;++r<i;)n.set(t(a=e[r],r,e),a)}else if(e)for(var c in e)n.set(c,e[c]);return n}A.prototype=C.prototype={constructor:A,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var N=function(){var e,t,n,a=[],r=[];function i(n,r,c,o){if(r>=a.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var f,u,l,s=-1,d=n.length,h=a[r++],b=C(),p=c();++s<d;)(l=b.get(f=h(u=n[s])+""))?l.push(u):b.set(f,[u]);return b.each(function(e,t){o(p,t,i(e,r,c,o))}),p}return n={object:function(e){return i(e,0,k,L)},map:function(e){return i(e,0,E,D)},entries:function(e){return function e(n,i){if(++i>a.length)return n;var c,o=r[i-1];return null!=t&&i>=a.length?c=n.entries():(c=[],n.each(function(t,n){c.push({key:n,values:e(t,i)})})),null!=o?c.sort(function(e,t){return o(e.key,t.key)}):c}(i(e,0,E,D),0)},key:function(e){return a.push(e),n},sortKeys:function(e){return r[a.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}};function k(){return{}}function L(e,t,n){e[t]=n}function E(){return C()}function D(e,t,n){e.set(t,n)}var P=Array.prototype,U=P.map,Y=P.slice,B={name:"implicit"};function F(){var e,t,n=function e(t){var n=C(),a=[],r=B;function i(e){var i=e+"",c=n.get(i);if(!c){if(r!==B)return r;n.set(i,c=a.push(e))}return t[(c-1)%t.length]}return t=null==t?[]:Y.call(t),i.domain=function(e){if(!arguments.length)return a.slice();a=[],n=C();for(var t,r,c=-1,o=e.length;++c<o;)n.has(r=(t=e[c])+"")||n.set(r,a.push(t));return i},i.range=function(e){return arguments.length?(t=Y.call(e),i):t.slice()},i.unknown=function(e){return arguments.length?(r=e,i):r},i.copy=function(){return e().domain(a).range(t).unknown(r)},i}().unknown(void 0),a=n.domain,r=n.range,i=[0,1],c=!1,o=0,f=0,u=.5;function l(){var n=a().length,l=i[1]<i[0],s=i[l-0],d=i[1-l];e=(d-s)/Math.max(1,n-o+2*f),c&&(e=Math.floor(e)),s+=(d-s-e*(n-o))*u,t=e*(1-o),c&&(s=Math.round(s),t=Math.round(t));var h=y(n).map(function(t){return s+e*t});return r(l?h.reverse():h)}return delete n.unknown,n.domain=function(e){return arguments.length?(a(e),l()):a()},n.range=function(e){return arguments.length?(i=[+e[0],+e[1]],l()):i.slice()},n.rangeRound=function(e){return i=[+e[0],+e[1]],c=!0,l()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(c=!!e,l()):c},n.padding=function(e){return arguments.length?(o=f=Math.max(0,Math.min(1,e)),l()):o},n.paddingInner=function(e){return arguments.length?(o=Math.max(0,Math.min(1,e)),l()):o},n.paddingOuter=function(e){return arguments.length?(f=Math.max(0,Math.min(1,e)),l()):f},n.align=function(e){return arguments.length?(u=Math.max(0,Math.min(1,e)),l()):u},n.copy=function(){return F().domain(a()).range(i).round(c).paddingInner(o).paddingOuter(f).align(u)},l()}var I=function(e,t,n){e.prototype=t.prototype=n,n.constructor=e};function R(e,t){var n=Object.create(e.prototype);for(var a in t)n[a]=t[a];return n}function O(){}var j="\\s*([+-]?\\d+)\\s*",G="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",V="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",H=/^#([0-9a-f]{3})$/,X=/^#([0-9a-f]{6})$/,z=new RegExp("^rgb\\("+[j,j,j]+"\\)$"),q=new RegExp("^rgb\\("+[V,V,V]+"\\)$"),Q=new RegExp("^rgba\\("+[j,j,j,G]+"\\)$"),Z=new RegExp("^rgba\\("+[V,V,V,G]+"\\)$"),W=new RegExp("^hsl\\("+[G,V,V]+"\\)$"),K=new RegExp("^hsla\\("+[G,V,V,G]+"\\)$"),J={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function ee(e){var t;return e=(e+"").trim().toLowerCase(),(t=H.exec(e))?new ie((t=parseInt(t[1],16))>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):(t=X.exec(e))?te(parseInt(t[1],16)):(t=z.exec(e))?new ie(t[1],t[2],t[3],1):(t=q.exec(e))?new ie(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=Q.exec(e))?ne(t[1],t[2],t[3],t[4]):(t=Z.exec(e))?ne(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=W.exec(e))?oe(t[1],t[2]/100,t[3]/100,1):(t=K.exec(e))?oe(t[1],t[2]/100,t[3]/100,t[4]):J.hasOwnProperty(e)?te(J[e]):"transparent"===e?new ie(NaN,NaN,NaN,0):null}function te(e){return new ie(e>>16&255,e>>8&255,255&e,1)}function ne(e,t,n,a){return a<=0&&(e=t=n=NaN),new ie(e,t,n,a)}function ae(e){return e instanceof O||(e=ee(e)),e?new ie((e=e.rgb()).r,e.g,e.b,e.opacity):new ie}function re(e,t,n,a){return 1===arguments.length?ae(e):new ie(e,t,n,null==a?1:a)}function ie(e,t,n,a){this.r=+e,this.g=+t,this.b=+n,this.opacity=+a}function ce(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function oe(e,t,n,a){return a<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new fe(e,t,n,a)}function fe(e,t,n,a){this.h=+e,this.s=+t,this.l=+n,this.opacity=+a}function ue(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}I(O,ee,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),I(ie,re,R(O,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new ie(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new ie(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+ce(this.r)+ce(this.g)+ce(this.b)},toString:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}})),I(fe,function(e,t,n,a){return 1===arguments.length?function(e){if(e instanceof fe)return new fe(e.h,e.s,e.l,e.opacity);if(e instanceof O||(e=ee(e)),!e)return new fe;if(e instanceof fe)return e;var t=(e=e.rgb()).r/255,n=e.g/255,a=e.b/255,r=Math.min(t,n,a),i=Math.max(t,n,a),c=NaN,o=i-r,f=(i+r)/2;return o?(c=t===i?(n-a)/o+6*(n<a):n===i?(a-t)/o+2:(t-n)/o+4,o/=f<.5?i+r:2-i-r,c*=60):o=f>0&&f<1?0:c,new fe(c,o,f,e.opacity)}(e):new fe(e,t,n,null==a?1:a)},R(O,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new fe(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new fe(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,a=n+(n<.5?n:1-n)*t,r=2*n-a;return new ie(ue(e>=240?e-240:e+120,r,a),ue(e,r,a),ue(e<120?e+240:e-120,r,a),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var le=Math.PI/180,se=180/Math.PI,de=.96422,he=1,be=.82521,pe=4/29,ge=6/29,me=3*ge*ge,ye=ge*ge*ge;function ve(e){if(e instanceof we)return new we(e.l,e.a,e.b,e.opacity);if(e instanceof Te){if(isNaN(e.h))return new we(e.l,0,0,e.opacity);var t=e.h*le;return new we(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}e instanceof ie||(e=ae(e));var n,a,r=Se(e.r),i=Se(e.g),c=Se(e.b),o=xe((.2225045*r+.7168786*i+.0606169*c)/he);return r===i&&i===c?n=a=o:(n=xe((.4360747*r+.3850649*i+.1430804*c)/de),a=xe((.0139322*r+.0971045*i+.7141733*c)/be)),new we(116*o-16,500*(n-o),200*(o-a),e.opacity)}function we(e,t,n,a){this.l=+e,this.a=+t,this.b=+n,this.opacity=+a}function xe(e){return e>ye?Math.pow(e,1/3):e/me+pe}function _e(e){return e>ge?e*e*e:me*(e-pe)}function Me(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function Se(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function Te(e,t,n,a){this.h=+e,this.c=+t,this.l=+n,this.opacity=+a}I(we,function(e,t,n,a){return 1===arguments.length?ve(e):new we(e,t,n,null==a?1:a)},R(O,{brighter:function(e){return new we(this.l+18*(null==e?1:e),this.a,this.b,this.opacity)},darker:function(e){return new we(this.l-18*(null==e?1:e),this.a,this.b,this.opacity)},rgb:function(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return new ie(Me(3.1338561*(t=de*_e(t))-1.6168667*(e=he*_e(e))-.4906146*(n=be*_e(n))),Me(-.9787684*t+1.9161415*e+.033454*n),Me(.0719453*t-.2289914*e+1.4052427*n),this.opacity)}})),I(Te,function(e,t,n,a){return 1===arguments.length?function(e){if(e instanceof Te)return new Te(e.h,e.c,e.l,e.opacity);if(e instanceof we||(e=ve(e)),0===e.a&&0===e.b)return new Te(NaN,0,e.l,e.opacity);var t=Math.atan2(e.b,e.a)*se;return new Te(t<0?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}(e):new Te(e,t,n,null==a?1:a)},R(O,{brighter:function(e){return new Te(this.h,this.c,this.l+18*(null==e?1:e),this.opacity)},darker:function(e){return new Te(this.h,this.c,this.l-18*(null==e?1:e),this.opacity)},rgb:function(){return ve(this).rgb()}}));var Ae=-.14861,Ce=1.78277,Ne=-.29227,ke=-.90649,$e=1.97294,Le=$e*ke,Ee=$e*Ce,De=Ce*Ne-ke*Ae;function Pe(e,t,n,a){return 1===arguments.length?function(e){if(e instanceof Ue)return new Ue(e.h,e.s,e.l,e.opacity);e instanceof ie||(e=ae(e));var t=e.r/255,n=e.g/255,a=e.b/255,r=(De*a+Le*t-Ee*n)/(De+Le-Ee),i=a-r,c=($e*(n-r)-Ne*i)/ke,o=Math.sqrt(c*c+i*i)/($e*r*(1-r)),f=o?Math.atan2(c,i)*se-120:NaN;return new Ue(f<0?f+360:f,o,r,e.opacity)}(e):new Ue(e,t,n,null==a?1:a)}function Ue(e,t,n,a){this.h=+e,this.s=+t,this.l=+n,this.opacity=+a}function Ye(e,t,n,a,r){var i=e*e,c=i*e;return((1-3*e+3*i-c)*t+(4-6*i+3*c)*n+(1+3*e+3*i-3*c)*a+c*r)/6}I(Ue,Pe,R(O,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new Ue(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new Ue(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=isNaN(this.h)?0:(this.h+120)*le,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),a=Math.cos(e),r=Math.sin(e);return new ie(255*(t+n*(Ae*a+Ce*r)),255*(t+n*(Ne*a+ke*r)),255*(t+n*($e*a)),this.opacity)}}));var Be=function(e){return function(){return e}};function Fe(e,t){return function(n){return e+n*t}}function Ie(e){return 1==(e=+e)?Re:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(a){return Math.pow(e+a*t,n)}}(t,n,e):Be(isNaN(t)?n:t)}}function Re(e,t){var n=t-e;return n?Fe(e,n):Be(isNaN(e)?t:e)}var Oe=function e(t){var n=Ie(t);function a(e,t){var a=n((e=re(e)).r,(t=re(t)).r),r=n(e.g,t.g),i=n(e.b,t.b),c=Re(e.opacity,t.opacity);return function(t){return e.r=a(t),e.g=r(t),e.b=i(t),e.opacity=c(t),e+""}}return a.gamma=e,a}(1);function je(e){return function(t){var n,a,r=t.length,i=new Array(r),c=new Array(r),o=new Array(r);for(n=0;n<r;++n)a=re(t[n]),i[n]=a.r||0,c[n]=a.g||0,o[n]=a.b||0;return i=e(i),c=e(c),o=e(o),a.opacity=1,function(e){return a.r=i(e),a.g=c(e),a.b=o(e),a+""}}}var Ge=je(function(e){var t=e.length-1;return function(n){var a=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),r=e[a],i=e[a+1],c=a>0?e[a-1]:2*r-i,o=a<t-1?e[a+2]:2*i-r;return Ye((n-a/t)*t,c,r,i,o)}}),Ve=(je(function(e){var t=e.length;return function(n){var a=Math.floor(((n%=1)<0?++n:n)*t),r=e[(a+t-1)%t],i=e[a%t],c=e[(a+1)%t],o=e[(a+2)%t];return Ye((n-a/t)*t,r,i,c,o)}}),function(e,t){return t-=e=+e,function(n){return e+t*n}}),He=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Xe=new RegExp(He.source,"g");var ze,qe,Qe,Ze,We=function(e,t){var n,a,r,i=He.lastIndex=Xe.lastIndex=0,c=-1,o=[],f=[];for(e+="",t+="";(n=He.exec(e))&&(a=Xe.exec(t));)(r=a.index)>i&&(r=t.slice(i,r),o[c]?o[c]+=r:o[++c]=r),(n=n[0])===(a=a[0])?o[c]?o[c]+=a:o[++c]=a:(o[++c]=null,f.push({i:c,x:Ve(n,a)})),i=Xe.lastIndex;return i<t.length&&(r=t.slice(i),o[c]?o[c]+=r:o[++c]=r),o.length<2?f[0]?function(e){return function(t){return e(t)+""}}(f[0].x):function(e){return function(){return e}}(t):(t=f.length,function(e){for(var n,a=0;a<t;++a)o[(n=f[a]).i]=n.x(e);return o.join("")})},Ke=function(e,t){var n,a=typeof t;return null==t||"boolean"===a?Be(t):("number"===a?Ve:"string"===a?(n=ee(t))?(t=n,Oe):We:t instanceof ee?Oe:t instanceof Date?function(e,t){var n=new Date;return t-=e=+e,function(a){return n.setTime(e+t*a),n}}:Array.isArray(t)?function(e,t){var n,a=t?t.length:0,r=e?Math.min(a,e.length):0,i=new Array(r),c=new Array(a);for(n=0;n<r;++n)i[n]=Ke(e[n],t[n]);for(;n<a;++n)c[n]=t[n];return function(e){for(n=0;n<r;++n)c[n]=i[n](e);return c}}:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?function(e,t){var n,a={},r={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?a[n]=Ke(e[n],t[n]):r[n]=t[n];return function(e){for(n in a)r[n]=a[n](e);return r}}:Ve)(e,t)},Je=function(e,t){return t-=e=+e,function(n){return Math.round(e+t*n)}},et=180/Math.PI,tt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},nt=function(e,t,n,a,r,i){var c,o,f;return(c=Math.sqrt(e*e+t*t))&&(e/=c,t/=c),(f=e*n+t*a)&&(n-=e*f,a-=t*f),(o=Math.sqrt(n*n+a*a))&&(n/=o,a/=o,f/=o),e*a<t*n&&(e=-e,t=-t,f=-f,c=-c),{translateX:r,translateY:i,rotate:Math.atan2(t,e)*et,skewX:Math.atan(f)*et,scaleX:c,scaleY:o}};function at(e,t,n,a){function r(e){return e.length?e.pop()+" ":""}return function(i,c){var o=[],f=[];return i=e(i),c=e(c),function(e,a,r,i,c,o){if(e!==r||a!==i){var f=c.push("translate(",null,t,null,n);o.push({i:f-4,x:Ve(e,r)},{i:f-2,x:Ve(a,i)})}else(r||i)&&c.push("translate("+r+t+i+n)}(i.translateX,i.translateY,c.translateX,c.translateY,o,f),function(e,t,n,i){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),i.push({i:n.push(r(n)+"rotate(",null,a)-2,x:Ve(e,t)})):t&&n.push(r(n)+"rotate("+t+a)}(i.rotate,c.rotate,o,f),function(e,t,n,i){e!==t?i.push({i:n.push(r(n)+"skewX(",null,a)-2,x:Ve(e,t)}):t&&n.push(r(n)+"skewX("+t+a)}(i.skewX,c.skewX,o,f),function(e,t,n,a,i,c){if(e!==n||t!==a){var o=i.push(r(i)+"scale(",null,",",null,")");c.push({i:o-4,x:Ve(e,n)},{i:o-2,x:Ve(t,a)})}else 1===n&&1===a||i.push(r(i)+"scale("+n+","+a+")")}(i.scaleX,i.scaleY,c.scaleX,c.scaleY,o,f),i=c=null,function(e){for(var t,n=-1,a=f.length;++n<a;)o[(t=f[n]).i]=t.x(e);return o.join("")}}}var rt=at(function(e){return"none"===e?tt:(ze||(ze=document.createElement("DIV"),qe=document.documentElement,Qe=document.defaultView),ze.style.transform=e,e=Qe.getComputedStyle(qe.appendChild(ze),null).getPropertyValue("transform"),qe.removeChild(ze),e=e.slice(7,-1).split(","),nt(+e[0],+e[1],+e[2],+e[3],+e[4],+e[5]))},"px, ","px)","deg)"),it=at(function(e){return null==e?tt:(Ze||(Ze=document.createElementNS("http://www.w3.org/2000/svg","g")),Ze.setAttribute("transform",e),(e=Ze.transform.baseVal.consolidate())?(e=e.matrix,nt(e.a,e.b,e.c,e.d,e.e,e.f)):tt)},", ",")",")");function ct(e){return function t(n){function a(t,a){var r=e((t=Pe(t)).h,(a=Pe(a)).h),i=Re(t.s,a.s),c=Re(t.l,a.l),o=Re(t.opacity,a.opacity);return function(e){return t.h=r(e),t.s=i(e),t.l=c(Math.pow(e,n)),t.opacity=o(e),t+""}}return n=+n,a.gamma=t,a}(1)}ct(function(e,t){var n=t-e;return n?Fe(e,n>180||n<-180?n-360*Math.round(n/360):n):Be(isNaN(e)?t:e)});var ot=ct(Re),ft=function(e){return function(){return e}},ut=function(e){return+e},lt=[0,1];function st(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:ft(t)}function dt(e,t,n,a){var r=e[0],i=e[1],c=t[0],o=t[1];return i<r?(r=n(i,r),c=a(o,c)):(r=n(r,i),c=a(c,o)),function(e){return c(r(e))}}function ht(e,t,n,a){var r=Math.min(e.length,t.length)-1,i=new Array(r),c=new Array(r),o=-1;for(e[r]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++o<r;)i[o]=n(e[o],e[o+1]),c[o]=a(t[o],t[o+1]);return function(t){var n=m(e,t,1,r)-1;return c[n](i[n](t))}}function bt(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp())}function pt(e,t){var n,a,r,i=lt,c=lt,o=Ke,f=!1;function u(){return n=Math.min(i.length,c.length)>2?ht:dt,a=r=null,l}function l(t){return(a||(a=n(i,c,f?function(e){return function(t,n){var a=e(t=+t,n=+n);return function(e){return e<=t?0:e>=n?1:a(e)}}}(e):e,o)))(+t)}return l.invert=function(e){return(r||(r=n(c,i,st,f?function(e){return function(t,n){var a=e(t=+t,n=+n);return function(e){return e<=0?t:e>=1?n:a(e)}}}(t):t)))(+e)},l.domain=function(e){return arguments.length?(i=U.call(e,ut),u()):i.slice()},l.range=function(e){return arguments.length?(c=Y.call(e),u()):c.slice()},l.rangeRound=function(e){return c=Y.call(e),o=Je,u()},l.clamp=function(e){return arguments.length?(f=!!e,u()):f},l.interpolate=function(e){return arguments.length?(o=e,u()):o},u()}var gt=function(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,a=e.slice(0,n);return[a.length>1?a[0]+a.slice(2):a,+e.slice(n+1)]},mt=function(e){return(e=gt(Math.abs(e)))?e[1]:NaN},yt=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function vt(e){return new wt(e)}function wt(e){if(!(t=yt.exec(e)))throw new Error("invalid format: "+e);var t;this.fill=t[1]||" ",this.align=t[2]||">",this.sign=t[3]||"-",this.symbol=t[4]||"",this.zero=!!t[5],this.width=t[6]&&+t[6],this.comma=!!t[7],this.precision=t[8]&&+t[8].slice(1),this.trim=!!t[9],this.type=t[10]||""}vt.prototype=wt.prototype,wt.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var xt,_t,Mt,St,Tt=function(e){e:for(var t,n=e.length,a=1,r=-1;a<n;++a)switch(e[a]){case".":r=t=a;break;case"0":0===r&&(r=a),t=a;break;default:if(r>0){if(!+e[a])break e;r=0}}return r>0?e.slice(0,r)+e.slice(t+1):e},At=function(e,t){var n=gt(e,t);if(!n)return e+"";var a=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+a:a.length>r+1?a.slice(0,r+1)+"."+a.slice(r+1):a+new Array(r-a.length+2).join("0")},Ct={"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return Math.round(e).toString(2)},c:function(e){return e+""},d:function(e){return Math.round(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return Math.round(e).toString(8)},p:function(e,t){return At(100*e,t)},r:At,s:function(e,t){var n=gt(e,t);if(!n)return e+"";var a=n[0],r=n[1],i=r-(xt=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,c=a.length;return i===c?a:i>c?a+new Array(i-c+1).join("0"):i>0?a.slice(0,i)+"."+a.slice(i):"0."+new Array(1-i).join("0")+gt(e,Math.max(0,t+i-1))[0]},X:function(e){return Math.round(e).toString(16).toUpperCase()},x:function(e){return Math.round(e).toString(16)}},Nt=function(e){return e},kt=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];_t=function(e){var t,n,a=e.grouping&&e.thousands?(t=e.grouping,n=e.thousands,function(e,a){for(var r=e.length,i=[],c=0,o=t[0],f=0;r>0&&o>0&&(f+o+1>a&&(o=Math.max(1,a-f)),i.push(e.substring(r-=o,r+o)),!((f+=o+1)>a));)o=t[c=(c+1)%t.length];return i.reverse().join(n)}):Nt,r=e.currency,i=e.decimal,c=e.numerals?function(e){return function(t){return t.replace(/[0-9]/g,function(t){return e[+t]})}}(e.numerals):Nt,o=e.percent||"%";function f(e){var t=(e=vt(e)).fill,n=e.align,f=e.sign,u=e.symbol,l=e.zero,s=e.width,d=e.comma,h=e.precision,b=e.trim,p=e.type;"n"===p?(d=!0,p="g"):Ct[p]||(null==h&&(h=12),b=!0,p="g"),(l||"0"===t&&"="===n)&&(l=!0,t="0",n="=");var g="$"===u?r[0]:"#"===u&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",m="$"===u?r[1]:/[%p]/.test(p)?o:"",y=Ct[p],v=/[defgprs%]/.test(p);function w(e){var r,o,u,w=g,x=m;if("c"===p)x=y(e)+x,e="";else{var _=(e=+e)<0;if(e=y(Math.abs(e),h),b&&(e=Tt(e)),_&&0==+e&&(_=!1),w=(_?"("===f?f:"-":"-"===f||"("===f?"":f)+w,x=("s"===p?kt[8+xt/3]:"")+x+(_&&"("===f?")":""),v)for(r=-1,o=e.length;++r<o;)if(48>(u=e.charCodeAt(r))||u>57){x=(46===u?i+e.slice(r+1):e.slice(r))+x,e=e.slice(0,r);break}}d&&!l&&(e=a(e,1/0));var M=w.length+e.length+x.length,S=M<s?new Array(s-M+1).join(t):"";switch(d&&l&&(e=a(S+e,S.length?s-x.length:1/0),S=""),n){case"<":e=w+e+x+S;break;case"=":e=w+S+e+x;break;case"^":e=S.slice(0,M=S.length>>1)+w+e+x+S.slice(M);break;default:e=S+w+e+x}return c(e)}return h=null==h?6:/[gprs]/.test(p)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),w.toString=function(){return e+""},w}return{format:f,formatPrefix:function(e,t){var n=f(((e=vt(e)).type="f",e)),a=3*Math.max(-8,Math.min(8,Math.floor(mt(t)/3))),r=Math.pow(10,-a),i=kt[8+a/3];return function(e){return n(r*e)+i}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),Mt=_t.format,St=_t.formatPrefix;var $t=function(e,t,n){var a,r=e[0],i=e[e.length-1],c=function(e,t,n){var a=Math.abs(t-e)/Math.max(0,n),r=Math.pow(10,Math.floor(Math.log(a)/Math.LN10)),i=a/r;return i>=v?r*=10:i>=w?r*=5:i>=x&&(r*=2),t<e?-r:r}(r,i,null==t?10:t);switch((n=vt(null==n?",f":n)).type){case"s":var o=Math.max(Math.abs(r),Math.abs(i));return null!=n.precision||isNaN(a=function(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(mt(t)/3)))-mt(Math.abs(e)))}(c,o))||(n.precision=a),St(n,o);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(a=function(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,mt(t)-mt(e))+1}(c,Math.max(Math.abs(r),Math.abs(i))))||(n.precision=a-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(a=function(e){return Math.max(0,-mt(Math.abs(e)))}(c))||(n.precision=a-2*("%"===n.type))}return Mt(n)};function Lt(e){var t=e.domain;return e.ticks=function(e){var n=t();return _(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){return $t(t(),e,n)},e.nice=function(n){null==n&&(n=10);var a,r=t(),i=0,c=r.length-1,o=r[i],f=r[c];return f<o&&(a=o,o=f,f=a,a=i,i=c,c=a),(a=M(o,f,n))>0?a=M(o=Math.floor(o/a)*a,f=Math.ceil(f/a)*a,n):a<0&&(a=M(o=Math.ceil(o*a)/a,f=Math.floor(f*a)/a,n)),a>0?(r[i]=Math.floor(o/a)*a,r[c]=Math.ceil(f/a)*a,t(r)):a<0&&(r[i]=Math.ceil(o*a)/a,r[c]=Math.floor(f*a)/a,t(r)),e},e}function Et(e,t){return e<0?-Math.pow(-e,t):Math.pow(e,t)}function Dt(){return function e(){var t=1,n=pt(function(e,n){return(n=Et(n,t)-(e=Et(e,t)))?function(a){return(Et(a,t)-e)/n}:ft(n)},function(e,n){return n=Et(n,t)-(e=Et(e,t)),function(a){return Et(e+n*a,1/t)}}),a=n.domain;return n.exponent=function(e){return arguments.length?(t=+e,a(a())):t},n.copy=function(){return bt(n,e().exponent(t))},Lt(n)}().exponent(.5)}var Pt=new Date,Ut=new Date;function Yt(e,t,n,a){function r(t){return e(t=new Date(+t)),t}return r.floor=r,r.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},r.round=function(e){var t=r(e),n=r.ceil(e);return e-t<n-e?t:n},r.offset=function(e,n){return t(e=new Date(+e),null==n?1:Math.floor(n)),e},r.range=function(n,a,i){var c,o=[];if(n=r.ceil(n),i=null==i?1:Math.floor(i),!(n<a&&i>0))return o;do{o.push(c=new Date(+n)),t(n,i),e(n)}while(c<n&&n<a);return o},r.filter=function(n){return Yt(function(t){if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)},function(e,a){if(e>=e)if(a<0)for(;++a<=0;)for(;t(e,-1),!n(e););else for(;--a>=0;)for(;t(e,1),!n(e););})},n&&(r.count=function(t,a){return Pt.setTime(+t),Ut.setTime(+a),e(Pt),e(Ut),Math.floor(n(Pt,Ut))},r.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?r.filter(a?function(t){return a(t)%e==0}:function(t){return r.count(0,t)%e==0}):r:null}),r}var Bt=Yt(function(){},function(e,t){e.setTime(+e+t)},function(e,t){return t-e});Bt.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?Yt(function(t){t.setTime(Math.floor(t/e)*e)},function(t,n){t.setTime(+t+n*e)},function(t,n){return(n-t)/e}):Bt:null};var Ft=6e4,It=6048e5,Rt=(Yt(function(e){e.setTime(1e3*Math.floor(e/1e3))},function(e,t){e.setTime(+e+1e3*t)},function(e,t){return(t-e)/1e3},function(e){return e.getUTCSeconds()}),Yt(function(e){e.setTime(Math.floor(e/Ft)*Ft)},function(e,t){e.setTime(+e+t*Ft)},function(e,t){return(t-e)/Ft},function(e){return e.getMinutes()}),Yt(function(e){var t=e.getTimezoneOffset()*Ft%36e5;t<0&&(t+=36e5),e.setTime(36e5*Math.floor((+e-t)/36e5)+t)},function(e,t){e.setTime(+e+36e5*t)},function(e,t){return(t-e)/36e5},function(e){return e.getHours()}),Yt(function(e){e.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*Ft)/864e5},function(e){return e.getDate()-1}));function Ot(e){return Yt(function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+7*t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*Ft)/It})}var jt=Ot(0),Gt=Ot(1),Vt=(Ot(2),Ot(3),Ot(4)),Ht=(Ot(5),Ot(6),Yt(function(e){e.setDate(1),e.setHours(0,0,0,0)},function(e,t){e.setMonth(e.getMonth()+t)},function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())},function(e){return e.getMonth()}),Yt(function(e){e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,t){e.setFullYear(e.getFullYear()+t)},function(e,t){return t.getFullYear()-e.getFullYear()},function(e){return e.getFullYear()}));Ht.every=function(e){return isFinite(e=Math.floor(e))&&e>0?Yt(function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n*e)}):null};Yt(function(e){e.setUTCSeconds(0,0)},function(e,t){e.setTime(+e+t*Ft)},function(e,t){return(t-e)/Ft},function(e){return e.getUTCMinutes()}),Yt(function(e){e.setUTCMinutes(0,0,0)},function(e,t){e.setTime(+e+36e5*t)},function(e,t){return(t-e)/36e5},function(e){return e.getUTCHours()});var Xt=Yt(function(e){e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+t)},function(e,t){return(t-e)/864e5},function(e){return e.getUTCDate()-1});function zt(e){return Yt(function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+7*t)},function(e,t){return(t-e)/It})}var qt=zt(0),Qt=zt(1),Zt=(zt(2),zt(3),zt(4)),Wt=(zt(5),zt(6),Yt(function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCMonth(e.getUTCMonth()+t)},function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())},function(e){return e.getUTCMonth()}),Yt(function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)},function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()},function(e){return e.getUTCFullYear()}));function Kt(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function Jt(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function en(e){return{y:e,m:0,d:1,H:0,M:0,S:0,L:0}}Wt.every=function(e){return isFinite(e=Math.floor(e))&&e>0?Yt(function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)}):null};var tn,nn,an,rn={"-":"",_:" ",0:"0"},cn=/^\s*\d+/,on=/^%/,fn=/[\\^$*+?|[\]().{}]/g;function un(e,t,n){var a=e<0?"-":"",r=(a?-e:e)+"",i=r.length;return a+(i<n?new Array(n-i+1).join(t)+r:r)}function ln(e){return e.replace(fn,"\\$&")}function sn(e){return new RegExp("^(?:"+e.map(ln).join("|")+")","i")}function dn(e){for(var t={},n=-1,a=e.length;++n<a;)t[e[n].toLowerCase()]=n;return t}function hn(e,t,n){var a=cn.exec(t.slice(n,n+1));return a?(e.w=+a[0],n+a[0].length):-1}function bn(e,t,n){var a=cn.exec(t.slice(n,n+1));return a?(e.u=+a[0],n+a[0].length):-1}function pn(e,t,n){var a=cn.exec(t.slice(n,n+2));return a?(e.U=+a[0],n+a[0].length):-1}function gn(e,t,n){var a=cn.exec(t.slice(n,n+2));return a?(e.V=+a[0],n+a[0].length):-1}function mn(e,t,n){var a=cn.exec(t.slice(n,n+2));return a?(e.W=+a[0],n+a[0].length):-1}function yn(e,t,n){var a=cn.exec(t.slice(n,n+4));return a?(e.y=+a[0],n+a[0].length):-1}function vn(e,t,n){var a=cn.exec(t.slice(n,n+2));return a?(e.y=+a[0]+(+a[0]>68?1900:2e3),n+a[0].length):-1}function wn(e,t,n){var a=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return a?(e.Z=a[1]?0:-(a[2]+(a[3]||"00")),n+a[0].length):-1}function xn(e,t,n){var a=cn.exec(t.slice(n,n+2));return a?(e.m=a[0]-1,n+a[0].length):-1}function _n(e,t,n){var a=cn.exec(t.slice(n,n+2));return a?(e.d=+a[0],n+a[0].length):-1}function Mn(e,t,n){var a=cn.exec(t.slice(n,n+3));return a?(e.m=0,e.d=+a[0],n+a[0].length):-1}function Sn(e,t,n){var a=cn.exec(t.slice(n,n+2));return a?(e.H=+a[0],n+a[0].length):-1}function Tn(e,t,n){var a=cn.exec(t.slice(n,n+2));return a?(e.M=+a[0],n+a[0].length):-1}function An(e,t,n){var a=cn.exec(t.slice(n,n+2));return a?(e.S=+a[0],n+a[0].length):-1}function Cn(e,t,n){var a=cn.exec(t.slice(n,n+3));return a?(e.L=+a[0],n+a[0].length):-1}function Nn(e,t,n){var a=cn.exec(t.slice(n,n+6));return a?(e.L=Math.floor(a[0]/1e3),n+a[0].length):-1}function kn(e,t,n){var a=on.exec(t.slice(n,n+1));return a?n+a[0].length:-1}function $n(e,t,n){var a=cn.exec(t.slice(n));return a?(e.Q=+a[0],n+a[0].length):-1}function Ln(e,t,n){var a=cn.exec(t.slice(n));return a?(e.Q=1e3*+a[0],n+a[0].length):-1}function En(e,t){return un(e.getDate(),t,2)}function Dn(e,t){return un(e.getHours(),t,2)}function Pn(e,t){return un(e.getHours()%12||12,t,2)}function Un(e,t){return un(1+Rt.count(Ht(e),e),t,3)}function Yn(e,t){return un(e.getMilliseconds(),t,3)}function Bn(e,t){return Yn(e,t)+"000"}function Fn(e,t){return un(e.getMonth()+1,t,2)}function In(e,t){return un(e.getMinutes(),t,2)}function Rn(e,t){return un(e.getSeconds(),t,2)}function On(e){var t=e.getDay();return 0===t?7:t}function jn(e,t){return un(jt.count(Ht(e),e),t,2)}function Gn(e,t){var n=e.getDay();return e=n>=4||0===n?Vt(e):Vt.ceil(e),un(Vt.count(Ht(e),e)+(4===Ht(e).getDay()),t,2)}function Vn(e){return e.getDay()}function Hn(e,t){return un(Gt.count(Ht(e),e),t,2)}function Xn(e,t){return un(e.getFullYear()%100,t,2)}function zn(e,t){return un(e.getFullYear()%1e4,t,4)}function qn(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+un(t/60|0,"0",2)+un(t%60,"0",2)}function Qn(e,t){return un(e.getUTCDate(),t,2)}function Zn(e,t){return un(e.getUTCHours(),t,2)}function Wn(e,t){return un(e.getUTCHours()%12||12,t,2)}function Kn(e,t){return un(1+Xt.count(Wt(e),e),t,3)}function Jn(e,t){return un(e.getUTCMilliseconds(),t,3)}function ea(e,t){return Jn(e,t)+"000"}function ta(e,t){return un(e.getUTCMonth()+1,t,2)}function na(e,t){return un(e.getUTCMinutes(),t,2)}function aa(e,t){return un(e.getUTCSeconds(),t,2)}function ra(e){var t=e.getUTCDay();return 0===t?7:t}function ia(e,t){return un(qt.count(Wt(e),e),t,2)}function ca(e,t){var n=e.getUTCDay();return e=n>=4||0===n?Zt(e):Zt.ceil(e),un(Zt.count(Wt(e),e)+(4===Wt(e).getUTCDay()),t,2)}function oa(e){return e.getUTCDay()}function fa(e,t){return un(Qt.count(Wt(e),e),t,2)}function ua(e,t){return un(e.getUTCFullYear()%100,t,2)}function la(e,t){return un(e.getUTCFullYear()%1e4,t,4)}function sa(){return"+0000"}function da(){return"%"}function ha(e){return+e}function ba(e){return Math.floor(+e/1e3)}!function(e){tn=function(e){var t=e.dateTime,n=e.date,a=e.time,r=e.periods,i=e.days,c=e.shortDays,o=e.months,f=e.shortMonths,u=sn(r),l=dn(r),s=sn(i),d=dn(i),h=sn(c),b=dn(c),p=sn(o),g=dn(o),m=sn(f),y=dn(f),v={a:function(e){return c[e.getDay()]},A:function(e){return i[e.getDay()]},b:function(e){return f[e.getMonth()]},B:function(e){return o[e.getMonth()]},c:null,d:En,e:En,f:Bn,H:Dn,I:Pn,j:Un,L:Yn,m:Fn,M:In,p:function(e){return r[+(e.getHours()>=12)]},Q:ha,s:ba,S:Rn,u:On,U:jn,V:Gn,w:Vn,W:Hn,x:null,X:null,y:Xn,Y:zn,Z:qn,"%":da},w={a:function(e){return c[e.getUTCDay()]},A:function(e){return i[e.getUTCDay()]},b:function(e){return f[e.getUTCMonth()]},B:function(e){return o[e.getUTCMonth()]},c:null,d:Qn,e:Qn,f:ea,H:Zn,I:Wn,j:Kn,L:Jn,m:ta,M:na,p:function(e){return r[+(e.getUTCHours()>=12)]},Q:ha,s:ba,S:aa,u:ra,U:ia,V:ca,w:oa,W:fa,x:null,X:null,y:ua,Y:la,Z:sa,"%":da},x={a:function(e,t,n){var a=h.exec(t.slice(n));return a?(e.w=b[a[0].toLowerCase()],n+a[0].length):-1},A:function(e,t,n){var a=s.exec(t.slice(n));return a?(e.w=d[a[0].toLowerCase()],n+a[0].length):-1},b:function(e,t,n){var a=m.exec(t.slice(n));return a?(e.m=y[a[0].toLowerCase()],n+a[0].length):-1},B:function(e,t,n){var a=p.exec(t.slice(n));return a?(e.m=g[a[0].toLowerCase()],n+a[0].length):-1},c:function(e,n,a){return S(e,t,n,a)},d:_n,e:_n,f:Nn,H:Sn,I:Sn,j:Mn,L:Cn,m:xn,M:Tn,p:function(e,t,n){var a=u.exec(t.slice(n));return a?(e.p=l[a[0].toLowerCase()],n+a[0].length):-1},Q:$n,s:Ln,S:An,u:bn,U:pn,V:gn,w:hn,W:mn,x:function(e,t,a){return S(e,n,t,a)},X:function(e,t,n){return S(e,a,t,n)},y:vn,Y:yn,Z:wn,"%":kn};function _(e,t){return function(n){var a,r,i,c=[],o=-1,f=0,u=e.length;for(n instanceof Date||(n=new Date(+n));++o<u;)37===e.charCodeAt(o)&&(c.push(e.slice(f,o)),null!=(r=rn[a=e.charAt(++o)])?a=e.charAt(++o):r="e"===a?" ":"0",(i=t[a])&&(a=i(n,r)),c.push(a),f=o+1);return c.push(e.slice(f,o)),c.join("")}}function M(e,t){return function(n){var a,r,i=en(1900);if(S(i,e,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=(a=Jt(en(i.y))).getUTCDay())>4||0===r?Qt.ceil(a):Qt(a),a=Xt.offset(a,7*(i.V-1)),i.y=a.getUTCFullYear(),i.m=a.getUTCMonth(),i.d=a.getUTCDate()+(i.w+6)%7):(a=(r=(a=t(en(i.y))).getDay())>4||0===r?Gt.ceil(a):Gt(a),a=Rt.offset(a,7*(i.V-1)),i.y=a.getFullYear(),i.m=a.getMonth(),i.d=a.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),r="Z"in i?Jt(en(i.y)).getUTCDay():t(en(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(r+5)%7:i.w+7*i.U-(r+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Jt(i)):t(i)}}function S(e,t,n,a){for(var r,i,c=0,o=t.length,f=n.length;c<o;){if(a>=f)return-1;if(37===(r=t.charCodeAt(c++))){if(r=t.charAt(c++),!(i=x[r in rn?t.charAt(c++):r])||(a=i(e,n,a))<0)return-1}else if(r!=n.charCodeAt(a++))return-1}return a}return v.x=_(n,v),v.X=_(a,v),v.c=_(t,v),w.x=_(n,w),w.X=_(a,w),w.c=_(t,w),{format:function(e){var t=_(e+="",v);return t.toString=function(){return e},t},parse:function(e){var t=M(e+="",Kt);return t.toString=function(){return e},t},utcFormat:function(e){var t=_(e+="",w);return t.toString=function(){return e},t},utcParse:function(e){var t=M(e,Jt);return t.toString=function(){return e},t}}}(e),nn=tn.utcFormat,an=tn.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||nn("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||an("%Y-%m-%dT%H:%M:%S.%LZ");class pa{constructor(e,t,n=1e6){this.data=e,this.center=t,this.window=n,this.scale=void 0,this.tooltip=void 0}render(e,t=1500,n=200,a=!1,r=!0,i="#ffffff",c="Track"){let o=[0,t],f=[this.center-this.window,this.center+this.window];this.scale=function e(){var t=pt(st,Ve);return t.copy=function(){return bt(t,e())},Lt(t)}().rangeRound(o).domain(f);let u=e.append("g");u.append("rect").attr("x",0).attr("y",n/2).attr("width",t).attr("height",10).style("fill",i).style("stroke","#ababab").style("stroke-width",1);const l=(e,t)=>{if(0==r)return 0;let n=5;if(t>0){let a=this.data[t-1];if(a.strand!=e.strand)return n;this.scale(e.start-a.start)+1<=10&&(n=t%2?n+60:n+30)}return n};u.selectAll(".minibrowser-feature").data(this.data).enter().append("rect").attr("class","minibrowser-feature").attr("x",e=>this.scale(e.start)).attr("y",(e,t)=>{let r=n/2,i=a?Math.abs(this.scale(e.start)-this.scale(e.end)+1):0;return"+"==e.strand?r-i-l(e,t):r}).attr("width",1).attr("height",(e,t)=>{return 10+l(e,t)+(a?Math.abs(this.scale(e.start)-this.scale(e.end)+1):0)}).style("fill",e=>e.start==this.center?"red":"#ababab");if(u.append("text").attr("x",-10).attr("y",n/2+5).style("font-size","9px").style("text-anchor","end").text(c),0==r)return;u.selectAll(".minibrowser-feature-label").data(this.data).enter().append("text").attr("class",(e,t)=>".minibrowser-feature-label").attr("x",0).attr("y",0).style("font-size",e=>e.start==this.center?"12px":"9px").style("fill",e=>e.start==this.center?"red":"black").attr("transform",(e,t)=>{let r="+"==e.strad?this.scale(e.start):this.scale(e.start)-5,i=n/2,c="+"==e.strand?l(e,t):l(e,t)+5,o=a?Math.abs(this.scale(e.start)-this.scale(e.end)+1):0;return`translate(${r}, ${i="+"==e.strand?i-o-c:i+10+o+c}) rotate(${"+"==e.strand?-45:45})`}).text(e=>e.featureLabel)}}var ga="http://www.w3.org/1999/xhtml",ma={svg:"http://www.w3.org/2000/svg",xhtml:ga,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},ya=function(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),ma.hasOwnProperty(t)?{space:ma[t],local:e}:e};var va=function(e){var t=ya(e);return(t.local?function(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}:function(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===ga&&t.documentElement.namespaceURI===ga?t.createElement(e):t.createElementNS(n,e)}})(t)};function wa(){}var xa=function(e){return null==e?wa:function(){return this.querySelector(e)}};function _a(){return[]}var Ma=function(e){return null==e?_a:function(){return this.querySelectorAll(e)}},Sa=function(e){return function(){return this.matches(e)}};if("undefined"!=typeof document){var Ta=document.documentElement;if(!Ta.matches){var Aa=Ta.webkitMatchesSelector||Ta.msMatchesSelector||Ta.mozMatchesSelector||Ta.oMatchesSelector;Sa=function(e){return function(){return Aa.call(this,e)}}}}var Ca=Sa,Na=function(e){return new Array(e.length)};function ka(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}ka.prototype={constructor:ka,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};var $a="$";function La(e,t,n,a,r,i){for(var c,o=0,f=t.length,u=i.length;o<u;++o)(c=t[o])?(c.__data__=i[o],a[o]=c):n[o]=new ka(e,i[o]);for(;o<f;++o)(c=t[o])&&(r[o]=c)}function Ea(e,t,n,a,r,i,c){var o,f,u,l={},s=t.length,d=i.length,h=new Array(s);for(o=0;o<s;++o)(f=t[o])&&(h[o]=u=$a+c.call(f,f.__data__,o,t),u in l?r[o]=f:l[u]=f);for(o=0;o<d;++o)(f=l[u=$a+c.call(e,i[o],o,i)])?(a[o]=f,f.__data__=i[o],l[u]=null):n[o]=new ka(e,i[o]);for(o=0;o<s;++o)(f=t[o])&&l[h[o]]===f&&(r[o]=f)}function Da(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}var Pa=function(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView};function Ua(e,t){return e.style.getPropertyValue(t)||Pa(e).getComputedStyle(e,null).getPropertyValue(t)}function Ya(e){return e.trim().split(/^|\s+/)}function Ba(e){return e.classList||new Fa(e)}function Fa(e){this._node=e,this._names=Ya(e.getAttribute("class")||"")}function Ia(e,t){for(var n=Ba(e),a=-1,r=t.length;++a<r;)n.add(t[a])}function Ra(e,t){for(var n=Ba(e),a=-1,r=t.length;++a<r;)n.remove(t[a])}Fa.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};function Oa(){this.textContent=""}function ja(){this.innerHTML=""}function Ga(){this.nextSibling&&this.parentNode.appendChild(this)}function Va(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Ha(){return null}function Xa(){var e=this.parentNode;e&&e.removeChild(this)}function za(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function qa(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Qa={},Za=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Qa={mouseenter:"mouseover",mouseleave:"mouseout"}));function Wa(e,t,n){return e=Ka(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function Ka(e,t,n){return function(a){var r=Za;Za=a;try{e.call(this,this.__data__,t,n)}finally{Za=r}}}function Ja(e){return function(){var t=this.__on;if(t){for(var n,a=0,r=-1,i=t.length;a<i;++a)n=t[a],e.type&&n.type!==e.type||n.name!==e.name?t[++r]=n:this.removeEventListener(n.type,n.listener,n.capture);++r?t.length=r:delete this.__on}}}function er(e,t,n){var a=Qa.hasOwnProperty(e.type)?Wa:Ka;return function(r,i,c){var o,f=this.__on,u=a(t,i,c);if(f)for(var l=0,s=f.length;l<s;++l)if((o=f[l]).type===e.type&&o.name===e.name)return this.removeEventListener(o.type,o.listener,o.capture),this.addEventListener(o.type,o.listener=u,o.capture=n),void(o.value=t);this.addEventListener(e.type,u,n),o={type:e.type,name:e.name,value:t,listener:u,capture:n},f?f.push(o):this.__on=[o]}}function tr(e,t,n){var a=Pa(e),r=a.CustomEvent;"function"==typeof r?r=new r(t,n):(r=a.document.createEvent("Event"),n?(r.initEvent(t,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(t,!1,!1)),e.dispatchEvent(r)}var nr=[null];function ar(e,t){this._groups=e,this._parents=t}function rr(){return new ar([[document.documentElement]],nr)}ar.prototype=rr.prototype={constructor:ar,select:function(e){"function"!=typeof e&&(e=xa(e));for(var t=this._groups,n=t.length,a=new Array(n),r=0;r<n;++r)for(var i,c,o=t[r],f=o.length,u=a[r]=new Array(f),l=0;l<f;++l)(i=o[l])&&(c=e.call(i,i.__data__,l,o))&&("__data__"in i&&(c.__data__=i.__data__),u[l]=c);return new ar(a,this._parents)},selectAll:function(e){"function"!=typeof e&&(e=Ma(e));for(var t=this._groups,n=t.length,a=[],r=[],i=0;i<n;++i)for(var c,o=t[i],f=o.length,u=0;u<f;++u)(c=o[u])&&(a.push(e.call(c,c.__data__,u,o)),r.push(c));return new ar(a,r)},filter:function(e){"function"!=typeof e&&(e=Ca(e));for(var t=this._groups,n=t.length,a=new Array(n),r=0;r<n;++r)for(var i,c=t[r],o=c.length,f=a[r]=[],u=0;u<o;++u)(i=c[u])&&e.call(i,i.__data__,u,c)&&f.push(i);return new ar(a,this._parents)},data:function(e,t){if(!e)return b=new Array(this.size()),l=-1,this.each(function(e){b[++l]=e}),b;var n,a=t?Ea:La,r=this._parents,i=this._groups;"function"!=typeof e&&(n=e,e=function(){return n});for(var c=i.length,o=new Array(c),f=new Array(c),u=new Array(c),l=0;l<c;++l){var s=r[l],d=i[l],h=d.length,b=e.call(s,s&&s.__data__,l,r),p=b.length,g=f[l]=new Array(p),m=o[l]=new Array(p);a(s,d,g,m,u[l]=new Array(h),b,t);for(var y,v,w=0,x=0;w<p;++w)if(y=g[w]){for(w>=x&&(x=w+1);!(v=m[x])&&++x<p;);y._next=v||null}}return(o=new ar(o,r))._enter=f,o._exit=u,o},enter:function(){return new ar(this._enter||this._groups.map(Na),this._parents)},exit:function(){return new ar(this._exit||this._groups.map(Na),this._parents)},merge:function(e){for(var t=this._groups,n=e._groups,a=t.length,r=n.length,i=Math.min(a,r),c=new Array(a),o=0;o<i;++o)for(var f,u=t[o],l=n[o],s=u.length,d=c[o]=new Array(s),h=0;h<s;++h)(f=u[h]||l[h])&&(d[h]=f);for(;o<a;++o)c[o]=t[o];return new ar(c,this._parents)},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var a,r=e[t],i=r.length-1,c=r[i];--i>=0;)(a=r[i])&&(c&&c!==a.nextSibling&&c.parentNode.insertBefore(a,c),c=a);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=Da);for(var n=this._groups,a=n.length,r=new Array(a),i=0;i<a;++i){for(var c,o=n[i],f=o.length,u=r[i]=new Array(f),l=0;l<f;++l)(c=o[l])&&(u[l]=c);u.sort(t)}return new ar(r,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){var e=new Array(this.size()),t=-1;return this.each(function(){e[++t]=this}),e},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var a=e[t],r=0,i=a.length;r<i;++r){var c=a[r];if(c)return c}return null},size:function(){var e=0;return this.each(function(){++e}),e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,a=t.length;n<a;++n)for(var r,i=t[n],c=0,o=i.length;c<o;++c)(r=i[c])&&e.call(r,r.__data__,c,i);return this},attr:function(e,t){var n=ya(e);if(arguments.length<2){var a=this.node();return n.local?a.getAttributeNS(n.space,n.local):a.getAttribute(n)}return this.each((null==t?n.local?function(e){return function(){this.removeAttributeNS(e.space,e.local)}}:function(e){return function(){this.removeAttribute(e)}}:"function"==typeof t?n.local?function(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}:function(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}:n.local?function(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}:function(e,t){return function(){this.setAttribute(e,t)}})(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?function(e){return function(){this.style.removeProperty(e)}}:"function"==typeof t?function(e,t,n){return function(){var a=t.apply(this,arguments);null==a?this.style.removeProperty(e):this.style.setProperty(e,a,n)}}:function(e,t,n){return function(){this.style.setProperty(e,t,n)}})(e,t,null==n?"":n)):Ua(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?function(e){return function(){delete this[e]}}:"function"==typeof t?function(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}:function(e,t){return function(){this[e]=t}})(e,t)):this.node()[e]},classed:function(e,t){var n=Ya(e+"");if(arguments.length<2){for(var a=Ba(this.node()),r=-1,i=n.length;++r<i;)if(!a.contains(n[r]))return!1;return!0}return this.each(("function"==typeof t?function(e,t){return function(){(t.apply(this,arguments)?Ia:Ra)(this,e)}}:t?function(e){return function(){Ia(this,e)}}:function(e){return function(){Ra(this,e)}})(n,t))},text:function(e){return arguments.length?this.each(null==e?Oa:("function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}:function(e){return function(){this.textContent=e}})(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?ja:("function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}:function(e){return function(){this.innerHTML=e}})(e)):this.node().innerHTML},raise:function(){return this.each(Ga)},lower:function(){return this.each(Va)},append:function(e){var t="function"==typeof e?e:va(e);return this.select(function(){return this.appendChild(t.apply(this,arguments))})},insert:function(e,t){var n="function"==typeof e?e:va(e),a=null==t?Ha:"function"==typeof t?t:xa(t);return this.select(function(){return this.insertBefore(n.apply(this,arguments),a.apply(this,arguments)||null)})},remove:function(){return this.each(Xa)},clone:function(e){return this.select(e?qa:za)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var a,r,i=function(e){return e.trim().split(/^|\s+/).map(function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}})}(e+""),c=i.length;if(!(arguments.length<2)){for(o=t?er:Ja,null==n&&(n=!1),a=0;a<c;++a)this.each(o(i[a],t,n));return this}var o=this.node().__on;if(o)for(var f,u=0,l=o.length;u<l;++u)for(a=0,f=o[u];a<c;++a)if((r=i[a]).type===f.type&&r.name===f.name)return f.value},dispatch:function(e,t){return this.each(("function"==typeof t?function(e,t){return function(){return tr(this,e,t.apply(this,arguments))}}:function(e,t){return function(){return tr(this,e,t)}})(e,t))}};var ir=function(e){return"string"==typeof e?new ar([[document.querySelector(e)]],[document.documentElement]):new ar([[e]],nr)},cr=function(){for(var e,t=Za;e=t.sourceEvent;)t=e;return t},or=function(e){var t=cr();return t.changedTouches&&(t=t.changedTouches[0]),function(e,t){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var a=n.createSVGPoint();return a.x=t.clientX,a.y=t.clientY,[(a=a.matrixTransform(e.getScreenCTM().inverse())).x,a.y]}var r=e.getBoundingClientRect();return[t.clientX-r.left-e.clientLeft,t.clientY-r.top-e.clientTop]}(e,t)},fr=function(e){return"string"==typeof e?new ar([document.querySelectorAll(e)],[document.documentElement]):new ar([null==e?[]:e],nr)},ur={value:function(){}};function lr(){for(var e,t=0,n=arguments.length,a={};t<n;++t){if(!(e=arguments[t]+"")||e in a)throw new Error("illegal type: "+e);a[e]=[]}return new sr(a)}function sr(e){this._=e}function dr(e,t){for(var n,a=0,r=e.length;a<r;++a)if((n=e[a]).name===t)return n.value}function hr(e,t,n){for(var a=0,r=e.length;a<r;++a)if(e[a].name===t){e[a]=ur,e=e.slice(0,a).concat(e.slice(a+1));break}return null!=n&&e.push({name:t,value:n}),e}sr.prototype=lr.prototype={constructor:sr,on:function(e,t){var n,a,r=this._,i=(a=r,(e+"").trim().split(/^|\s+/).map(function(e){var t="",n=e.indexOf(".");if(n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),e&&!a.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:t}})),c=-1,o=i.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++c<o;)if(n=(e=i[c]).type)r[n]=hr(r[n],e.name,t);else if(null==t)for(n in r)r[n]=hr(r[n],e.name,null);return this}for(;++c<o;)if((n=(e=i[c]).type)&&(n=dr(r[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new sr(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,a,r=new Array(n),i=0;i<n;++i)r[i]=arguments[i+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(i=0,n=(a=this._[e]).length;i<n;++i)a[i].value.apply(t,r)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var a=this._[e],r=0,i=a.length;r<i;++r)a[r].value.apply(t,n)}};var br,pr,gr=0,mr=0,yr=0,vr=1e3,wr=0,xr=0,_r=0,Mr="object"==typeof performance&&performance.now?performance:Date,Sr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function Tr(){return xr||(Sr(Ar),xr=Mr.now()+_r)}function Ar(){xr=0}function Cr(){this._call=this._time=this._next=null}function Nr(e,t,n){var a=new Cr;return a.restart(e,t,n),a}function kr(){xr=(wr=Mr.now())+_r,gr=mr=0;try{!function(){Tr(),++gr;for(var e,t=br;t;)(e=xr-t._time)>=0&&t._call.call(null,e),t=t._next;--gr}()}finally{gr=0,function(){var e,t,n=br,a=1/0;for(;n;)n._call?(a>n._time&&(a=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:br=t);pr=e,Lr(a)}(),xr=0}}function $r(){var e=Mr.now(),t=e-wr;t>vr&&(_r-=t,wr=e)}function Lr(e){gr||(mr&&(mr=clearTimeout(mr)),e-xr>24?(e<1/0&&(mr=setTimeout(kr,e-Mr.now()-_r)),yr&&(yr=clearInterval(yr))):(yr||(wr=Mr.now(),yr=setInterval($r,vr)),gr=1,Sr(kr)))}Cr.prototype=Nr.prototype={constructor:Cr,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?Tr():+n)+(null==t?0:+t),this._next||pr===this||(pr?pr._next=this:br=this,pr=this),this._call=e,this._time=n,Lr()},stop:function(){this._call&&(this._call=null,this._time=1/0,Lr())}};var Er=function(e,t,n){var a=new Cr;return t=null==t?0:+t,a.restart(function(n){a.stop(),e(n+t)},t,n),a},Dr=lr("start","end","interrupt"),Pr=[],Ur=0,Yr=1,Br=2,Fr=3,Ir=4,Rr=5,Or=6,jr=function(e,t,n,a,r,i){var c=e.__transition;if(c){if(n in c)return}else e.__transition={};!function(e,t,n){var a,r=e.__transition;function i(f){var u,l,s,d;if(n.state!==Yr)return o();for(u in r)if((d=r[u]).name===n.name){if(d.state===Fr)return Er(i);d.state===Ir?(d.state=Or,d.timer.stop(),d.on.call("interrupt",e,e.__data__,d.index,d.group),delete r[u]):+u<t&&(d.state=Or,d.timer.stop(),delete r[u])}if(Er(function(){n.state===Fr&&(n.state=Ir,n.timer.restart(c,n.delay,n.time),c(f))}),n.state=Br,n.on.call("start",e,e.__data__,n.index,n.group),n.state===Br){for(n.state=Fr,a=new Array(s=n.tween.length),u=0,l=-1;u<s;++u)(d=n.tween[u].value.call(e,e.__data__,n.index,n.group))&&(a[++l]=d);a.length=l+1}}function c(t){for(var r=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(o),n.state=Rr,1),i=-1,c=a.length;++i<c;)a[i].call(null,r);n.state===Rr&&(n.on.call("end",e,e.__data__,n.index,n.group),o())}function o(){for(var a in n.state=Or,n.timer.stop(),delete r[t],r)return;delete e.__transition}r[t]=n,n.timer=Nr(function(e){n.state=Yr,n.timer.restart(i,n.delay,n.time),n.delay<=e&&i(e-n.delay)},0,n.time)}(e,n,{name:t,index:a,group:r,on:Dr,tween:Pr,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:Ur})};function Gr(e,t){var n=Hr(e,t);if(n.state>Ur)throw new Error("too late; already scheduled");return n}function Vr(e,t){var n=Hr(e,t);if(n.state>Br)throw new Error("too late; already started");return n}function Hr(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}var Xr=function(e,t){var n,a,r,i=e.__transition,c=!0;if(i){for(r in t=null==t?null:t+"",i)(n=i[r]).name===t?(a=n.state>Br&&n.state<Rr,n.state=Or,n.timer.stop(),a&&n.on.call("interrupt",e,e.__data__,n.index,n.group),delete i[r]):c=!1;c&&delete e.__transition}};function zr(e,t,n){var a=e._id;return e.each(function(){var e=Vr(this,a);(e.value||(e.value={}))[t]=n.apply(this,arguments)}),function(e){return Hr(e,a).value[t]}}var qr=function(e,t){var n;return("number"==typeof t?Ve:t instanceof ee?Oe:(n=ee(t))?(t=n,Oe):We)(e,t)};var Qr=rr.prototype.constructor;var Zr=0;function Wr(e,t,n,a){this._groups=e,this._parents=t,this._name=n,this._id=a}function Kr(){return++Zr}var Jr=rr.prototype;Wr.prototype=function(e){return rr().transition(e)}.prototype={constructor:Wr,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=xa(e));for(var a=this._groups,r=a.length,i=new Array(r),c=0;c<r;++c)for(var o,f,u=a[c],l=u.length,s=i[c]=new Array(l),d=0;d<l;++d)(o=u[d])&&(f=e.call(o,o.__data__,d,u))&&("__data__"in o&&(f.__data__=o.__data__),s[d]=f,jr(s[d],t,n,d,s,Hr(o,n)));return new Wr(i,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Ma(e));for(var a=this._groups,r=a.length,i=[],c=[],o=0;o<r;++o)for(var f,u=a[o],l=u.length,s=0;s<l;++s)if(f=u[s]){for(var d,h=e.call(f,f.__data__,s,u),b=Hr(f,n),p=0,g=h.length;p<g;++p)(d=h[p])&&jr(d,t,n,p,h,b);i.push(h),c.push(f)}return new Wr(i,c,t,n)},filter:function(e){"function"!=typeof e&&(e=Ca(e));for(var t=this._groups,n=t.length,a=new Array(n),r=0;r<n;++r)for(var i,c=t[r],o=c.length,f=a[r]=[],u=0;u<o;++u)(i=c[u])&&e.call(i,i.__data__,u,c)&&f.push(i);return new Wr(a,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,a=t.length,r=n.length,i=Math.min(a,r),c=new Array(a),o=0;o<i;++o)for(var f,u=t[o],l=n[o],s=u.length,d=c[o]=new Array(s),h=0;h<s;++h)(f=u[h]||l[h])&&(d[h]=f);for(;o<a;++o)c[o]=t[o];return new Wr(c,this._parents,this._name,this._id)},selection:function(){return new Qr(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=Kr(),a=this._groups,r=a.length,i=0;i<r;++i)for(var c,o=a[i],f=o.length,u=0;u<f;++u)if(c=o[u]){var l=Hr(c,t);jr(c,e,n,u,o,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Wr(a,this._parents,e,n)},call:Jr.call,nodes:Jr.nodes,node:Jr.node,size:Jr.size,empty:Jr.empty,each:Jr.each,on:function(e,t){var n=this._id;return arguments.length<2?Hr(this.node(),n).on.on(e):this.each(function(e,t,n){var a,r,i=function(e){return(e+"").trim().split(/^|\s+/).every(function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e})}(t)?Gr:Vr;return function(){var c=i(this,e),o=c.on;o!==a&&(r=(a=o).copy()).on(t,n),c.on=r}}(n,e,t))},attr:function(e,t){var n=ya(e),a="transform"===n?it:qr;return this.attrTween(e,"function"==typeof t?(n.local?function(e,t,n){var a,r,i;return function(){var c,o=n(this);if(null!=o)return(c=this.getAttributeNS(e.space,e.local))===o?null:c===a&&o===r?i:i=t(a=c,r=o);this.removeAttributeNS(e.space,e.local)}}:function(e,t,n){var a,r,i;return function(){var c,o=n(this);if(null!=o)return(c=this.getAttribute(e))===o?null:c===a&&o===r?i:i=t(a=c,r=o);this.removeAttribute(e)}})(n,a,zr(this,"attr."+e,t)):null==t?(n.local?function(e){return function(){this.removeAttributeNS(e.space,e.local)}}:function(e){return function(){this.removeAttribute(e)}})(n):(n.local?function(e,t,n){var a,r;return function(){var i=this.getAttributeNS(e.space,e.local);return i===n?null:i===a?r:r=t(a=i,n)}}:function(e,t,n){var a,r;return function(){var i=this.getAttribute(e);return i===n?null:i===a?r:r=t(a=i,n)}})(n,a,t+""))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var a=ya(e);return this.tween(n,(a.local?function(e,t){function n(){var n=this,a=t.apply(n,arguments);return a&&function(t){n.setAttributeNS(e.space,e.local,a(t))}}return n._value=t,n}:function(e,t){function n(){var n=this,a=t.apply(n,arguments);return a&&function(t){n.setAttribute(e,a(t))}}return n._value=t,n})(a,t))},style:function(e,t,n){var a="transform"==(e+="")?rt:qr;return null==t?this.styleTween(e,function(e,t){var n,a,r;return function(){var i=Ua(this,e),c=(this.style.removeProperty(e),Ua(this,e));return i===c?null:i===n&&c===a?r:r=t(n=i,a=c)}}(e,a)).on("end.style."+e,function(e){return function(){this.style.removeProperty(e)}}(e)):this.styleTween(e,"function"==typeof t?function(e,t,n){var a,r,i;return function(){var c=Ua(this,e),o=n(this);return null==o&&(this.style.removeProperty(e),o=Ua(this,e)),c===o?null:c===a&&o===r?i:i=t(a=c,r=o)}}(e,a,zr(this,"style."+e,t)):function(e,t,n){var a,r;return function(){var i=Ua(this,e);return i===n?null:i===a?r:r=t(a=i,n)}}(e,a,t+""),n)},styleTween:function(e,t,n){var a="style."+(e+="");if(arguments.length<2)return(a=this.tween(a))&&a._value;if(null==t)return this.tween(a,null);if("function"!=typeof t)throw new Error;return this.tween(a,function(e,t,n){function a(){var a=this,r=t.apply(a,arguments);return r&&function(t){a.style.setProperty(e,r(t),n)}}return a._value=t,a}(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(zr(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},remove:function(){return this.on("end.remove",(e=this._id,function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}));var e},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var a,r=Hr(this.node(),n).tween,i=0,c=r.length;i<c;++i)if((a=r[i]).name===e)return a.value;return null}return this.each((null==t?function(e,t){var n,a;return function(){var r=Vr(this,e),i=r.tween;if(i!==n)for(var c=0,o=(a=n=i).length;c<o;++c)if(a[c].name===t){(a=a.slice()).splice(c,1);break}r.tween=a}}:function(e,t,n){var a,r;if("function"!=typeof n)throw new Error;return function(){var i=Vr(this,e),c=i.tween;if(c!==a){r=(a=c).slice();for(var o={name:t,value:n},f=0,u=r.length;f<u;++f)if(r[f].name===t){r[f]=o;break}f===u&&r.push(o)}i.tween=r}})(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?function(e,t){return function(){Gr(this,e).delay=+t.apply(this,arguments)}}:function(e,t){return t=+t,function(){Gr(this,e).delay=t}})(t,e)):Hr(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?function(e,t){return function(){Vr(this,e).duration=+t.apply(this,arguments)}}:function(e,t){return t=+t,function(){Vr(this,e).duration=t}})(t,e)):Hr(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(function(e,t){if("function"!=typeof t)throw new Error;return function(){Vr(this,e).ease=t}}(t,e)):Hr(this.node(),t).ease}};var ei={time:null,delay:0,duration:250,ease:function(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}};function ti(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))return ei.time=Tr(),ei;return n}rr.prototype.interrupt=function(e){return this.each(function(){Xr(this,e)})},rr.prototype.transition=function(e){var t,n;e instanceof Wr?(t=e._id,e=e._name):(t=Kr(),(n=ei).time=Tr(),e=null==e?null:e+"");for(var a=this._groups,r=a.length,i=0;i<r;++i)for(var c,o=a[i],f=o.length,u=0;u<f;++u)(c=o[u])&&jr(c,e,t,u,o,n||ti(c,t));return new Wr(a,this._parents,e,t)};var ni=function(e){for(var t=e.length/6|0,n=new Array(t),a=0;a<t;)n[a]="#"+e.slice(6*a,6*++a);return n};ni("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),ni("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),ni("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),ni("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),ni("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),ni("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),ni("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),ni("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),ni("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");var ai=function(e){return Ge(e[e.length-1])};ai(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(ni)),ai(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(ni));var ri=ai(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(ni)),ii=ai(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(ni)),ci=ai(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(ni)),oi=ai(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(ni)),fi=ai(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(ni));ai(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(ni)),ai(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(ni));var ui=ai(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(ni));ai(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(ni)),ai(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(ni));var li=ai(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(ni));ai(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(ni));var si=ai(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(ni));ai(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(ni)),ai(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(ni));var di=ai(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(ni));ai(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(ni)),ai(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(ni)),ai(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(ni));var hi=ai(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(ni)),bi=ai(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(ni)),pi=ai(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(ni)),gi=ai(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(ni)),mi=ai(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(ni)),yi=ai(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(ni));ot(Pe(300,.5,0),Pe(-240,.5,1));ot(Pe(-100,.75,.35),Pe(80,1.5,.8)),ot(Pe(260,.75,.35),Pe(80,1.5,.8)),Pe(),re();function vi(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}vi(ni("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));vi(ni("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),vi(ni("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),vi(ni("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function wi(e,t="YlGnBu",n,a,r=!1){a=void 0===a?S(e):a,n=void 0===n?T(e):n;const i=function e(t){var n=0,a=1,r=1,i=!1;function c(e){var a=(e-n)*r;return t(i?Math.max(0,Math.min(1,a)):a)}return c.domain=function(e){return arguments.length?(n=+e[0],a=+e[1],r=n===a?0:1/(a-n),c):[n,a]},c.clamp=function(e){return arguments.length?(i=!!e,c):i},c.interpolator=function(e){return arguments.length?(t=e,c):t},c.copy=function(){return e(t).domain([n,a]).clamp(i)},Lt(c)}(function(e){const t={BuGn:ui,OrRd:li,PuBu:si,YlGnBu:di,Blues:hi,Oranges:yi,Greens:bi,Purples:gi,Reds:mi,Greys:pi,Grays:pi,RdBu:ci,RdGy:oi,PiYG:ri,PuOr:ii,RdYlBu:fi};if(!t.hasOwnProperty(e)){const t="Unrecognized color: "+e;throw alert(t),t}return t[e]}(t));return r?i.domain([a,n]):i.domain([n,a]),i}function xi(e,t,n,a,r,i=10,c=10,o={h:10,w:40},f="h",u=!1){let l=[];if(u){let e=[...Array(i+1).keys()],t=n.domain()[1]/i;l=(l=e.map(e=>e*t)).concat(e.filter(e=>0!=e).map(e=>0-e*t)).sort((e,t)=>e<t?-1:e>t?1:e>=t?0:NaN)}else{let e=[...Array(i+1).keys()],t=n.domain()[1]/i;l=e.map(e=>e*t)}const s=t.append("g").attr("transform",`translate(${a.x}, ${a.y})`).selectAll(".legend").data(l).enter().append("g").classed("legend",!0);"h"==f?(t.append("text").attr("class","color-legend").text(e).attr("x",-10).attr("text-anchor","end").attr("y",o.h).attr("transform",`translate(${a.x}, ${a.y})`),s.append("rect").attr("x",(e,t)=>o.w*t).attr("y",5).attr("width",o.w).attr("height",o.h).style("fill",n),s.append("text").attr("class","color-legend").text(e=>r?Math.pow(c,e).toPrecision(2):e.toPrecision(2)).attr("x",(e,t)=>o.w*t).attr("y",0)):(t.append("text").attr("class","color-legend").text(e).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${a.x}, ${a.y+o.h*l.length})rotate(90)`),s.append("rect").attr("x",0).attr("y",(e,t)=>o.h*t).attr("width",o.w).attr("height",o.h).style("fill",n),s.append("text").attr("class","color-legend").text(e=>r?(Math.pow(c,e)-1).toPrecision(2):e.toPrecision(2)).attr("x",15).attr("y",(e,t)=>o.h*t+o.h/2))}function _i(e){if(0==$(`#${e}`).length){let t=`Input Error: DOM ID ${e} is not found.`;throw console.warn(t),t}}function Mi(e,t,n,a,r,i="relative"){return _i(e),void 0===r&&(r=`${e}-svg`),ir("#"+e).append("svg").attr("width",t).attr("height",n).attr("id",r).append("g").attr("transform",`translate(${a.left}, ${a.top})`)}function Si(e={x:20,y:20,scaleFactor:1,diverging:!1,bubble:!1}){let t=y(1,e.x+1),n=y(1,e.y+1),a=[];return t.forEach(t=>{t="x"+t.toString(),n.forEach(n=>{n="y"+n.toString();let r=Math.random()*e.scaleFactor;r=e.diverging&&Math.random()<.5?-r:r,a.push({x:t,y:n,value:r,displayValue:parseFloat(r.toExponential()).toPrecision(3),r:e.bubble?30*Math.random():void 0})})}),a}class Ti{constructor(e,t,n=!1){$(`#${e}`).show();const a=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(a).appendTo(`#${e}`),this.buttons={},this.tooltip=t}createDownloadSvgButton(e,t,n,a,r="fa-download"){this.createButton(e,r);ir(`#${e}`).on("click",()=>{this.downloadSvg(t,n,a)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(e,t,n="fa-expand-arrows-alt"){this.createButton(e,n);ir(`#${e}`).on("click",t).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(e,t="fa-download"){const n=$("<a/>").attr("id",e).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${t}`).appendTo(n),this.buttons[e]=n,n}attachTooltip(e){this.tooltip=e}downloadSvg(e,t,n){let a=$($($(`${"#"+e}`))[0]),r=a.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),i=function(e){for(var t="",n=document.styleSheets,a=0;a<n.length;a++)try{if(null==n[a].cssRules)continue;for(var r=n[a].cssRules,i=0;i<r.length;i++){var c=r[i];if(void 0!==c.style){var o,f=void 0===c.selectorText?c.selectorText:c.selectorText.replace(`#${e[0].id} `,"");try{o=$(e).find(f)}catch(e){o=[]}o.length>0&&(t+=c.selectorText+" { "+c.style.cssText+" }\n")}}}catch(e){if("SecurityError"!==e.name)throw e;continue}var u=document.createElement("style");return u.setAttribute("type","text/css"),u.innerHTML="<![CDATA[\n"+t+"\n]]>",u}(a.get());r.prepend(i),$("#"+n).html("").hide();let c=$(`#${n}`).append(r).html(),o=new Blob([c],{type:"image/svg+xml"});saveAs(o,t),$(`#${n}`).html("").hide()}}class Ai{constructor(e,t=!1,n=30,a=-40,r=100){this.id=e,this.verbose=t,this.offsetX=n,this.offsetY=a,this.duration=r}show(e){this.verbose&&console.log(e),this.edit(e),this.move(),ir("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){ir("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(e=Za.pageX,t=Za.pageY){this.verbose&&(console.log(e),console.log(t)),e+=this.offsetX,t=t+this.offsetY<0?10:t+this.offsetY;ir("#"+this.id).style("left",`${e}px`).style("top",`${t}px`)}edit(e){ir("#"+this.id).html(e)}}class Ci{constructor(e,t=!0,n=10,a="YlGnBu",r=2,i="heatmapTooltip"){this.data=e,this.useLog=t,this.logBase=n,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=r,this.colorScheme=a,0==$(`#${i}`).length&&$("<div/>").attr("id",i).appendTo($("body")),this.tooltip=new Ai(i),ir(`#${i}`).classed("heatmap-tooltip",!0),this.toolbar=void 0}createToolbar(e,t){return this.toolbar=new Ti(e,t),this.toolbar}drawColorLegend(e,t={x:0,y:0},n=5){xi(this.data[0].unit||"Value",e,this.colorScale,t,this.useLog,n,this.logBase)}redraw(e,t,n,a={w:1e3,h:1e3},r=30){this._setXScale(a.w,t),this._setYScale(a.h,n),this.draw(e,a,r)}draw(e,t={w:1e3,h:600},n=30,a=!1,r=null){void 0===this.xList&&this._setXScale(t.w),void 0===this.yList&&this._setYScale(t.h),void 0===this.colorScale&&this._setColorScale();const i=e.selectAll(".exp-map-xlabel").data(this.xList),c=null==r?this.yScale.range()[1]+2*this.yScale.bandwidth():this.yScale.range()[1]+r;i.attr("transform",e=>{return`translate(${this.xScale(e)+5}, ${c}) rotate(${n})`}),i.enter().append("text").attr("class",(e,t)=>`exp-map-xlabel x${t}`).attr("x",0).attr("y",0).attr("text-anchor","start").style("cursor","default").attr("transform",e=>{return`translate(${this.xScale(e)+5}, ${c}) rotate(${n})`}).merge(i).text(e=>e),i.exit().remove();e.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text(e=>e).attr("x",this.xScale.range()[1]+5).attr("y",e=>this.yScale(e)+10).attr("class",(e,t)=>`exp-map-ylabel y${t}`).attr("text-anchor","start").style("cursor","default").on("click",e=>{alert(`${e} is clicked. To be implemented`)}).on("mouseover",function(e){ir(this).classed("normal",!1).classed("highlighted",!0)}).on("mouseout",function(e){ir(this).classed("normal",!0).classed("highlighted",!1)});const o=e.selectAll(".exp-map-cell").data(this.data,e=>e.value);o.attr("x",e=>this.xScale(e.x)).attr("y",e=>this.yScale(e.y)).attr("row",e=>`x${this.xList.indexOf(e.x)}`).attr("col",e=>`y${this.yList.indexOf(e.y)}`);const f=this;o.enter().append("rect").attr("row",e=>`x${this.xList.indexOf(e.x)}`).attr("col",e=>`y${this.yList.indexOf(e.y)}`).attr("x",e=>this.xScale(e.x)).attr("y",e=>this.yScale(e.y)).attr("rx",this.r).attr("ry",this.r).attr("class","exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill","#eeeeee").on("mouseover",function(t){const n=ir(this);f.cellMouseover(t,e,n)}).on("mouseout",function(e){ir(this);f.cellMouseout()}).merge(o).style("fill",e=>a&&0==e.value?"#DDDDDD":this.useLog?this.colorScale(this._log(e.value)):this.colorScale(e.value)),o.exit().remove()}cellMouseout(e){fr("*").classed("highlighted",!1),this.tooltip.hide()}cellMouseover(e,t,n){const a=n.attr("row"),r=n.attr("col");t.selectAll(".exp-map-xlabel").filter(`.${a}`).classed("highlighted",!0),t.selectAll(".exp-map-ylabel").filter(`.${r}`).classed("highlighted",!0),n.classed("highlighted",!0);const i=void 0===e.displayValue?parseFloat(e.value.toExponential()).toPrecision(4):e.displayValue;this.tooltip.show(`Column: ${e.x} <br/> Row: ${e.y}<br/> Value: ${i}`)}_setXScale(e,t){this.xList=void 0!==t?t:N().key(e=>e.x).entries(this.data).map(e=>e.key),this.xScale=F().domain(this.xList).range([0,e]).padding(.05)}_setYScale(e,t){this.yList=void 0!==t?t:N().key(e=>e.y).entries(this.data).map(e=>e.key),this.yScale=F().domain(this.yList).range([0,e]).padding(.05)}_setColorScale(){let e=this.useLog,t=this.data.map(t=>e?this._log(t.value):t.value);this.colorScale=wi(t,this.colorScheme,0)}_log(e){return Math.log(Number(e+1))/Math.log(this.logBase)}}var Ni=function e(t){function n(e,n){var a,r;return e=null==e?0:+e,n=null==n?1:+n,function(){var i;if(null!=a)i=a,a=null;else do{a=2*t()-1,i=2*t()-1,r=a*a+i*i}while(!r||r>1);return e+n*i*Math.sqrt(-2*Math.log(r)/r)}}return n.source=e,n}(function(){return Math.random()});function ki(e){return e<0?-1:1}function $i(e,t,n){var a=e._x1-e._x0,r=t-e._x1,i=(e._y1-e._y0)/(a||r<0&&-0),c=(n-e._y1)/(r||a<0&&-0),o=(i*r+c*a)/(a+r);return(ki(i)+ki(c))*Math.min(Math.abs(i),Math.abs(c),.5*Math.abs(o))||0}function Li(e,t){var n=e._x1-e._x0;return n?(3*(e._y1-e._y0)/n-t)/2:t}function Ei(e,t,n){var a=e._x0,r=e._y0,i=e._x1,c=e._y1,o=(i-a)/3;e._context.bezierCurveTo(a+o,r+o*t,i-o,c-o*n,i,c)}function Di(e){this._context=e}function Pi(e){this._context=e}Di.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Ei(this,this._t0,Li(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(t=+t,(e=+e)!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,Ei(this,Li(this,n=$i(this,e,t)),n);break;default:Ei(this,this._t0,n=$i(this,e,t))}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}},(function(e){this._context=new Pi(e)}.prototype=Object.create(Di.prototype)).point=function(e,t){Di.prototype.point.call(this,t,e)},Pi.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,a,r,i){this._context.bezierCurveTo(t,e,a,n,i,r)}};var Ui=function(){Za.preventDefault(),Za.stopImmediatePropagation()},Yi=function(e){var t=e.document.documentElement,n=ir(e).on("dragstart.drag",Ui,!0);"onselectstart"in t?n.on("selectstart.drag",Ui,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")};var Bi=function(e){return function(){return e}},Fi=function(e,t,n){this.target=e,this.type=t,this.selection=n};function Ii(){Za.stopImmediatePropagation()}var Ri=function(){Za.preventDefault(),Za.stopImmediatePropagation()},Oi={name:"drag"},ji={name:"space"},Gi={name:"handle"},Vi={name:"center"},Hi={name:"x",handles:["e","w"].map(Ki),input:function(e,t){return e&&[[e[0],t[0][1]],[e[1],t[1][1]]]},output:function(e){return e&&[e[0][0],e[1][0]]}},Xi={name:"y",handles:["n","s"].map(Ki),input:function(e,t){return e&&[[t[0][0],e[0]],[t[1][0],e[1]]]},output:function(e){return e&&[e[0][1],e[1][1]]}},zi=(["n","e","s","w","nw","ne","se","sw"].map(Ki),{overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"}),qi={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Qi={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Zi={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Wi={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Ki(e){return{type:e}}function Ji(){return!Za.button}function ec(){var e=this.ownerSVGElement||this;return[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]}function tc(e){for(;!e.__brush;)if(!(e=e.parentNode))return;return e.__brush}function nc(e){return e[0][0]===e[1][0]||e[0][1]===e[1][1]}function ac(){return function(e){var t,n=ec,a=Ji,r=lr(c,"start","brush","end"),i=6;function c(t){var n=t.property("__brush",s).selectAll(".overlay").data([Ki("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",zi.overlay).merge(n).each(function(){var e=tc(this).extent;ir(this).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1])}),t.selectAll(".selection").data([Ki("selection")]).enter().append("rect").attr("class","selection").attr("cursor",zi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var a=t.selectAll(".handle").data(e.handles,function(e){return e.type});a.exit().remove(),a.enter().append("rect").attr("class",function(e){return"handle handle--"+e.type}).attr("cursor",function(e){return zi[e.type]}),t.each(o).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",l)}function o(){var e=ir(this),t=tc(this).selection;t?(e.selectAll(".selection").style("display",null).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1]),e.selectAll(".handle").style("display",null).attr("x",function(e){return"e"===e.type[e.type.length-1]?t[1][0]-i/2:t[0][0]-i/2}).attr("y",function(e){return"s"===e.type[0]?t[1][1]-i/2:t[0][1]-i/2}).attr("width",function(e){return"n"===e.type||"s"===e.type?t[1][0]-t[0][0]+i:i}).attr("height",function(e){return"e"===e.type||"w"===e.type?t[1][1]-t[0][1]+i:i})):e.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function f(e,t){return e.__brush.emitter||new u(e,t)}function u(e,t){this.that=e,this.args=t,this.state=e.__brush,this.active=0}function l(){if(Za.touches){if(Za.changedTouches.length<Za.touches.length)return Ri()}else if(t)return;if(a.apply(this,arguments)){var n,r,i,c,u,l,s,d,h,b,p,g,m,y=this,v=Za.target.__data__.type,w="selection"===(Za.metaKey?v="overlay":v)?Oi:Za.altKey?Vi:Gi,x=e===Xi?null:Zi[v],_=e===Hi?null:Wi[v],M=tc(y),S=M.extent,T=M.selection,A=S[0][0],C=S[0][1],N=S[1][0],k=S[1][1],$=x&&_&&Za.shiftKey,L=or(y),E=L,D=f(y,arguments).beforestart();"overlay"===v?M.selection=T=[[n=e===Xi?A:L[0],i=e===Hi?C:L[1]],[u=e===Xi?N:n,s=e===Hi?k:i]]:(n=T[0][0],i=T[0][1],u=T[1][0],s=T[1][1]),r=n,c=i,l=u,d=s;var P=ir(y).attr("pointer-events","none"),U=P.selectAll(".overlay").attr("cursor",zi[v]);if(Za.touches)P.on("touchmove.brush",B,!0).on("touchend.brush touchcancel.brush",I,!0);else{var Y=ir(Za.view).on("keydown.brush",function(){switch(Za.keyCode){case 16:$=x&&_;break;case 18:w===Gi&&(x&&(u=l-h*x,n=r+h*x),_&&(s=d-b*_,i=c+b*_),w=Vi,F());break;case 32:w!==Gi&&w!==Vi||(x<0?u=l-h:x>0&&(n=r-h),_<0?s=d-b:_>0&&(i=c-b),w=ji,U.attr("cursor",zi.selection),F());break;default:return}Ri()},!0).on("keyup.brush",function(){switch(Za.keyCode){case 16:$&&(g=m=$=!1,F());break;case 18:w===Vi&&(x<0?u=l:x>0&&(n=r),_<0?s=d:_>0&&(i=c),w=Gi,F());break;case 32:w===ji&&(Za.altKey?(x&&(u=l-h*x,n=r+h*x),_&&(s=d-b*_,i=c+b*_),w=Vi):(x<0?u=l:x>0&&(n=r),_<0?s=d:_>0&&(i=c),w=Gi),U.attr("cursor",zi[v]),F());break;default:return}Ri()},!0).on("mousemove.brush",B,!0).on("mouseup.brush",I,!0);Yi(Za.view)}Ii(),Xr(y),o.call(y),D.start()}function B(){var e=or(y);!$||g||m||(Math.abs(e[0]-E[0])>Math.abs(e[1]-E[1])?m=!0:g=!0),E=e,p=!0,Ri(),F()}function F(){var e;switch(h=E[0]-L[0],b=E[1]-L[1],w){case ji:case Oi:x&&(h=Math.max(A-n,Math.min(N-u,h)),r=n+h,l=u+h),_&&(b=Math.max(C-i,Math.min(k-s,b)),c=i+b,d=s+b);break;case Gi:x<0?(h=Math.max(A-n,Math.min(N-n,h)),r=n+h,l=u):x>0&&(h=Math.max(A-u,Math.min(N-u,h)),r=n,l=u+h),_<0?(b=Math.max(C-i,Math.min(k-i,b)),c=i+b,d=s):_>0&&(b=Math.max(C-s,Math.min(k-s,b)),c=i,d=s+b);break;case Vi:x&&(r=Math.max(A,Math.min(N,n-h*x)),l=Math.max(A,Math.min(N,u+h*x))),_&&(c=Math.max(C,Math.min(k,i-b*_)),d=Math.max(C,Math.min(k,s+b*_)))}l<r&&(x*=-1,e=n,n=u,u=e,e=r,r=l,l=e,v in qi&&U.attr("cursor",zi[v=qi[v]])),d<c&&(_*=-1,e=i,i=s,s=e,e=c,c=d,d=e,v in Qi&&U.attr("cursor",zi[v=Qi[v]])),M.selection&&(T=M.selection),g&&(r=T[0][0],l=T[1][0]),m&&(c=T[0][1],d=T[1][1]),T[0][0]===r&&T[0][1]===c&&T[1][0]===l&&T[1][1]===d||(M.selection=[[r,c],[l,d]],o.call(y),D.brush())}function I(){if(Ii(),Za.touches){if(Za.touches.length)return;t&&clearTimeout(t),t=setTimeout(function(){t=null},500),P.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(e,t){var n=e.document.documentElement,a=ir(e).on("dragstart.drag",null);t&&(a.on("click.drag",Ui,!0),setTimeout(function(){a.on("click.drag",null)},0)),"onselectstart"in n?a.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(Za.view,p),Y.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);P.attr("pointer-events","all"),U.attr("cursor",zi.overlay),M.selection&&(T=M.selection),nc(T)&&(M.selection=null,o.call(y)),D.end()}}function s(){var t=this.__brush||{selection:null};return t.extent=n.apply(this,arguments),t.dim=e,t}return c.move=function(t,n){t.selection?t.on("start.brush",function(){f(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){f(this,arguments).end()}).tween("brush",function(){var t=this,a=t.__brush,r=f(t,arguments),i=a.selection,c=e.input("function"==typeof n?n.apply(this,arguments):n,a.extent),u=Ke(i,c);function l(e){a.selection=1===e&&nc(c)?null:u(e),o.call(t),r.brush()}return i&&c?l:l(1)}):t.each(function(){var t=arguments,a=this.__brush,r=e.input("function"==typeof n?n.apply(this,t):n,a.extent),i=f(this,t).beforestart();Xr(this),a.selection=null==r||nc(r)?null:r,o.call(this),i.start().brush().end()})},u.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){!function(e,t,n,a){var r=Za;e.sourceEvent=Za,Za=e;try{t.apply(n,a)}finally{Za=r}}(new Fi(c,t,e.output(this.state.selection)),r.apply,r,[t,this.that,this.args])}},c.extent=function(e){return arguments.length?(n="function"==typeof e?e:Bi([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),c):n},c.filter=function(e){return arguments.length?(a="function"==typeof e?e:Bi(!!e),c):a},c.handleSize=function(e){return arguments.length?(i=+e,c):i},c.on=function(){var e=r.on.apply(r,arguments);return e===r?c:e},c}(Hi)}class rc{constructor(e,t=!0,n=10,a="Reds"){this.data=e,this.useLog=t,this.logBase=n,this.colorScheme=a,this.xScale=void 0,this.yScale=void 0,this.colorScale=void 0,this.bubbleScale=void 0,this.toolbar=void 0,this.tooltip=void 0}addTooltip(e){let t=$(`#${e}`),n=e+"-tooltip";0==$(`#${n}`).length&&$("<div/>").attr("id",n).appendTo(t),this.tooltip=new Ai(n),ir(`#${n}`).classed("bubblemap-tooltip",!0)}drawCanvas(e,t={w:1e3,h:600,top:20,left:20},n,a={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){this._setScales(t,n);let r=e.node().getContext("2d");r.fillStyle="#ffffff",r.rect(0,0,e.attr("width"),e.attr("height")),r.fill(),this.data.forEach(e=>{r.beginPath(),r.fillStyle=this.colorScale(e.value),r.arc(this.xScale(e.x)+this.xScale.bandwidth()/2,this.yScale(e.y),this.bubbleScale(e.r),0,2*Math.PI),r.fill(),r.closePath()});let i=a.column,c=a.row;c.show&&(r.save(),r.textAlign=i.textAlign,r.fillStyle="black",r.font="10px Open Sans",this.yScale.domain().forEach(e=>{r.fillText(e,this.xScale.range()[0]-c.adjust,this.yScale(e)+2)}),r.restore()),i.show&&this.xScale.domain().forEach(e=>{r.save(),r.fillStyle="black",r.font="10px Open Sans",r.textAlign=i.textAlign,r.translate(this.xScale(e)+this.xScale.bandwidth()/2-3,this.yScale.range()[1]+i.adjust),r.rotate(0==i.angle?0:Math.PI/(180/i.angle)),r.fillText(e,0,0),r.restore()})}drawCombo(e,t,n={w:1e3,h:600,top:0,left:0},a,r=!0,i={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){let c={w:n.w,h:n.h2,top:n.top,left:n.left};this.drawSvg(t,c,a,50,i);let o=e.append("g").attr("clip-path","url(#clip)");if(this._setMiniScales(n,a),o.selectAll(".mini-map-cell").data(this.data,e=>e.value).enter().append("circle").attr("class","mini-map-cell").attr("row",e=>`x${this.xScaleMini.domain().indexOf(e.x)}`).attr("col",e=>`y${this.yScaleMini.domain().indexOf(e.y)}`).attr("cx",e=>this.xScaleMini(e.x)+this.xScaleMini.bandwidth()/2).attr("cy",e=>this.yScaleMini(e.y)).attr("r",e=>this.bubbleScaleMini(e.r)).style("fill",e=>this.colorScale(e.value)),r){let a=ac().extent([[0,0],[n.w,n.h]]).on("brush",()=>{this._brushed(t,i)});e.append("g").attr("class","brush").call(a).call(a.move,[0,50*this.xScaleMini.bandwidth()])}}drawSvg(e,t={w:1e3,h:600,top:0,left:0},n,a=50,r={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){this._setScales(t,n,a);let i=this.tooltip;e.append("g").attr("clip-path","url(#clip)").selectAll(".bubble-map-cell").data(this.data,e=>e.value).enter().append("circle").attr("class","bubble-map-cell").attr("row",e=>`x${this.xScale.domain().indexOf(e.x)}`).attr("col",e=>`y${this.yScale.domain().indexOf(e.y)}`).attr("cx",e=>this.xScale(e.x)+this.xScale.bandwidth()/2).attr("cy",e=>this.yScale(e.y)+this.yScale.bandwidth()/2).attr("r",e=>this.bubbleScale(e.r)).style("fill",e=>this.colorScale(e.value)).on("mouseover",function(t){let n=ir(this),a=n.attr("row"),r=n.attr("col");e.selectAll(".bubble-map-xlabel").filter(`.${a}`).classed("highlighted",!0),e.selectAll(".bubble-map-ylabel").filter(`.${r}`).classed("highlighted",!0),n.classed("highlighted",!0);let c=void 0===t.displayValue?parseFloat(t.value.toExponential()).toPrecision(4):t.displayValue,o=void 0===t.rDisplayValue?t.r.toPrecision(4):t.rDisplayValue,f=void 0===t.displayX?t.x:t.displayX,u=void 0===t.displayY?t.y:t.displayY;i.show(`Column: ${f} <br/> Row: ${u}<br/> Value: ${c}<br/> Size: ${o}`)}).on("mouseout",function(){e.selectAll("*").classed("highlighted",!1),i.hide()});let c=r.column,o=r.row;if(c.show){let t={};N().key(e=>e.x).entries(this.data).forEach(e=>{t[e.key]=e.values[0].displayX});e.selectAll(".bubble-map-xlabel").data(this.xScale.domain()).enter().append("text").attr("class",(e,t)=>`bubble-map-xlabel x${t}`).attr("x",0).attr("y",0).attr("text-anchor","left"==c.textAlign?"start":"end").style("cursor","default").style("font-size",()=>{return`${Math.floor(this.xScale.bandwidth()/2)>12?12:Math.floor(this.xScale.bandwidth()/2)}px`}).attr("transform",e=>{return`translate(${this.xScale(e)+this.xScale.bandwidth()/3}, ${this.yScale.range()[1]+c.adjust}) rotate(${c.angle})`}).text(e=>t[e]||e)}if(o.show){let t={};N().key(e=>e.y).entries(this.data).forEach(e=>{t[e.key]=e.values[0].displayY});e.selectAll(".bubble-map-ylabel").data(this.yScale.domain()).enter().append("text").attr("class",(e,t)=>`bubble-map-ylabel y${t}`).attr("x",0).attr("y",0).attr("text-anchor","left"==o.textAlign?"start":"end").style("cursor","default").style("font-size",()=>{return`${Math.floor(this.yScale.bandwidth()/1.5)>14?14:Math.floor(this.yScale.bandwidth()/1.5)<10?10:Math.floor(this.yScale.bandwidth()/1.5)}px`}).attr("transform",e=>{return`translate(${this.xScale.range()[0]-o.adjust}, ${this.yScale(e)+this.yScale.bandwidth()/1.5}) rotate(${o.angle})`}).text(e=>t[e]||e)}}drawColorLegend(e,t={x:0,y:0},n=5,a=""){xi(a,e,this.colorScale,t,this.useLog,n,this.logBase,{h:10,w:40},"h",!0)}drawBubbleLegend(e,t={x:0,y:0,title:"Bubble legend"},n=5,a=""){e.selectAll(".bmap-bubble-legend").remove();let r=[...Array(n+1).keys()],i=(this.bubbleScale.domain()[1]-this.bubbleScale.domain()[0])/n,c=r.map(e=>this.bubbleScale.domain()[0]+e*i),o=e.append("g").attr("class","bmap-bubble-legend").attr("transform",`translate(${t.x}, ${t.y})`);o.append("text").attr("class","color-legend").text(t.title).attr("x",-10).attr("text-anchor","end").attr("y",10);let f=o.selectAll(".legend").data(c).enter().append("g").classed("legend",!0);f.append("circle").attr("cx",(e,t)=>40*t).attr("cy",10).attr("r",e=>this.bubbleScale(e)).style("fill","black"),f.append("text").attr("class","color-legend").text(e=>this.useLog?Math.pow(base,e).toPrecision(2):e.toPrecision(2)).attr("x",(e,t)=>40*t-5).attr("y",0)}_brushed(e,t){let n=Za.selection,a=Math.round(n[0]/this.xScaleMini.step()),r=Math.round(n[1]/this.xScaleMini.step());this.xScale.domain(this.xScaleMini.domain().slice(a,r));let i=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:i,min:2}),e.selectAll(".bubble-map-cell").attr("cx",e=>{let t=this.xScale(e.x);return void 0===t?this.xScale.bandwidth()/2:t+this.xScale.bandwidth()/2}).attr("r",e=>{return void 0===this.xScale(e.x)?0:this.bubbleScale(e.r)}),e.selectAll(".bubble-map-xlabel").attr("transform",e=>{return`translate(${this.xScale(e)+5||0}, ${this.yScale.range()[1]+t.column.adjust}) rotate(${t.column.angle})`}).style("display",e=>{return void 0===this.xScale(e)?"none":"block"})}_setMiniScales(e={w:1e3,h:600,top:20,left:20},t){if(void 0===this.xScaleMini&&(this.xScaleMini=this._setXScaleMini(e)),void 0===this.yScaleMini&&(this.yScaleMini=this._setYScaleMini(e)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(t)),void 0===this.bubbleScaleMini){let e=this._setBubbleMax(!0);this.bubbleScaleMini=this._setBubbleScale({max:e,min:1})}}_setScales(e={w:1e3,h:600,top:20,left:20},t){if(void 0===this.xScale&&(this.xScale=this._setXScale(e)),void 0===this.yScale&&(this.yScale=this._setYScale(e)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(t)),void 0===this.bubbleScale){let e=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:e,min:2})}}_parseXList(){return N().key(e=>e.x).entries(this.data).map(e=>e.key).sort((e,t)=>e<t?-1:e>t?1:e>=t?0:NaN)}_parseYList(){return N().key(e=>e.y).entries(this.data).map(e=>e.key).sort((e,t)=>e<t?-1:e>t?1:e>=t?0:NaN)}_setXScaleMini(e={w:1e3,left:20}){let t=this._parseXList();return this._setXScale(e,t)}_setXScale(e={w:1e3,left:20},t){return t=void 0===t?this._parseXList():t,F().domain(t).range([e.left,e.left+e.w]).padding(.05)}_setYScaleMini(e={h:600,top:20}){let t=this._parseYList();return this._setYScale(e,t)}_setYScale(e={h:600,top:20},t){return t=void 0===t?this._parseYList():t,F().domain(t).range([e.top,e.top+e.h]).padding(.05)}_setColorScale(e){let t=this.useLog;return wi(void 0===e?this.data.map(e=>t?this._log(e.value):e.value):e,this.colorScheme,void 0,void 0,!0)}_setBubbleMax(e=!1,t=2,n=10){let a=e?this.xScaleMini:this.xScale,r=e?this.yScaleMini:this.yScale,i=S([a.bandwidth(),r.bandwidth()])/t;return n<i?n:i}_setBubbleScale(e={max:10,min:0}){return Dt().domain([3,S(this.data.map(e=>e.r))]).range([e.min,e.max])}_log(e){return Math.log(Number(e+1))/Math.log(this.logBase)}}const ic={id:"gtexVizBubblemap",data:{heatmap:Si({x:50,y:10,scaleFactor:1e3}),dendroHeatmap:{rowTree:"(((TP53:0.17,SLK:0.17):1.18,NDRG4:1.34):1.33,ACTN3:2.67);",colTree:"(((Adipose Visceral Omentum:0.06,Adipose Subcutaneous:0.06):0.00,Bladder:0.06):0.16,Adrenal Gland:0.22);",heatmap:[{y:"SLK",value:35.505,x:"Adipose Subcutaneous",unit:"TPM"},{y:"SLK",value:29.28,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"SLK",value:17.405,x:"Adrenal Gland",unit:"TPM"},{y:"SLK",value:53.29,x:"Bladder",unit:"TPM"},{y:"NDRG4",value:12.035,x:"Adipose Subcutaneous",unit:"TPM"},{y:"NDRG4",value:6.531000000000001,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"NDRG4",value:134.8,x:"Adrenal Gland",unit:"TPM"},{y:"NDRG4",value:7.1160000000000005,x:"Bladder",unit:"TPM"},{y:"TP53",value:29.935,x:"Adipose Subcutaneous",unit:"TPM"},{y:"TP53",value:23.55,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"TP53",value:18.515,x:"Adrenal Gland",unit:"TPM"},{y:"TP53",value:40.51,x:"Bladder",unit:"TPM"},{y:"ACTN3",value:.33145,x:"Adipose Subcutaneous",unit:"TPM"},{y:"ACTN3",value:.3317,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"ACTN3",value:.100005,x:"Adrenal Gland",unit:"TPM"},{y:"ACTN3",value:.48100000000000004,x:"Bladder",unit:"TPM"}]},groupedViolinPlot:[{group:"Group 1",label:"Gene 1",values:y(0,2e3).map(Ni(2,1))},{group:"Group 1",label:"Gene 2",values:y(0,2e3).map(Ni(5,1))},{group:"Group 1",label:"Gene 3",values:y(0,2e3).map(Ni(10,1))},{group:"Group 2",label:"Gene 1",values:y(0,2e3).map(Ni(5,1))},{group:"Group 2",label:"Gene 2",values:y(0,2e3).map(Ni(3,1))},{group:"Group 2",label:"Gene 3",values:y(0,2e3).map(Ni(1,1))},{group:"Group 3",label:"Gene 1",values:y(0,2e3).map(Ni(2,1))},{group:"Group 3",label:"Gene 2",values:y(0,2e3).map(Ni(3,1))},{group:"Group 3",label:"Gene 3",values:y(0,2e3).map(Ni(5,1))}],transcriptTracks:{exons:{"ENST00000311595.9":[{chrom:"17",chromEnd:77071172,exonId:"ENSE00002713933.1",exonNumber:"1",chromStart:77071151,strand:"+"},{chrom:"17",chromEnd:77073579,exonId:"ENSE00003672628.1",exonNumber:"2",chromStart:77073512,strand:"+"},{chrom:"17",chromEnd:77073946,exonId:"ENSE00003475281.1",exonNumber:"3",chromStart:77073745,strand:"+"},{chrom:"17",chromEnd:77075719,exonId:"ENSE00001111713.1",exonNumber:"4",chromStart:77075571,strand:"+"},{chrom:"17",chromEnd:77076446,exonId:"ENSE00003651250.1",exonNumber:"5",chromStart:77076289,strand:"+"},{chrom:"17",chromEnd:77077155,exonId:"ENSE00003607773.1",exonNumber:"6",chromStart:77077007,strand:"+"},{chrom:"17",chromEnd:77078612,exonId:"ENSE00002720924.1",exonNumber:"7",chromStart:77077980,strand:"+"}]},transcripts:[{chromosome:"17",end:77078612,gencodeId:"ENSG00000167280.12",geneSymbol:"ENGASE",start:77071151,strand:"+",transcriptId:"ENST00000311595.9"}]},bubbleMap:Si({x:50,y:10,scaleFactor:1,diverging:!0,bubble:!0}),ldPlot:Si({x:2,y:2,scaleFactor:1})}.bubbleMap,width:1200,height:400,marginTop:100,marginRight:100,marginBottom:30,marginLeft:30,labels:{column:{show:!0,height:100,angle:90,adjust:10,location:"bottom",textAlign:"left"},row:{show:!0,width:150,angle:0,adjust:0,location:"left",textAlign:"right"}},useLog:!1,logBase:10,colorScheme:"RdBu",colorScaleDomain:[-.75,.75],useCanvas:!1};function cc(e=ic){let t={left:e.showLabels?e.marginLeft+e.rowLabelWidth:e.marginLeft,top:e.marginTop,right:e.marginRight,bottom:e.showLabels?e.marginBottom+e.columnLabelHeight:e.marginBottom},n=e.width-(e.labels.row.width+e.marginLeft+e.marginRight),a=e.height-(e.labels.column.height+e.marginTop+e.marginBottom);if(e.useCanvas){let r=new rc(e.data,e.useLog,e.logBase,e.colorScheme);r.addTooltip(canvasId);let i=function(e,t,n,a,r,i="absolute"){return _i(e),void 0===r&&(r=`${e}-canvas`),ir(`#${e}`).append("canvas").attr("id",r).attr("width",t).attr("height",n).style("position",i)}(e.id,e.width,e.height);r.drawCanvas(i,{w:n,h:a,top:t.top,left:t.left},e.colorScaleDomain,e.labels)}else{let r=new rc(e.data,e.useLog,e.logBase,e.colorScheme);r.addTooltip(e.id);let i=Mi(e.id,e.width,e.height,t);r.drawSvg(i,{w:n,h:a,top:0,left:0},e.colorScaleDomain,0,e.labels),r.drawColorLegend(i,{x:0,y:-40},3,"NES"),r.drawBubbleLegend(i,{x:500,y:-40,title:"-log10(p-value)"},5,"-log10(p-value)")}}const oc={id:"qtl-browser",width:1800,height:2e3,margin:{left:20,top:50},urls:{genes:"../tempData/ACTN3.neighbor.genes.csv"},parsers:{genes:e=>(e.start=parseInt(e.start),e.end=parseInt(e.end),e.featureLabel=e.geneSymbol,e.featureType=e.geneType,e)},dataFilters:{genes:e=>"protein coding"==e.featureType||"lincRNA"==e.featureType},dataSort:{genes:(e,t)=>parseInt(e.start)-parseInt(t.start)}},fc={id:"gwasHeatmap",data:null,useLog:!1,logBase:null,width:oc.width,height:250,marginLeft:100,marginRight:10,marginTop:50,marginBottom:120,colorScheme:"Greys",cornerRadius:2,columnLabelHeight:20,columnLabelAngle:90,columnLabelPosAdjust:10,rowLabelWidth:100},uc={id:"geneTrack",label:"Gene Position",data:void 0,width:oc.width,height:100,marginLeft:50,marginRight:50,marginTop:500,marginBottom:0,showLabels:!1,trackColor:"#ffffff",url:"../tempData/ACTN3.neighbor.genes.csv",center:66546395,dataParser:e=>(e.start=parseInt(e.start),e.end=parseInt(e.end),e.featureLabel=e.geneSymbol,e.featureType=e.geneType,e),dataFilter:e=>"protein coding"==e.featureType||"lincRNA"==e.featureType,dataSort:(e,t)=>parseInt(e.start)-parseInt(t.start)},lc={id:"eQTL-browser",data:void 0,width:1800,height:20,marginLeft:10,marginRight:10,marginTop:0,marginBottom:0,url:"/tempData/ACTN3.eqtls.csv",center:66546395,showLabels:!1,trackColor:"#f2f2f2",dataParser:e=>(e.chr=e.chromosome,e.start=parseInt(e.pos),e.end=e.start,e.featureType="variant",e.featureLabel=e.snpId||e.variantId,e.strand="+",e),dataFilter:e=>e},sc={id:"sQTL-browser",data:void 0,width:1800,height:20,marginLeft:10,marginRight:10,marginTop:0,marginBottom:0,url:"/tempData/ACTN3.sqtls.csv",center:66546395,showLabels:!1,trackColor:"#f4f4f4",dataParser:e=>(e.chr=e.chromosome,e.start=parseInt(e.pos),e.end=e.start,e.featureType="variant",e.featureLabel=e.snpId||e.variantId,e.strand="+",e),dataFilter:e=>e},dc={id:"QTL-map",width:1800,height:150,marginTop:0,marginRight:0,marginBottom:0,marginLeft:100,colorScheme:"RdBu",colorScaleDomain:[-.75,.75],useLog:!1,logBase:void 0,divSpinner:"spinner",divDashboard:"bmap-dashboard",divInfo:"bmap-filter-info",divGeneInfo:"bmap-gene-info",divModal:"bmap-modal",data:[],urls:["/tempData/ACTN3.eqtls.csv","/tempData/ACTN3.sqtls.csv"],dataType:["eQTL","sQTL"],labels:{column:{show:!1,height:100,angle:90,adjust:10,location:"bottom",textAlign:"left"},row:{show:!0,width:150,angle:0,adjust:0,location:"left",textAlign:"right"}},useCanvas:!1};return e.browserConfig=oc,e.eqtlConfig=lc,e.sqtlConfig=sc,e.qtlMapConfig=dc,e.renderQtlMap=function(e,t=dc){const n=t.urls.map(e=>h(e));Promise.all(n).then(function(e){e.forEach((e,n)=>{let a=t.dataType[n];console.log(a),e.forEach(e=>{e.x=e.variantId,e.y=e.geneSymbol+"-"+a,e.value=parseFloat(e.nes),e.displayValue=e.value.toPrecision(3),e.r=-Math.log10(parseInt(e.pValue)),e.rDisplayValue=parseFloat(e.r.toExponential()).toPrecision(3),t.data.push(e)})}),console.log(t.data),cc(t)}).catch(function(e){console.error(e)})},e.render=function(e,t=oc){let n=Mi(t.id,t.width,t.height,{left:t.margin.left,top:t.margin.top});h(t.urls.genes).then(a=>{let r=a.map(t.parsers.genes).filter(t.dataFilters.genes);r.sort(t.dataSort.genes),fc.data=function(e={x:20,y:20,scaleFactor:1},t=[]){let n=e=>Array.from(Array(e).keys()),a=void 0===t?n(e.x):t,r=n(e.y),i=[];return a.forEach(n=>{n=void 0===t?"col "+n.toString():n,r.forEach(t=>{t="trait "+t.toString();let a=Math.random()*e.scaleFactor,r={x:n,y:t,value:a,displayValue:a.toPrecision(3)};i.push(r)})}),i}({x:r.length,y:4,scaleFactor:1},r.map(e=>e.geneSymbol));const i=function(e,t,n=fc){let a=n.width-(n.marginLeft+n.marginRight+n.rowLabelWidth),r=n.height-(n.marginTop+n.marginBottom+n.columnLabelHeight),i=t.append("g").attr("id",n.id).attr("transform",`translate(${n.marginLeft}, ${n.marginTop})`),c=`${n.id}Tooltip`,o=new Ci(n.data,!1,void 0,n.colorScheme,n.colorRadius,c);return o.draw(i,{w:a,h:r},n.columnLabelAngle,!1,n.columnLabelPosAdjust),o.drawColorLegend(i,{x:20,y:-20},10),i.selectAll(".exp-map-xlabel").attr("fill",t=>t==e?"red":"#000000"),o.svg=i,o}(e,n,fc);uc.data=r;const c=function(e,t,n=uc){let a=n.width-(n.marginLeft+n.marginRight),r=n.height-(n.marginTop+n.marginBottom),i=t.append("g").attr("id",n.id).attr("transform",`translate(${n.marginLeft}, ${n.marginTop})`),c=new pa(n.data,n.center);return c.render(i,a,r,!1,n.showLabels,n.trackColor,n.label),c.svg=i,c}(0,n,uc);let o=uc.height-(uc.marginTop+uc.marginBottom),f=fc.marginLeft-uc.marginLeft+i.xScale.bandwidth()/2;c.svg.selectAll(".connect").data(r).enter().append("line").attr("class","connect").attr("x1",e=>i.xScale(e.geneSymbol)+f).attr("x2",e=>c.scale(e.start)).attr("y1",o/2-20).attr("y2",o/2).attr("stroke",t=>t.geneSymbol==e?"red":"#ababab").attr("stroke-width",.5),c.svg.selectAll(".connect2").data(r).enter().append("line").attr("class","connect2").attr("x1",e=>i.xScale(e.geneSymbol)+f).attr("x2",e=>i.xScale(e.geneSymbol)+f).attr("y1",o/2-20).attr("y2",e=>o/2-175+10*e.geneSymbol.length).attr("stroke",t=>t.geneSymbol==e?"red":"#ababab").attr("stroke-width",.5)})},e}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
