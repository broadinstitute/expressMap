var GeneEqtlVisualizer=function(t){"use strict";var e={},n={},a=34,r=10,i=13;function o(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}function l(t){var l=new RegExp('["'+t+"\n\r]"),c=t.charCodeAt(0);function s(t,o){var l,s=[],f=t.length,u=0,d=0,h=f<=0,b=!1;function p(){if(h)return n;if(b)return b=!1,e;var o,l,s=u;if(t.charCodeAt(s)===a){for(;u++<f&&t.charCodeAt(u)!==a||t.charCodeAt(++u)===a;);return(o=u)>=f?h=!0:(l=t.charCodeAt(u++))===r?b=!0:l===i&&(b=!0,t.charCodeAt(u)===r&&++u),t.slice(s+1,o-1).replace(/""/g,'"')}for(;u<f;){if((l=t.charCodeAt(o=u++))===r)b=!0;else if(l===i)b=!0,t.charCodeAt(u)===r&&++u;else if(l!==c)continue;return t.slice(s,o)}return h=!0,t.slice(s,f)}for(t.charCodeAt(f-1)===r&&--f,t.charCodeAt(f-1)===i&&--f;(l=p())!==n;){for(var g=[];l!==e&&l!==n;)g.push(l),l=p();o&&null==(g=o(g,d++))||s.push(g)}return s}function f(e){return e.map(u).join(t)}function u(t){return null==t?"":l.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,a,r=s(t,function(t,r){if(n)return n(t,r-1);a=t,n=e?function(t,e){var n=o(t);return function(a,r){return e(n(a),r,t)}}(t,e):o(t)});return r.columns=a||[],r},parseRows:s,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var a in t)a in e||n.push(e[a]=a)}),n}(e)),[n.map(u).join(t)].concat(e.map(function(e){return n.map(function(t){return u(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(f).join("\n")}}}l(","),l("\t");function c(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function s(t,e){return fetch(t,e).then(c)}var f={value:function(){}};function u(){for(var t,e=0,n=arguments.length,a={};e<n;++e){if(!(t=arguments[e]+"")||t in a)throw new Error("illegal type: "+t);a[t]=[]}return new d(a)}function d(t){this._=t}function h(t,e){for(var n,a=0,r=t.length;a<r;++a)if((n=t[a]).name===e)return n.value}function b(t,e,n){for(var a=0,r=t.length;a<r;++a)if(t[a].name===e){t[a]=f,t=t.slice(0,a).concat(t.slice(a+1));break}return null!=n&&t.push({name:e,value:n}),t}d.prototype=u.prototype={constructor:d,on:function(t,e){var n,a,r=this._,i=(a=r,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!a.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),o=-1,l=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<l;)if(n=(t=i[o]).type)r[n]=b(r[n],t.name,e);else if(null==e)for(n in r)r[n]=b(r[n],t.name,null);return this}for(;++o<l;)if((n=(t=i[o]).type)&&(n=h(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new d(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,a,r=new Array(n),i=0;i<n;++i)r[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(a=this._[t]).length;i<n;++i)a[i].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var a=this._[t],r=0,i=a.length;r<i;++r)a[r].value.apply(e,n)}};var p="http://www.w3.org/1999/xhtml",g={svg:"http://www.w3.org/2000/svg",xhtml:p,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function m(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),g.hasOwnProperty(e)?{space:g[e],local:t}:t}function y(t){var e=m(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===p&&e.documentElement.namespaceURI===p?e.createElement(t):e.createElementNS(n,t)}})(e)}function v(){}function x(t){return null==t?v:function(){return this.querySelector(t)}}function w(){return[]}function _(t){return null==t?w:function(){return this.querySelectorAll(t)}}var S=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var M=document.documentElement;if(!M.matches){var A=M.webkitMatchesSelector||M.msMatchesSelector||M.mozMatchesSelector||M.oMatchesSelector;S=function(t){return function(){return A.call(this,t)}}}}var T=S;function k(t){return new Array(t.length)}function E(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}E.prototype={constructor:E,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var P="$";function N(t,e,n,a,r,i){for(var o,l=0,c=e.length,s=i.length;l<s;++l)(o=e[l])?(o.__data__=i[l],a[l]=o):n[l]=new E(t,i[l]);for(;l<c;++l)(o=e[l])&&(r[l]=o)}function C(t,e,n,a,r,i,o){var l,c,s,f={},u=e.length,d=i.length,h=new Array(u);for(l=0;l<u;++l)(c=e[l])&&(h[l]=s=P+o.call(c,c.__data__,l,e),s in f?r[l]=c:f[s]=c);for(l=0;l<d;++l)(c=f[s=P+o.call(t,i[l],l,i)])?(a[l]=c,c.__data__=i[l],f[s]=null):n[l]=new E(t,i[l]);for(l=0;l<u;++l)(c=e[l])&&f[h[l]]===c&&(r[l]=c)}function D(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function I(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function L(t,e){return t.style.getPropertyValue(e)||I(t).getComputedStyle(t,null).getPropertyValue(e)}function z(t){return t.trim().split(/^|\s+/)}function U(t){return t.classList||new F(t)}function F(t){this._node=t,this._names=z(t.getAttribute("class")||"")}function G(t,e){for(var n=U(t),a=-1,r=e.length;++a<r;)n.add(e[a])}function Y(t,e){for(var n=U(t),a=-1,r=e.length;++a<r;)n.remove(e[a])}function O(){this.textContent=""}function V(){this.innerHTML=""}function q(){this.nextSibling&&this.parentNode.appendChild(this)}function X(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function B(){return null}function j(){var t=this.parentNode;t&&t.removeChild(this)}function R(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function H(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}F.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var W={},Z=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(W={mouseenter:"mouseover",mouseleave:"mouseout"}));function Q(t,e,n){return t=K(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function K(t,e,n){return function(a){var r=Z;Z=a;try{t.call(this,this.__data__,e,n)}finally{Z=r}}}function J(t){return function(){var e=this.__on;if(e){for(var n,a=0,r=-1,i=e.length;a<i;++a)n=e[a],t.type&&n.type!==t.type||n.name!==t.name?e[++r]=n:this.removeEventListener(n.type,n.listener,n.capture);++r?e.length=r:delete this.__on}}}function tt(t,e,n){var a=W.hasOwnProperty(t.type)?Q:K;return function(r,i,o){var l,c=this.__on,s=a(e,i,o);if(c)for(var f=0,u=c.length;f<u;++f)if((l=c[f]).type===t.type&&l.name===t.name)return this.removeEventListener(l.type,l.listener,l.capture),this.addEventListener(l.type,l.listener=s,l.capture=n),void(l.value=e);this.addEventListener(t.type,s,n),l={type:t.type,name:t.name,value:e,listener:s,capture:n},c?c.push(l):this.__on=[l]}}function et(t,e,n){var a=I(t),r=a.CustomEvent;"function"==typeof r?r=new r(e,n):(r=a.document.createEvent("Event"),n?(r.initEvent(e,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(e,!1,!1)),t.dispatchEvent(r)}var nt=[null];function at(t,e){this._groups=t,this._parents=e}function rt(){return new at([[document.documentElement]],nt)}function it(t){return"string"==typeof t?new at([[document.querySelector(t)]],[document.documentElement]):new at([[t]],nt)}function ot(){for(var t,e=Z;t=e.sourceEvent;)e=t;return e}function lt(t){var e=ot();return e.changedTouches&&(e=e.changedTouches[0]),function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var a=n.createSVGPoint();return a.x=e.clientX,a.y=e.clientY,[(a=a.matrixTransform(t.getScreenCTM().inverse())).x,a.y]}var r=t.getBoundingClientRect();return[e.clientX-r.left-t.clientLeft,e.clientY-r.top-t.clientTop]}(t,e)}function ct(){Z.preventDefault(),Z.stopImmediatePropagation()}function st(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function ft(t,e){var n=Object.create(t.prototype);for(var a in e)n[a]=e[a];return n}function ut(){}at.prototype=rt.prototype={constructor:at,select:function(t){"function"!=typeof t&&(t=x(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o,l=e[r],c=l.length,s=a[r]=new Array(c),f=0;f<c;++f)(i=l[f])&&(o=t.call(i,i.__data__,f,l))&&("__data__"in i&&(o.__data__=i.__data__),s[f]=o);return new at(a,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=_(t));for(var e=this._groups,n=e.length,a=[],r=[],i=0;i<n;++i)for(var o,l=e[i],c=l.length,s=0;s<c;++s)(o=l[s])&&(a.push(t.call(o,o.__data__,s,l)),r.push(o));return new at(a,r)},filter:function(t){"function"!=typeof t&&(t=T(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o=e[r],l=o.length,c=a[r]=[],s=0;s<l;++s)(i=o[s])&&t.call(i,i.__data__,s,o)&&c.push(i);return new at(a,this._parents)},data:function(t,e){if(!t)return b=new Array(this.size()),f=-1,this.each(function(t){b[++f]=t}),b;var n,a=e?C:N,r=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var o=i.length,l=new Array(o),c=new Array(o),s=new Array(o),f=0;f<o;++f){var u=r[f],d=i[f],h=d.length,b=t.call(u,u&&u.__data__,f,r),p=b.length,g=c[f]=new Array(p),m=l[f]=new Array(p);a(u,d,g,m,s[f]=new Array(h),b,e);for(var y,v,x=0,w=0;x<p;++x)if(y=g[x]){for(x>=w&&(w=x+1);!(v=m[w])&&++w<p;);y._next=v||null}}return(l=new at(l,r))._enter=c,l._exit=s,l},enter:function(){return new at(this._enter||this._groups.map(k),this._parents)},exit:function(){return new at(this._exit||this._groups.map(k),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,a=e.length,r=n.length,i=Math.min(a,r),o=new Array(a),l=0;l<i;++l)for(var c,s=e[l],f=n[l],u=s.length,d=o[l]=new Array(u),h=0;h<u;++h)(c=s[h]||f[h])&&(d[h]=c);for(;l<a;++l)o[l]=e[l];return new at(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var a,r=t[e],i=r.length-1,o=r[i];--i>=0;)(a=r[i])&&(o&&o!==a.nextSibling&&o.parentNode.insertBefore(a,o),o=a);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=D);for(var n=this._groups,a=n.length,r=new Array(a),i=0;i<a;++i){for(var o,l=n[i],c=l.length,s=r[i]=new Array(c),f=0;f<c;++f)(o=l[f])&&(s[f]=o);s.sort(e)}return new at(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var a=t[e],r=0,i=a.length;r<i;++r){var o=a[r];if(o)return o}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,a=e.length;n<a;++n)for(var r,i=e[n],o=0,l=i.length;o<l;++o)(r=i[o])&&t.call(r,r.__data__,o,i);return this},attr:function(t,e){var n=m(t);if(arguments.length<2){var a=this.node();return n.local?a.getAttributeNS(n.space,n.local):a.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var a=e.apply(this,arguments);null==a?this.style.removeProperty(t):this.style.setProperty(t,a,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):L(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=z(t+"");if(arguments.length<2){for(var a=U(this.node()),r=-1,i=n.length;++r<i;)if(!a.contains(n[r]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?G:Y)(this,t)}}:e?function(t){return function(){G(this,t)}}:function(t){return function(){Y(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?O:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?V:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(q)},lower:function(){return this.each(X)},append:function(t){var e="function"==typeof t?t:y(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:y(t),a=null==e?B:"function"==typeof e?e:x(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),a.apply(this,arguments)||null)})},remove:function(){return this.each(j)},clone:function(t){return this.select(t?H:R)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var a,r,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),o=i.length;if(!(arguments.length<2)){for(l=e?tt:J,null==n&&(n=!1),a=0;a<o;++a)this.each(l(i[a],e,n));return this}var l=this.node().__on;if(l)for(var c,s=0,f=l.length;s<f;++s)for(a=0,c=l[s];a<o;++a)if((r=i[a]).type===c.type&&r.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return et(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return et(this,t,e)}})(t,e))}};var dt="\\s*([+-]?\\d+)\\s*",ht="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",bt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",pt=/^#([0-9a-f]{3})$/,gt=/^#([0-9a-f]{6})$/,mt=new RegExp("^rgb\\("+[dt,dt,dt]+"\\)$"),yt=new RegExp("^rgb\\("+[bt,bt,bt]+"\\)$"),vt=new RegExp("^rgba\\("+[dt,dt,dt,ht]+"\\)$"),xt=new RegExp("^rgba\\("+[bt,bt,bt,ht]+"\\)$"),wt=new RegExp("^hsl\\("+[ht,bt,bt]+"\\)$"),_t=new RegExp("^hsla\\("+[ht,bt,bt,ht]+"\\)$"),St={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Mt(t){var e;return t=(t+"").trim().toLowerCase(),(e=pt.exec(t))?new Et((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=gt.exec(t))?At(parseInt(e[1],16)):(e=mt.exec(t))?new Et(e[1],e[2],e[3],1):(e=yt.exec(t))?new Et(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=vt.exec(t))?$t(e[1],e[2],e[3],e[4]):(e=xt.exec(t))?$t(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=wt.exec(t))?Nt(e[1],e[2]/100,e[3]/100,1):(e=_t.exec(t))?Nt(e[1],e[2]/100,e[3]/100,e[4]):St.hasOwnProperty(t)?At(St[t]):"transparent"===t?new Et(NaN,NaN,NaN,0):null}function At(t){return new Et(t>>16&255,t>>8&255,255&t,1)}function $t(t,e,n,a){return a<=0&&(t=e=n=NaN),new Et(t,e,n,a)}function Tt(t){return t instanceof ut||(t=Mt(t)),t?new Et((t=t.rgb()).r,t.g,t.b,t.opacity):new Et}function kt(t,e,n,a){return 1===arguments.length?Tt(t):new Et(t,e,n,null==a?1:a)}function Et(t,e,n,a){this.r=+t,this.g=+e,this.b=+n,this.opacity=+a}function Pt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Nt(t,e,n,a){return a<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Ct(t,e,n,a)}function Ct(t,e,n,a){this.h=+t,this.s=+e,this.l=+n,this.opacity=+a}function Dt(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}st(ut,Mt,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),st(Et,kt,ft(ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Et(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Et(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Pt(this.r)+Pt(this.g)+Pt(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),st(Ct,function(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof Ct)return new Ct(t.h,t.s,t.l,t.opacity);if(t instanceof ut||(t=Mt(t)),!t)return new Ct;if(t instanceof Ct)return t;var e=(t=t.rgb()).r/255,n=t.g/255,a=t.b/255,r=Math.min(e,n,a),i=Math.max(e,n,a),o=NaN,l=i-r,c=(i+r)/2;return l?(o=e===i?(n-a)/l+6*(n<a):n===i?(a-e)/l+2:(e-n)/l+4,l/=c<.5?i+r:2-i-r,o*=60):l=c>0&&c<1?0:o,new Ct(o,l,c,t.opacity)}(t):new Ct(t,e,n,null==a?1:a)},ft(ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ct(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ct(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,a=n+(n<.5?n:1-n)*e,r=2*n-a;return new Et(Dt(t>=240?t-240:t+120,r,a),Dt(t,r,a),Dt(t<120?t+240:t-120,r,a),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var It=Math.PI/180,Lt=180/Math.PI,zt=.96422,Ut=1,Ft=.82521,Gt=4/29,Yt=6/29,Ot=3*Yt*Yt,Vt=Yt*Yt*Yt;function qt(t){if(t instanceof Xt)return new Xt(t.l,t.a,t.b,t.opacity);if(t instanceof Wt){if(isNaN(t.h))return new Xt(t.l,0,0,t.opacity);var e=t.h*It;return new Xt(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof Et||(t=Tt(t));var n,a,r=Ht(t.r),i=Ht(t.g),o=Ht(t.b),l=Bt((.2225045*r+.7168786*i+.0606169*o)/Ut);return r===i&&i===o?n=a=l:(n=Bt((.4360747*r+.3850649*i+.1430804*o)/zt),a=Bt((.0139322*r+.0971045*i+.7141733*o)/Ft)),new Xt(116*l-16,500*(n-l),200*(l-a),t.opacity)}function Xt(t,e,n,a){this.l=+t,this.a=+e,this.b=+n,this.opacity=+a}function Bt(t){return t>Vt?Math.pow(t,1/3):t/Ot+Gt}function jt(t){return t>Yt?t*t*t:Ot*(t-Gt)}function Rt(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ht(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Wt(t,e,n,a){this.h=+t,this.c=+e,this.l=+n,this.opacity=+a}st(Xt,function(t,e,n,a){return 1===arguments.length?qt(t):new Xt(t,e,n,null==a?1:a)},ft(ut,{brighter:function(t){return new Xt(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Xt(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Et(Rt(3.1338561*(e=zt*jt(e))-1.6168667*(t=Ut*jt(t))-.4906146*(n=Ft*jt(n))),Rt(-.9787684*e+1.9161415*t+.033454*n),Rt(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),st(Wt,function(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof Wt)return new Wt(t.h,t.c,t.l,t.opacity);if(t instanceof Xt||(t=qt(t)),0===t.a&&0===t.b)return new Wt(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*Lt;return new Wt(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new Wt(t,e,n,null==a?1:a)},ft(ut,{brighter:function(t){return new Wt(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Wt(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return qt(this).rgb()}}));var Zt=-.14861,Qt=1.78277,Kt=-.29227,Jt=-.90649,te=1.97294,ee=te*Jt,ne=te*Qt,ae=Qt*Kt-Jt*Zt;function re(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof ie)return new ie(t.h,t.s,t.l,t.opacity);t instanceof Et||(t=Tt(t));var e=t.r/255,n=t.g/255,a=t.b/255,r=(ae*a+ee*e-ne*n)/(ae+ee-ne),i=a-r,o=(te*(n-r)-Kt*i)/Jt,l=Math.sqrt(o*o+i*i)/(te*r*(1-r)),c=l?Math.atan2(o,i)*Lt-120:NaN;return new ie(c<0?c+360:c,l,r,t.opacity)}(t):new ie(t,e,n,null==a?1:a)}function ie(t,e,n,a){this.h=+t,this.s=+e,this.l=+n,this.opacity=+a}function oe(t){return function(){return t}}function le(t,e){return function(n){return t+n*e}}function ce(t){return 1==(t=+t)?se:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(a){return Math.pow(t+a*e,n)}}(e,n,t):oe(isNaN(e)?n:e)}}function se(t,e){var n=e-t;return n?le(t,n):oe(isNaN(t)?e:t)}st(ie,re,ft(ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ie(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ie(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*It,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),a=Math.cos(t),r=Math.sin(t);return new Et(255*(e+n*(Zt*a+Qt*r)),255*(e+n*(Kt*a+Jt*r)),255*(e+n*(te*a)),this.opacity)}}));var fe=function t(e){var n=ce(e);function a(t,e){var a=n((t=kt(t)).r,(e=kt(e)).r),r=n(t.g,e.g),i=n(t.b,e.b),o=se(t.opacity,e.opacity);return function(e){return t.r=a(e),t.g=r(e),t.b=i(e),t.opacity=o(e),t+""}}return a.gamma=t,a}(1);var ue,de=(ue=function(t){var e=t.length-1;return function(n){var a=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),r=t[a],i=t[a+1],o=a>0?t[a-1]:2*r-i,l=a<e-1?t[a+2]:2*i-r;return function(t,e,n,a,r){var i=t*t,o=i*t;return((1-3*t+3*i-o)*e+(4-6*i+3*o)*n+(1+3*t+3*i-3*o)*a+o*r)/6}((n-a/e)*e,o,r,i,l)}},function(t){var e,n,a=t.length,r=new Array(a),i=new Array(a),o=new Array(a);for(e=0;e<a;++e)n=kt(t[e]),r[e]=n.r||0,i[e]=n.g||0,o[e]=n.b||0;return r=ue(r),i=ue(i),o=ue(o),n.opacity=1,function(t){return n.r=r(t),n.g=i(t),n.b=o(t),n+""}});function he(t,e){return e-=t=+t,function(n){return t+e*n}}var be=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,pe=new RegExp(be.source,"g");function ge(t,e){var n,a,r,i=be.lastIndex=pe.lastIndex=0,o=-1,l=[],c=[];for(t+="",e+="";(n=be.exec(t))&&(a=pe.exec(e));)(r=a.index)>i&&(r=e.slice(i,r),l[o]?l[o]+=r:l[++o]=r),(n=n[0])===(a=a[0])?l[o]?l[o]+=a:l[++o]=a:(l[++o]=null,c.push({i:o,x:he(n,a)})),i=pe.lastIndex;return i<e.length&&(r=e.slice(i),l[o]?l[o]+=r:l[++o]=r),l.length<2?c[0]?function(t){return function(e){return t(e)+""}}(c[0].x):function(t){return function(){return t}}(e):(e=c.length,function(t){for(var n,a=0;a<e;++a)l[(n=c[a]).i]=n.x(t);return l.join("")})}function me(t,e){var n,a=typeof e;return null==e||"boolean"===a?oe(e):("number"===a?he:"string"===a?(n=Mt(e))?(e=n,fe):ge:e instanceof Mt?fe:e instanceof Date?function(t,e){var n=new Date;return e-=t=+t,function(a){return n.setTime(t+e*a),n}}:Array.isArray(e)?function(t,e){var n,a=e?e.length:0,r=t?Math.min(a,t.length):0,i=new Array(r),o=new Array(a);for(n=0;n<r;++n)i[n]=me(t[n],e[n]);for(;n<a;++n)o[n]=e[n];return function(t){for(n=0;n<r;++n)o[n]=i[n](t);return o}}:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?function(t,e){var n,a={},r={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?a[n]=me(t[n],e[n]):r[n]=e[n];return function(t){for(n in a)r[n]=a[n](t);return r}}:he)(t,e)}function ye(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}}var ve,xe,we,_e,Se=180/Math.PI,Me={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Ae(t,e,n,a,r,i){var o,l,c;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(c=t*n+e*a)&&(n-=t*c,a-=e*c),(l=Math.sqrt(n*n+a*a))&&(n/=l,a/=l,c/=l),t*a<e*n&&(t=-t,e=-e,c=-c,o=-o),{translateX:r,translateY:i,rotate:Math.atan2(e,t)*Se,skewX:Math.atan(c)*Se,scaleX:o,scaleY:l}}function $e(t,e,n,a){function r(t){return t.length?t.pop()+" ":""}return function(i,o){var l=[],c=[];return i=t(i),o=t(o),function(t,a,r,i,o,l){if(t!==r||a!==i){var c=o.push("translate(",null,e,null,n);l.push({i:c-4,x:he(t,r)},{i:c-2,x:he(a,i)})}else(r||i)&&o.push("translate("+r+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,l,c),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(r(n)+"rotate(",null,a)-2,x:he(t,e)})):e&&n.push(r(n)+"rotate("+e+a)}(i.rotate,o.rotate,l,c),function(t,e,n,i){t!==e?i.push({i:n.push(r(n)+"skewX(",null,a)-2,x:he(t,e)}):e&&n.push(r(n)+"skewX("+e+a)}(i.skewX,o.skewX,l,c),function(t,e,n,a,i,o){if(t!==n||e!==a){var l=i.push(r(i)+"scale(",null,",",null,")");o.push({i:l-4,x:he(t,n)},{i:l-2,x:he(e,a)})}else 1===n&&1===a||i.push(r(i)+"scale("+n+","+a+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,l,c),i=o=null,function(t){for(var e,n=-1,a=c.length;++n<a;)l[(e=c[n]).i]=e.x(t);return l.join("")}}}var Te=$e(function(t){return"none"===t?Me:(ve||(ve=document.createElement("DIV"),xe=document.documentElement,we=document.defaultView),ve.style.transform=t,t=we.getComputedStyle(xe.appendChild(ve),null).getPropertyValue("transform"),xe.removeChild(ve),Ae(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),ke=$e(function(t){return null==t?Me:(_e||(_e=document.createElementNS("http://www.w3.org/2000/svg","g")),_e.setAttribute("transform",t),(t=_e.transform.baseVal.consolidate())?Ae((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Me)},", ",")",")");Math.SQRT2;function Ee(t){return function e(n){function a(e,a){var r=t((e=re(e)).h,(a=re(a)).h),i=se(e.s,a.s),o=se(e.l,a.l),l=se(e.opacity,a.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=o(Math.pow(t,n)),e.opacity=l(t),e+""}}return n=+n,a.gamma=e,a}(1)}Ee(function(t,e){var n=e-t;return n?le(t,n>180||n<-180?n-360*Math.round(n/360):n):oe(isNaN(t)?e:t)});var Pe,Ne,Ce=Ee(se),De=0,Ie=0,Le=0,ze=1e3,Ue=0,Fe=0,Ge=0,Ye="object"==typeof performance&&performance.now?performance:Date,Oe="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ve(){return Fe||(Oe(qe),Fe=Ye.now()+Ge)}function qe(){Fe=0}function Xe(){this._call=this._time=this._next=null}function Be(t,e,n){var a=new Xe;return a.restart(t,e,n),a}function je(){Fe=(Ue=Ye.now())+Ge,De=Ie=0;try{!function(){Ve(),++De;for(var t,e=Pe;e;)(t=Fe-e._time)>=0&&e._call.call(null,t),e=e._next;--De}()}finally{De=0,function(){var t,e,n=Pe,a=1/0;for(;n;)n._call?(a>n._time&&(a=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Pe=e);Ne=t,He(a)}(),Fe=0}}function Re(){var t=Ye.now(),e=t-Ue;e>ze&&(Ge-=e,Ue=t)}function He(t){De||(Ie&&(Ie=clearTimeout(Ie)),t-Fe>24?(t<1/0&&(Ie=setTimeout(je,t-Ye.now()-Ge)),Le&&(Le=clearInterval(Le))):(Le||(Ue=Ye.now(),Le=setInterval(Re,ze)),De=1,Oe(je)))}function We(t,e,n){var a=new Xe;return e=null==e?0:+e,a.restart(function(n){a.stop(),t(n+e)},e,n),a}Xe.prototype=Be.prototype={constructor:Xe,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Ve():+n)+(null==e?0:+e),this._next||Ne===this||(Ne?Ne._next=this:Pe=this,Ne=this),this._call=t,this._time=n,He()},stop:function(){this._call&&(this._call=null,this._time=1/0,He())}};var Ze=u("start","end","interrupt"),Qe=[],Ke=0,Je=1,tn=2,en=3,nn=4,an=5,rn=6;function on(t,e,n,a,r,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var a,r=t.__transition;function i(c){var s,f,u,d;if(n.state!==Je)return l();for(s in r)if((d=r[s]).name===n.name){if(d.state===en)return We(i);d.state===nn?(d.state=rn,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete r[s]):+s<e&&(d.state=rn,d.timer.stop(),delete r[s])}if(We(function(){n.state===en&&(n.state=nn,n.timer.restart(o,n.delay,n.time),o(c))}),n.state=tn,n.on.call("start",t,t.__data__,n.index,n.group),n.state===tn){for(n.state=en,a=new Array(u=n.tween.length),s=0,f=-1;s<u;++s)(d=n.tween[s].value.call(t,t.__data__,n.index,n.group))&&(a[++f]=d);a.length=f+1}}function o(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(l),n.state=an,1),i=-1,o=a.length;++i<o;)a[i].call(null,r);n.state===an&&(n.on.call("end",t,t.__data__,n.index,n.group),l())}function l(){for(var a in n.state=rn,n.timer.stop(),delete r[e],r)return;delete t.__transition}r[e]=n,n.timer=Be(function(t){n.state=Je,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)},0,n.time)}(t,n,{name:e,index:a,group:r,on:Ze,tween:Qe,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:Ke})}function ln(t,e){var n=sn(t,e);if(n.state>Ke)throw new Error("too late; already scheduled");return n}function cn(t,e){var n=sn(t,e);if(n.state>tn)throw new Error("too late; already started");return n}function sn(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function fn(t,e){var n,a,r,i=t.__transition,o=!0;if(i){for(r in e=null==e?null:e+"",i)(n=i[r]).name===e?(a=n.state>tn&&n.state<an,n.state=rn,n.timer.stop(),a&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete i[r]):o=!1;o&&delete t.__transition}}function un(t,e,n){var a=t._id;return t.each(function(){var t=cn(this,a);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return sn(t,a).value[e]}}function dn(t,e){var n;return("number"==typeof e?he:e instanceof Mt?fe:(n=Mt(e))?(e=n,fe):ge)(t,e)}var hn=rt.prototype.constructor;var bn=0;function pn(t,e,n,a){this._groups=t,this._parents=e,this._name=n,this._id=a}function gn(){return++bn}var mn=rt.prototype;pn.prototype=function(t){return rt().transition(t)}.prototype={constructor:pn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=x(t));for(var a=this._groups,r=a.length,i=new Array(r),o=0;o<r;++o)for(var l,c,s=a[o],f=s.length,u=i[o]=new Array(f),d=0;d<f;++d)(l=s[d])&&(c=t.call(l,l.__data__,d,s))&&("__data__"in l&&(c.__data__=l.__data__),u[d]=c,on(u[d],e,n,d,u,sn(l,n)));return new pn(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=_(t));for(var a=this._groups,r=a.length,i=[],o=[],l=0;l<r;++l)for(var c,s=a[l],f=s.length,u=0;u<f;++u)if(c=s[u]){for(var d,h=t.call(c,c.__data__,u,s),b=sn(c,n),p=0,g=h.length;p<g;++p)(d=h[p])&&on(d,e,n,p,h,b);i.push(h),o.push(c)}return new pn(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=T(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o=e[r],l=o.length,c=a[r]=[],s=0;s<l;++s)(i=o[s])&&t.call(i,i.__data__,s,o)&&c.push(i);return new pn(a,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,a=e.length,r=n.length,i=Math.min(a,r),o=new Array(a),l=0;l<i;++l)for(var c,s=e[l],f=n[l],u=s.length,d=o[l]=new Array(u),h=0;h<u;++h)(c=s[h]||f[h])&&(d[h]=c);for(;l<a;++l)o[l]=e[l];return new pn(o,this._parents,this._name,this._id)},selection:function(){return new hn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=gn(),a=this._groups,r=a.length,i=0;i<r;++i)for(var o,l=a[i],c=l.length,s=0;s<c;++s)if(o=l[s]){var f=sn(o,e);on(o,t,n,s,l,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new pn(a,this._parents,t,n)},call:mn.call,nodes:mn.nodes,node:mn.node,size:mn.size,empty:mn.empty,each:mn.each,on:function(t,e){var n=this._id;return arguments.length<2?sn(this.node(),n).on.on(t):this.each(function(t,e,n){var a,r,i=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?ln:cn;return function(){var o=i(this,t),l=o.on;l!==a&&(r=(a=l).copy()).on(e,n),o.on=r}}(n,t,e))},attr:function(t,e){var n=m(t),a="transform"===n?ke:dn;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var a,r,i;return function(){var o,l=n(this);if(null!=l)return(o=this.getAttributeNS(t.space,t.local))===l?null:o===a&&l===r?i:i=e(a=o,r=l);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var a,r,i;return function(){var o,l=n(this);if(null!=l)return(o=this.getAttribute(t))===l?null:o===a&&l===r?i:i=e(a=o,r=l);this.removeAttribute(t)}})(n,a,un(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var a,r;return function(){var i=this.getAttributeNS(t.space,t.local);return i===n?null:i===a?r:r=e(a=i,n)}}:function(t,e,n){var a,r;return function(){var i=this.getAttribute(t);return i===n?null:i===a?r:r=e(a=i,n)}})(n,a,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var a=m(t);return this.tween(n,(a.local?function(t,e){function n(){var n=this,a=e.apply(n,arguments);return a&&function(e){n.setAttributeNS(t.space,t.local,a(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,a=e.apply(n,arguments);return a&&function(e){n.setAttribute(t,a(e))}}return n._value=e,n})(a,e))},style:function(t,e,n){var a="transform"==(t+="")?Te:dn;return null==e?this.styleTween(t,function(t,e){var n,a,r;return function(){var i=L(this,t),o=(this.style.removeProperty(t),L(this,t));return i===o?null:i===n&&o===a?r:r=e(n=i,a=o)}}(t,a)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var a,r,i;return function(){var o=L(this,t),l=n(this);return null==l&&(this.style.removeProperty(t),l=L(this,t)),o===l?null:o===a&&l===r?i:i=e(a=o,r=l)}}(t,a,un(this,"style."+t,e)):function(t,e,n){var a,r;return function(){var i=L(this,t);return i===n?null:i===a?r:r=e(a=i,n)}}(t,a,e+""),n)},styleTween:function(t,e,n){var a="style."+(t+="");if(arguments.length<2)return(a=this.tween(a))&&a._value;if(null==e)return this.tween(a,null);if("function"!=typeof e)throw new Error;return this.tween(a,function(t,e,n){function a(){var a=this,r=e.apply(a,arguments);return r&&function(e){a.style.setProperty(t,r(e),n)}}return a._value=e,a}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(un(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var a,r=sn(this.node(),n).tween,i=0,o=r.length;i<o;++i)if((a=r[i]).name===t)return a.value;return null}return this.each((null==e?function(t,e){var n,a;return function(){var r=cn(this,t),i=r.tween;if(i!==n)for(var o=0,l=(a=n=i).length;o<l;++o)if(a[o].name===e){(a=a.slice()).splice(o,1);break}r.tween=a}}:function(t,e,n){var a,r;if("function"!=typeof n)throw new Error;return function(){var i=cn(this,t),o=i.tween;if(o!==a){r=(a=o).slice();for(var l={name:e,value:n},c=0,s=r.length;c<s;++c)if(r[c].name===e){r[c]=l;break}c===s&&r.push(l)}i.tween=r}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){ln(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){ln(this,t).delay=e}})(e,t)):sn(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){cn(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){cn(this,t).duration=e}})(e,t)):sn(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){cn(this,t).ease=e}}(e,t)):sn(this.node(),e).ease}};Math.PI,Math.PI;var yn={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function vn(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return yn.time=Ve(),yn;return n}function xn(t){return function(){return t}}function wn(){Z.stopImmediatePropagation()}function _n(){Z.preventDefault(),Z.stopImmediatePropagation()}rt.prototype.interrupt=function(t){return this.each(function(){fn(this,t)})},rt.prototype.transition=function(t){var e,n;t instanceof pn?(e=t._id,t=t._name):(e=gn(),(n=yn).time=Ve(),t=null==t?null:t+"");for(var a=this._groups,r=a.length,i=0;i<r;++i)for(var o,l=a[i],c=l.length,s=0;s<c;++s)(o=l[s])&&on(o,t,e,s,l,n||vn(o,e));return new pn(a,this._parents,t,e)};var Sn={name:"drag"},Mn={name:"space"},An={name:"handle"},$n={name:"center"},Tn={name:"x",handles:["e","w"].map(Ln),input:function(t,e){return t&&[[t[0],e[0][1]],[t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},kn={name:"y",handles:["n","s"].map(Ln),input:function(t,e){return t&&[[e[0][0],t[0]],[e[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},En={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Ln),input:function(t){return t},output:function(t){return t}},Pn={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Nn={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Cn={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Dn={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},In={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Ln(t){return{type:t}}function zn(){return!Z.button}function Un(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Fn(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Gn(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Yn(){return On(Tn)}function On(t){var e,n=Un,a=zn,r=u(o,"start","brush","end"),i=6;function o(e){var n=e.property("__brush",d).selectAll(".overlay").data([Ln("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Pn.overlay).merge(n).each(function(){var t=Fn(this).extent;it(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),e.selectAll(".selection").data([Ln("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Pn.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var a=e.selectAll(".handle").data(t.handles,function(t){return t.type});a.exit().remove(),a.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Pn[t.type]}),e.each(l).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",f)}function l(){var t=it(this),e=Fn(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?e[1][0]-i/2:e[0][0]-i/2}).attr("y",function(t){return"s"===t.type[0]?e[1][1]-i/2:e[0][1]-i/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+i:i}).attr("height",function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+i:i})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,e){return t.__brush.emitter||new s(t,e)}function s(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function f(){if(Z.touches){if(Z.changedTouches.length<Z.touches.length)return _n()}else if(e)return;if(a.apply(this,arguments)){var n,r,i,o,s,f,u,d,h,b,p,g,m,y=this,v=Z.target.__data__.type,x="selection"===(Z.metaKey?v="overlay":v)?Sn:Z.altKey?$n:An,w=t===kn?null:Dn[v],_=t===Tn?null:In[v],S=Fn(y),M=S.extent,A=S.selection,$=M[0][0],T=M[0][1],k=M[1][0],E=M[1][1],P=w&&_&&Z.shiftKey,N=lt(y),C=N,D=c(y,arguments).beforestart();"overlay"===v?S.selection=A=[[n=t===kn?$:N[0],i=t===Tn?T:N[1]],[s=t===kn?k:n,u=t===Tn?E:i]]:(n=A[0][0],i=A[0][1],s=A[1][0],u=A[1][1]),r=n,o=i,f=s,d=u;var I=it(y).attr("pointer-events","none"),L=I.selectAll(".overlay").attr("cursor",Pn[v]);if(Z.touches)I.on("touchmove.brush",U,!0).on("touchend.brush touchcancel.brush",G,!0);else{var z=it(Z.view).on("keydown.brush",function(){switch(Z.keyCode){case 16:P=w&&_;break;case 18:x===An&&(w&&(s=f-h*w,n=r+h*w),_&&(u=d-b*_,i=o+b*_),x=$n,F());break;case 32:x!==An&&x!==$n||(w<0?s=f-h:w>0&&(n=r-h),_<0?u=d-b:_>0&&(i=o-b),x=Mn,L.attr("cursor",Pn.selection),F());break;default:return}_n()},!0).on("keyup.brush",function(){switch(Z.keyCode){case 16:P&&(g=m=P=!1,F());break;case 18:x===$n&&(w<0?s=f:w>0&&(n=r),_<0?u=d:_>0&&(i=o),x=An,F());break;case 32:x===Mn&&(Z.altKey?(w&&(s=f-h*w,n=r+h*w),_&&(u=d-b*_,i=o+b*_),x=$n):(w<0?s=f:w>0&&(n=r),_<0?u=d:_>0&&(i=o),x=An),L.attr("cursor",Pn[v]),F());break;default:return}_n()},!0).on("mousemove.brush",U,!0).on("mouseup.brush",G,!0);!function(t){var e=t.document.documentElement,n=it(t).on("dragstart.drag",ct,!0);"onselectstart"in e?n.on("selectstart.drag",ct,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}(Z.view)}wn(),fn(y),l.call(y),D.start()}function U(){var t=lt(y);!P||g||m||(Math.abs(t[0]-C[0])>Math.abs(t[1]-C[1])?m=!0:g=!0),C=t,p=!0,_n(),F()}function F(){var t;switch(h=C[0]-N[0],b=C[1]-N[1],x){case Mn:case Sn:w&&(h=Math.max($-n,Math.min(k-s,h)),r=n+h,f=s+h),_&&(b=Math.max(T-i,Math.min(E-u,b)),o=i+b,d=u+b);break;case An:w<0?(h=Math.max($-n,Math.min(k-n,h)),r=n+h,f=s):w>0&&(h=Math.max($-s,Math.min(k-s,h)),r=n,f=s+h),_<0?(b=Math.max(T-i,Math.min(E-i,b)),o=i+b,d=u):_>0&&(b=Math.max(T-u,Math.min(E-u,b)),o=i,d=u+b);break;case $n:w&&(r=Math.max($,Math.min(k,n-h*w)),f=Math.max($,Math.min(k,s+h*w))),_&&(o=Math.max(T,Math.min(E,i-b*_)),d=Math.max(T,Math.min(E,u+b*_)))}f<r&&(w*=-1,t=n,n=s,s=t,t=r,r=f,f=t,v in Nn&&L.attr("cursor",Pn[v=Nn[v]])),d<o&&(_*=-1,t=i,i=u,u=t,t=o,o=d,d=t,v in Cn&&L.attr("cursor",Pn[v=Cn[v]])),S.selection&&(A=S.selection),g&&(r=A[0][0],f=A[1][0]),m&&(o=A[0][1],d=A[1][1]),A[0][0]===r&&A[0][1]===o&&A[1][0]===f&&A[1][1]===d||(S.selection=[[r,o],[f,d]],l.call(y),D.brush())}function G(){if(wn(),Z.touches){if(Z.touches.length)return;e&&clearTimeout(e),e=setTimeout(function(){e=null},500),I.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(t,e){var n=t.document.documentElement,a=it(t).on("dragstart.drag",null);e&&(a.on("click.drag",ct,!0),setTimeout(function(){a.on("click.drag",null)},0)),"onselectstart"in n?a.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(Z.view,p),z.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);I.attr("pointer-events","all"),L.attr("cursor",Pn.overlay),S.selection&&(A=S.selection),Gn(A)&&(S.selection=null,l.call(y)),D.end()}}function d(){var e=this.__brush||{selection:null};return e.extent=n.apply(this,arguments),e.dim=t,e}return o.move=function(e,n){e.selection?e.on("start.brush",function(){c(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){c(this,arguments).end()}).tween("brush",function(){var e=this,a=e.__brush,r=c(e,arguments),i=a.selection,o=t.input("function"==typeof n?n.apply(this,arguments):n,a.extent),s=me(i,o);function f(t){a.selection=1===t&&Gn(o)?null:s(t),l.call(e),r.brush()}return i&&o?f:f(1)}):e.each(function(){var e=arguments,a=this.__brush,r=t.input("function"==typeof n?n.apply(this,e):n,a.extent),i=c(this,e).beforestart();fn(this),a.selection=null==r||Gn(r)?null:r,l.call(this),i.start().brush().end()})},s.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){!function(t,e,n,a){var r=Z;t.sourceEvent=Z,Z=t;try{e.apply(n,a)}finally{Z=r}}(new function(t,e,n){this.target=t,this.type=e,this.selection=n}(o,e,t.output(this.state.selection)),r.apply,r,[e,this.that,this.args])}},o.extent=function(t){return arguments.length?(n="function"==typeof t?t:xn([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),o):n},o.filter=function(t){return arguments.length?(a="function"==typeof t?t:xn(!!t),o):a},o.handleSize=function(t){return arguments.length?(i=+t,o):i},o.on=function(){var t=r.on.apply(r,arguments);return t===r?o:t},o}function Vn(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var qn,Xn,Bn=(1===(qn=Vn).length&&(Xn=qn,qn=function(t,e){return Vn(Xn(t),e)}),{left:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){var r=n+a>>>1;qn(t[r],e)<0?n=r+1:a=r}return n},right:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){var r=n+a>>>1;qn(t[r],e)>0?a=r:n=r+1}return n}}).right;function jn(t){return null===t?NaN:+t}function Rn(t,e){var n=function(t,e){var n,a,r=t.length,i=0,o=-1,l=0,c=0;if(null==e)for(;++o<r;)isNaN(n=jn(t[o]))||(c+=(a=n-l)*(n-(l+=a/++i)));else for(;++o<r;)isNaN(n=jn(e(t[o],o,t)))||(c+=(a=n-l)*(n-(l+=a/++i)));if(i>1)return c/(i-1)}(t,e);return n?Math.sqrt(n):n}function Hn(t,e){var n,a,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(a=r=n;++o<i;)null!=(n=t[o])&&(a>n&&(a=n),r<n&&(r=n))}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(a=r=n;++o<i;)null!=(n=e(t[o],o,t))&&(a>n&&(a=n),r<n&&(r=n));return[a,r]}function Wn(t,e,n){t=+t,e=+e,n=(r=arguments.length)<2?(e=t,t=0,1):r<3?1:+n;for(var a=-1,r=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(r);++a<r;)i[a]=t+a*n;return i}var Zn=Math.sqrt(50),Qn=Math.sqrt(10),Kn=Math.sqrt(2);function Jn(t,e,n){var a=(e-t)/Math.max(0,n),r=Math.floor(Math.log(a)/Math.LN10),i=a/Math.pow(10,r);return r>=0?(i>=Zn?10:i>=Qn?5:i>=Kn?2:1)*Math.pow(10,r):-Math.pow(10,-r)/(i>=Zn?10:i>=Qn?5:i>=Kn?2:1)}function ta(t,e,n){if(null==n&&(n=jn),a=t.length){if((e=+e)<=0||a<2)return+n(t[0],0,t);if(e>=1)return+n(t[a-1],a-1,t);var a,r=(a-1)*e,i=Math.floor(r),o=+n(t[i],i,t);return o+(+n(t[i+1],i+1,t)-o)*(r-i)}}function ea(t,e){var n,a,r=t.length,i=-1;if(null==e){for(;++i<r;)if(null!=(n=t[i])&&n>=n)for(a=n;++i<r;)null!=(n=t[i])&&n>a&&(a=n)}else for(;++i<r;)if(null!=(n=e(t[i],i,t))&&n>=n)for(a=n;++i<r;)null!=(n=e(t[i],i,t))&&n>a&&(a=n);return a}function na(t,e){var n,a=t.length,r=-1,i=[];if(null==e)for(;++r<a;)isNaN(n=jn(t[r]))||i.push(n);else for(;++r<a;)isNaN(n=jn(e(t[r],r,t)))||i.push(n);return ta(i.sort(Vn),.5)}function aa(t,e){var n,a,r=t.length,i=-1;if(null==e){for(;++i<r;)if(null!=(n=t[i])&&n>=n)for(a=n;++i<r;)null!=(n=t[i])&&a>n&&(a=n)}else for(;++i<r;)if(null!=(n=e(t[i],i,t))&&n>=n)for(a=n;++i<r;)null!=(n=e(t[i],i,t))&&a>n&&(a=n);return a}function ra(){}function ia(t,e){var n=new ra;if(t instanceof ra)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var a,r=-1,i=t.length;if(null==e)for(;++r<i;)n.set(r,t[r]);else for(;++r<i;)n.set(e(a=t[r],r,t),a)}else if(t)for(var o in t)n.set(o,t[o]);return n}function oa(){var t,e,n,a=[],r=[];function i(n,r,o,l){if(r>=a.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var c,s,f,u=-1,d=n.length,h=a[r++],b=ia(),p=o();++u<d;)(f=b.get(c=h(s=n[u])+""))?f.push(s):b.set(c,[s]);return b.each(function(t,e){l(p,e,i(t,r,o,l))}),p}return n={object:function(t){return i(t,0,la,ca)},map:function(t){return i(t,0,sa,fa)},entries:function(t){return function t(n,i){if(++i>a.length)return n;var o,l=r[i-1];return null!=e&&i>=a.length?o=n.entries():(o=[],n.each(function(e,n){o.push({key:n,values:t(e,i)})})),null!=l?o.sort(function(t,e){return l(t.key,e.key)}):o}(i(t,0,sa,fa),0)},key:function(t){return a.push(t),n},sortKeys:function(t){return r[a.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}}function la(){return{}}function ca(t,e,n){t[e]=n}function sa(){return ia()}function fa(t,e,n){t.set(e,n)}function ua(){}ra.prototype=ia.prototype={constructor:ra,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var da=ia.prototype;ua.prototype=function(t,e){var n=new ua;if(t instanceof ua)t.each(function(t){n.add(t)});else if(t){var a=-1,r=t.length;if(null==e)for(;++a<r;)n.add(t[a]);else for(;++a<r;)n.add(e(t[a],a,t))}return n}.prototype={constructor:ua,has:da.has,add:function(t){return this["$"+(t+="")]=t,this},remove:da.remove,clear:da.clear,values:da.keys,size:da.size,empty:da.empty,each:da.each};var ha=Array.prototype,ba=ha.map,pa=ha.slice,ga={name:"implicit"};function ma(){var t,e,n=function t(e){var n=ia(),a=[],r=ga;function i(t){var i=t+"",o=n.get(i);if(!o){if(r!==ga)return r;n.set(i,o=a.push(t))}return e[(o-1)%e.length]}return e=null==e?[]:pa.call(e),i.domain=function(t){if(!arguments.length)return a.slice();a=[],n=ia();for(var e,r,o=-1,l=t.length;++o<l;)n.has(r=(e=t[o])+"")||n.set(r,a.push(e));return i},i.range=function(t){return arguments.length?(e=pa.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return t().domain(a).range(e).unknown(r)},i}().unknown(void 0),a=n.domain,r=n.range,i=[0,1],o=!1,l=0,c=0,s=.5;function f(){var n=a().length,f=i[1]<i[0],u=i[f-0],d=i[1-f];t=(d-u)/Math.max(1,n-l+2*c),o&&(t=Math.floor(t)),u+=(d-u-t*(n-l))*s,e=t*(1-l),o&&(u=Math.round(u),e=Math.round(e));var h=Wn(n).map(function(e){return u+t*e});return r(f?h.reverse():h)}return delete n.unknown,n.domain=function(t){return arguments.length?(a(t),f()):a()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],f()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],o=!0,f()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(o=!!t,f()):o},n.padding=function(t){return arguments.length?(l=c=Math.max(0,Math.min(1,t)),f()):l},n.paddingInner=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),f()):l},n.paddingOuter=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),f()):c},n.align=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),f()):s},n.copy=function(){return ma().domain(a()).range(i).round(o).paddingInner(l).paddingOuter(c).align(s)},f()}function ya(t){return function(){return t}}function va(t){return+t}var xa=[0,1];function wa(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:ya(e)}function _a(t,e,n,a){var r=t[0],i=t[1],o=e[0],l=e[1];return i<r?(r=n(i,r),o=a(l,o)):(r=n(r,i),o=a(o,l)),function(t){return o(r(t))}}function Sa(t,e,n,a){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),l=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++l<r;)i[l]=n(t[l],t[l+1]),o[l]=a(e[l],e[l+1]);return function(e){var n=Bn(t,e,1,r)-1;return o[n](i[n](e))}}function Ma(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function Aa(t,e){var n,a,r,i=xa,o=xa,l=me,c=!1;function s(){return n=Math.min(i.length,o.length)>2?Sa:_a,a=r=null,f}function f(e){return(a||(a=n(i,o,c?function(t){return function(e,n){var a=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:a(t)}}}(t):t,l)))(+e)}return f.invert=function(t){return(r||(r=n(o,i,wa,c?function(t){return function(e,n){var a=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:a(t)}}}(e):e)))(+t)},f.domain=function(t){return arguments.length?(i=ba.call(t,va),s()):i.slice()},f.range=function(t){return arguments.length?(o=pa.call(t),s()):o.slice()},f.rangeRound=function(t){return o=pa.call(t),l=ye,s()},f.clamp=function(t){return arguments.length?(c=!!t,s()):c},f.interpolate=function(t){return arguments.length?(l=t,s()):l},s()}function $a(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,a=t.slice(0,n);return[a.length>1?a[0]+a.slice(2):a,+t.slice(n+1)]}function Ta(t){return(t=$a(Math.abs(t)))?t[1]:NaN}var ka,Ea=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Pa(t){return new Na(t)}function Na(t){if(!(e=Ea.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}function Ca(t,e){var n=$a(t,e);if(!n)return t+"";var a=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+a:a.length>r+1?a.slice(0,r+1)+"."+a.slice(r+1):a+new Array(r-a.length+2).join("0")}Pa.prototype=Na.prototype,Na.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Da={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Ca(100*t,e)},r:Ca,s:function(t,e){var n=$a(t,e);if(!n)return t+"";var a=n[0],r=n[1],i=r-(ka=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,o=a.length;return i===o?a:i>o?a+new Array(i-o+1).join("0"):i>0?a.slice(0,i)+"."+a.slice(i):"0."+new Array(1-i).join("0")+$a(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function Ia(t){return t}var La,za,Ua,Fa=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Ga(t){var e,n,a=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,a){for(var r=t.length,i=[],o=0,l=e[0],c=0;r>0&&l>0&&(c+l+1>a&&(l=Math.max(1,a-c)),i.push(t.substring(r-=l,r+l)),!((c+=l+1)>a));)l=e[o=(o+1)%e.length];return i.reverse().join(n)}):Ia,r=t.currency,i=t.decimal,o=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):Ia,l=t.percent||"%";function c(t){var e=(t=Pa(t)).fill,n=t.align,c=t.sign,s=t.symbol,f=t.zero,u=t.width,d=t.comma,h=t.precision,b=t.trim,p=t.type;"n"===p?(d=!0,p="g"):Da[p]||(null==h&&(h=12),b=!0,p="g"),(f||"0"===e&&"="===n)&&(f=!0,e="0",n="=");var g="$"===s?r[0]:"#"===s&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",m="$"===s?r[1]:/[%p]/.test(p)?l:"",y=Da[p],v=/[defgprs%]/.test(p);function x(t){var r,l,s,x=g,w=m;if("c"===p)w=y(t)+w,t="";else{var _=(t=+t)<0;if(t=y(Math.abs(t),h),b&&(t=function(t){t:for(var e,n=t.length,a=1,r=-1;a<n;++a)switch(t[a]){case".":r=e=a;break;case"0":0===r&&(r=a),e=a;break;default:if(r>0){if(!+t[a])break t;r=0}}return r>0?t.slice(0,r)+t.slice(e+1):t}(t)),_&&0==+t&&(_=!1),x=(_?"("===c?c:"-":"-"===c||"("===c?"":c)+x,w=("s"===p?Fa[8+ka/3]:"")+w+(_&&"("===c?")":""),v)for(r=-1,l=t.length;++r<l;)if(48>(s=t.charCodeAt(r))||s>57){w=(46===s?i+t.slice(r+1):t.slice(r))+w,t=t.slice(0,r);break}}d&&!f&&(t=a(t,1/0));var S=x.length+t.length+w.length,M=S<u?new Array(u-S+1).join(e):"";switch(d&&f&&(t=a(M+t,M.length?u-w.length:1/0),M=""),n){case"<":t=x+t+w+M;break;case"=":t=x+M+t+w;break;case"^":t=M.slice(0,S=M.length>>1)+x+t+w+M.slice(S);break;default:t=M+x+t+w}return o(t)}return h=null==h?6:/[gprs]/.test(p)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),x.toString=function(){return t+""},x}return{format:c,formatPrefix:function(t,e){var n=c(((t=Pa(t)).type="f",t)),a=3*Math.max(-8,Math.min(8,Math.floor(Ta(e)/3))),r=Math.pow(10,-a),i=Fa[8+a/3];return function(t){return n(r*t)+i}}}}function Ya(t,e,n){var a,r=t[0],i=t[t.length-1],o=function(t,e,n){var a=Math.abs(e-t)/Math.max(0,n),r=Math.pow(10,Math.floor(Math.log(a)/Math.LN10)),i=a/r;return i>=Zn?r*=10:i>=Qn?r*=5:i>=Kn&&(r*=2),e<t?-r:r}(r,i,null==e?10:e);switch((n=Pa(null==n?",f":n)).type){case"s":var l=Math.max(Math.abs(r),Math.abs(i));return null!=n.precision||isNaN(a=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Ta(e)/3)))-Ta(Math.abs(t)))}(o,l))||(n.precision=a),Ua(n,l);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(a=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Ta(e)-Ta(t))+1}(o,Math.max(Math.abs(r),Math.abs(i))))||(n.precision=a-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(a=function(t){return Math.max(0,-Ta(Math.abs(t)))}(o))||(n.precision=a-2*("%"===n.type))}return za(n)}function Oa(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var a,r,i,o,l=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((a=e<t)&&(r=t,t=e,e=r),0===(o=Jn(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),i=new Array(r=Math.ceil(e-t+1));++l<r;)i[l]=(t+l)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),i=new Array(r=Math.ceil(t-e+1));++l<r;)i[l]=(t-l)/o;return a&&i.reverse(),i}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return Ya(e(),t,n)},t.nice=function(n){null==n&&(n=10);var a,r=e(),i=0,o=r.length-1,l=r[i],c=r[o];return c<l&&(a=l,l=c,c=a,a=i,i=o,o=a),(a=Jn(l,c,n))>0?a=Jn(l=Math.floor(l/a)*a,c=Math.ceil(c/a)*a,n):a<0&&(a=Jn(l=Math.ceil(l*a)/a,c=Math.floor(c*a)/a,n)),a>0?(r[i]=Math.floor(l/a)*a,r[o]=Math.ceil(c/a)*a,e(r)):a<0&&(r[i]=Math.ceil(l*a)/a,r[o]=Math.floor(c*a)/a,e(r)),t},t}function Va(){var t=Aa(wa,he);return t.copy=function(){return Ma(t,Va())},Oa(t)}function qa(t,e){return t<0?-Math.pow(-t,e):Math.pow(t,e)}function Xa(){return function t(){var e=1,n=Aa(function(t,n){return(n=qa(n,e)-(t=qa(t,e)))?function(a){return(qa(a,e)-t)/n}:ya(n)},function(t,n){return n=qa(n,e)-(t=qa(t,e)),function(a){return qa(t+n*a,1/e)}}),a=n.domain;return n.exponent=function(t){return arguments.length?(e=+t,a(a())):e},n.copy=function(){return Ma(n,t().exponent(e))},Oa(n)}().exponent(.5)}La=Ga({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),za=La.format,Ua=La.formatPrefix;var Ba=new Date,ja=new Date;function Ra(t,e,n,a){function r(e){return t(e=new Date(+e)),e}return r.floor=r,r.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},r.round=function(t){var e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},r.range=function(n,a,i){var o,l=[];if(n=r.ceil(n),i=null==i?1:Math.floor(i),!(n<a&&i>0))return l;do{l.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<a);return l},r.filter=function(n){return Ra(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,a){if(t>=t)if(a<0)for(;++a<=0;)for(;e(t,-1),!n(t););else for(;--a>=0;)for(;e(t,1),!n(t););})},n&&(r.count=function(e,a){return Ba.setTime(+e),ja.setTime(+a),t(Ba),t(ja),Math.floor(n(Ba,ja))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(a?function(e){return a(e)%t==0}:function(e){return r.count(0,e)%t==0}):r:null}),r}var Ha=Ra(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});Ha.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ra(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):Ha:null};var Wa=6e4,Za=6048e5,Qa=(Ra(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),Ra(function(t){t.setTime(Math.floor(t/Wa)*Wa)},function(t,e){t.setTime(+t+e*Wa)},function(t,e){return(e-t)/Wa},function(t){return t.getMinutes()}),Ra(function(t){var e=t.getTimezoneOffset()*Wa%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),Ra(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Wa)/864e5},function(t){return t.getDate()-1}));function Ka(t){return Ra(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Wa)/Za})}var Ja=Ka(0),tr=Ka(1),er=(Ka(2),Ka(3),Ka(4)),nr=(Ka(5),Ka(6),Ra(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Ra(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));nr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ra(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};Ra(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*Wa)},function(t,e){return(e-t)/Wa},function(t){return t.getUTCMinutes()}),Ra(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()});var ar=Ra(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1});function rr(t){return Ra(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/Za})}var ir=rr(0),or=rr(1),lr=(rr(2),rr(3),rr(4)),cr=(rr(5),rr(6),Ra(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Ra(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function sr(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function fr(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ur(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}cr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ra(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var dr,hr,br,pr={"-":"",_:" ",0:"0"},gr=/^\s*\d+/,mr=/^%/,yr=/[\\^$*+?|[\]().{}]/g;function vr(t,e,n){var a=t<0?"-":"",r=(a?-t:t)+"",i=r.length;return a+(i<n?new Array(n-i+1).join(e)+r:r)}function xr(t){return t.replace(yr,"\\$&")}function wr(t){return new RegExp("^(?:"+t.map(xr).join("|")+")","i")}function _r(t){for(var e={},n=-1,a=t.length;++n<a;)e[t[n].toLowerCase()]=n;return e}function Sr(t,e,n){var a=gr.exec(e.slice(n,n+1));return a?(t.w=+a[0],n+a[0].length):-1}function Mr(t,e,n){var a=gr.exec(e.slice(n,n+1));return a?(t.u=+a[0],n+a[0].length):-1}function Ar(t,e,n){var a=gr.exec(e.slice(n,n+2));return a?(t.U=+a[0],n+a[0].length):-1}function $r(t,e,n){var a=gr.exec(e.slice(n,n+2));return a?(t.V=+a[0],n+a[0].length):-1}function Tr(t,e,n){var a=gr.exec(e.slice(n,n+2));return a?(t.W=+a[0],n+a[0].length):-1}function kr(t,e,n){var a=gr.exec(e.slice(n,n+4));return a?(t.y=+a[0],n+a[0].length):-1}function Er(t,e,n){var a=gr.exec(e.slice(n,n+2));return a?(t.y=+a[0]+(+a[0]>68?1900:2e3),n+a[0].length):-1}function Pr(t,e,n){var a=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return a?(t.Z=a[1]?0:-(a[2]+(a[3]||"00")),n+a[0].length):-1}function Nr(t,e,n){var a=gr.exec(e.slice(n,n+2));return a?(t.m=a[0]-1,n+a[0].length):-1}function Cr(t,e,n){var a=gr.exec(e.slice(n,n+2));return a?(t.d=+a[0],n+a[0].length):-1}function Dr(t,e,n){var a=gr.exec(e.slice(n,n+3));return a?(t.m=0,t.d=+a[0],n+a[0].length):-1}function Ir(t,e,n){var a=gr.exec(e.slice(n,n+2));return a?(t.H=+a[0],n+a[0].length):-1}function Lr(t,e,n){var a=gr.exec(e.slice(n,n+2));return a?(t.M=+a[0],n+a[0].length):-1}function zr(t,e,n){var a=gr.exec(e.slice(n,n+2));return a?(t.S=+a[0],n+a[0].length):-1}function Ur(t,e,n){var a=gr.exec(e.slice(n,n+3));return a?(t.L=+a[0],n+a[0].length):-1}function Fr(t,e,n){var a=gr.exec(e.slice(n,n+6));return a?(t.L=Math.floor(a[0]/1e3),n+a[0].length):-1}function Gr(t,e,n){var a=mr.exec(e.slice(n,n+1));return a?n+a[0].length:-1}function Yr(t,e,n){var a=gr.exec(e.slice(n));return a?(t.Q=+a[0],n+a[0].length):-1}function Or(t,e,n){var a=gr.exec(e.slice(n));return a?(t.Q=1e3*+a[0],n+a[0].length):-1}function Vr(t,e){return vr(t.getDate(),e,2)}function qr(t,e){return vr(t.getHours(),e,2)}function Xr(t,e){return vr(t.getHours()%12||12,e,2)}function Br(t,e){return vr(1+Qa.count(nr(t),t),e,3)}function jr(t,e){return vr(t.getMilliseconds(),e,3)}function Rr(t,e){return jr(t,e)+"000"}function Hr(t,e){return vr(t.getMonth()+1,e,2)}function Wr(t,e){return vr(t.getMinutes(),e,2)}function Zr(t,e){return vr(t.getSeconds(),e,2)}function Qr(t){var e=t.getDay();return 0===e?7:e}function Kr(t,e){return vr(Ja.count(nr(t),t),e,2)}function Jr(t,e){var n=t.getDay();return t=n>=4||0===n?er(t):er.ceil(t),vr(er.count(nr(t),t)+(4===nr(t).getDay()),e,2)}function ti(t){return t.getDay()}function ei(t,e){return vr(tr.count(nr(t),t),e,2)}function ni(t,e){return vr(t.getFullYear()%100,e,2)}function ai(t,e){return vr(t.getFullYear()%1e4,e,4)}function ri(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+vr(e/60|0,"0",2)+vr(e%60,"0",2)}function ii(t,e){return vr(t.getUTCDate(),e,2)}function oi(t,e){return vr(t.getUTCHours(),e,2)}function li(t,e){return vr(t.getUTCHours()%12||12,e,2)}function ci(t,e){return vr(1+ar.count(cr(t),t),e,3)}function si(t,e){return vr(t.getUTCMilliseconds(),e,3)}function fi(t,e){return si(t,e)+"000"}function ui(t,e){return vr(t.getUTCMonth()+1,e,2)}function di(t,e){return vr(t.getUTCMinutes(),e,2)}function hi(t,e){return vr(t.getUTCSeconds(),e,2)}function bi(t){var e=t.getUTCDay();return 0===e?7:e}function pi(t,e){return vr(ir.count(cr(t),t),e,2)}function gi(t,e){var n=t.getUTCDay();return t=n>=4||0===n?lr(t):lr.ceil(t),vr(lr.count(cr(t),t)+(4===cr(t).getUTCDay()),e,2)}function mi(t){return t.getUTCDay()}function yi(t,e){return vr(or.count(cr(t),t),e,2)}function vi(t,e){return vr(t.getUTCFullYear()%100,e,2)}function xi(t,e){return vr(t.getUTCFullYear()%1e4,e,4)}function wi(){return"+0000"}function _i(){return"%"}function Si(t){return+t}function Mi(t){return Math.floor(+t/1e3)}!function(t){dr=function(t){var e=t.dateTime,n=t.date,a=t.time,r=t.periods,i=t.days,o=t.shortDays,l=t.months,c=t.shortMonths,s=wr(r),f=_r(r),u=wr(i),d=_r(i),h=wr(o),b=_r(o),p=wr(l),g=_r(l),m=wr(c),y=_r(c),v={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return l[t.getMonth()]},c:null,d:Vr,e:Vr,f:Rr,H:qr,I:Xr,j:Br,L:jr,m:Hr,M:Wr,p:function(t){return r[+(t.getHours()>=12)]},Q:Si,s:Mi,S:Zr,u:Qr,U:Kr,V:Jr,w:ti,W:ei,x:null,X:null,y:ni,Y:ai,Z:ri,"%":_i},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return l[t.getUTCMonth()]},c:null,d:ii,e:ii,f:fi,H:oi,I:li,j:ci,L:si,m:ui,M:di,p:function(t){return r[+(t.getUTCHours()>=12)]},Q:Si,s:Mi,S:hi,u:bi,U:pi,V:gi,w:mi,W:yi,x:null,X:null,y:vi,Y:xi,Z:wi,"%":_i},w={a:function(t,e,n){var a=h.exec(e.slice(n));return a?(t.w=b[a[0].toLowerCase()],n+a[0].length):-1},A:function(t,e,n){var a=u.exec(e.slice(n));return a?(t.w=d[a[0].toLowerCase()],n+a[0].length):-1},b:function(t,e,n){var a=m.exec(e.slice(n));return a?(t.m=y[a[0].toLowerCase()],n+a[0].length):-1},B:function(t,e,n){var a=p.exec(e.slice(n));return a?(t.m=g[a[0].toLowerCase()],n+a[0].length):-1},c:function(t,n,a){return M(t,e,n,a)},d:Cr,e:Cr,f:Fr,H:Ir,I:Ir,j:Dr,L:Ur,m:Nr,M:Lr,p:function(t,e,n){var a=s.exec(e.slice(n));return a?(t.p=f[a[0].toLowerCase()],n+a[0].length):-1},Q:Yr,s:Or,S:zr,u:Mr,U:Ar,V:$r,w:Sr,W:Tr,x:function(t,e,a){return M(t,n,e,a)},X:function(t,e,n){return M(t,a,e,n)},y:Er,Y:kr,Z:Pr,"%":Gr};function _(t,e){return function(n){var a,r,i,o=[],l=-1,c=0,s=t.length;for(n instanceof Date||(n=new Date(+n));++l<s;)37===t.charCodeAt(l)&&(o.push(t.slice(c,l)),null!=(r=pr[a=t.charAt(++l)])?a=t.charAt(++l):r="e"===a?" ":"0",(i=e[a])&&(a=i(n,r)),o.push(a),c=l+1);return o.push(t.slice(c,l)),o.join("")}}function S(t,e){return function(n){var a,r,i=ur(1900);if(M(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=(a=fr(ur(i.y))).getUTCDay())>4||0===r?or.ceil(a):or(a),a=ar.offset(a,7*(i.V-1)),i.y=a.getUTCFullYear(),i.m=a.getUTCMonth(),i.d=a.getUTCDate()+(i.w+6)%7):(a=(r=(a=e(ur(i.y))).getDay())>4||0===r?tr.ceil(a):tr(a),a=Qa.offset(a,7*(i.V-1)),i.y=a.getFullYear(),i.m=a.getMonth(),i.d=a.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),r="Z"in i?fr(ur(i.y)).getUTCDay():e(ur(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(r+5)%7:i.w+7*i.U-(r+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,fr(i)):e(i)}}function M(t,e,n,a){for(var r,i,o=0,l=e.length,c=n.length;o<l;){if(a>=c)return-1;if(37===(r=e.charCodeAt(o++))){if(r=e.charAt(o++),!(i=w[r in pr?e.charAt(o++):r])||(a=i(t,n,a))<0)return-1}else if(r!=n.charCodeAt(a++))return-1}return a}return v.x=_(n,v),v.X=_(a,v),v.c=_(e,v),x.x=_(n,x),x.X=_(a,x),x.c=_(e,x),{format:function(t){var e=_(t+="",v);return e.toString=function(){return t},e},parse:function(t){var e=S(t+="",sr);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=S(t,fr);return e.toString=function(){return t},e}}}(t),dr.format,dr.parse,hr=dr.utcFormat,br=dr.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||hr("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||br("%Y-%m-%dT%H:%M:%S.%LZ");function Ai(t){if(0==$(`#${t}`).length){let e=`Input Error: DOM ID ${t} is not found.`;throw alert(e),e}}function $i(t={x:20,y:20,scaleFactor:1,diverging:!1,bubble:!1}){let e=Wn(1,t.x+1),n=Wn(1,t.y+1),a=[];return e.forEach(e=>{e="x"+e.toString(),n.forEach(n=>{n="y"+n.toString();let r=Math.random()*t.scaleFactor;r=t.diverging&&Math.random()<.5?-r:r,a.push({x:e,y:n,value:r,displayValue:parseFloat(r.toExponential()).toPrecision(3),r:t.bubble?30*Math.random():void 0})})}),a}function Ti(){const t="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:t+"association/singleTissueEqtl?format=json&datasetId=gtex_v7&gencodeId=",ld:t+"dataset/ld?format=json&datasetId=gtex_v7&gencodeId=",tissueSummary:t+"dataset/tissueSummary?datasetId=gtex_v7",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v7&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v7&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?datasetId=gtex_v7&boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v7&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v7&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v19&genomeBuild=GRCh37%2Fhg19&geneId=",tissue:t+"metadata/tissueSiteDetail?format=json",tissueSites:t+"metadata/tissueSiteDetail?format=json",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}function ki(t){let e=t.split("_");return 1==e[2].length&&1==e[3].length?t:(e[2].length>e[3].length?(e[2]="del",e.splice(3,1)):e[3].length>e[2].length?(e[3]="ins",e.splice(2,1)):(e[3]="sub",e.splice(2,1)),e.join("_"))}class Ei{constructor(t,e=!1,n=30,a=-40,r=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=a,this.duration=r}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),it("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){it("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=Z.pageX,e=Z.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;it("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){it("#"+this.id).html(t)}}function Pi(t){for(var e=t.length/6|0,n=new Array(e),a=0;a<e;)n[a]="#"+t.slice(6*a,6*++a);return n}function Ni(t){return de(t[t.length-1])}Pi("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Pi("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Pi("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Pi("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Pi("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Pi("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Pi("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Pi("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Pi("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Ni(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Pi)),Ni(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Pi));var Ci=Ni(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Pi)),Di=Ni(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Pi)),Ii=Ni(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Pi)),Li=Ni(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Pi)),zi=Ni(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Pi));Ni(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Pi)),Ni(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Pi));var Ui=Ni(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Pi));Ni(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Pi)),Ni(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Pi));var Fi=Ni(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Pi));Ni(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Pi));var Gi=Ni(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Pi));Ni(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Pi)),Ni(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Pi));var Yi=Ni(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Pi));Ni(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Pi)),Ni(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Pi)),Ni(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Pi));var Oi=Ni(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Pi)),Vi=Ni(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Pi)),qi=Ni(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Pi)),Xi=Ni(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Pi)),Bi=Ni(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Pi)),ji=Ni(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Pi));Ce(re(300,.5,0),re(-240,.5,1));Ce(re(-100,.75,.35),re(80,1.5,.8)),Ce(re(260,.75,.35),re(80,1.5,.8)),re(),kt(),Math.PI,Math.PI;function Ri(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}Ri(Pi("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));Ri(Pi("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Ri(Pi("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Ri(Pi("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function Hi(t,e="YlGnBu",n,a,r=!1){a=void 0===a?ea(t):a,n=void 0===n?aa(t):n;const i=function t(e){var n=0,a=1,r=1,i=!1;function o(t){var a=(t-n)*r;return e(i?Math.max(0,Math.min(1,a)):a)}return o.domain=function(t){return arguments.length?(n=+t[0],a=+t[1],r=n===a?0:1/(a-n),o):[n,a]},o.clamp=function(t){return arguments.length?(i=!!t,o):i},o.interpolator=function(t){return arguments.length?(e=t,o):e},o.copy=function(){return t(e).domain([n,a]).clamp(i)},Oa(o)}(function(t){const e={BuGn:Ui,OrRd:Fi,PuBu:Gi,YlGnBu:Yi,Blues:Oi,Oranges:ji,Greens:Vi,Purples:Xi,Reds:Bi,Greys:qi,Grays:qi,RdBu:Ii,RdGy:Li,PiYG:Ci,PuOr:Di,RdYlBu:zi};if(!e.hasOwnProperty(t)){const e="Unrecognized color: "+t;throw alert(e),e}return e[t]}(e));return r?i.domain([a,n]):i.domain([n,a]),i}function Wi(t,e,n,a,r,i=10,o=10,l={h:10,w:40},c="h",s=!1){let f=[];if(s){let t=[...Array(i+1).keys()],e=n.domain()[1]/i;f=(f=t.map(t=>t*e)).concat(t.filter(t=>0!=t).map(t=>0-t*e)).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}else{let t=[...Array(i+1).keys()],e=n.domain()[1]/i;f=t.map(t=>t*e)}const u=e.append("g").attr("transform",`translate(${a.x}, ${a.y})`).selectAll(".legend").data(f).enter().append("g").classed("legend",!0);"h"==c?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",l.h).attr("transform",`translate(${a.x}, ${a.y})`),u.append("rect").attr("x",(t,e)=>l.w*e).attr("y",5).attr("width",l.w).attr("height",l.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>r?Math.pow(o,t).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>l.w*e).attr("y",0)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${a.x}, ${a.y+l.h*f.length})rotate(90)`),u.append("rect").attr("x",0).attr("y",(t,e)=>l.h*e).attr("width",l.w).attr("height",l.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>r?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",15).attr("y",(t,e)=>l.h*e+l.h/2))}class Zi{constructor(t,e=!0,n=10,a="Reds"){this.data=t,this.useLog=e,this.logBase=n,this.colorScheme=a,this.xScale=void 0,this.yScale=void 0,this.colorScale=void 0,this.bubbleScale=void 0,this.toolbar=void 0,this.tooltip=void 0}addTooltip(t){let e=$(`#${t}`),n=t+"-tooltip";0==$(`#${n}`).length&&$("<div/>").attr("id",n).appendTo(e),this.tooltip=new Ei(n),it(`#${n}`).classed("bubblemap-tooltip",!0)}drawCanvas(t,e={w:1e3,h:600,top:20,left:20},n,a={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){this._setScales(e,n);let r=t.node().getContext("2d");r.fillStyle="#ffffff",r.rect(0,0,t.attr("width"),t.attr("height")),r.fill(),this.data.forEach(t=>{r.beginPath(),r.fillStyle=this.colorScale(t.value),r.arc(this.xScale(t.x)+this.xScale.bandwidth()/2,this.yScale(t.y),this.bubbleScale(t.r),0,2*Math.PI),r.fill(),r.closePath()});let i=a.column,o=a.row;o.show&&(r.save(),r.textAlign=i.textAlign,r.fillStyle="black",r.font="10px Open Sans",this.yScale.domain().forEach(t=>{r.fillText(t,this.xScale.range()[0]-o.adjust,this.yScale(t)+2)}),r.restore()),i.show&&this.xScale.domain().forEach(t=>{r.save(),r.fillStyle="black",r.font="10px Open Sans",r.textAlign=i.textAlign,r.translate(this.xScale(t)+this.xScale.bandwidth()/2-3,this.yScale.range()[1]+i.adjust),r.rotate(0==i.angle?0:Math.PI/(180/i.angle)),r.fillText(t,0,0),r.restore()})}drawCombo(t,e,n={w:1e3,h:600,top:0,left:0},a,r=!0,i={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){let o={w:n.w,h:n.h2,top:n.top,left:n.left};this.drawSvg(e,o,a,50,i);let l=t.append("g").attr("clip-path","url(#clip)");if(this._setMiniScales(n,a),l.selectAll(".mini-map-cell").data(this.data,t=>t.value).enter().append("circle").attr("class","mini-map-cell").attr("row",t=>`x${this.xScaleMini.domain().indexOf(t.x)}`).attr("col",t=>`y${this.yScaleMini.domain().indexOf(t.y)}`).attr("cx",t=>this.xScaleMini(t.x)+this.xScaleMini.bandwidth()/2).attr("cy",t=>this.yScaleMini(t.y)).attr("r",t=>this.bubbleScaleMini(t.r)).style("fill",t=>this.colorScale(t.value)),r){let a=Yn().extent([[0,0],[n.w,n.h]]).on("brush",()=>{this._brushed(e,i)});t.append("g").attr("class","brush").call(a).call(a.move,[0,50*this.xScaleMini.bandwidth()])}}drawSvg(t,e={w:1e3,h:600,top:0,left:0},n,a=50,r={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){this._setScales(e,n,a);let i=this.tooltip;t.append("g").attr("clip-path","url(#clip)").selectAll(".bubble-map-cell").data(this.data,t=>t.value).enter().append("circle").attr("class","bubble-map-cell").attr("row",t=>`x${this.xScale.domain().indexOf(t.x)}`).attr("col",t=>`y${this.yScale.domain().indexOf(t.y)}`).attr("cx",t=>this.xScale(t.x)+this.xScale.bandwidth()/2).attr("cy",t=>this.yScale(t.y)+this.yScale.bandwidth()/2).attr("r",t=>this.bubbleScale(t.r)).style("fill",t=>this.colorScale(t.value)).on("mouseover",function(e){let n=it(this),a=n.attr("row"),r=n.attr("col");t.selectAll(".bubble-map-xlabel").filter(`.${a}`).classed("highlighted",!0),t.selectAll(".bubble-map-ylabel").filter(`.${r}`).classed("highlighted",!0),n.classed("highlighted",!0);let o=void 0===e.displayValue?parseFloat(e.value.toExponential()).toPrecision(4):e.displayValue,l=void 0===e.rDisplayValue?e.r.toPrecision(4):e.rDisplayValue,c=void 0===e.displayX?e.x:e.displayX,s=void 0===e.displayY?e.y:e.displayY;i.show(`Column: ${c} <br/> Row: ${s}<br/> Value: ${o}<br/> Size: ${l}`)}).on("mouseout",function(){t.selectAll("*").classed("highlighted",!1),i.hide()});let o=r.column,l=r.row;if(o.show){let e={};oa().key(t=>t.x).entries(this.data).forEach(t=>{e[t.key]=t.values[0].displayX});t.selectAll(".bubble-map-xlabel").data(this.xScale.domain()).enter().append("text").attr("class",(t,e)=>`bubble-map-xlabel x${e}`).attr("x",0).attr("y",0).attr("text-anchor","left"==o.textAlign?"start":"end").style("cursor","default").style("font-size",()=>{return`${Math.floor(this.xScale.bandwidth()/2)>12?12:Math.floor(this.xScale.bandwidth()/2)}px`}).attr("transform",t=>{return`translate(${this.xScale(t)+this.xScale.bandwidth()/3}, ${this.yScale.range()[1]+o.adjust}) rotate(${o.angle})`}).text(t=>e[t]||t)}if(l.show){let e={};oa().key(t=>t.y).entries(this.data).forEach(t=>{e[t.key]=t.values[0].displayY});t.selectAll(".bubble-map-ylabel").data(this.yScale.domain()).enter().append("text").attr("class",(t,e)=>`bubble-map-ylabel y${e}`).attr("x",0).attr("y",0).attr("text-anchor","left"==l.textAlign?"start":"end").style("cursor","default").style("font-size",()=>{return`${Math.floor(this.yScale.bandwidth()/1.5)>14?14:Math.floor(this.yScale.bandwidth()/1.5)<10?10:Math.floor(this.yScale.bandwidth()/1.5)}px`}).attr("transform",t=>{return`translate(${this.xScale.range()[0]-l.adjust}, ${this.yScale(t)+this.yScale.bandwidth()/1.5}) rotate(${l.angle})`}).text(t=>e[t]||t)}}drawColorLegend(t,e={x:0,y:0},n=5,a=""){Wi(a,t,this.colorScale,e,this.useLog,n,this.logBase,{h:10,w:40},"h",!0)}drawBubbleLegend(t,e={x:0,y:0,title:"Bubble legend"},n=5,a=""){t.selectAll(".bmap-bubble-legend").remove();let r=[...Array(n+1).keys()],i=(this.bubbleScale.domain()[1]-this.bubbleScale.domain()[0])/n,o=r.map(t=>this.bubbleScale.domain()[0]+t*i),l=t.append("g").attr("class","bmap-bubble-legend").attr("transform",`translate(${e.x}, ${e.y})`);l.append("text").attr("class","color-legend").text(e.title).attr("x",-10).attr("text-anchor","end").attr("y",10);let c=l.selectAll(".legend").data(o).enter().append("g").classed("legend",!0);c.append("circle").attr("cx",(t,e)=>40*e).attr("cy",10).attr("r",t=>this.bubbleScale(t)).style("fill","black"),c.append("text").attr("class","color-legend").text(t=>this.useLog?Math.pow(base,t).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>40*e-5).attr("y",0)}_brushed(t,e){let n=Z.selection,a=Math.round(n[0]/this.xScaleMini.step()),r=Math.round(n[1]/this.xScaleMini.step());this.xScale.domain(this.xScaleMini.domain().slice(a,r));let i=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:i,min:2}),t.selectAll(".bubble-map-cell").attr("cx",t=>{let e=this.xScale(t.x);return void 0===e?this.xScale.bandwidth()/2:e+this.xScale.bandwidth()/2}).attr("r",t=>{return void 0===this.xScale(t.x)?0:this.bubbleScale(t.r)}),t.selectAll(".bubble-map-xlabel").attr("transform",t=>{return`translate(${this.xScale(t)+5||0}, ${this.yScale.range()[1]+e.column.adjust}) rotate(${e.column.angle})`}).style("display",t=>{return void 0===this.xScale(t)?"none":"block"})}_setMiniScales(t={w:1e3,h:600,top:20,left:20},e){if(void 0===this.xScaleMini&&(this.xScaleMini=this._setXScaleMini(t)),void 0===this.yScaleMini&&(this.yScaleMini=this._setYScaleMini(t)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(e)),void 0===this.bubbleScaleMini){let t=this._setBubbleMax(!0);this.bubbleScaleMini=this._setBubbleScale({max:t,min:1})}}_setScales(t={w:1e3,h:600,top:20,left:20},e){if(void 0===this.xScale&&(this.xScale=this._setXScale(t)),void 0===this.yScale&&(this.yScale=this._setYScale(t)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(e)),void 0===this.bubbleScale){let t=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:t,min:2})}}_parseXList(){return oa().key(t=>t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}_parseYList(){return oa().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}_setXScaleMini(t={w:1e3,left:20}){let e=this._parseXList();return this._setXScale(t,e)}_setXScale(t={w:1e3,left:20},e){return e=void 0===e?this._parseXList():e,ma().domain(e).range([t.left,t.left+t.w]).padding(.05)}_setYScaleMini(t={h:600,top:20}){let e=this._parseYList();return this._setYScale(t,e)}_setYScale(t={h:600,top:20},e){return e=void 0===e?this._parseYList():e,ma().domain(e).range([t.top,t.top+t.h]).padding(.05)}_setColorScale(t){let e=this.useLog;return Hi(void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t,this.colorScheme,void 0,void 0,!0)}_setBubbleMax(t=!1,e=2,n=10){let a=t?this.xScaleMini:this.xScale,r=t?this.yScaleMini:this.yScale,i=ea([a.bandwidth(),r.bandwidth()])/e;return n<i?n:i}_setBubbleScale(t={max:10,min:0}){return Xa().domain([3,ea(this.data.map(t=>t.r))]).range([t.min,t.max])}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class Qi{constructor(t,e=0,n=!0,a=10,r="Greys",i=[0,1]){this.data=this._unique(t),this.dataDict={},this.cutoff=e,this.filteredData=this._filter(this.data,this.cutoff),this.dataDict=this._generateDataDict(this.filteredData),this.useLog=n,this.logBase=a,this.colorScheme=r,this.colorScale=this._setColorScale(i),this.xScale=void 0,this.yScale=void 0,this.labelScale=void 0,this.tooltip=void 0}addTooltip(t){let e=t+"-tooltip";0==$(`#${e}`).length&&$("<div/>").attr("id",e).appendTo($(`#${t}`)),this.tooltip=new Ei(e,!1,40,0),it(`#${e}`).classed("half-map-tooltip",!0)}draw(t,e,n={w:600,top:20,left:20},a=[0,1],r=!0,i=90,o,l){this._drawCanvas(t,n,a,o,l);this.drawSvg(e,n,!1,r,i,a,o,l)}drawColorLegend(t,e={x:0,y:0},n=5,a="",r=[0,1]){void 0===this.colorScale&&this._setColorScale(r),Wi(a,t,this.colorScale,e,this.useLog,n,this.logBase,{h:20,w:10},"v")}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}_drawCanvas(t,e={w:600,top:20,left:20},n=[0,1],a,r){this._setScales(e,n,a,r);let i=t.node().getContext("2d");i.save(),i.translate(e.left,e.top+this.xScale.bandwidth()*Math.sqrt(2)/2),i.rotate(-.25*Math.PI),i.clearRect(-e.w,-e.w,2*e.w,2*e.w),this.filteredData.forEach(t=>{let e=this.xScale(t.x),n=this.yScale(t.y);void 0!==e&&void 0!==n&&(t.color=0==t.value?"#fff":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value),i.fillStyle=this.colorScale(t.value),i.fillRect(e,n,this.xScale.bandwidth(),this.yScale.bandwidth()))}),i.restore()}drawSvg(t,e,n=!0,a=!0,r=90,i=[0,1],o,l){if(n){this._setScales(e,i,o,l);let n=t.append("g").attr("clip-path","url(#clip)").selectAll(".half-map-cell").data(this.filteredData);n.enter().append("rect").attr("class","half-map-cell").attr("row",t=>`y${this.yScale.domain().indexOf(t.y)}`).attr("column",t=>`x${this.xScale.domain().indexOf(t.x)}`).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("transform","rotate(-45)").merge(n).style("fill",t=>0==t.value?"#fff":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value))}a&&(this._setLabelScale(e),t.selectAll().data(this.labelScale.domain()).enter().append("text").attr("class",(t,e)=>`half-map-label l${e}`).attr("x",0).attr("y",0).attr("text-anchor","start").style("cursor","none").attr("transform",t=>{return`translate(${this.labelScale(t)+this.labelScale.step()/2}, -5) rotate(-${r})`}).text(t=>t));let c=t.append("rect").attr("class","half-map-cursor").attr("x",0).attr("y",0).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("stroke","#d2111b").style("stroke-width","1px").style("fill","none").style("display","none");t.on("mouseout",()=>{c.style("display","none"),this.tooltip.hide(),t.selectAll(".half-map-label").classed("highlighted",!1)}),it(t.node().parentNode).style("cursor","none").style("position","absolute").on("mousemove",()=>{let e=lt(t.node()),n=e[0],r=e[1],i=.25*Math.PI,o=n*Math.cos(i)-r*Math.sin(i)+this.xScale.step()/2,l=n*Math.sin(i)+r*Math.cos(i)-this.yScale.step()/2;if(n<0||r<0||o<0||l<0)return this.tooltip.hide(),void c.style("display","none");let s=Math.floor(o/this.xScale.step()),f=Math.floor(l/this.yScale.step()),u=this.xScale.domain()[s],d=this.yScale.domain()[f],h=this.dataDict[u+d];void 0!==h?(c.attr("transform",`translate(${n},${r}) rotate(-45)`),c.style("display","block"),this.tooltip.show(`${u}<br/> ${d}<br/> Value: ${h.displayValue}`),a&&(t.selectAll(".half-map-label").classed("highlighted",!1),t.select(`.l${s}`).classed("highlighted",!0),t.select(`.l${f}`).classed("highlighted",!0))):(this.tooltip.hide(),c.style("display","none"))})}_unique(t){t.sort((t,e)=>t.x<e.x?-1:t.x>e.x?1:t.y<e.y?-1:t.y>e.y?1:0);let e={};return t.filter(t=>{let n=t.x+t.y,a=t.y+t.x;return!e.hasOwnProperty(n)&&!e.hasOwnProperty(a)&&(e[n]=!0,!0)})}_filter(t,e){return t.filter(t=>!(t.value<e))}_generateDataDict(t){let e={};return t.forEach(t=>{e[t.x+t.y]=t,e[t.y+t.x]=t}),e}_setScales(t={w:600,top:20,left:20},e=[0,1],n,a){(n||void 0===this.xScale)&&this._setXScale(t,n),(a||void 0===this.yScale)&&this._setYScale(t,a),void 0===this.colorScale&&this._setColorScale(e)}_setXScale(t={w:600},e){void 0===e&&(e=oa().key(t=>t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.xScale=ma().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setYScale(t={w:600},e){void 0===e&&(e=oa().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.yScale=ma().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setLabelScale(t={w:600}){void 0===this.xScale&&this._setXScale();let e=this.xScale.domain();this.labelScale=ma().domain(e).range([0,t.w]).padding(.05)}_setColorScale(t){let e=this.useLog,n=void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t;this.colorScale=Hi(n,this.colorScheme)}}var Ki=function t(e){function n(t,n){var a,r;return t=null==t?0:+t,n=null==n?1:+n,function(){var i;if(null!=a)i=a,a=null;else do{a=2*e()-1,i=2*e()-1,r=a*a+i*i}while(!r||r>1);return t+n*i*Math.sqrt(-2*Math.log(r)/r)}}return n.source=t,n}(function(){return Math.random()});class Ji{constructor(t,e,n=!1){$(`#${t}`).show();const a=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(a).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,a,r="fa-download"){this.createButton(t,r);it(`#${t}`).on("click",()=>{this.downloadSvg(e,n,a)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);it(`#${t}`).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download"){const n=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${e}`).appendTo(n),this.buttons[t]=n,n}attachTooltip(t){this.tooltip=t}downloadSvg(t,e,n){let a=$($($(`${"#"+t}`))[0]),r=a.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),i=function(t){for(var e="",n=document.styleSheets,a=0;a<n.length;a++)try{if(null==n[a].cssRules)continue;for(var r=n[a].cssRules,i=0;i<r.length;i++){var o=r[i];if(void 0!==o.style){var l,c=void 0===o.selectorText?o.selectorText:o.selectorText.replace(`#${t[0].id} `,"");try{l=$(t).find(c)}catch(t){l=[]}l.length>0&&(e+=o.selectorText+" { "+o.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var s=document.createElement("style");return s.setAttribute("type","text/css"),s.innerHTML="<![CDATA[\n"+e+"\n]]>",s}(a.get());r.prepend(i),$("#"+n).html("").hide();let o=$(`#${n}`).append(r).html(),l=new Blob([o],{type:"image/svg+xml"});saveAs(l,e),$(`#${n}`).html("").hide()}}var to=Array.prototype.slice;function eo(t){return t}var no=1,ao=2,ro=3,io=4,oo=1e-6;function lo(t){return"translate("+(t+.5)+",0)"}function co(t){return"translate(0,"+(t+.5)+")"}function so(){return!this.__axis}function fo(t,e){var n=[],a=null,r=null,i=6,o=6,l=3,c=t===no||t===io?-1:1,s=t===io||t===ao?"x":"y",f=t===no||t===ro?lo:co;function u(u){var d=null==a?e.ticks?e.ticks.apply(e,n):e.domain():a,h=null==r?e.tickFormat?e.tickFormat.apply(e,n):eo:r,b=Math.max(i,0)+l,p=e.range(),g=+p[0]+.5,m=+p[p.length-1]+.5,y=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),v=u.selection?u.selection():u,x=v.selectAll(".domain").data([null]),w=v.selectAll(".tick").data(d,e).order(),_=w.exit(),S=w.enter().append("g").attr("class","tick"),M=w.select("line"),A=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),w=w.merge(S),M=M.merge(S.append("line").attr("stroke","#000").attr(s+"2",c*i)),A=A.merge(S.append("text").attr("fill","#000").attr(s,c*b).attr("dy",t===no?"0em":t===ro?"0.71em":"0.32em")),u!==v&&(x=x.transition(u),w=w.transition(u),M=M.transition(u),A=A.transition(u),_=_.transition(u).attr("opacity",oo).attr("transform",function(t){return isFinite(t=y(t))?f(t):this.getAttribute("transform")}),S.attr("opacity",oo).attr("transform",function(t){var e=this.parentNode.__axis;return f(e&&isFinite(e=e(t))?e:y(t))})),_.remove(),x.attr("d",t===io||t==ao?"M"+c*o+","+g+"H0.5V"+m+"H"+c*o:"M"+g+","+c*o+"V0.5H"+m+"V"+c*o),w.attr("opacity",1).attr("transform",function(t){return f(y(t))}),M.attr(s+"2",c*i),A.attr(s,c*b).text(h),v.filter(so).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===ao?"start":t===io?"end":"middle"),v.each(function(){this.__axis=y})}return u.scale=function(t){return arguments.length?(e=t,u):e},u.ticks=function(){return n=to.call(arguments),u},u.tickArguments=function(t){return arguments.length?(n=null==t?[]:to.call(t),u):n.slice()},u.tickValues=function(t){return arguments.length?(a=null==t?null:to.call(t),u):a&&a.slice()},u.tickFormat=function(t){return arguments.length?(r=t,u):r},u.tickSize=function(t){return arguments.length?(i=o=+t,u):i},u.tickSizeInner=function(t){return arguments.length?(i=+t,u):i},u.tickSizeOuter=function(t){return arguments.length?(o=+t,u):o},u.tickPadding=function(t){return arguments.length?(l=+t,u):l},u}function uo(t){return fo(ro,t)}var ho=Math.PI,bo=2*ho,po=bo-1e-6;function go(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function mo(){return new go}function yo(t){return function(){return t}}go.prototype=mo.prototype={constructor:go,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,a){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+a)},bezierCurveTo:function(t,e,n,a,r,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +a+","+(this._x1=+r)+","+(this._y1=+i)},arcTo:function(t,e,n,a,r){t=+t,e=+e,n=+n,a=+a,r=+r;var i=this._x1,o=this._y1,l=n-t,c=a-e,s=i-t,f=o-e,u=s*s+f*f;if(r<0)throw new Error("negative radius: "+r);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(u>1e-6)if(Math.abs(f*l-c*s)>1e-6&&r){var d=n-i,h=a-o,b=l*l+c*c,p=d*d+h*h,g=Math.sqrt(b),m=Math.sqrt(u),y=r*Math.tan((ho-Math.acos((b+u-p)/(2*g*m)))/2),v=y/m,x=y/g;Math.abs(v-1)>1e-6&&(this._+="L"+(t+v*s)+","+(e+v*f)),this._+="A"+r+","+r+",0,0,"+ +(f*d>s*h)+","+(this._x1=t+x*l)+","+(this._y1=e+x*c)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,a,r,i){t=+t,e=+e;var o=(n=+n)*Math.cos(a),l=n*Math.sin(a),c=t+o,s=e+l,f=1^i,u=i?a-r:r-a;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+c+","+s:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+c+","+s),n&&(u<0&&(u=u%bo+bo),u>po?this._+="A"+n+","+n+",0,1,"+f+","+(t-o)+","+(e-l)+"A"+n+","+n+",0,1,"+f+","+(this._x1=c)+","+(this._y1=s):u>1e-6&&(this._+="A"+n+","+n+",0,"+ +(u>=ho)+","+f+","+(this._x1=t+n*Math.cos(r))+","+(this._y1=e+n*Math.sin(r))))},rect:function(t,e,n,a){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +a+"h"+-n+"Z"},toString:function(){return this._}};Math.PI;function vo(t){this._context=t}function xo(t){return new vo(t)}function wo(t){return t[0]}function _o(t){return t[1]}function So(){var t=wo,e=null,n=yo(0),a=_o,r=yo(!0),i=null,o=xo,l=null;function c(c){var s,f,u,d,h,b=c.length,p=!1,g=new Array(b),m=new Array(b);for(null==i&&(l=o(h=mo())),s=0;s<=b;++s){if(!(s<b&&r(d=c[s],s,c))===p)if(p=!p)f=s,l.areaStart(),l.lineStart();else{for(l.lineEnd(),l.lineStart(),u=s-1;u>=f;--u)l.point(g[u],m[u]);l.lineEnd(),l.areaEnd()}p&&(g[s]=+t(d,s,c),m[s]=+n(d,s,c),l.point(e?+e(d,s,c):g[s],a?+a(d,s,c):m[s]))}if(h)return l=null,h+""||null}function s(){return function(){var t=wo,e=_o,n=yo(!0),a=null,r=xo,i=null;function o(o){var l,c,s,f=o.length,u=!1;for(null==a&&(i=r(s=mo())),l=0;l<=f;++l)!(l<f&&n(c=o[l],l,o))===u&&((u=!u)?i.lineStart():i.lineEnd()),u&&i.point(+t(c,l,o),+e(c,l,o));if(s)return i=null,s+""||null}return o.x=function(e){return arguments.length?(t="function"==typeof e?e:yo(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:yo(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:yo(!!t),o):n},o.curve=function(t){return arguments.length?(r=t,null!=a&&(i=r(a)),o):r},o.context=function(t){return arguments.length?(null==t?a=i=null:i=r(a=t),o):a},o}().defined(r).curve(o).context(i)}return c.x=function(n){return arguments.length?(t="function"==typeof n?n:yo(+n),e=null,c):t},c.x0=function(e){return arguments.length?(t="function"==typeof e?e:yo(+e),c):t},c.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:yo(+t),c):e},c.y=function(t){return arguments.length?(n="function"==typeof t?t:yo(+t),a=null,c):n},c.y0=function(t){return arguments.length?(n="function"==typeof t?t:yo(+t),c):n},c.y1=function(t){return arguments.length?(a=null==t?null:"function"==typeof t?t:yo(+t),c):a},c.lineX0=c.lineY0=function(){return s().x(t).y(n)},c.lineY1=function(){return s().x(t).y(a)},c.lineX1=function(){return s().x(e).y(n)},c.defined=function(t){return arguments.length?(r="function"==typeof t?t:yo(!!t),c):r},c.curve=function(t){return arguments.length?(o=t,null!=i&&(l=o(i)),c):o},c.context=function(t){return arguments.length?(null==t?i=l=null:l=o(i=t),c):i},c}function Mo(t){return t<0?-1:1}function Ao(t,e,n){var a=t._x1-t._x0,r=e-t._x1,i=(t._y1-t._y0)/(a||r<0&&-0),o=(n-t._y1)/(r||a<0&&-0),l=(i*r+o*a)/(a+r);return(Mo(i)+Mo(o))*Math.min(Math.abs(i),Math.abs(o),.5*Math.abs(l))||0}function $o(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function To(t,e,n){var a=t._x0,r=t._y0,i=t._x1,o=t._y1,l=(i-a)/3;t._context.bezierCurveTo(a+l,r+l*e,i-l,o-l*n,i,o)}function ko(t){this._context=t}function Eo(t){this._context=t}vo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},ko.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:To(this,this._t0,$o(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,To(this,$o(this,n=Ao(this,t,e)),n);break;default:To(this,this._t0,n=Ao(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new Eo(t)}.prototype=Object.create(ko.prototype)).point=function(t,e){ko.prototype.point.call(this,e,t)},Eo.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,a,r,i){this._context.bezierCurveTo(e,t,a,n,i,r)}};const Po={epanechnikov:function(t){return Math.abs(t)<=1?.75*(1-t*t):0},gaussian:function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)}},No={nrd:function(t){let e=(ta(t,.75)-ta(t,.25))/1.34;return 1.06*Math.min(Rn(t),e)*Math.pow(t.length,-.2)}};function Co(t,e,n){return function(a){return e.map(e=>[e,function(t,e){var n,a=t.length,r=a,i=-1,o=0;if(null==e)for(;++i<a;)isNaN(n=jn(t[i]))?--r:o+=n;else for(;++i<a;)isNaN(n=jn(e(t[i],i,t)))?--r:o+=n;if(r)return o/r}(a,a=>t((e-a)/n))/n])}}class Do{constructor(t,e={}){this._sanityCheck(t),this.data=t,this.groupInfo=e,this.toolbar=void 0,this.tooltip=void 0}render(t,e=500,n=357,a=.05,r,i=[-3,3],o="Y axis",l=!0,c=30,s=!0,f=0,u=!1,d=!1,h=!1,b=!1,p=!1,g=!1,m=0){if(this.reset=(()=>{t.selectAll("*").remove(),this.render(t,e,n,a,r,i,o,l,c,s,f,u,d,h,b,p,g)}),this.updateYScale=function(i,o){t.selectAll("*").remove(),void 0===o&&(o=[]),this.render(t,e,n,a,r,[],i,l,c,s,f,u,d,h,b,p,g)},this.updateXScale=function(r){void 0===r&&console.error("updateXScale called without new X domain"),t.selectAll("*").remove(),this.render(t,e,n,a,r,[],o,l,c,s,f,u,d,h,b,p,g)},void 0===i||0==i.length){let t=[];this.data.forEach(e=>t=t.concat(e.values)),i=Hn(t)}this.groups=oa().key(t=>t.group).entries(this.data),this.scale={x:ma().rangeRound([0,e]).domain(r||this.groups.map(t=>t.key)).paddingInner(a),subx:ma(),y:Va().rangeRound([n,0]).domain(i),z:Va()},this.groups.forEach(e=>{let a=e.key,r=e.values,o=this.groupInfo[a];if(e.index=this.scale.x.domain().indexOf(a),void 0!==o){t.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","center").attr("fill",t=>"pvalue"==t&&parseFloat(o[t])<=parseFloat(o.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(t,e)=>{return`translate(${this.scale.x(a)+this.scale.x.bandwidth()/2}, ${this.scale.y(i[0])+50})`}).text(t=>`${t}: ${parseFloat(parseFloat(o[t]).toPrecision(3)).toExponential()}`)}p&&r.sort((t,e)=>t.label<e.label?-1:t.label>e.label?1:0),this.scale.subx.domain(r.map(t=>t.label)).rangeRound([this.scale.x(a),this.scale.x(a)+this.scale.x.bandwidth()]),r.forEach(n=>{0!=n.values.length&&(n.values=n.values.sort(Vn),this._drawViolin(t,n,u,e.index,g,m))});var l=18;if(b){const e=ma().domain(r.map(t=>void 0==t.size?"(0)":`(${t.size||0})`)).rangeRound([this.scale.x(a),this.scale.x(a)+this.scale.x.bandwidth()]);t.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${n+l})`).call(uo(e))}if(s){l=5;const e=t.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${n+l})`).call(uo(this.scale.subx));f>0&&e.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${f}, 2, 10)`)}});let y=s?55:0;var v;if(this.xAxis=l?uo(this.scale.x):uo(this.scale.x).tickFormat(""),t.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${n+y})`).call(this.xAxis).selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${c}, -10, 10)`),y=5,this.yAxis=(v=this.scale.y,fo(io,v)).tickValues(this.scale.y.ticks(5)),t.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${y}, 0)`).call(this.yAxis),t.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${2*y+it(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(o),t.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),d&&this._addGroupDivider(t),h){const e=t.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");e.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const n=e.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),a=10;n.append("rect").attr("x",(t,e)=>5+60*e+this.scale.x.range()[0]).attr("y",-28).attr("width",a).attr("height",a).style("fill",t=>t.color),n.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,e)=>17+60*e+this.scale.x.range()[0]).attr("y",-20)}}addPlotTitle(t,e){let n=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,a=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${n}, ${a})`).text(e)}createTooltip(t){return 0==$(`#${t}`).length&&$("<div/>").attr("id",t).appendTo($("body")),this.tooltip=new Ei(t),it(`#${t}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,e){return this.toolbar=new Ji(t,e),this.toolbar}addBrush(t){const e=On(En);e.on("end",()=>{this.zoom(t,e)}),t.append("g").attr("class","brush").call(e)}zoom(t,e){let n,a=Z.selection;if(void 0===e)this.reset();else if(a){this.scale.x.domain(this.scale.x.domain().filter((t,e)=>{const n=Math.floor(a[0][0]/this.scale.x.bandwidth()),r=Math.floor(a[1][0]/this.scale.x.bandwidth());return e>=n&&e<=r}));const n=Math.floor(this.scale.y.invert(a[1][1])),r=Math.floor(this.scale.y.invert(a[0][1]));this.scale.y.domain([n,r]),t.select(".brush").call(e.move,null)}else{if(!n)return n=setTimeout(function(){n=null},350);this.reset()}let r=t.transition().duration(750);t.select(".axis--x").transition(r).call(this.xAxis),t.select(".axis--y").transition(r).call(this.yAxis),this.groups.forEach((e,n)=>{let a=e.key,i=e.values;this.scale.subx.rangeRound([this.scale.x(a),this.scale.x(a)+this.scale.x.bandwidth()]),i.forEach(n=>{if(0==n.values.length)return;this.scale.x.domain().indexOf(a);this.scale.z.range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const i=t.select(`#violin${e.index}-${n.label}`);i.select(".violin").transition(r).attr("d",So().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const o=ta(n.values,.25),l=ta(n.values,.75);i.select(".violin-ir").transition(r).attr("x",this.scale.z(-.1)).attr("y",this.scale.y(l)).attr("width",Math.abs(this.scale.z(-.1)-this.scale.z(.1))).attr("height",Math.abs(this.scale.y(l)-this.scale.y(o)));const c=na(n.values);i.select(".violin-median").transition(r).attr("x1",this.scale.z(-.1)).attr("x2",this.scale.z(.1)).attr("y1",this.scale.y(c)).attr("y2",this.scale.y(c))})})}_drawViolin(t,e,n,a,r,i){let o=Co(Po.gaussian,this.scale.y.ticks(100),No.nrd(e.values));const l=Hn(e.values),c=o(e.values).filter(t=>t[0]>=l[0]&&t[0]<=l[1]),s=t.append("g").attr("id",`violin${a}-${e.label}`).attr("class","violin-g").datum(e);if(e.values.length>=i&&c.length&&this._validVertices(c)){let i=ea(c,t=>Math.abs(t[1]));this.scale.z.domain([-i,i]).range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);let o=So().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0]));const l=s.append("path").datum(c).attr("d",o).classed("violin",!0).style("fill",()=>void 0!==e.color?e.color:a%2==0?"#90c1c1":"#94a8b8"),f=ta(e.values,.25),u=ta(e.values,.75),d=this.scale.z.domain()[1]/3;if(n){const n=Math.abs(u-f),a=ea(e.values.filter(t=>t<=u+1.5*n)),r=aa(e.values.filter(t=>t>=f-1.5*n));t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(a)).attr("y2",this.scale.y(r)).style("stroke","#fff")}s.append("rect").attr("x",this.scale.z(-d)).attr("y",this.scale.y(u)).attr("width",Math.abs(this.scale.z(-d)-this.scale.z(d))).attr("height",Math.abs(this.scale.y(u)-this.scale.y(f))).attr("class","violin-ir");const h=na(e.values);if(s.append("line").attr("x1",this.scale.z(-d)).attr("x2",this.scale.z(d)).attr("y1",this.scale.y(h)).attr("y2",this.scale.y(h)).attr("class","violin-median"),r){let t=Ki(0,d/2);const n=Math.abs(u-f),a=ea(e.values.filter(t=>t<=u+1.5*n)),r=aa(e.values.filter(t=>t>=f-1.5*n)),i=e.values.filter(t=>t<r||t>a);s.append("g").attr("class","violin-outliers").selectAll("circle").data(i).enter().append("circle").attr("cx",()=>this.scale.z(t())).attr("cy",t=>this.scale.y(t)).attr("r",2)}s.on("mouseover",()=>{l.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(e.group+"<br/>"+e.label+"<br/>Median: "+h.toPrecision(4)+"<br/>")}),s.on("mouseout",()=>{l.classed("highlighted",!1)})}else if(i){let t=ea(e.values,t=>Math.abs(t));this.scale.z.domain([-t,t]).range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);const n=this.scale.z.domain()[1]/3;let a=Ki(0,n/2);s.append("g").attr("class","violin-points").selectAll("circle").data(e.values).enter().append("circle").attr("cx",()=>this.scale.z(a())).attr("cy",t=>this.scale.y(t)).attr("r",2)}}_sanityCheck(t){const e=["group","label","values"];t.forEach(t=>{e.forEach(e=>{if(void 0===t[e])throw"GroupedViolin: input data error."})})}_addGroupDivider(t){const e=this.scale.x.domain(),n=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),a=(t,a)=>a!==e.length-1?this.scale.x(t)+ +this.scale.x.bandwidth()+n/2:0;t.selectAll(".vline").data(e).enter().append("line").classed("vline",!0).attr("x1",a).attr("x2",a).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(t,n)=>n!=e.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}_validVertices(t){return!t.reduce((t,e)=>t.concat(e),[]).filter(t=>isNaN(t)).length}}const Io={id:"gtexGroupedViolinPlot",data:{heatmap:$i({x:50,y:10,scaleFactor:1e3}),dendroHeatmap:{rowTree:"(((TP53:0.17,SLK:0.17):1.18,NDRG4:1.34):1.33,ACTN3:2.67);",colTree:"(((Adipose Visceral Omentum:0.06,Adipose Subcutaneous:0.06):0.00,Bladder:0.06):0.16,Adrenal Gland:0.22);",heatmap:[{y:"SLK",value:35.505,x:"Adipose Subcutaneous",unit:"TPM"},{y:"SLK",value:29.28,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"SLK",value:17.405,x:"Adrenal Gland",unit:"TPM"},{y:"SLK",value:53.29,x:"Bladder",unit:"TPM"},{y:"NDRG4",value:12.035,x:"Adipose Subcutaneous",unit:"TPM"},{y:"NDRG4",value:6.531000000000001,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"NDRG4",value:134.8,x:"Adrenal Gland",unit:"TPM"},{y:"NDRG4",value:7.1160000000000005,x:"Bladder",unit:"TPM"},{y:"TP53",value:29.935,x:"Adipose Subcutaneous",unit:"TPM"},{y:"TP53",value:23.55,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"TP53",value:18.515,x:"Adrenal Gland",unit:"TPM"},{y:"TP53",value:40.51,x:"Bladder",unit:"TPM"},{y:"ACTN3",value:.33145,x:"Adipose Subcutaneous",unit:"TPM"},{y:"ACTN3",value:.3317,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"ACTN3",value:.100005,x:"Adrenal Gland",unit:"TPM"},{y:"ACTN3",value:.48100000000000004,x:"Bladder",unit:"TPM"}]},groupedViolinPlot:[{group:"Group 1",label:"Gene 1",values:Wn(0,2e3).map(Ki(2,1))},{group:"Group 1",label:"Gene 2",values:Wn(0,2e3).map(Ki(5,1))},{group:"Group 1",label:"Gene 3",values:Wn(0,2e3).map(Ki(10,1))},{group:"Group 2",label:"Gene 1",values:Wn(0,2e3).map(Ki(5,1))},{group:"Group 2",label:"Gene 2",values:Wn(0,2e3).map(Ki(3,1))},{group:"Group 2",label:"Gene 3",values:Wn(0,2e3).map(Ki(1,1))},{group:"Group 3",label:"Gene 1",values:Wn(0,2e3).map(Ki(2,1))},{group:"Group 3",label:"Gene 2",values:Wn(0,2e3).map(Ki(3,1))},{group:"Group 3",label:"Gene 3",values:Wn(0,2e3).map(Ki(5,1))}],transcriptTracks:{exons:{"ENST00000311595.9":[{chrom:"17",chromEnd:77071172,exonId:"ENSE00002713933.1",exonNumber:"1",chromStart:77071151,strand:"+"},{chrom:"17",chromEnd:77073579,exonId:"ENSE00003672628.1",exonNumber:"2",chromStart:77073512,strand:"+"},{chrom:"17",chromEnd:77073946,exonId:"ENSE00003475281.1",exonNumber:"3",chromStart:77073745,strand:"+"},{chrom:"17",chromEnd:77075719,exonId:"ENSE00001111713.1",exonNumber:"4",chromStart:77075571,strand:"+"},{chrom:"17",chromEnd:77076446,exonId:"ENSE00003651250.1",exonNumber:"5",chromStart:77076289,strand:"+"},{chrom:"17",chromEnd:77077155,exonId:"ENSE00003607773.1",exonNumber:"6",chromStart:77077007,strand:"+"},{chrom:"17",chromEnd:77078612,exonId:"ENSE00002720924.1",exonNumber:"7",chromStart:77077980,strand:"+"}]},transcripts:[{chromosome:"17",end:77078612,gencodeId:"ENSG00000167280.12",geneSymbol:"ENGASE",start:77071151,strand:"+",transcriptId:"ENST00000311595.9"}]},bubbleMap:$i({x:50,y:10,scaleFactor:1,diverging:!0,bubble:!0}),ldPlot:$i({x:2,y:2,scaleFactor:1})}.groupedViolinPlot,width:500,height:300,marginLeft:100,marginRight:20,marginTop:50,marginBottom:100,showDivider:!0,xPadding:.3,yLabel:"Random Value",showSubX:!0,showX:!0,xAngle:0,subXAngle:0,showWhisker:!1,showLegend:!1,showSampleSize:!0};function Lo(t=Io){console.log(t.data);let e={top:t.marginTop,right:t.marginRight,bottom:t.marginBottom,left:t.marginLeft};Ai(t.id);let n=t.width-(t.marginLeft+t.marginRight),a=t.height-(t.marginTop+t.marginBottom),r=(t.id,`${t.id}Tooltip`),i=function(t,e,n,a,r,i="relative"){return Ai(t),void 0===r&&(r=`${t}-svg`),it("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",r).append("g").attr("transform",`translate(${a.left}, ${a.top})`)}(t.id,t.width,t.height,e);const o=new Do(t.data);return o.render(i,n,a,t.xPadding,void 0,[],t.yLabel,t.showX,t.xAngle,t.showSubX,t.subXAngle,t.showWhisker,t.showDivider,t.showLegend,t.showSampleSize,t.sortSubX,t.showOutliers,t.numPoints),i.selectAll(".violin-size-axis").classed("violin-size-axis-hide",!0).classed("violin-size-axis",!1),o.createTooltip(r),i}function zo(t,e,n,a,r,i=Ti()){s(i.dyneqtl+`?variantId=${n}&gencodeId=${e}&tissueSiteDetailId=${a}`).then(function(e){let n=function(t){["data","genotypes","pValue","pValueThreshold","tissueSiteDetailId"].forEach(e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parse Error: Required json attribute is missing: "+e}),t.expression_values=t.data.map(t=>parseFloat(t)),t.genotypes=t.genotypes.map(t=>parseFloat(t)),t.homoRefExp=t.expression_values.filter((e,n)=>0==t.genotypes[n]),t.homoAltExp=t.expression_values.filter((e,n)=>2==t.genotypes[n]),t.heteroExp=t.expression_values.filter((e,n)=>1==t.genotypes[n]);let e=t.variantId.split(/_/)[2],n=t.variantId.split(/_/)[3];return t.het=e+n,t.ref=e+e,t.alt=n+n,t}(e);t.data=[{group:r||n.tissueSiteDetailId,label:n.ref.length>2?"ref":n.ref,size:n.homoRefExp.length,values:n.homoRefExp},{group:r||n.tissueSiteDetailId,label:n.het.length>2?"het":n.het,size:n.heteroExp.length,values:n.heteroExp},{group:r||n.tissueSiteDetailId,label:n.alt.length>2?"alt":n.alt,size:n.homoAltExp.length,values:n.homoAltExp}],t.numPoints=10,Lo(t)})}function Uo(t,e,n,a){Ai(t),void 0===a&&(a=`${t}-svg`),it(`#${a}`).remove();let r=it("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",a);return r.append("defs").append("clipPath").attr("id","clip").append("rect").attr("width",e).attr("height",n),r}function Fo(t,e){let n=new Qi(t.ldData,t.ldCutoff,!1,void 0,t.ldColorScheme,[0,1]);$(`#${t.ldId}`).empty(),n.addTooltip(t.ldId);let a=it(`#${t.ldId}`).append("canvas").attr("id",t.ldId+"-ld-canvas").attr("width",t.width).attr("height",t.width).style("position","absolute"),r=Uo(t.ldId,t.width,t.width,void 0),i=r.append("g").attr("class","ld").attr("id","ldG").attr("transform",`translate(${t.ldPanelMargin.left}, ${t.ldPanelMargin.top})`);n.drawColorLegend(r,{x:t.ldPanelMargin.left,y:100},10,"LD"),i.selectAll("*").remove();let o={w:t.inWidth,top:t.ldPanelMargin.top,left:t.ldPanelMargin.left};n.draw(a,i,o,[0,1],!1,void 0,e.xScale.domain(),e.xScale.domain()),e.brush.on("brush",()=>{e.brushEvent(),i.selectAll("*").remove(),n.draw(a,i,o,[0,1],!1,void 0,e.xScale.domain(),e.xScale.domain())}),function(t,e,n,a,r){Ai(t),Vo([{id:"ldPanel",class:"col-xs-12 col-sm-6 col-lg-2",fontSize:"11px",search:{id:"ldLimit",size:3,value:0,label:"LD cutoff R<sup>2</sup>>="},slider:{id:"ldSlider",type:"range",min:0,max:1,step:.1,value:0}}],t);let i=0;const o=()=>{e.filteredData=e._filter(e.data,i),a.selectAll("*").remove(),e.draw(n,a,r,[0,1],!1,void 0)};$("#ldLimit").keydown(t=>{if(13==t.keyCode){let t=parseFloat($("#ldLimit").val());i=t,o()}}),$("#ldSlider").on("change mousemove",()=>{let t=$("#ldSlider").val();$("#ldLimit").val(t),i=t,o()})}(t.divDashboard,n,a,i,o)}function Go(t,e,n,a,r,i,o=!1){let l=new Zi(t.data,t.useLog,t.logBase,t.colorScheme);l.addTooltip(t.id),l.urls=i,l.variantsInExons={},l.rsLookUp={},l.varLookUp={};let c=Uo(t.id,t.width,t.height,void 0),s=c.append("g").attr("class","context").attr("id","miniG").attr("transform",`translate(${t.margin.left}, ${t.margin.top})`),f=c.append("g").attr("id","focusG").attr("class","focus").attr("transform",`translate(${t.focusPanelMargin.left}, ${t.focusPanelMargin.top})`);return l.drawCombo(s,f,{w:t.inWidth,h:t.miniPanelHeight,top:5,left:0,h2:t.focusPanelHeight},t.colorScaleDomain,!1,t.focusPanelLabels),$(`#${t.divInfo}`).text("Total eQTL counts: "+t.data.length),f.selectAll(".bubble-map-cell").on("mouseover",function(t){let e=it(this),n=e.attr("row"),a=e.attr("col");f.selectAll(".bubble-map-xlabel").filter(`.${n}`).classed("highlighted",!0),f.selectAll(".bubble-map-ylabel").filter(`.${a}`).classed("highlighted",!0),e.classed("highlighted",!0);let r=void 0===t.displayValue?parseFloat(t.value.toExponential()).toPrecision(4):t.displayValue,i=void 0===t.rDisplayValue?t.r.toPrecision(4):t.rDisplayValue,o=void 0===t.displayX?t.x:t.displayX,c=void 0===t.displayY?t.y:t.displayY;l.tooltip.show(`Column: ${o} <br/> Row: ${c}<br/> NES: ${r}<br/> p-value: ${i}`)}),function(t,e,n,a,r,i){Ai(t),$(`#${t}`).empty();let o=$("<div/>").attr("class","col-xs-12 col-sm-6 col-lg-1").css("padding-top","4px").css("margin","1px").css("font-size","12px").appendTo($(`#${t}`));$("<span/>").attr("data-toggle","modal").attr("data-target",`#${n}`).css("margin-left","2px").css("padding-top","2px").css("color","#0868ac").css("cursor","pointer").html('<i class="fas fa-filter"></i>Filter Tissues<br/>').appendTo(o);let l=$(`#${n}`).find(".modal-body");0==$(`#${n}`).find(":input").length&&a.yScale.domain().forEach(t=>{$("<input/>").attr("value",t).attr("type","checkbox").prop("checked",!0).appendTo(l),$("<label/>").css("font-size","12px").css("margin-left","2px").html(i[t].tissueSiteDetail).appendTo(l),$("<br/>").appendTo(l)});Vo([{id:"pvaluePanel",class:"col-xs-12 col-sm-6 col-lg-2",fontSize:"11px",search:{id:"pvalueLimit",size:3,value:0,label:"-log<sub>10</sub>(pValue)>="},slider:{id:"pvalueSlider",type:"range",min:0,max:20,step:1,value:0}},{id:"nesPanel",class:"col-xs-12 col-sm-6 col-lg-2",fontSize:"11px",search:{id:"nesLimit",size:3,value:0,label:"abs(NES)>="},slider:{id:"nesSlider",type:"range",min:0,max:1,step:.1,value:0}},{id:"variantPanel",fontSize:"11px",class:"col-xs-12 col-sm-6 col-lg-2",search:{id:"varLocator",size:20,label:"Variant locator",placeholder:"  Variant or RS ID... "}}],t);let c=$("<div/>").attr("class","col-xs-12 col-sm-6 col-lg-1").css("padding-top","2px").css("margin","1px").css("font-size","12px").appendTo($(`#${t}`));$("<input/>").attr("id","rsSwitch").attr("type","checkbox").css("margin-left","10px").appendTo(c);$("<label/>").css("margin-left","2px").css("padding-top","2px").css("font-size","11px").html("Use RS ID").appendTo(c);let s=0,f=0,u=r.select("#focusG"),d=r.select("#miniG");const h=()=>{u.selectAll(".bubble-map-cell").style("fill",t=>t.r<s?"#fff":Math.abs(t.value)<f?"#fff":a.colorScale(t.value));let t=0;d.selectAll(".mini-map-cell").style("fill",e=>e.r<s?"#fff":Math.abs(e.value)<f?"#fff":(t+=1,a.colorScale(e.value))),$(`#${e}`).text(`Total eQTL counts: ${t}`)};$("#pvalueLimit").keydown(t=>{13==t.keyCode&&(s=parseFloat($("#pvalueLimit").val()),h())}),$("#pvalueSlider").on("change mousemove",()=>{let t=$("#pvalueSlider").val();$("#pvalueLimit").val(t),s=t,h()}),$("#nesLimit").keydown(t=>{13==t.keyCode&&(f=parseFloat($("#nesLimit").val()),h())}),$("#nesSlider").on("change mousemove",()=>{let t=$("#nesSlider").val();$("#nesLimit").val(t),f=t,h()}),d.selectAll(".mini-marker").data(a.xScaleMini.domain()).enter().append("rect").classed("mini-marker",!0).attr("x",t=>a.xScaleMini(t)).attr("y",a.yScaleMini.range()[1]).attr("width",a.xScaleMini.bandwidth()).attr("height",a.yScaleMini.bandwidth()),$("#varLocator").keyup(t=>{let e=$("#varLocator").val();if(e.length>3){const t=new RegExp(e);u.selectAll(".bubble-map-xlabel").classed("query",e=>{var n=t.test(e)||t.test(a.rsLookUp[e])||t.test(a.varLookUp[e]);return n}),d.selectAll(".mini-marker").classed("highlighted",e=>t.test(e)||t.test(a.rsLookUp[e])||t.test(a.varLookUp[e]))}else u.selectAll(".bubble-map-xlabel").classed("query",!1),d.selectAll(".mini-marker").classed("highlighted",!1)}),$("#rsSwitch").change(()=>{$("#rsSwitch").is(":checked")?u.selectAll(".bubble-map-xlabel").text(t=>a.rsLookUp[t]):u.selectAll(".bubble-map-xlabel").text(t=>a.varLookUp[t])})}(t.divDashboard,t.divInfo,t.divModal,l,c,r),function(t){t.rsLookUp={},t.varLookUp={},oa().key(t=>t.x).entries(t.data).forEach(e=>{let n=e.values[0];if(void 0===n.hasOwnProperty("snpId"))throw"Input Error: RS ID lookup table is not built.";if(void 0===n.hasOwnProperty("displayX"))throw"Input Error: display label lookup table is not built.";t.rsLookUp[e.key]=e.values[0].snpId,t.varLookUp[e.key]=e.values[0].displayX})}(l),l.variantsInExons=function(t,e){let n={};return t.forEach(t=>{let a=parseFloat(t.split("_")[1]);e.filter(t=>t.start<=a&&t.end>=a).length>0&&(n[t]=!0)}),n}(l.xScale.domain(),a),function(t,e,n){let a=n.select("#focusG").append("g").attr("id","tissueBadgeG").selectAll(".tissue-badge").data(t.filter(t=>void 0!==e.yScale(t.tissueSiteDetailId))).enter().append("g").classed("tissue-badge",!0);a.append("ellipse").attr("cx",e.xScale.range()[0]-e.xScale.bandwidth()/2-10).attr("cy",t=>e.yScale(t.tissueSiteDetailId)+e.yScale.bandwidth()/2).attr("rx",11).attr("ry",e.yScale.bandwidth()/2).attr("fill","#748797"),a.append("text").text(t=>t.rnaSeqAndGenotypeSampleCount).attr("x",e.xScale.range()[0]-e.xScale.bandwidth()/2-17).attr("y",t=>e.yScale(t.tissueSiteDetailId)+e.yScale.bandwidth()/2+3).attr("fill","#ffffff").style("font-size","8px").attr("text-anchor","center")}(n,l,c),function(t,e){let n="+"==t.strand?t.start:t.end,a="+"==t.strand?t.end:t.start,r=e.xScaleMini.domain();const i=t=>r.filter((e,n)=>{let a=parseFloat(e.split("_")[1]);if(a===t)return!0;if(void 0===r[n+1])return!1;let i=parseFloat(r[n+1].split("_")[1])||void 0;return(a-t)*(i-t)<0});let o=i(n),l=i(a);e.tss=o[0],e.tes=l[0]}(e,l),Yo(l,c,!0),Oo(e,l,c),function(t,e,n){let a=n.id+"violin-dialog";(function(t,e,n){Ai(t);let a=$(`#${t}`),r=$("<div/>").attr("id",e).attr("title",n).appendTo(a),i=$("<div/>").html("Clear All").appendTo(r),o=$("<div/>").attr("id","bMap-content").appendTo(r);r.dialog({title:n,autoOpen:!1}),i.click(function(){o.empty()})})(n.divDashboard,n.id+"violin-dialog","eQTL Violin Plot Dialog"),e.selectAll(".bubble-map-cell").on("click",e=>{$(`#${a}`).dialog("open");let n=$("<div/>").attr("class","bMap-dialog").css("float","left").css("margin","20px").appendTo($("#bMap-content")),r=$("<div/>").appendTo(n);$("<i/>").attr("class","fa fa-window-close").css("margin-right","2px").click(function(){n.remove()}).appendTo(r),$("<span/>").attr("class","title").html(`${e.displayX}<br/>${e.displayY}`).appendTo(r);let i="dEqtl"+Date.now().toString();$("<div/>").attr("id",i).appendTo(n);let o={id:i,data:void 0,width:250,height:200,marginLeft:50,marginRight:20,marginTop:20,marginBottom:50,showDivider:!1,xPadding:.3,yLabel:"Norm. Expression",showSubX:!0,showX:!1,subXAngle:0,xAngle:0,showWhisker:!1,showLegend:!1,showSampleSize:!0};zo(o,e.gencodeId,e.variantId,e.tissueSiteDetailId,e.displayY,t.urls)})}(l,c,t),l.brushEvent=(()=>{let n=function(t,e,n){let a=Z.selection,r=Math.round(a[0]/e.xScaleMini.step()),i=Math.round(a[1]/e.xScaleMini.step()),o=e.xScaleMini.domain().slice(r,i);e.xScale.domain(o);let l=e._setBubbleMax();e.bubbleScale.range([2,l]),e.drawBubbleLegend(n,{x:t.width/2,y:t.focusPanelMargin.top-50,title:"-log10(p-value)"},5,"-log10(p-value)"),n.select("#focusG").selectAll(".bubble-map-cell").attr("cx",t=>{let n=e.xScale(t.x);return void 0===n?e.xScale.bandwidth()/2:n+e.xScale.bandwidth()/2}).attr("r",t=>{let n=e.xScale(t.x);return void 0===n?0:e.bubbleScale(t.r)});let c=t.focusPanelLabels.column;return n.select("#focusG").selectAll(".bubble-map-xlabel").attr("transform",t=>`translate(${e.xScale(t)+e.xScale.bandwidth()/3||0}, ${e.yScale.range()[1]+c.adjust}) rotate(${c.angle})`).style("font-size",()=>`${Math.floor(e.xScale.bandwidth()/2)>10?10:Math.floor(e.xScale.bandwidth()/2)}px`).style("display",t=>void 0===e.xScale(t)?"none":"block"),o}(t,l,c);return(l.tss&&l.xScale(l.tss)||l.tes&&l.xScale(l.tes))&&Yo(l,c,!1),Oo(e,l,c),n}),l.brush=Yn().extent([[0,0],[t.inWidth,t.miniPanelHeight+5]]).on("brush",l.brushEvent),l.drawColorLegend(c,{x:t.focusPanelMargin.left,y:t.focusPanelMargin.top-50},4,"NES"),s.append("g").attr("class","brush").call(l.brush).call(l.brush.move,[0,80*l.xScaleMini.bandwidth()]),l.xScaleMini.domain().length==l.xScale.domain().length&&s.style("display","none"),l}function Yo(t,e,n=!1){if(n){let n=e.select("#miniG").append("g").attr("id","miniSiteMarkers");n.append("line").attr("x1",t.xScaleMini(t.tss)+t.xScaleMini.bandwidth()).attr("x2",t.xScaleMini(t.tss)+t.xScaleMini.bandwidth()).attr("y1",0).attr("y2",t.yScaleMini.range()[1]).style("stroke","#94a8b8").style("stroke-width",2),n.append("line").attr("x1",t.xScaleMini(t.tes)+t.xScaleMini.bandwidth()).attr("x2",t.xScaleMini(t.tes)+t.xScaleMini.bandwidth()).attr("y1",0).attr("y2",t.yScaleMini.range()[1]).style("stroke","#748797").style("stroke-width",2)}else{e.select("#siteMarkers").remove();let n=e.select("#focusG").append("g").attr("id","siteMarkers");t.tss&&t.xScale(t.tss)&&(n.append("line").attr("x1",t.xScale(t.tss)+t.xScale.bandwidth()).attr("x2",t.xScale(t.tss)+t.xScale.bandwidth()).attr("y1",0).attr("y2",t.yScale.range()[1]).style("stroke","#94a8b8").style("stroke-width",2),n.append("text").text("TSS").attr("x",t.xScale(t.tss)).attr("y",-5).attr("text-anchor","center").style("font-size","12px")),t.tes&&t.xScale(t.tes)&&(n.append("line").attr("x1",t.xScale(t.tes)+t.xScale.bandwidth()).attr("x2",t.xScale(t.tes)+t.xScale.bandwidth()).attr("y1",0).attr("y2",t.yScale.range()[1]).style("stroke","#748797").style("stroke-width",2),n.append("text").text("TES").attr("x",t.xScale(t.tes)).attr("y",-5).attr("text-anchor","center").style("font-size","12px"))}}function Oo(t,e,n){let a="+"==t.strand?t.start:t.end;let r=[1e-6,.005,.01,.1,.5,2,3,4,5].map(function(t){return 1e5*t}),i=function t(){var e=[.5],n=[0,1],a=1;function r(t){if(t<=t)return n[Bn(e,t,0,a)]}return r.domain=function(t){return arguments.length?(e=pa.call(t),a=Math.min(e.length,n.length-1),r):e.slice()},r.range=function(t){return arguments.length?(n=pa.call(t),a=Math.min(e.length,n.length-1),r):n.slice()},r.invertExtent=function(t){var a=n.indexOf(t);return[e[a-1],e[a]]},r.copy=function(){return t().domain(e).range(n)},r}().domain(r).range(["#000","#252525","#525252","#737373","#969696","#f0f0f0","#fff"]);n.select("#tssDistG").remove();let o=n.select("#focusG").append("g").attr("id","tssDistG");o.selectAll(".track").data(e.xScale.domain()).enter().append("rect").classed("track",!0).attr("x",t=>e.xScale(t)).attr("y",e.yScale.range()[1]).attr("width",e.xScale.bandwidth()).attr("height",e.yScale.bandwidth()).attr("fill",t=>{let e=Math.abs(parseFloat(t.split("_")[1])-a);return i(e)}).attr("stroke",t=>e.variantsInExons[t]?"#239db8":"#cacaca").attr("stroke-width",t=>e.variantsInExons[t]?"2px":"1px").on("mouseover",function(t){let n=Math.abs(parseFloat(t.split("_")[1])-a),r=`${t}<br/>${e.rsLookUp[t]}<br/>TSS Distance: ${n} bp</br>`;r=e.variantsInExons[t]?r+"Exon Region":r,e.tooltip.show(r),it(this).classed("highlighted",!0)}).on("mouseout",function(t){var n;e.tooltip.hide(),(n=".track","string"==typeof n?new at([document.querySelectorAll(n)],[document.documentElement]):new at([null==n?[]:n],nt)).classed("highlighted",!1)}),o.append("text").text("TSS Proximity").attr("x",e.xScale.range()[0]).attr("y",e.yScale.range()[1]+e.yScale.bandwidth()).attr("text-anchor","end").style("font-size","8px")}function Vo(t,e){t.forEach((t,n)=>{if(0==$(`#${t.id}`).length){let n=$("<div/>").attr("id",t.id).attr("class",t.class).css("font-size",t.fontSize).css("margin","1px").css("padding-top","2px").appendTo($(`#${e}`));n.addClass(t.class),$("<label/>").css("font-weight","normal").html(t.search.label).appendTo(n);$("<input/>").attr("id",t.search.id).attr("value",t.search.value).attr("size",t.search.size).attr("placeholder",t.search.placeholder).css("margin-left","2px").appendTo(n);void 0!==t.slider&&$("<input/>").attr("id",t.slider.id).attr("value",t.slider.value).attr("type",t.slider.type).attr("min",t.slider.min).attr("max",t.slider.max).attr("step",t.slider.step).css("margin-left","0px").css("width","100px").appendTo(n)}})}return t.render=function(t,e,n=Ti()){$(`#${t.divSpinner}`).show(),s(n.geneId+e).then(a=>{let r=function(t,e=!1,n=null){if(!t.hasOwnProperty("gene"))throw"Parsing Error: attribute gene doesn't exist.";if(0==t.gene.length)throw alert("No gene is found"),"Fatal Error: gene(s) not found";if(e){if(null===n)throw"Please provide a gene ID for search results validation";if(t.gene.length>1){let e=t.gene.filter(t=>t.geneSymbolUpper==n.toUpperCase()||t.gencodeId==n.toUpperCase());if(e.length>1)throw alert("Fatal Error: input gene ID is not unique."),"Fatal Error: input gene ID is not unique.";if(0==e.length)throw alert("No gene is found with "+n),"Fatal Error: gene not found";t.gene=e}return t.gene[0]}return t.gene}(a,!0,e);$("<span/>").html(`<span>${r.geneSymbol} (${r.gencodeId}), Chr${r.chromosome}:${r.start} - ${r.end} (${r.strand}), ${r.description}`).appendTo($(`#${t.divGeneInfo}`));let i=[s(n.tissueSummary),s(n.tissueSites),s(n.exon+r.gencodeId),s(n.singleTissueEqtl+r.gencodeId)];Promise.all(i).then(function(e){let a=function(t){const e="tissueSummary";if(!t.hasOwnProperty(e))throw"Parsing Error: required json attr is missing: "+e;const n=t[e],a=n[0];if(!a.hasOwnProperty("tissueSiteDetailId"))throw"Parsing Error: required attr is missing: tissueSiteDetailId";if(!a.hasOwnProperty("rnaSeqAndGenotypeSampleCount"))throw"Parsing Error: required attr is missing: rnaSeqAndGenotypeSampleCount";return n}(e[0]),i=function(t){const e="tissueSiteDetail";if(!t.hasOwnProperty(e))throw"Parsing Error: required json attr is missing: "+e;const n=t[e];return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach(t=>{if(!n[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t}),n.reduce((t,e)=>(t[e.tissueSiteDetailId]=e,t),{})}(e[1]),o=function(t){if(!t.hasOwnProperty("exon"))throw"Parsing Error: required json attribute is missing: exon";return t.exon}(e[2]),l=function(t,e){const n="singleTissueEqtl";if(!t.hasOwnProperty(n))throw"Parsing Error: required attribute is not found: "+n;return["variantId","tissueSiteDetailId","nes","pValue"].forEach(e=>{if(!t[n][0].hasOwnProperty(e))throw"Parsing Error: required attribute is missing: "+n}),t[n].map(t=>(t.x=t.variantId,t.displayX=ki(t.variantId),t.y=t.tissueSiteDetailId,e&&(t.displayY=e[t.tissueSiteDetailId].tissueSiteDetail),t.value=t.nes,t.displayValue=t.nes.toPrecision(3),t.r=-Math.log10(t.pValue),t.rDisplayValue=parseFloat(t.pValue.toExponential()).toPrecision(3),t))}(e[3],i);t.data=l;let c=Go(t=function(t){t.margin={left:t.marginLeft+t.focusPanelLabels.row.width+t.focusPanelLabels.row.adjust,top:t.marginTop,right:t.marginRight,bottom:t.marginBottom+t.focusPanelLabels.column.height};let e=oa().key(t=>t.y).entries(t.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN),n=(t.height-(t.margin.top+t.margin.bottom+t.miniPanelHeight+t.legendHeight))/e.length;if(n<10?t.height=10*e.length+t.margin.top+t.margin.bottom+t.miniPanelHeight+t.legendHeight:n>18&&(t.height=18*e.length+t.margin.top+t.margin.bottom+t.miniPanelHeight+t.legendHeight),console.log(t.height),t.inWidth=t.width-(t.margin.left+t.margin.right),t.inHeight=t.height-(t.margin.top+t.margin.bottom),t.focusPanelHeight=t.inHeight-(t.legendHeight+t.miniPanelHeight),t.focusPanelHeight<0)throw"Config error: focus panel height is negative.";return t.focusPanelMargin={left:t.margin.left,top:t.margin.top+t.miniPanelHeight+t.legendHeight},t.ldPanelMargin={left:t.margin.left,top:0},t}(t),r,a,o,i,n);s(n.ld+r.gencodeId).then(e=>{let s=function(t){if(!t.hasOwnProperty("ld"))throw"Parsing Error: required json attribute is missing: ld";let e=[],n={};return t.ld.forEach(t=>{let a=t[0].split(",").sort();n[a[0]]=!0,n[a[1]]=!0,e.push({x:a[0],displayX:ki(a[0]),y:a[1],displayY:ki(a[1]),value:parseFloat(t[1]),displayValue:parseFloat(t[1]).toPrecision(3)})}),Object.keys(n).forEach(t=>{e.push({x:t,displayX:ki(t),y:t,displayY:ki(t),value:1,displayValue:"1"})}),e}(e);t.ldData=s.filter(e=>e.value>=t.ldCutoff),Fo(t,c),$(`#${t.divSpinner}`).hide(),c.yScale.domain(),c.xScale.domain(),$(`#${t.divModal}`).on("hidden.bs.modal",e=>{let s=[];$(`#${t.divModal}`).find(":input").each(function(){$(this).prop("checked")&&s.push($(this).val())}),t.data=l.filter(t=>s.indexOf(t.y)>=0),oa().key(t=>t.x).entries(t.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN),c=Go(t,r,a,o,i,n,!0),Fo(t,c)})})})})},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V2LmJ1bmRsZS5taW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Rzdi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Nzdi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL3Rzdi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvanNvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kaXNwYXRjaC9zcmMvZGlzcGF0Y2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2VzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY3JlYXRvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3JBbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9tYXRjaGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NwYXJzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbnRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXRhLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NvcnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy93aW5kb3cuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3R5bGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xhc3NlZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi90ZXh0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2h0bWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmFpc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbG93ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5zZXJ0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JlbW92ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbG9uZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kaXNwYXRjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NvdXJjZUV2ZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbW91c2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9wb2ludC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9ub2V2ZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9kZWZpbmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2NvbG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RBbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZmlsdGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZXhpdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9tZXJnZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vcmRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jYWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2l6ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbXB0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lYWNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2F0dHIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcHJvcGVydHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXBwZW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdHVtLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9tYXRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9sYWIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2N1YmVoZWxpeC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yZ2IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9udW1iZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdmFsdWUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2RhdGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2FycmF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9vYmplY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JvdW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vZGVjb21wb3NlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vcGFyc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvem9vbS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY3ViZWhlbGl4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZW91dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NjaGVkdWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL2ludGVycnVwdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3R3ZWVuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW50ZXJwb2xhdGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdEFsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ZpbHRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL21lcmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL29uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0ci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHJUd2Vlbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGVUd2Vlbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kZWxheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2R1cmF0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9zaW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvZWxhc3RpYy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL25vZXZlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbnRlcnJ1cHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL2JydXNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZHJhZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvZXZlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9kZXZpYXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3ZhcmlhbmNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9leHRlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3JhbmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aWNrcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcXVhbnRpbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21heC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVkaWFuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9taW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvbWFwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL25lc3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvc2V0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvb3JkaW5hbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYmFuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL251bWJlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29udGludW91cy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdERlY2ltYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9leHBvbmVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9pZGVudGl0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdE51bWVyYWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGlja0Zvcm1hdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblByZWZpeC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblJvdW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2xpbmVhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvcG93LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2ludGVydmFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbGxpc2Vjb25kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2R1cmF0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2RheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9zZWNvbmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWludXRlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2hvdXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvd2Vlay5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy95ZWFyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21vbnRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01pbnV0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNIb3VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y0RheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNXZWVrLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y1llYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjTW9udGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvaXNvRm9ybWF0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9pc29QYXJzZS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3V0aWxzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvZ3RleERhdGFQYXJzZXIuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9Ub29sdGlwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY29sb3JzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvcmFtcC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL2NhdGVnb3J5MTAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9BY2NlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9EYXJrMi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1BhaXJlZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1Bhc3RlbDEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYXN0ZWwyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvU2V0MS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1NldDIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9TZXQzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL0JyQkcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUFJHbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9QaVlHLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1B1T3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRCdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZEd5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkWWxCdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZFlsR24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvU3BlY3RyYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL0J1R24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL0J1UHUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL0duQnUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL09yUmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1QnVHbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUHVCdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUHVSZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUmRQdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxHbkJ1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9ZbEduLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9ZbE9yQnIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsT3JSZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL0JsdWVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvR3JlZW5zLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvR3JleXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9QdXJwbGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvUmVkcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL09yYW5nZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL2N1YmVoZWxpeC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvcmFpbmJvdy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvc2luZWJvdy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvdmlyaWRpcy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2NvbG9ycy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvc2VxdWVudGlhbC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL0J1YmJsZU1hcC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL0hhbGZNYXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9ub3JtYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9kZWZhdWx0U291cmNlLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvVG9vbGJhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9pZGVudGl0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9heGlzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXBhdGgvc3JjL3BhdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2NvbnN0YW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9tYXRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9saW5lYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BvaW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcmVhLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9tb25vdG9uZS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2tkZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVhbi5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL0dyb3VwZWRWaW9saW4uanMiLCIuLi8uLi9zcmMvR1RFeFZpei5qcyIsIi4uLy4uL3NyYy9FcXRsVmlvbGluUGxvdC5qcyIsIi4uLy4uL3NyYy9HZW5lRXF0bFZpc3VhbGl6ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RocmVzaG9sZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdEFsbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRU9MID0ge30sXG4gICAgRU9GID0ge30sXG4gICAgUVVPVEUgPSAzNCxcbiAgICBORVdMSU5FID0gMTAsXG4gICAgUkVUVVJOID0gMTM7XG5cbmZ1bmN0aW9uIG9iamVjdENvbnZlcnRlcihjb2x1bW5zKSB7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oXCJkXCIsIFwicmV0dXJuIHtcIiArIGNvbHVtbnMubWFwKGZ1bmN0aW9uKG5hbWUsIGkpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobmFtZSkgKyBcIjogZFtcIiArIGkgKyBcIl1cIjtcbiAgfSkuam9pbihcIixcIikgKyBcIn1cIik7XG59XG5cbmZ1bmN0aW9uIGN1c3RvbUNvbnZlcnRlcihjb2x1bW5zLCBmKSB7XG4gIHZhciBvYmplY3QgPSBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucyk7XG4gIHJldHVybiBmdW5jdGlvbihyb3csIGkpIHtcbiAgICByZXR1cm4gZihvYmplY3Qocm93KSwgaSwgY29sdW1ucyk7XG4gIH07XG59XG5cbi8vIENvbXB1dGUgdW5pcXVlIGNvbHVtbnMgaW4gb3JkZXIgb2YgZGlzY292ZXJ5LlxuZnVuY3Rpb24gaW5mZXJDb2x1bW5zKHJvd3MpIHtcbiAgdmFyIGNvbHVtblNldCA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBjb2x1bW5zID0gW107XG5cbiAgcm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xuICAgIGZvciAodmFyIGNvbHVtbiBpbiByb3cpIHtcbiAgICAgIGlmICghKGNvbHVtbiBpbiBjb2x1bW5TZXQpKSB7XG4gICAgICAgIGNvbHVtbnMucHVzaChjb2x1bW5TZXRbY29sdW1uXSA9IGNvbHVtbik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29sdW1ucztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVsaW1pdGVyKSB7XG4gIHZhciByZUZvcm1hdCA9IG5ldyBSZWdFeHAoXCJbXFxcIlwiICsgZGVsaW1pdGVyICsgXCJcXG5cXHJdXCIpLFxuICAgICAgREVMSU1JVEVSID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG5cbiAgZnVuY3Rpb24gcGFyc2UodGV4dCwgZikge1xuICAgIHZhciBjb252ZXJ0LCBjb2x1bW5zLCByb3dzID0gcGFyc2VSb3dzKHRleHQsIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgaWYgKGNvbnZlcnQpIHJldHVybiBjb252ZXJ0KHJvdywgaSAtIDEpO1xuICAgICAgY29sdW1ucyA9IHJvdywgY29udmVydCA9IGYgPyBjdXN0b21Db252ZXJ0ZXIocm93LCBmKSA6IG9iamVjdENvbnZlcnRlcihyb3cpO1xuICAgIH0pO1xuICAgIHJvd3MuY29sdW1ucyA9IGNvbHVtbnMgfHwgW107XG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVJvd3ModGV4dCwgZikge1xuICAgIHZhciByb3dzID0gW10sIC8vIG91dHB1dCByb3dzXG4gICAgICAgIE4gPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgSSA9IDAsIC8vIGN1cnJlbnQgY2hhcmFjdGVyIGluZGV4XG4gICAgICAgIG4gPSAwLCAvLyBjdXJyZW50IGxpbmUgbnVtYmVyXG4gICAgICAgIHQsIC8vIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgZW9mID0gTiA8PSAwLCAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPRj9cbiAgICAgICAgZW9sID0gZmFsc2U7IC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9MP1xuXG4gICAgLy8gU3RyaXAgdGhlIHRyYWlsaW5nIG5ld2xpbmUuXG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IE5FV0xJTkUpIC0tTjtcbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gUkVUVVJOKSAtLU47XG5cbiAgICBmdW5jdGlvbiB0b2tlbigpIHtcbiAgICAgIGlmIChlb2YpIHJldHVybiBFT0Y7XG4gICAgICBpZiAoZW9sKSByZXR1cm4gZW9sID0gZmFsc2UsIEVPTDtcblxuICAgICAgLy8gVW5lc2NhcGUgcXVvdGVzLlxuICAgICAgdmFyIGksIGogPSBJLCBjO1xuICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChqKSA9PT0gUVVPVEUpIHtcbiAgICAgICAgd2hpbGUgKEkrKyA8IE4gJiYgdGV4dC5jaGFyQ29kZUF0KEkpICE9PSBRVU9URSB8fCB0ZXh0LmNoYXJDb2RlQXQoKytJKSA9PT0gUVVPVEUpO1xuICAgICAgICBpZiAoKGkgPSBJKSA+PSBOKSBlb2YgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSAtIDEpLnJlcGxhY2UoL1wiXCIvZywgXCJcXFwiXCIpO1xuICAgICAgfVxuXG4gICAgICAvLyBGaW5kIG5leHQgZGVsaW1pdGVyIG9yIG5ld2xpbmUuXG4gICAgICB3aGlsZSAoSSA8IE4pIHtcbiAgICAgICAgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KGkgPSBJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICBlbHNlIGlmIChjICE9PSBERUxJTUlURVIpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqLCBpKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIGxhc3QgdG9rZW4gYmVmb3JlIEVPRi5cbiAgICAgIHJldHVybiBlb2YgPSB0cnVlLCB0ZXh0LnNsaWNlKGosIE4pO1xuICAgIH1cblxuICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgIHZhciByb3cgPSBbXTtcbiAgICAgIHdoaWxlICh0ICE9PSBFT0wgJiYgdCAhPT0gRU9GKSByb3cucHVzaCh0KSwgdCA9IHRva2VuKCk7XG4gICAgICBpZiAoZiAmJiAocm93ID0gZihyb3csIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXQocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIFtjb2x1bW5zLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpXS5jb25jYXQocm93cy5tYXAoZnVuY3Rpb24ocm93KSB7XG4gICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbY29sdW1uXSk7XG4gICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgfSkpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3dzKHJvd3MpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZm9ybWF0Um93KS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um93KHJvdykge1xuICAgIHJldHVybiByb3cubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQgPT0gbnVsbCA/IFwiXCJcbiAgICAgICAgOiByZUZvcm1hdC50ZXN0KHRleHQgKz0gXCJcIikgPyBcIlxcXCJcIiArIHRleHQucmVwbGFjZSgvXCIvZywgXCJcXFwiXFxcIlwiKSArIFwiXFxcIlwiXG4gICAgICAgIDogdGV4dDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHBhcnNlUm93czogcGFyc2VSb3dzLFxuICAgIGZvcm1hdDogZm9ybWF0LFxuICAgIGZvcm1hdFJvd3M6IGZvcm1hdFJvd3NcbiAgfTtcbn1cbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2XCI7XG5cbnZhciBjc3YgPSBkc3YoXCIsXCIpO1xuXG5leHBvcnQgdmFyIGNzdlBhcnNlID0gY3N2LnBhcnNlO1xuZXhwb3J0IHZhciBjc3ZQYXJzZVJvd3MgPSBjc3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciBjc3ZGb3JtYXQgPSBjc3YuZm9ybWF0O1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRSb3dzID0gY3N2LmZvcm1hdFJvd3M7XG4iLCJpbXBvcnQgZHN2IGZyb20gXCIuL2RzdlwiO1xuXG52YXIgdHN2ID0gZHN2KFwiXFx0XCIpO1xuXG5leHBvcnQgdmFyIHRzdlBhcnNlID0gdHN2LnBhcnNlO1xuZXhwb3J0IHZhciB0c3ZQYXJzZVJvd3MgPSB0c3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciB0c3ZGb3JtYXQgPSB0c3YuZm9ybWF0O1xuZXhwb3J0IHZhciB0c3ZGb3JtYXRSb3dzID0gdHN2LmZvcm1hdFJvd3M7XG4iLCJmdW5jdGlvbiByZXNwb25zZUpzb24ocmVzcG9uc2UpIHtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cyArIFwiIFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBmZXRjaChpbnB1dCwgaW5pdCkudGhlbihyZXNwb25zZUpzb24pO1xufVxuIiwidmFyIG5vb3AgPSB7dmFsdWU6IGZ1bmN0aW9uKCkge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykpIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgdHlwZTogXCIgKyB0KTtcbiAgICBfW3RdID0gW107XG4gIH1cbiAgcmV0dXJuIG5ldyBEaXNwYXRjaChfKTtcbn1cblxuZnVuY3Rpb24gRGlzcGF0Y2goXykge1xuICB0aGlzLl8gPSBfO1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMsIHR5cGVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICBpZiAodCAmJiAhdHlwZXMuaGFzT3duUHJvcGVydHkodCkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0KTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuRGlzcGF0Y2gucHJvdG90eXBlID0gZGlzcGF0Y2gucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXG4gIG9uOiBmdW5jdGlvbih0eXBlbmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgXyA9IHRoaXMuXyxcbiAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXG4gICAgICAgIHQsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IFQubGVuZ3RoO1xuXG4gICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBvZiB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSAmJiAodCA9IGdldChfW3RdLCB0eXBlbmFtZS5uYW1lKSkpIHJldHVybiB0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIGEgdHlwZSB3YXMgc3BlY2lmaWVkLCBzZXQgdGhlIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICAvLyBPdGhlcndpc2UsIGlmIGEgbnVsbCBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZW1vdmUgY2FsbGJhY2tzIG9mIHRoZSBnaXZlbiBuYW1lLlxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIGVsc2UgaWYgKGNhbGxiYWNrID09IG51bGwpIGZvciAodCBpbiBfKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIG51bGwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29weSA9IHt9LCBfID0gdGhpcy5fO1xuICAgIGZvciAodmFyIHQgaW4gXykgY29weVt0XSA9IF9bdF0uc2xpY2UoKTtcbiAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICB9LFxuICBjYWxsOiBmdW5jdGlvbih0eXBlLCB0aGF0KSB7XG4gICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24odHlwZSwgdGhhdCwgYXJncykge1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aCwgYzsgaSA8IG47ICsraSkge1xuICAgIGlmICgoYyA9IHR5cGVbaV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXQodHlwZSwgbmFtZSwgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICh0eXBlW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHR5cGVbaV0gPSBub29wLCB0eXBlID0gdHlwZS5zbGljZSgwLCBpKS5jb25jYXQodHlwZS5zbGljZShpICsgMSkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjayAhPSBudWxsKSB0eXBlLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiBjYWxsYmFja30pO1xuICByZXR1cm4gdHlwZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGlzcGF0Y2g7XG4iLCJleHBvcnQgdmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gIHhodG1sOiB4aHRtbCxcbiAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcbn07XG4iLCJpbXBvcnQgbmFtZXNwYWNlcyBmcm9tIFwiLi9uYW1lc3BhY2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICByZXR1cm4gbmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpID8ge3NwYWNlOiBuYW1lc3BhY2VzW3ByZWZpeF0sIGxvY2FsOiBuYW1lfSA6IG5hbWU7XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuL25hbWVzcGFjZVwiO1xuaW1wb3J0IHt4aHRtbH0gZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5mdW5jdGlvbiBjcmVhdG9ySW5oZXJpdChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIHVyaSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKVxuICAgICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh1cmksIG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdG9yRml4ZWQoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gKGZ1bGxuYW1lLmxvY2FsXG4gICAgICA/IGNyZWF0b3JGaXhlZFxuICAgICAgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gbm9uZSgpIHt9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gbm9uZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZnVuY3Rpb24gZW1wdHkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBlbXB0eSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICB9O1xufVxuIiwidmFyIG1hdGNoZXIgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH07XG59O1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBpZiAoIWVsZW1lbnQubWF0Y2hlcykge1xuICAgIHZhciB2ZW5kb3JNYXRjaGVzID0gZWxlbWVudC53ZWJraXRNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgfHwgZWxlbWVudC5tc01hdGNoZXNTZWxlY3RvclxuICAgICAgICB8fCBlbGVtZW50Lm1vek1hdGNoZXNTZWxlY3RvclxuICAgICAgICB8fCBlbGVtZW50Lm9NYXRjaGVzU2VsZWN0b3I7XG4gICAgbWF0Y2hlciA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2ZW5kb3JNYXRjaGVzLmNhbGwodGhpcywgc2VsZWN0b3IpO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoZXI7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih1cGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBBcnJheSh1cGRhdGUubGVuZ3RoKTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2VudGVyIHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFbnRlck5vZGUocGFyZW50LCBkYXR1bSkge1xuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBwYXJlbnQub3duZXJEb2N1bWVudDtcbiAgdGhpcy5uYW1lc3BhY2VVUkkgPSBwYXJlbnQubmFtZXNwYWNlVVJJO1xuICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9fZGF0YV9fID0gZGF0dW07XG59XG5cbkVudGVyTm9kZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBFbnRlck5vZGUsXG4gIGFwcGVuZENoaWxkOiBmdW5jdGlvbihjaGlsZCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgdGhpcy5fbmV4dCk7IH0sXG4gIGluc2VydEJlZm9yZTogZnVuY3Rpb24oY2hpbGQsIG5leHQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIG5leHQpOyB9LFxuICBxdWVyeVNlbGVjdG9yOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOyB9LFxuICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpOyB9XG59O1xuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge0VudGVyTm9kZX0gZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi4vY29uc3RhbnRcIjtcblxudmFyIGtleVByZWZpeCA9IFwiJFwiOyAvLyBQcm90ZWN0IGFnYWluc3Qga2V5cyBsaWtlIOKAnF9fcHJvdG9fX+KAnS5cblxuZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbm9kZSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgdmFyIGksXG4gICAgICBub2RlLFxuICAgICAgbm9kZUJ5S2V5VmFsdWUgPSB7fSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAga2V5VmFsdWVzID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKSxcbiAgICAgIGtleVZhbHVlO1xuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBub2RlLlxuICAvLyBJZiBtdWx0aXBsZSBub2RlcyBoYXZlIHRoZSBzYW1lIGtleSwgdGhlIGR1cGxpY2F0ZXMgYXJlIGFkZGVkIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgICBpZiAoa2V5VmFsdWUgaW4gbm9kZUJ5S2V5VmFsdWUpIHtcbiAgICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBkYXR1bS5cbiAgLy8gSWYgdGhlcmUgYSBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleSwgam9pbiBhbmQgYWRkIGl0IHRvIHVwZGF0ZS5cbiAgLy8gSWYgdGhlcmUgaXMgbm90IChvciB0aGUga2V5IGlzIGEgZHVwbGljYXRlKSwgYWRkIGl0IHRvIGVudGVyLlxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChwYXJlbnQsIGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdKSB7XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlW2tleVZhbHVlc1tpXV0gPT09IG5vZGUpKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgZGF0YSA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGogPSAtMTtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oZCkgeyBkYXRhWysral0gPSBkOyB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCh2YWx1ZSk7XG5cbiAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YSA9IHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBlbnRlckdyb3VwID0gZW50ZXJbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIHVwZGF0ZUdyb3VwID0gdXBkYXRlW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICBleGl0R3JvdXAgPSBleGl0W2pdID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKTtcblxuICAgIGJpbmQocGFyZW50LCBncm91cCwgZW50ZXJHcm91cCwgdXBkYXRlR3JvdXAsIGV4aXRHcm91cCwgZGF0YSwga2V5KTtcblxuICAgIC8vIE5vdyBjb25uZWN0IHRoZSBlbnRlciBub2RlcyB0byB0aGVpciBmb2xsb3dpbmcgdXBkYXRlIG5vZGUsIHN1Y2ggdGhhdFxuICAgIC8vIGFwcGVuZENoaWxkIGNhbiBpbnNlcnQgdGhlIG1hdGVyaWFsaXplZCBlbnRlciBub2RlIGJlZm9yZSB0aGlzIG5vZGUsXG4gICAgLy8gcmF0aGVyIHRoYW4gYXQgdGhlIGVuZCBvZiB0aGUgcGFyZW50IG5vZGUuXG4gICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDAsIHByZXZpb3VzLCBuZXh0OyBpMCA8IGRhdGFMZW5ndGg7ICsraTApIHtcbiAgICAgIGlmIChwcmV2aW91cyA9IGVudGVyR3JvdXBbaTBdKSB7XG4gICAgICAgIGlmIChpMCA+PSBpMSkgaTEgPSBpMCArIDE7XG4gICAgICAgIHdoaWxlICghKG5leHQgPSB1cGRhdGVHcm91cFtpMV0pICYmICsraTEgPCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgcHJldmlvdXMuX25leHQgPSBuZXh0IHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlID0gbmV3IFNlbGVjdGlvbih1cGRhdGUsIHBhcmVudHMpO1xuICB1cGRhdGUuX2VudGVyID0gZW50ZXI7XG4gIHVwZGF0ZS5fZXhpdCA9IGV4aXQ7XG4gIHJldHVybiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHNvcnRncm91cHMsIHRoaXMuX3BhcmVudHMpLm9yZGVyKCk7XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSAvLyBub2RlIGlzIGEgTm9kZVxuICAgICAgfHwgKG5vZGUuZG9jdW1lbnQgJiYgbm9kZSkgLy8gbm9kZSBpcyBhIFdpbmRvd1xuICAgICAgfHwgbm9kZS5kZWZhdWx0VmlldzsgLy8gbm9kZSBpcyBhIERvY3VtZW50XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgZWxzZSB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHYsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgIDogc3R5bGVWYWx1ZSh0aGlzLm5vZGUoKSwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVZhbHVlKG5vZGUsIG5hbWUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gY2xhc3NBcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xufVxuXG5mdW5jdGlvbiBjbGFzc0xpc3Qobm9kZSkge1xuICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbn1cblxuZnVuY3Rpb24gQ2xhc3NMaXN0KG5vZGUpIHtcbiAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gIHRoaXMuX25hbWVzID0gY2xhc3NBcnJheShub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpO1xufVxuXG5DbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgdGhpcy5fbmFtZXMuc3BsaWNlKGksIDEpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpID49IDA7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNsYXNzZWRBZGQobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QuYWRkKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFJlbW92ZShub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5yZW1vdmUobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZEFkZCh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGYWxzZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZFJlbW92ZSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbihuYW1lcywgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICh2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gY2xhc3NlZEFkZCA6IGNsYXNzZWRSZW1vdmUpKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWVzID0gY2xhc3NBcnJheShuYW1lICsgXCJcIik7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3QodGhpcy5ub2RlKCkpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGNsYXNzZWRGdW5jdGlvbiA6IHZhbHVlXG4gICAgICA/IGNsYXNzZWRUcnVlXG4gICAgICA6IGNsYXNzZWRGYWxzZSkobmFtZXMsIHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiB0ZXh0UmVtb3ZlKCkge1xuICB0aGlzLnRleHRDb250ZW50ID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHRleHRSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHRleHRGdW5jdGlvblxuICAgICAgICAgIDogdGV4dENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLnRleHRDb250ZW50O1xufVxuIiwiZnVuY3Rpb24gaHRtbFJlbW92ZSgpIHtcbiAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBodG1sQ29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGh0bWxGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBodG1sUmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBodG1sRnVuY3Rpb25cbiAgICAgICAgICA6IGh0bWxDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG59XG4iLCJmdW5jdGlvbiByYWlzZSgpIHtcbiAgaWYgKHRoaXMubmV4dFNpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmFpc2UpO1xufVxuIiwiZnVuY3Rpb24gbG93ZXIoKSB7XG4gIGlmICh0aGlzLnByZXZpb3VzU2libGluZykgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLCB0aGlzLnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKGxvd2VyKTtcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yXCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yXCI7XG5cbmZ1bmN0aW9uIGNvbnN0YW50TnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGJlZm9yZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpLFxuICAgICAgc2VsZWN0ID0gYmVmb3JlID09IG51bGwgPyBjb25zdGFudE51bGwgOiB0eXBlb2YgYmVmb3JlID09PSBcImZ1bmN0aW9uXCIgPyBiZWZvcmUgOiBzZWxlY3RvcihiZWZvcmUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBzZWxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmUoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmVtb3ZlKTtcbn1cbiIsImZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZVNoYWxsb3coKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuY2xvbmVOb2RlKGZhbHNlKSwgdGhpcy5uZXh0U2libGluZyk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZURlZXAoKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuY2xvbmVOb2RlKHRydWUpLCB0aGlzLm5leHRTaWJsaW5nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVlcCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZGVlcCA/IHNlbGVjdGlvbl9jbG9uZURlZXAgOiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KTtcbn1cbiIsInZhciBmaWx0ZXJFdmVudHMgPSB7fTtcblxuZXhwb3J0IHZhciBldmVudCA9IG51bGw7XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGlmICghKFwib25tb3VzZWVudGVyXCIgaW4gZWxlbWVudCkpIHtcbiAgICBmaWx0ZXJFdmVudHMgPSB7bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIiwgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwifTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaWx0ZXJDb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICBsaXN0ZW5lciA9IGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGhpcyAmJiAhKHJlbGF0ZWQuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcykgJiA4KSkpIHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50MSkge1xuICAgIHZhciBldmVudDAgPSBldmVudDsgLy8gRXZlbnRzIGNhbiBiZSByZWVudHJhbnQgKGUuZy4sIGZvY3VzKS5cbiAgICBldmVudCA9IGV2ZW50MTtcbiAgICB0cnkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLCBpbmRleCwgZ3JvdXApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBldmVudCA9IGV2ZW50MDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb247XG4gICAgaWYgKCFvbikgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBpID0gLTEsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGlmIChvID0gb25bal0sICghdHlwZW5hbWUudHlwZSB8fCBvLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUpICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25bKytpXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgrK2kpIG9uLmxlbmd0aCA9IGk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHdyYXAgPSBmaWx0ZXJFdmVudHMuaGFzT3duUHJvcGVydHkodHlwZW5hbWUudHlwZSkgPyBmaWx0ZXJDb250ZXh0TGlzdGVuZXIgOiBjb250ZXh0TGlzdGVuZXI7XG4gIHJldHVybiBmdW5jdGlvbihkLCBpLCBncm91cCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSB3cmFwKHZhbHVlLCBpLCBncm91cCk7XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgICAgaWYgKChvID0gb25bal0pLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIgPSBsaXN0ZW5lciwgby5jYXB0dXJlID0gY2FwdHVyZSk7XG4gICAgICAgIG8udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZW5hbWUudHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgIG8gPSB7dHlwZTogdHlwZW5hbWUudHlwZSwgbmFtZTogdHlwZW5hbWUubmFtZSwgdmFsdWU6IHZhbHVlLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGNhcHR1cmU6IGNhcHR1cmV9O1xuICAgIGlmICghb24pIHRoaXMuX19vbiA9IFtvXTtcbiAgICBlbHNlIG9uLnB1c2gobyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgdHlwZW5hbWVzID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiKSwgaSwgbiA9IHR5cGVuYW1lcy5sZW5ndGgsIHQ7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG9uID0gdGhpcy5ub2RlKCkuX19vbjtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKGkgPSAwLCBvID0gb25bal07IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKCh0ID0gdHlwZW5hbWVzW2ldKS50eXBlID09PSBvLnR5cGUgJiYgdC5uYW1lID09PSBvLm5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gby52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBvbiA9IHZhbHVlID8gb25BZGQgOiBvblJlbW92ZTtcbiAgaWYgKGNhcHR1cmUgPT0gbnVsbCkgY2FwdHVyZSA9IGZhbHNlO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB0aGlzLmVhY2gob24odHlwZW5hbWVzW2ldLCB2YWx1ZSwgY2FwdHVyZSkpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbUV2ZW50KGV2ZW50MSwgbGlzdGVuZXIsIHRoYXQsIGFyZ3MpIHtcbiAgdmFyIGV2ZW50MCA9IGV2ZW50O1xuICBldmVudDEuc291cmNlRXZlbnQgPSBldmVudDtcbiAgZXZlbnQgPSBldmVudDE7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9IGZpbmFsbHkge1xuICAgIGV2ZW50ID0gZXZlbnQwO1xuICB9XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KG5vZGUsIHR5cGUsIHBhcmFtcykge1xuICB2YXIgd2luZG93ID0gZGVmYXVsdFZpZXcobm9kZSksXG4gICAgICBldmVudCA9IHdpbmRvdy5DdXN0b21FdmVudDtcblxuICBpZiAodHlwZW9mIGV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBldmVudCA9IG5ldyBldmVudCh0eXBlLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgaWYgKHBhcmFtcykgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSksIGV2ZW50LmRldGFpbCA9IHBhcmFtcy5kZXRhaWw7XG4gICAgZWxzZSBldmVudC5pbml0RXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgfVxuXG4gIG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoQ29uc3RhbnQodHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGRpc3BhdGNoRnVuY3Rpb25cbiAgICAgIDogZGlzcGF0Y2hDb25zdGFudCkodHlwZSwgcGFyYW1zKSk7XG59XG4iLCJpbXBvcnQgc2VsZWN0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3RcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdGEgZnJvbSBcIi4vZGF0YVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbnRlciBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9leGl0IGZyb20gXCIuL2V4aXRcIjtcbmltcG9ydCBzZWxlY3Rpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fb3JkZXIgZnJvbSBcIi4vb3JkZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc29ydCBmcm9tIFwiLi9zb3J0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NhbGwgZnJvbSBcIi4vY2FsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlcyBmcm9tIFwiLi9ub2Rlc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlIGZyb20gXCIuL25vZGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2l6ZSBmcm9tIFwiLi9zaXplXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VtcHR5IGZyb20gXCIuL2VtcHR5XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VhY2ggZnJvbSBcIi4vZWFjaFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hdHRyIGZyb20gXCIuL2F0dHJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fcHJvcGVydHkgZnJvbSBcIi4vcHJvcGVydHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xhc3NlZCBmcm9tIFwiLi9jbGFzc2VkXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RleHQgZnJvbSBcIi4vdGV4dFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9odG1sIGZyb20gXCIuL2h0bWxcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmFpc2UgZnJvbSBcIi4vcmFpc2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fbG93ZXIgZnJvbSBcIi4vbG93ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXBwZW5kIGZyb20gXCIuL2FwcGVuZFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnNlcnQgZnJvbSBcIi4vaW5zZXJ0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xvbmUgZnJvbSBcIi4vY2xvbmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0dW0gZnJvbSBcIi4vZGF0dW1cIjtcbmltcG9ydCBzZWxlY3Rpb25fb24gZnJvbSBcIi4vb25cIjtcbmltcG9ydCBzZWxlY3Rpb25fZGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2hcIjtcblxuZXhwb3J0IHZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5TZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICBtZXJnZTogc2VsZWN0aW9uX21lcmdlLFxuICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICBjbG9uZTogc2VsZWN0aW9uX2Nsb25lLFxuICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICBvbjogc2VsZWN0aW9uX29uLFxuICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Rpb247XG4iLCJpbXBvcnQge1NlbGVjdGlvbiwgcm9vdH0gZnJvbSBcIi4vc2VsZWN0aW9uL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgOiBuZXcgU2VsZWN0aW9uKFtbc2VsZWN0b3JdXSwgcm9vdCk7XG59XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiLi9zZWxlY3Rpb24vb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjdXJyZW50ID0gZXZlbnQsIHNvdXJjZTtcbiAgd2hpbGUgKHNvdXJjZSA9IGN1cnJlbnQuc291cmNlRXZlbnQpIGN1cnJlbnQgPSBzb3VyY2U7XG4gIHJldHVybiBjdXJyZW50O1xufVxuIiwiaW1wb3J0IHNvdXJjZUV2ZW50IGZyb20gXCIuL3NvdXJjZUV2ZW50XCI7XG5pbXBvcnQgcG9pbnQgZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICB2YXIgZXZlbnQgPSBzb3VyY2VFdmVudCgpO1xuICBpZiAoZXZlbnQuY2hhbmdlZFRvdWNoZXMpIGV2ZW50ID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gIHJldHVybiBwb2ludChub2RlLCBldmVudCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBldmVudCkge1xuICB2YXIgc3ZnID0gbm9kZS5vd25lclNWR0VsZW1lbnQgfHwgbm9kZTtcblxuICBpZiAoc3ZnLmNyZWF0ZVNWR1BvaW50KSB7XG4gICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgcG9pbnQueCA9IGV2ZW50LmNsaWVudFgsIHBvaW50LnkgPSBldmVudC5jbGllbnRZO1xuICAgIHBvaW50ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG5vZGUuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKTtcbiAgICByZXR1cm4gW3BvaW50LngsIHBvaW50LnldO1xuICB9XG5cbiAgdmFyIHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4gW2V2ZW50LmNsaWVudFggLSByZWN0LmxlZnQgLSBub2RlLmNsaWVudExlZnQsIGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCAtIG5vZGUuY2xpZW50VG9wXTtcbn1cbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oKSB7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25zdHJ1Y3RvciwgZmFjdG9yeSwgcHJvdG90eXBlKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGZhY3RvcnkucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwYXJlbnQsIGRlZmluaXRpb24pIHtcbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XG4gIGZvciAodmFyIGtleSBpbiBkZWZpbml0aW9uKSBwcm90b3R5cGVba2V5XSA9IGRlZmluaXRpb25ba2V5XTtcbiAgcmV0dXJuIHByb3RvdHlwZTtcbn1cbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG5leHBvcnQgdmFyIGRhcmtlciA9IDAuNztcbmV4cG9ydCB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG52YXIgcmVJID0gXCJcXFxccyooWystXT9cXFxcZCspXFxcXHMqXCIsXG4gICAgcmVOID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KSVcXFxccypcIixcbiAgICByZUhleDMgPSAvXiMoWzAtOWEtZl17M30pJC8sXG4gICAgcmVIZXg2ID0gL14jKFswLTlhLWZdezZ9KSQvLFxuICAgIHJlUmdiSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZUksIHJlSSwgcmVJXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlSSwgcmVJLCByZUksIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xcXFxcKFwiICsgW3JlTiwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsYVxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpO1xuXG52YXIgbmFtZWQgPSB7XG4gIGFsaWNlYmx1ZTogMHhmMGY4ZmYsXG4gIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gIGFxdWE6IDB4MDBmZmZmLFxuICBhcXVhbWFyaW5lOiAweDdmZmZkNCxcbiAgYXp1cmU6IDB4ZjBmZmZmLFxuICBiZWlnZTogMHhmNWY1ZGMsXG4gIGJpc3F1ZTogMHhmZmU0YzQsXG4gIGJsYWNrOiAweDAwMDAwMCxcbiAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICBibHVlOiAweDAwMDBmZixcbiAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gIGJyb3duOiAweGE1MmEyYSxcbiAgYnVybHl3b29kOiAweGRlYjg4NyxcbiAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gIGNob2NvbGF0ZTogMHhkMjY5MWUsXG4gIGNvcmFsOiAweGZmN2Y1MCxcbiAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICBjb3Juc2lsazogMHhmZmY4ZGMsXG4gIGNyaW1zb246IDB4ZGMxNDNjLFxuICBjeWFuOiAweDAwZmZmZixcbiAgZGFya2JsdWU6IDB4MDAwMDhiLFxuICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICBkYXJrZ3JheTogMHhhOWE5YTksXG4gIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgZGFya2toYWtpOiAweGJkYjc2YixcbiAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gIGRhcmtvcmFuZ2U6IDB4ZmY4YzAwLFxuICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgZGFya3JlZDogMHg4YjAwMDAsXG4gIGRhcmtzYWxtb246IDB4ZTk5NjdhLFxuICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgZGFya3NsYXRlZ3JheTogMHgyZjRmNGYsXG4gIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgZGFya3Zpb2xldDogMHg5NDAwZDMsXG4gIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICBkaW1ncmF5OiAweDY5Njk2OSxcbiAgZGltZ3JleTogMHg2OTY5NjksXG4gIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICBmaXJlYnJpY2s6IDB4YjIyMjIyLFxuICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgZnVjaHNpYTogMHhmZjAwZmYsXG4gIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICBnb2xkOiAweGZmZDcwMCxcbiAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgZ3JheTogMHg4MDgwODAsXG4gIGdyZWVuOiAweDAwODAwMCxcbiAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICBncmV5OiAweDgwODA4MCxcbiAgaG9uZXlkZXc6IDB4ZjBmZmYwLFxuICBob3RwaW5rOiAweGZmNjliNCxcbiAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgaW5kaWdvOiAweDRiMDA4MixcbiAgaXZvcnk6IDB4ZmZmZmYwLFxuICBraGFraTogMHhmMGU2OGMsXG4gIGxhdmVuZGVyOiAweGU2ZTZmYSxcbiAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gIGxlbW9uY2hpZmZvbjogMHhmZmZhY2QsXG4gIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICBsaWdodGN5YW46IDB4ZTBmZmZmLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gIGxpZ2h0Z3JlZW46IDB4OTBlZTkwLFxuICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICBsaWdodHNhbG1vbjogMHhmZmEwN2EsXG4gIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICBsaWdodHNsYXRlZ3JheTogMHg3Nzg4OTksXG4gIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICBsaWdodHllbGxvdzogMHhmZmZmZTAsXG4gIGxpbWU6IDB4MDBmZjAwLFxuICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICBsaW5lbjogMHhmYWYwZTYsXG4gIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICBtYXJvb246IDB4ODAwMDAwLFxuICBtZWRpdW1hcXVhbWFyaW5lOiAweDY2Y2RhYSxcbiAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gIG1lZGl1bXB1cnBsZTogMHg5MzcwZGIsXG4gIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IDB4MDBmYTlhLFxuICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICBtaWRuaWdodGJsdWU6IDB4MTkxOTcwLFxuICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICBtb2NjYXNpbjogMHhmZmU0YjUsXG4gIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgbmF2eTogMHgwMDAwODAsXG4gIG9sZGxhY2U6IDB4ZmRmNWU2LFxuICBvbGl2ZTogMHg4MDgwMDAsXG4gIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gIG9yYW5nZTogMHhmZmE1MDAsXG4gIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gIG9yY2hpZDogMHhkYTcwZDYsXG4gIHBhbGVnb2xkZW5yb2Q6IDB4ZWVlOGFhLFxuICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgcGFsZXZpb2xldHJlZDogMHhkYjcwOTMsXG4gIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICBwZXJ1OiAweGNkODUzZixcbiAgcGluazogMHhmZmMwY2IsXG4gIHBsdW06IDB4ZGRhMGRkLFxuICBwb3dkZXJibHVlOiAweGIwZTBlNixcbiAgcHVycGxlOiAweDgwMDA4MCxcbiAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gIHJlZDogMHhmZjAwMDAsXG4gIHJvc3licm93bjogMHhiYzhmOGYsXG4gIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gIHNhZGRsZWJyb3duOiAweDhiNDUxMyxcbiAgc2FsbW9uOiAweGZhODA3MixcbiAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gIHNlYWdyZWVuOiAweDJlOGI1NyxcbiAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICBzaWVubmE6IDB4YTA1MjJkLFxuICBzaWx2ZXI6IDB4YzBjMGMwLFxuICBza3libHVlOiAweDg3Y2VlYixcbiAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgc2xhdGVncmF5OiAweDcwODA5MCxcbiAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgc25vdzogMHhmZmZhZmEsXG4gIHNwcmluZ2dyZWVuOiAweDAwZmY3ZixcbiAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgdGFuOiAweGQyYjQ4YyxcbiAgdGVhbDogMHgwMDgwODAsXG4gIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICB0b21hdG86IDB4ZmY2MzQ3LFxuICB0dXJxdW9pc2U6IDB4NDBlMGQwLFxuICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICB3aGVhdDogMHhmNWRlYjMsXG4gIHdoaXRlOiAweGZmZmZmZixcbiAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gIHllbGxvdzogMHhmZmZmMDAsXG4gIHllbGxvd2dyZWVuOiAweDlhY2QzMlxufTtcblxuZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkuZGlzcGxheWFibGUoKTtcbiAgfSxcbiAgaGV4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5oZXgoKTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpICsgXCJcIjtcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICB2YXIgbTtcbiAgZm9ybWF0ID0gKGZvcm1hdCArIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKG0gPSByZUhleDMuZXhlYyhmb3JtYXQpKSA/IChtID0gcGFyc2VJbnQobVsxXSwgMTYpLCBuZXcgUmdiKChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4MGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpLCAxKSkgLy8gI2YwMFxuICAgICAgOiAobSA9IHJlSGV4Ni5leGVjKGZvcm1hdCkpID8gcmdibihwYXJzZUludChtWzFdLCAxNikpIC8vICNmZjAwMDBcbiAgICAgIDogKG0gPSByZVJnYkludGVnZXIuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSwgbVsyXSwgbVszXSwgMSkgLy8gcmdiKDI1NSwgMCwgMClcbiAgICAgIDogKG0gPSByZVJnYlBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgMSkgLy8gcmdiKDEwMCUsIDAlLCAwJSlcbiAgICAgIDogKG0gPSByZVJnYmFJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0sIG1bMl0sIG1bM10sIG1bNF0pIC8vIHJnYmEoMjU1LCAwLCAwLCAxKVxuICAgICAgOiAobSA9IHJlUmdiYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgbVs0XSkgLy8gcmdiKDEwMCUsIDAlLCAwJSwgMSlcbiAgICAgIDogKG0gPSByZUhzbFBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgMSkgLy8gaHNsKDEyMCwgNTAlLCA1MCUpXG4gICAgICA6IChtID0gcmVIc2xhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCBtWzRdKSAvLyBoc2xhKDEyMCwgNTAlLCA1MCUsIDEpXG4gICAgICA6IG5hbWVkLmhhc093blByb3BlcnR5KGZvcm1hdCkgPyByZ2JuKG5hbWVkW2Zvcm1hdF0pXG4gICAgICA6IGZvcm1hdCA9PT0gXCJ0cmFuc3BhcmVudFwiID8gbmV3IFJnYihOYU4sIE5hTiwgTmFOLCAwKVxuICAgICAgOiBudWxsO1xufVxuXG5mdW5jdGlvbiByZ2JuKG4pIHtcbiAgcmV0dXJuIG5ldyBSZ2IobiA+PiAxNiAmIDB4ZmYsIG4gPj4gOCAmIDB4ZmYsIG4gJiAweGZmLCAxKTtcbn1cblxuZnVuY3Rpb24gcmdiYShyLCBnLCBiLCBhKSB7XG4gIGlmIChhIDw9IDApIHIgPSBnID0gYiA9IE5hTjtcbiAgcmV0dXJuIG5ldyBSZ2IociwgZywgYiwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JDb252ZXJ0KG8pIHtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgUmdiO1xuICBvID0gby5yZ2IoKTtcbiAgcmV0dXJuIG5ldyBSZ2Ioby5yLCBvLmcsIG8uYiwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gcmdiQ29udmVydChyKSA6IG5ldyBSZ2IociwgZywgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5yID0gK3I7XG4gIHRoaXMuZyA9ICtnO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShSZ2IsIHJnYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5yICYmIHRoaXMuciA8PSAyNTUpXG4gICAgICAgICYmICgwIDw9IHRoaXMuZyAmJiB0aGlzLmcgPD0gMjU1KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmIgJiYgdGhpcy5iIDw9IDI1NSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgaGV4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCIjXCIgKyBoZXgodGhpcy5yKSArIGhleCh0aGlzLmcpICsgaGV4KHRoaXMuYik7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgICByZXR1cm4gKGEgPT09IDEgPyBcInJnYihcIiA6IFwicmdiYShcIilcbiAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5yKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5nKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5iKSB8fCAwKSlcbiAgICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiBoZXgodmFsdWUpIHtcbiAgdmFsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodmFsdWUpIHx8IDApKTtcbiAgcmV0dXJuICh2YWx1ZSA8IDE2ID8gXCIwXCIgOiBcIlwiKSArIHZhbHVlLnRvU3RyaW5nKDE2KTtcbn1cblxuZnVuY3Rpb24gaHNsYShoLCBzLCBsLCBhKSB7XG4gIGlmIChhIDw9IDApIGggPSBzID0gbCA9IE5hTjtcbiAgZWxzZSBpZiAobCA8PSAwIHx8IGwgPj0gMSkgaCA9IHMgPSBOYU47XG4gIGVsc2UgaWYgKHMgPD0gMCkgaCA9IE5hTjtcbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBuZXcgSHNsKG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IEhzbDtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBvO1xuICBvID0gby5yZ2IoKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICBoID0gTmFOLFxuICAgICAgcyA9IG1heCAtIG1pbixcbiAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGlmIChzKSB7XG4gICAgaWYgKHIgPT09IG1heCkgaCA9IChnIC0gYikgLyBzICsgKGcgPCBiKSAqIDY7XG4gICAgZWxzZSBpZiAoZyA9PT0gbWF4KSBoID0gKGIgLSByKSAvIHMgKyAyO1xuICAgIGVsc2UgaCA9IChyIC0gZykgLyBzICsgNDtcbiAgICBzIC89IGwgPCAwLjUgPyBtYXggKyBtaW4gOiAyIC0gbWF4IC0gbWluO1xuICAgIGggKj0gNjA7XG4gIH0gZWxzZSB7XG4gICAgcyA9IGwgPiAwICYmIGwgPCAxID8gMCA6IGg7XG4gIH1cbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaHNsQ29udmVydChoKSA6IG5ldyBIc2woaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhzbCwgaHNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gdGhpcy5oICUgMzYwICsgKHRoaXMuaCA8IDApICogMzYwLFxuICAgICAgICBzID0gaXNOYU4oaCkgfHwgaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMsXG4gICAgICAgIGwgPSB0aGlzLmwsXG4gICAgICAgIG0yID0gbCArIChsIDwgMC41ID8gbCA6IDEgLSBsKSAqIHMsXG4gICAgICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGhzbDJyZ2IoaCA+PSAyNDAgPyBoIC0gMjQwIDogaCArIDEyMCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCA8IDEyMCA/IGggKyAyNDAgOiBoIC0gMTIwLCBtMSwgbTIpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnMgJiYgdGhpcy5zIDw9IDEgfHwgaXNOYU4odGhpcy5zKSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9XG59KSk7XG5cbi8qIEZyb20gRnZEIDEzLjM3LCBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDMgKi9cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgbTEsIG0yKSB7XG4gIHJldHVybiAoaCA8IDYwID8gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjBcbiAgICAgIDogaCA8IDE4MCA/IG0yXG4gICAgICA6IGggPCAyNDAgPyBtMSArIChtMiAtIG0xKSAqICgyNDAgLSBoKSAvIDYwXG4gICAgICA6IG0xKSAqIDI1NTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yQWxsIGZyb20gXCIuLi9zZWxlY3RvckFsbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCBwYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSBcIi4uL21hdGNoZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rpb24pIHtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gc2VsZWN0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAtMSwgbSA9IGdyb3Vwcy5sZW5ndGg7ICsraiA8IG07KSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBpZiAobmV4dCAmJiBuZXh0ICE9PSBub2RlLm5leHRTaWJsaW5nKSBuZXh0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG5leHQpO1xuICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbMF07XG4gIGFyZ3VtZW50c1swXSA9IHRoaXM7XG4gIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlcyA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGkgPSAtMTtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyBub2Rlc1srK2ldID0gdGhpczsgfSk7XG4gIHJldHVybiBub2Rlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xuICAgICAgaWYgKG5vZGUpIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzaXplID0gMDtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyArK3NpemU7IH0pO1xuICByZXR1cm4gc2l6ZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gIXRoaXMubm9kZSgpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgY2FsbGJhY2suY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuLi9uYW1lc3BhY2VcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgcmV0dXJuIGZ1bGxuYW1lLmxvY2FsXG4gICAgICAgID8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpXG4gICAgICAgIDogbm9kZS5nZXRBdHRyaWJ1dGUoZnVsbG5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbilcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKSkoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiBwcm9wZXJ0eVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgZWxzZSB0aGlzW25hbWVdID0gdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gcHJvcGVydHlSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gcHJvcGVydHlGdW5jdGlvblxuICAgICAgICAgIDogcHJvcGVydHlDb25zdGFudCkobmFtZSwgdmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKVtuYW1lXTtcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpXG4gICAgICA6IHRoaXMubm9kZSgpLl9fZGF0YV9fO1xufVxuIiwiZXhwb3J0IHZhciBkZWcycmFkID0gTWF0aC5QSSAvIDE4MDtcbmV4cG9ydCB2YXIgcmFkMmRlZyA9IDE4MCAvIE1hdGguUEk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmVcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYn0gZnJvbSBcIi4vY29sb3JcIjtcbmltcG9ydCB7ZGVnMnJhZCwgcmFkMmRlZ30gZnJvbSBcIi4vbWF0aFwiO1xuXG4vLyBodHRwczovL2JldGEub2JzZXJ2YWJsZWhxLmNvbS9AbWJvc3RvY2svbGFiLWFuZC1yZ2JcbnZhciBLID0gMTgsXG4gICAgWG4gPSAwLjk2NDIyLFxuICAgIFluID0gMSxcbiAgICBabiA9IDAuODI1MjEsXG4gICAgdDAgPSA0IC8gMjksXG4gICAgdDEgPSA2IC8gMjksXG4gICAgdDIgPSAzICogdDEgKiB0MSxcbiAgICB0MyA9IHQxICogdDEgKiB0MTtcblxuZnVuY3Rpb24gbGFiQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgTGFiKSByZXR1cm4gbmV3IExhYihvLmwsIG8uYSwgby5iLCBvLm9wYWNpdHkpO1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkge1xuICAgIGlmIChpc05hTihvLmgpKSByZXR1cm4gbmV3IExhYihvLmwsIDAsIDAsIG8ub3BhY2l0eSk7XG4gICAgdmFyIGggPSBvLmggKiBkZWcycmFkO1xuICAgIHJldHVybiBuZXcgTGFiKG8ubCwgTWF0aC5jb3MoaCkgKiBvLmMsIE1hdGguc2luKGgpICogby5jLCBvLm9wYWNpdHkpO1xuICB9XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSByZ2IybHJnYihvLnIpLFxuICAgICAgZyA9IHJnYjJscmdiKG8uZyksXG4gICAgICBiID0gcmdiMmxyZ2Ioby5iKSxcbiAgICAgIHkgPSB4eXoybGFiKCgwLjIyMjUwNDUgKiByICsgMC43MTY4Nzg2ICogZyArIDAuMDYwNjE2OSAqIGIpIC8gWW4pLCB4LCB6O1xuICBpZiAociA9PT0gZyAmJiBnID09PSBiKSB4ID0geiA9IHk7IGVsc2Uge1xuICAgIHggPSB4eXoybGFiKCgwLjQzNjA3NDcgKiByICsgMC4zODUwNjQ5ICogZyArIDAuMTQzMDgwNCAqIGIpIC8gWG4pO1xuICAgIHogPSB4eXoybGFiKCgwLjAxMzkzMjIgKiByICsgMC4wOTcxMDQ1ICogZyArIDAuNzE0MTczMyAqIGIpIC8gWm4pO1xuICB9XG4gIHJldHVybiBuZXcgTGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXkobCwgb3BhY2l0eSkge1xuICByZXR1cm4gbmV3IExhYihsLCAwLCAwLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gbGFiQ29udmVydChsKSA6IG5ldyBMYWIobCwgYSwgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMuYSA9ICthO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShMYWIsIGxhYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHkgPSAodGhpcy5sICsgMTYpIC8gMTE2LFxuICAgICAgICB4ID0gaXNOYU4odGhpcy5hKSA/IHkgOiB5ICsgdGhpcy5hIC8gNTAwLFxuICAgICAgICB6ID0gaXNOYU4odGhpcy5iKSA/IHkgOiB5IC0gdGhpcy5iIC8gMjAwO1xuICAgIHggPSBYbiAqIGxhYjJ4eXooeCk7XG4gICAgeSA9IFluICogbGFiMnh5eih5KTtcbiAgICB6ID0gWm4gKiBsYWIyeHl6KHopO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgbHJnYjJyZ2IoIDMuMTMzODU2MSAqIHggLSAxLjYxNjg2NjcgKiB5IC0gMC40OTA2MTQ2ICogeiksXG4gICAgICBscmdiMnJnYigtMC45Nzg3Njg0ICogeCArIDEuOTE2MTQxNSAqIHkgKyAwLjAzMzQ1NDAgKiB6KSxcbiAgICAgIGxyZ2IycmdiKCAwLjA3MTk0NTMgKiB4IC0gMC4yMjg5OTE0ICogeSArIDEuNDA1MjQyNyAqIHopLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiB4eXoybGFiKHQpIHtcbiAgcmV0dXJuIHQgPiB0MyA/IE1hdGgucG93KHQsIDEgLyAzKSA6IHQgLyB0MiArIHQwO1xufVxuXG5mdW5jdGlvbiBsYWIyeHl6KHQpIHtcbiAgcmV0dXJuIHQgPiB0MSA/IHQgKiB0ICogdCA6IHQyICogKHQgLSB0MCk7XG59XG5cbmZ1bmN0aW9uIGxyZ2IycmdiKHgpIHtcbiAgcmV0dXJuIDI1NSAqICh4IDw9IDAuMDAzMTMwOCA/IDEyLjkyICogeCA6IDEuMDU1ICogTWF0aC5wb3coeCwgMSAvIDIuNCkgLSAwLjA1NSk7XG59XG5cbmZ1bmN0aW9uIHJnYjJscmdiKHgpIHtcbiAgcmV0dXJuICh4IC89IDI1NSkgPD0gMC4wNDA0NSA/IHggLyAxMi45MiA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG59XG5cbmZ1bmN0aW9uIGhjbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIG5ldyBIY2woby5oLCBvLmMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIExhYikpIG8gPSBsYWJDb252ZXJ0KG8pO1xuICBpZiAoby5hID09PSAwICYmIG8uYiA9PT0gMCkgcmV0dXJuIG5ldyBIY2woTmFOLCAwLCBvLmwsIG8ub3BhY2l0eSk7XG4gIHZhciBoID0gTWF0aC5hdGFuMihvLmIsIG8uYSkgKiByYWQyZGVnO1xuICByZXR1cm4gbmV3IEhjbChoIDwgMCA/IGggKyAzNjAgOiBoLCBNYXRoLnNxcnQoby5hICogby5hICsgby5iICogby5iKSwgby5sLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGNoKGwsIGMsIGgsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGwpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQoaCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLmMgPSArYztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSGNsLCBoY2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgKyBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBsYWJDb252ZXJ0KHRoaXMpLnJnYigpO1xuICB9XG59KSk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmVcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYiwgZGFya2VyLCBicmlnaHRlcn0gZnJvbSBcIi4vY29sb3JcIjtcbmltcG9ydCB7ZGVnMnJhZCwgcmFkMmRlZ30gZnJvbSBcIi4vbWF0aFwiO1xuXG52YXIgQSA9IC0wLjE0ODYxLFxuICAgIEIgPSArMS43ODI3NyxcbiAgICBDID0gLTAuMjkyMjcsXG4gICAgRCA9IC0wLjkwNjQ5LFxuICAgIEUgPSArMS45NzI5NCxcbiAgICBFRCA9IEUgKiBELFxuICAgIEVCID0gRSAqIEIsXG4gICAgQkNfREEgPSBCICogQyAtIEQgKiBBO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXhDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBDdWJlaGVsaXgpIHJldHVybiBuZXcgQ3ViZWhlbGl4KG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIGwgPSAoQkNfREEgKiBiICsgRUQgKiByIC0gRUIgKiBnKSAvIChCQ19EQSArIEVEIC0gRUIpLFxuICAgICAgYmwgPSBiIC0gbCxcbiAgICAgIGsgPSAoRSAqIChnIC0gbCkgLSBDICogYmwpIC8gRCxcbiAgICAgIHMgPSBNYXRoLnNxcnQoayAqIGsgKyBibCAqIGJsKSAvIChFICogbCAqICgxIC0gbCkpLCAvLyBOYU4gaWYgbD0wIG9yIGw9MVxuICAgICAgaCA9IHMgPyBNYXRoLmF0YW4yKGssIGJsKSAqIHJhZDJkZWcgLSAxMjAgOiBOYU47XG4gIHJldHVybiBuZXcgQ3ViZWhlbGl4KGggPCAwID8gaCArIDM2MCA6IGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY3ViZWhlbGl4Q29udmVydChoKSA6IG5ldyBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShDdWJlaGVsaXgsIGN1YmVoZWxpeCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IGlzTmFOKHRoaXMuaCkgPyAwIDogKHRoaXMuaCArIDEyMCkgKiBkZWcycmFkLFxuICAgICAgICBsID0gK3RoaXMubCxcbiAgICAgICAgYSA9IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zICogbCAqICgxIC0gbCksXG4gICAgICAgIGNvc2ggPSBNYXRoLmNvcyhoKSxcbiAgICAgICAgc2luaCA9IE1hdGguc2luKGgpO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgMjU1ICogKGwgKyBhICogKEEgKiBjb3NoICsgQiAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChDICogY29zaCArIEQgKiBzaW5oKSksXG4gICAgICAyNTUgKiAobCArIGEgKiAoRSAqIGNvc2gpKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmZ1bmN0aW9uIGxpbmVhcihhLCBkKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKyB0ICogZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXhwb25lbnRpYWwoYSwgYiwgeSkge1xuICByZXR1cm4gYSA9IE1hdGgucG93KGEsIHkpLCBiID0gTWF0aC5wb3coYiwgeSkgLSBhLCB5ID0gMSAvIHksIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coYSArIHQgKiBiLCB5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh1ZShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQgPiAxODAgfHwgZCA8IC0xODAgPyBkIC0gMzYwICogTWF0aC5yb3VuZChkIC8gMzYwKSA6IGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnYW1tYSh5KSB7XG4gIHJldHVybiAoeSA9ICt5KSA9PT0gMSA/IG5vZ2FtbWEgOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIgLSBhID8gZXhwb25lbnRpYWwoYSwgYiwgeSkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9nYW1tYShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG4iLCJpbXBvcnQge3JnYiBhcyBjb2xvclJnYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgYmFzaXMgZnJvbSBcIi4vYmFzaXNcIjtcbmltcG9ydCBiYXNpc0Nsb3NlZCBmcm9tIFwiLi9iYXNpc0Nsb3NlZFwiO1xuaW1wb3J0IG5vZ2FtbWEsIHtnYW1tYX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHJnYkdhbW1hKHkpIHtcbiAgdmFyIGNvbG9yID0gZ2FtbWEoeSk7XG5cbiAgZnVuY3Rpb24gcmdiKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgciA9IGNvbG9yKChzdGFydCA9IGNvbG9yUmdiKHN0YXJ0KSkuciwgKGVuZCA9IGNvbG9yUmdiKGVuZCkpLnIpLFxuICAgICAgICBnID0gY29sb3Ioc3RhcnQuZywgZW5kLmcpLFxuICAgICAgICBiID0gY29sb3Ioc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LnIgPSByKHQpO1xuICAgICAgc3RhcnQuZyA9IGcodCk7XG4gICAgICBzdGFydC5iID0gYih0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG5cbiAgcmdiLmdhbW1hID0gcmdiR2FtbWE7XG5cbiAgcmV0dXJuIHJnYjtcbn0pKDEpO1xuXG5mdW5jdGlvbiByZ2JTcGxpbmUoc3BsaW5lKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICB2YXIgbiA9IGNvbG9ycy5sZW5ndGgsXG4gICAgICAgIHIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGcgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGksIGNvbG9yO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNvbG9yID0gY29sb3JSZ2IoY29sb3JzW2ldKTtcbiAgICAgIHJbaV0gPSBjb2xvci5yIHx8IDA7XG4gICAgICBnW2ldID0gY29sb3IuZyB8fCAwO1xuICAgICAgYltpXSA9IGNvbG9yLmIgfHwgMDtcbiAgICB9XG4gICAgciA9IHNwbGluZShyKTtcbiAgICBnID0gc3BsaW5lKGcpO1xuICAgIGIgPSBzcGxpbmUoYik7XG4gICAgY29sb3Iub3BhY2l0eSA9IDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGNvbG9yLnIgPSByKHQpO1xuICAgICAgY29sb3IuZyA9IGcodCk7XG4gICAgICBjb2xvci5iID0gYih0KTtcbiAgICAgIHJldHVybiBjb2xvciArIFwiXCI7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciByZ2JCYXNpcyA9IHJnYlNwbGluZShiYXNpcyk7XG5leHBvcnQgdmFyIHJnYkJhc2lzQ2xvc2VkID0gcmdiU3BsaW5lKGJhc2lzQ2xvc2VkKTtcbiIsImV4cG9ydCBmdW5jdGlvbiBiYXNpcyh0MSwgdjAsIHYxLCB2MiwgdjMpIHtcbiAgdmFyIHQyID0gdDEgKiB0MSwgdDMgPSB0MiAqIHQxO1xuICByZXR1cm4gKCgxIC0gMyAqIHQxICsgMyAqIHQyIC0gdDMpICogdjBcbiAgICAgICsgKDQgLSA2ICogdDIgKyAzICogdDMpICogdjFcbiAgICAgICsgKDEgKyAzICogdDEgKyAzICogdDIgLSAzICogdDMpICogdjJcbiAgICAgICsgdDMgKiB2MykgLyA2O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IHQgPD0gMCA/ICh0ID0gMCkgOiB0ID49IDEgPyAodCA9IDEsIG4gLSAxKSA6IE1hdGguZmxvb3IodCAqIG4pLFxuICAgICAgICB2MSA9IHZhbHVlc1tpXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbaSArIDFdLFxuICAgICAgICB2MCA9IGkgPiAwID8gdmFsdWVzW2kgLSAxXSA6IDIgKiB2MSAtIHYyLFxuICAgICAgICB2MyA9IGkgPCBuIC0gMSA/IHZhbHVlc1tpICsgMl0gOiAyICogdjIgLSB2MTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgYiAqIHQ7XG4gIH07XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG52YXIgcmVBID0gL1stK10/KD86XFxkK1xcLj9cXGQqfFxcLj9cXGQrKSg/OltlRV1bLStdP1xcZCspPy9nLFxuICAgIHJlQiA9IG5ldyBSZWdFeHAocmVBLnNvdXJjZSwgXCJnXCIpO1xuXG5mdW5jdGlvbiB6ZXJvKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbmUoYikge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBiKHQpICsgXCJcIjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYmkgPSByZUEubGFzdEluZGV4ID0gcmVCLmxhc3RJbmRleCA9IDAsIC8vIHNjYW4gaW5kZXggZm9yIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGFtLCAvLyBjdXJyZW50IG1hdGNoIGluIGFcbiAgICAgIGJtLCAvLyBjdXJyZW50IG1hdGNoIGluIGJcbiAgICAgIGJzLCAvLyBzdHJpbmcgcHJlY2VkaW5nIGN1cnJlbnQgbnVtYmVyIGluIGIsIGlmIGFueVxuICAgICAgaSA9IC0xLCAvLyBpbmRleCBpbiBzXG4gICAgICBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuXG4gIC8vIENvZXJjZSBpbnB1dHMgdG8gc3RyaW5ncy5cbiAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XG5cbiAgLy8gSW50ZXJwb2xhdGUgcGFpcnMgb2YgbnVtYmVycyBpbiBhICYgYi5cbiAgd2hpbGUgKChhbSA9IHJlQS5leGVjKGEpKVxuICAgICAgJiYgKGJtID0gcmVCLmV4ZWMoYikpKSB7XG4gICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7IC8vIGEgc3RyaW5nIHByZWNlZGVzIHRoZSBuZXh0IG51bWJlciBpbiBiXG4gICAgICBicyA9IGIuc2xpY2UoYmksIGJzKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG4gICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7IC8vIG51bWJlcnMgaW4gYSAmIGIgbWF0Y2hcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBibTtcbiAgICB9IGVsc2UgeyAvLyBpbnRlcnBvbGF0ZSBub24tbWF0Y2hpbmcgbnVtYmVyc1xuICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgIHEucHVzaCh7aTogaSwgeDogbnVtYmVyKGFtLCBibSl9KTtcbiAgICB9XG4gICAgYmkgPSByZUIubGFzdEluZGV4O1xuICB9XG5cbiAgLy8gQWRkIHJlbWFpbnMgb2YgYi5cbiAgaWYgKGJpIDwgYi5sZW5ndGgpIHtcbiAgICBicyA9IGIuc2xpY2UoYmkpO1xuICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gIH1cblxuICAvLyBTcGVjaWFsIG9wdGltaXphdGlvbiBmb3Igb25seSBhIHNpbmdsZSBtYXRjaC5cbiAgLy8gT3RoZXJ3aXNlLCBpbnRlcnBvbGF0ZSBlYWNoIG9mIHRoZSBudW1iZXJzIGFuZCByZWpvaW4gdGhlIHN0cmluZy5cbiAgcmV0dXJuIHMubGVuZ3RoIDwgMiA/IChxWzBdXG4gICAgICA/IG9uZShxWzBdLngpXG4gICAgICA6IHplcm8oYikpXG4gICAgICA6IChiID0gcS5sZW5ndGgsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgICAgIH0pO1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgcmdiIGZyb20gXCIuL3JnYlwiO1xuaW1wb3J0IGFycmF5IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgZGF0ZSBmcm9tIFwiLi9kYXRlXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuaW1wb3J0IG9iamVjdCBmcm9tIFwiLi9vYmplY3RcIjtcbmltcG9ydCBzdHJpbmcgZnJvbSBcIi4vc3RyaW5nXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgdCA9IHR5cGVvZiBiLCBjO1xuICByZXR1cm4gYiA9PSBudWxsIHx8IHQgPT09IFwiYm9vbGVhblwiID8gY29uc3RhbnQoYilcbiAgICAgIDogKHQgPT09IFwibnVtYmVyXCIgPyBudW1iZXJcbiAgICAgIDogdCA9PT0gXCJzdHJpbmdcIiA/ICgoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgcmdiKSA6IHN0cmluZylcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gcmdiXG4gICAgICA6IGIgaW5zdGFuY2VvZiBEYXRlID8gZGF0ZVxuICAgICAgOiBBcnJheS5pc0FycmF5KGIpID8gYXJyYXlcbiAgICAgIDogdHlwZW9mIGIudmFsdWVPZiAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiLnRvU3RyaW5nICE9PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4oYikgPyBvYmplY3RcbiAgICAgIDogbnVtYmVyKShhLCBiKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZTtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGQuc2V0VGltZShhICsgYiAqIHQpLCBkO1xuICB9O1xufVxuIiwiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIG5iID0gYiA/IGIubGVuZ3RoIDogMCxcbiAgICAgIG5hID0gYSA/IE1hdGgubWluKG5iLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgeCA9IG5ldyBBcnJheShuYSksXG4gICAgICBjID0gbmV3IEFycmF5KG5iKSxcbiAgICAgIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIHhbaV0gPSB2YWx1ZShhW2ldLCBiW2ldKTtcbiAgZm9yICg7IGkgPCBuYjsgKytpKSBjW2ldID0gYltpXTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSBjW2ldID0geFtpXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0ge30sXG4gICAgICBjID0ge30sXG4gICAgICBrO1xuXG4gIGlmIChhID09PSBudWxsIHx8IHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSBhID0ge307XG4gIGlmIChiID09PSBudWxsIHx8IHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSBiID0ge307XG5cbiAgZm9yIChrIGluIGIpIHtcbiAgICBpZiAoayBpbiBhKSB7XG4gICAgICBpW2tdID0gdmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChhICsgYiAqIHQpO1xuICB9O1xufVxuIiwidmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0ge1xuICB0cmFuc2xhdGVYOiAwLFxuICB0cmFuc2xhdGVZOiAwLFxuICByb3RhdGU6IDAsXG4gIHNrZXdYOiAwLFxuICBzY2FsZVg6IDEsXG4gIHNjYWxlWTogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgc2NhbGVYLCBzY2FsZVksIHNrZXdYO1xuICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcbiAgaWYgKHNjYWxlWSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKSkgYyAvPSBzY2FsZVksIGQgLz0gc2NhbGVZLCBza2V3WCAvPSBzY2FsZVk7XG4gIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlWDogZSxcbiAgICB0cmFuc2xhdGVZOiBmLFxuICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXG4gICAgc2tld1g6IE1hdGguYXRhbihza2V3WCkgKiBkZWdyZWVzLFxuICAgIHNjYWxlWDogc2NhbGVYLFxuICAgIHNjYWxlWTogc2NhbGVZXG4gIH07XG59XG4iLCJpbXBvcnQgZGVjb21wb3NlLCB7aWRlbnRpdHl9IGZyb20gXCIuL2RlY29tcG9zZVwiO1xuXG52YXIgY3NzTm9kZSxcbiAgICBjc3NSb290LFxuICAgIGNzc1ZpZXcsXG4gICAgc3ZnTm9kZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gXCJub25lXCIpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFjc3NOb2RlKSBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKSwgY3NzUm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgY3NzVmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBjc3NOb2RlLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlO1xuICB2YWx1ZSA9IGNzc1ZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShjc3NSb290LmFwcGVuZENoaWxkKGNzc05vZGUpLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKFwidHJhbnNmb3JtXCIpO1xuICBjc3NSb290LnJlbW92ZUNoaWxkKGNzc05vZGUpO1xuICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDcsIC0xKS5zcGxpdChcIixcIik7XG4gIHJldHVybiBkZWNvbXBvc2UoK3ZhbHVlWzBdLCArdmFsdWVbMV0sICt2YWx1ZVsyXSwgK3ZhbHVlWzNdLCArdmFsdWVbNF0sICt2YWx1ZVs1XSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN2Zyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIXN2Z05vZGUpIHN2Z05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XG4gIHN2Z05vZGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHZhbHVlKTtcbiAgaWYgKCEodmFsdWUgPSBzdmdOb2RlLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi4vbnVtYmVyXCI7XG5pbXBvcnQge3BhcnNlQ3NzLCBwYXJzZVN2Z30gZnJvbSBcIi4vcGFyc2VcIjtcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2UsIHB4Q29tbWEsIHB4UGFyZW4sIGRlZ1BhcmVuKSB7XG5cbiAgZnVuY3Rpb24gcG9wKHMpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIgXCIgOiBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKFwidHJhbnNsYXRlKFwiLCBudWxsLCBweENvbW1hLCBudWxsLCBweFBhcmVuKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgfHwgeWIpIHtcbiAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHhiICsgcHhDb21tYSArIHliICsgcHhQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRlKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgaWYgKGEgLSBiID4gMTgwKSBiICs9IDM2MDsgZWxzZSBpZiAoYiAtIGEgPiAxODApIGEgKz0gMzYwOyAvLyBzaG9ydGVzdCBwYXRoXG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNrZXdYKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgIT09IDEgfHwgeWIgIT09IDEpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcbiAgICBhID0gcGFyc2UoYSksIGIgPSBwYXJzZShiKTtcbiAgICB0cmFuc2xhdGUoYS50cmFuc2xhdGVYLCBhLnRyYW5zbGF0ZVksIGIudHJhbnNsYXRlWCwgYi50cmFuc2xhdGVZLCBzLCBxKTtcbiAgICByb3RhdGUoYS5yb3RhdGUsIGIucm90YXRlLCBzLCBxKTtcbiAgICBza2V3WChhLnNrZXdYLCBiLnNrZXdYLCBzLCBxKTtcbiAgICBzY2FsZShhLnNjYWxlWCwgYS5zY2FsZVksIGIuc2NhbGVYLCBiLnNjYWxlWSwgcywgcSk7XG4gICAgYSA9IGIgPSBudWxsOyAvLyBnY1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gcS5sZW5ndGgsIG87XG4gICAgICB3aGlsZSAoKytpIDwgbikgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtQ3NzID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VDc3MsIFwicHgsIFwiLCBcInB4KVwiLCBcImRlZylcIik7XG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcbiIsInZhciByaG8gPSBNYXRoLlNRUlQyLFxuICAgIHJobzIgPSAyLFxuICAgIHJobzQgPSA0LFxuICAgIGVwc2lsb24yID0gMWUtMTI7XG5cbmZ1bmN0aW9uIGNvc2goeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpICsgMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gc2luaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgLSAxIC8geCkgLyAyO1xufVxuXG5mdW5jdGlvbiB0YW5oKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKDIgKiB4KSkgLSAxKSAvICh4ICsgMSk7XG59XG5cbi8vIHAwID0gW3V4MCwgdXkwLCB3MF1cbi8vIHAxID0gW3V4MSwgdXkxLCB3MV1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHAwLCBwMSkge1xuICB2YXIgdXgwID0gcDBbMF0sIHV5MCA9IHAwWzFdLCB3MCA9IHAwWzJdLFxuICAgICAgdXgxID0gcDFbMF0sIHV5MSA9IHAxWzFdLCB3MSA9IHAxWzJdLFxuICAgICAgZHggPSB1eDEgLSB1eDAsXG4gICAgICBkeSA9IHV5MSAtIHV5MCxcbiAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICBpLFxuICAgICAgUztcblxuICAvLyBTcGVjaWFsIGNhc2UgZm9yIHUwIOKJhSB1MS5cbiAgaWYgKGQyIDwgZXBzaWxvbjIpIHtcbiAgICBTID0gTWF0aC5sb2codzEgLyB3MCkgLyByaG87XG4gICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHV4MCArIHQgKiBkeCxcbiAgICAgICAgdXkwICsgdCAqIGR5LFxuICAgICAgICB3MCAqIE1hdGguZXhwKHJobyAqIHQgKiBTKVxuICAgICAgXTtcbiAgICB9XG4gIH1cblxuICAvLyBHZW5lcmFsIGNhc2UuXG4gIGVsc2Uge1xuICAgIHZhciBkMSA9IE1hdGguc3FydChkMiksXG4gICAgICAgIGIwID0gKHcxICogdzEgLSB3MCAqIHcwICsgcmhvNCAqIGQyKSAvICgyICogdzAgKiByaG8yICogZDEpLFxuICAgICAgICBiMSA9ICh3MSAqIHcxIC0gdzAgKiB3MCAtIHJobzQgKiBkMikgLyAoMiAqIHcxICogcmhvMiAqIGQxKSxcbiAgICAgICAgcjAgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjAgKiBiMCArIDEpIC0gYjApLFxuICAgICAgICByMSA9IE1hdGgubG9nKE1hdGguc3FydChiMSAqIGIxICsgMSkgLSBiMSk7XG4gICAgUyA9IChyMSAtIHIwKSAvIHJobztcbiAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIHMgPSB0ICogUyxcbiAgICAgICAgICBjb3NocjAgPSBjb3NoKHIwKSxcbiAgICAgICAgICB1ID0gdzAgLyAocmhvMiAqIGQxKSAqIChjb3NocjAgKiB0YW5oKHJobyAqIHMgKyByMCkgLSBzaW5oKHIwKSk7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB1eDAgKyB1ICogZHgsXG4gICAgICAgIHV5MCArIHUgKiBkeSxcbiAgICAgICAgdzAgKiBjb3NocjAgLyBjb3NoKHJobyAqIHMgKyByMClcbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgaS5kdXJhdGlvbiA9IFMgKiAxMDAwO1xuXG4gIHJldHVybiBpO1xufVxuIiwiaW1wb3J0IHtjdWJlaGVsaXggYXMgY29sb3JDdWJlaGVsaXh9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGNvbG9yLCB7aHVlfSBmcm9tIFwiLi9jb2xvclwiO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXgoaHVlKSB7XG4gIHJldHVybiAoZnVuY3Rpb24gY3ViZWhlbGl4R2FtbWEoeSkge1xuICAgIHkgPSAreTtcblxuICAgIGZ1bmN0aW9uIGN1YmVoZWxpeChzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckN1YmVoZWxpeChzdGFydCkpLmgsIChlbmQgPSBjb2xvckN1YmVoZWxpeChlbmQpKS5oKSxcbiAgICAgICAgICBzID0gY29sb3Ioc3RhcnQucywgZW5kLnMpLFxuICAgICAgICAgIGwgPSBjb2xvcihzdGFydC5sLCBlbmQubCksXG4gICAgICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgICBzdGFydC5zID0gcyh0KTtcbiAgICAgICAgc3RhcnQubCA9IGwoTWF0aC5wb3codCwgeSkpO1xuICAgICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY3ViZWhlbGl4LmdhbW1hID0gY3ViZWhlbGl4R2FtbWE7XG5cbiAgICByZXR1cm4gY3ViZWhlbGl4O1xuICB9KSgxKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3ViZWhlbGl4KGh1ZSk7XG5leHBvcnQgdmFyIGN1YmVoZWxpeExvbmcgPSBjdWJlaGVsaXgoY29sb3IpO1xuIiwidmFyIGZyYW1lID0gMCwgLy8gaXMgYW4gYW5pbWF0aW9uIGZyYW1lIHBlbmRpbmc/XG4gICAgdGltZW91dCA9IDAsIC8vIGlzIGEgdGltZW91dCBwZW5kaW5nP1xuICAgIGludGVydmFsID0gMCwgLy8gYXJlIGFueSB0aW1lcnMgYWN0aXZlP1xuICAgIHBva2VEZWxheSA9IDEwMDAsIC8vIGhvdyBmcmVxdWVudGx5IHdlIGNoZWNrIGZvciBjbG9jayBza2V3XG4gICAgdGFza0hlYWQsXG4gICAgdGFza1RhaWwsXG4gICAgY2xvY2tMYXN0ID0gMCxcbiAgICBjbG9ja05vdyA9IDAsXG4gICAgY2xvY2tTa2V3ID0gMCxcbiAgICBjbG9jayA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gXCJvYmplY3RcIiAmJiBwZXJmb3JtYW5jZS5ub3cgPyBwZXJmb3JtYW5jZSA6IERhdGUsXG4gICAgc2V0RnJhbWUgPSB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSA6IGZ1bmN0aW9uKGYpIHsgc2V0VGltZW91dChmLCAxNyk7IH07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBjbG9ja05vdyB8fCAoc2V0RnJhbWUoY2xlYXJOb3cpLCBjbG9ja05vdyA9IGNsb2NrLm5vdygpICsgY2xvY2tTa2V3KTtcbn1cblxuZnVuY3Rpb24gY2xlYXJOb3coKSB7XG4gIGNsb2NrTm93ID0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRpbWVyKCkge1xuICB0aGlzLl9jYWxsID1cbiAgdGhpcy5fdGltZSA9XG4gIHRoaXMuX25leHQgPSBudWxsO1xufVxuXG5UaW1lci5wcm90b3R5cGUgPSB0aW1lci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUaW1lcixcbiAgcmVzdGFydDogZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgdGltZSA9ICh0aW1lID09IG51bGwgPyBub3coKSA6ICt0aW1lKSArIChkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheSk7XG4gICAgaWYgKCF0aGlzLl9uZXh0ICYmIHRhc2tUYWlsICE9PSB0aGlzKSB7XG4gICAgICBpZiAodGFza1RhaWwpIHRhc2tUYWlsLl9uZXh0ID0gdGhpcztcbiAgICAgIGVsc2UgdGFza0hlYWQgPSB0aGlzO1xuICAgICAgdGFza1RhaWwgPSB0aGlzO1xuICAgIH1cbiAgICB0aGlzLl9jYWxsID0gY2FsbGJhY2s7XG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgc2xlZXAoKTtcbiAgfSxcbiAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2NhbGwpIHtcbiAgICAgIHRoaXMuX2NhbGwgPSBudWxsO1xuICAgICAgdGhpcy5fdGltZSA9IEluZmluaXR5O1xuICAgICAgc2xlZXAoKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lcihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyRmx1c2goKSB7XG4gIG5vdygpOyAvLyBHZXQgdGhlIGN1cnJlbnQgdGltZSwgaWYgbm90IGFscmVhZHkgc2V0LlxuICArK2ZyYW1lOyAvLyBQcmV0ZW5kIHdl4oCZdmUgc2V0IGFuIGFsYXJtLCBpZiB3ZSBoYXZlbuKAmXQgYWxyZWFkeS5cbiAgdmFyIHQgPSB0YXNrSGVhZCwgZTtcbiAgd2hpbGUgKHQpIHtcbiAgICBpZiAoKGUgPSBjbG9ja05vdyAtIHQuX3RpbWUpID49IDApIHQuX2NhbGwuY2FsbChudWxsLCBlKTtcbiAgICB0ID0gdC5fbmV4dDtcbiAgfVxuICAtLWZyYW1lO1xufVxuXG5mdW5jdGlvbiB3YWtlKCkge1xuICBjbG9ja05vdyA9IChjbG9ja0xhc3QgPSBjbG9jay5ub3coKSkgKyBjbG9ja1NrZXc7XG4gIGZyYW1lID0gdGltZW91dCA9IDA7XG4gIHRyeSB7XG4gICAgdGltZXJGbHVzaCgpO1xuICB9IGZpbmFsbHkge1xuICAgIGZyYW1lID0gMDtcbiAgICBuYXAoKTtcbiAgICBjbG9ja05vdyA9IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9rZSgpIHtcbiAgdmFyIG5vdyA9IGNsb2NrLm5vdygpLCBkZWxheSA9IG5vdyAtIGNsb2NrTGFzdDtcbiAgaWYgKGRlbGF5ID4gcG9rZURlbGF5KSBjbG9ja1NrZXcgLT0gZGVsYXksIGNsb2NrTGFzdCA9IG5vdztcbn1cblxuZnVuY3Rpb24gbmFwKCkge1xuICB2YXIgdDAsIHQxID0gdGFza0hlYWQsIHQyLCB0aW1lID0gSW5maW5pdHk7XG4gIHdoaWxlICh0MSkge1xuICAgIGlmICh0MS5fY2FsbCkge1xuICAgICAgaWYgKHRpbWUgPiB0MS5fdGltZSkgdGltZSA9IHQxLl90aW1lO1xuICAgICAgdDAgPSB0MSwgdDEgPSB0MS5fbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdDIgPSB0MS5fbmV4dCwgdDEuX25leHQgPSBudWxsO1xuICAgICAgdDEgPSB0MCA/IHQwLl9uZXh0ID0gdDIgOiB0YXNrSGVhZCA9IHQyO1xuICAgIH1cbiAgfVxuICB0YXNrVGFpbCA9IHQwO1xuICBzbGVlcCh0aW1lKTtcbn1cblxuZnVuY3Rpb24gc2xlZXAodGltZSkge1xuICBpZiAoZnJhbWUpIHJldHVybjsgLy8gU29vbmVzdCBhbGFybSBhbHJlYWR5IHNldCwgb3Igd2lsbCBiZS5cbiAgaWYgKHRpbWVvdXQpIHRpbWVvdXQgPSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIHZhciBkZWxheSA9IHRpbWUgLSBjbG9ja05vdzsgLy8gU3RyaWN0bHkgbGVzcyB0aGFuIGlmIHdlIHJlY29tcHV0ZWQgY2xvY2tOb3cuXG4gIGlmIChkZWxheSA+IDI0KSB7XG4gICAgaWYgKHRpbWUgPCBJbmZpbml0eSkgdGltZW91dCA9IHNldFRpbWVvdXQod2FrZSwgdGltZSAtIGNsb2NrLm5vdygpIC0gY2xvY2tTa2V3KTtcbiAgICBpZiAoaW50ZXJ2YWwpIGludGVydmFsID0gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpbnRlcnZhbCkgY2xvY2tMYXN0ID0gY2xvY2subm93KCksIGludGVydmFsID0gc2V0SW50ZXJ2YWwocG9rZSwgcG9rZURlbGF5KTtcbiAgICBmcmFtZSA9IDEsIHNldEZyYW1lKHdha2UpO1xuICB9XG59XG4iLCJpbXBvcnQge1RpbWVyfSBmcm9tIFwiLi90aW1lclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIGRlbGF5ID0gZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXk7XG4gIHQucmVzdGFydChmdW5jdGlvbihlbGFwc2VkKSB7XG4gICAgdC5zdG9wKCk7XG4gICAgY2FsbGJhY2soZWxhcHNlZCArIGRlbGF5KTtcbiAgfSwgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHt0aW1lciwgdGltZW91dH0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBlbXB0eU9uID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImVuZFwiLCBcImludGVycnVwdFwiKTtcbnZhciBlbXB0eVR3ZWVuID0gW107XG5cbmV4cG9ydCB2YXIgQ1JFQVRFRCA9IDA7XG5leHBvcnQgdmFyIFNDSEVEVUxFRCA9IDE7XG5leHBvcnQgdmFyIFNUQVJUSU5HID0gMjtcbmV4cG9ydCB2YXIgU1RBUlRFRCA9IDM7XG5leHBvcnQgdmFyIFJVTk5JTkcgPSA0O1xuZXhwb3J0IHZhciBFTkRJTkcgPSA1O1xuZXhwb3J0IHZhciBFTkRFRCA9IDY7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIGlkLCBpbmRleCwgZ3JvdXAsIHRpbWluZykge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGVzKSBub2RlLl9fdHJhbnNpdGlvbiA9IHt9O1xuICBlbHNlIGlmIChpZCBpbiBzY2hlZHVsZXMpIHJldHVybjtcbiAgY3JlYXRlKG5vZGUsIGlkLCB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBpbmRleDogaW5kZXgsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBncm91cDogZ3JvdXAsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBvbjogZW1wdHlPbixcbiAgICB0d2VlbjogZW1wdHlUd2VlbixcbiAgICB0aW1lOiB0aW1pbmcudGltZSxcbiAgICBkZWxheTogdGltaW5nLmRlbGF5LFxuICAgIGR1cmF0aW9uOiB0aW1pbmcuZHVyYXRpb24sXG4gICAgZWFzZTogdGltaW5nLmVhc2UsXG4gICAgdGltZXI6IG51bGwsXG4gICAgc3RhdGU6IENSRUFURURcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IENSRUFURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHNjaGVkdWxlZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBzdGFydGVkXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkpIHRocm93IG5ldyBFcnJvcihcInRyYW5zaXRpb24gbm90IGZvdW5kXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShub2RlLCBpZCwgc2VsZikge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICB0d2VlbjtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzZWxmIHRpbWVyIHdoZW4gdGhlIHRyYW5zaXRpb24gaXMgY3JlYXRlZC5cbiAgLy8gTm90ZSB0aGUgYWN0dWFsIGRlbGF5IGlzIG5vdCBrbm93biB1bnRpbCB0aGUgZmlyc3QgY2FsbGJhY2shXG4gIHNjaGVkdWxlc1tpZF0gPSBzZWxmO1xuICBzZWxmLnRpbWVyID0gdGltZXIoc2NoZWR1bGUsIDAsIHNlbGYudGltZSk7XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgIHNlbGYuc3RhdGUgPSBTQ0hFRFVMRUQ7XG4gICAgc2VsZi50aW1lci5yZXN0YXJ0KHN0YXJ0LCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuXG4gICAgLy8gSWYgdGhlIGVsYXBzZWQgZGVsYXkgaXMgbGVzcyB0aGFuIG91ciBmaXJzdCBzbGVlcCwgc3RhcnQgaW1tZWRpYXRlbHkuXG4gICAgaWYgKHNlbGYuZGVsYXkgPD0gZWxhcHNlZCkgc3RhcnQoZWxhcHNlZCAtIHNlbGYuZGVsYXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQoZWxhcHNlZCkge1xuICAgIHZhciBpLCBqLCBuLCBvO1xuXG4gICAgLy8gSWYgdGhlIHN0YXRlIGlzIG5vdCBTQ0hFRFVMRUQsIHRoZW4gd2UgcHJldmlvdXNseSBlcnJvcmVkIG9uIHN0YXJ0LlxuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTQ0hFRFVMRUQpIHJldHVybiBzdG9wKCk7XG5cbiAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICBvID0gc2NoZWR1bGVzW2ldO1xuICAgICAgaWYgKG8ubmFtZSAhPT0gc2VsZi5uYW1lKSBjb250aW51ZTtcblxuICAgICAgLy8gV2hpbGUgdGhpcyBlbGVtZW50IGFscmVhZHkgaGFzIGEgc3RhcnRpbmcgdHJhbnNpdGlvbiBkdXJpbmcgdGhpcyBmcmFtZSxcbiAgICAgIC8vIGRlZmVyIHN0YXJ0aW5nIGFuIGludGVycnVwdGluZyB0cmFuc2l0aW9uIHVudGlsIHRoYXQgdHJhbnNpdGlvbiBoYXMgYVxuICAgICAgLy8gY2hhbmNlIHRvIHRpY2sgKGFuZCBwb3NzaWJseSBlbmQpOyBzZWUgZDMvZDMtdHJhbnNpdGlvbiM1NCFcbiAgICAgIGlmIChvLnN0YXRlID09PSBTVEFSVEVEKSByZXR1cm4gdGltZW91dChzdGFydCk7XG5cbiAgICAgIC8vIEludGVycnVwdCB0aGUgYWN0aXZlIHRyYW5zaXRpb24sIGlmIGFueS5cbiAgICAgIC8vIERpc3BhdGNoIHRoZSBpbnRlcnJ1cHQgZXZlbnQuXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gUlVOTklORykge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG5cbiAgICAgIC8vIENhbmNlbCBhbnkgcHJlLWVtcHRlZCB0cmFuc2l0aW9ucy4gTm8gaW50ZXJydXB0IGV2ZW50IGlzIGRpc3BhdGNoZWRcbiAgICAgIC8vIGJlY2F1c2UgdGhlIGNhbmNlbGxlZCB0cmFuc2l0aW9ucyBuZXZlciBzdGFydGVkLiBOb3RlIHRoYXQgdGhpcyBhbHNvXG4gICAgICAvLyByZW1vdmVzIHRoaXMgdHJhbnNpdGlvbiBmcm9tIHRoZSBwZW5kaW5nIGxpc3QhXG4gICAgICBlbHNlIGlmICgraSA8IGlkKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVmZXIgdGhlIGZpcnN0IHRpY2sgdG8gZW5kIG9mIHRoZSBjdXJyZW50IGZyYW1lOyBzZWUgZDMvZDMjMTU3Ni5cbiAgICAvLyBOb3RlIHRoZSB0cmFuc2l0aW9uIG1heSBiZSBjYW5jZWxlZCBhZnRlciBzdGFydCBhbmQgYmVmb3JlIHRoZSBmaXJzdCB0aWNrIVxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIHNjaGVkdWxlZCBiZWZvcmUgdGhlIHN0YXJ0IGV2ZW50OyBzZWUgZDMvZDMtdHJhbnNpdGlvbiMxNiFcbiAgICAvLyBBc3N1bWluZyB0aGlzIGlzIHN1Y2Nlc3NmdWwsIHN1YnNlcXVlbnQgY2FsbGJhY2tzIGdvIHN0cmFpZ2h0IHRvIHRpY2suXG4gICAgdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBTVEFSVEVEKSB7XG4gICAgICAgIHNlbGYuc3RhdGUgPSBSVU5OSU5HO1xuICAgICAgICBzZWxmLnRpbWVyLnJlc3RhcnQodGljaywgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcbiAgICAgICAgdGljayhlbGFwc2VkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIERpc3BhdGNoIHRoZSBzdGFydCBldmVudC5cbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSB0aGUgdHdlZW4gYXJlIGluaXRpYWxpemVkLlxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVElORztcbiAgICBzZWxmLm9uLmNhbGwoXCJzdGFydFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU1RBUlRJTkcpIHJldHVybjsgLy8gaW50ZXJydXB0ZWRcbiAgICBzZWxmLnN0YXRlID0gU1RBUlRFRDtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHR3ZWVuLCBkZWxldGluZyBudWxsIHR3ZWVuLlxuICAgIHR3ZWVuID0gbmV3IEFycmF5KG4gPSBzZWxmLnR3ZWVuLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgaiA9IC0xOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobyA9IHNlbGYudHdlZW5baV0udmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKSkge1xuICAgICAgICB0d2VlblsrK2pdID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgdHdlZW4ubGVuZ3RoID0gaiArIDE7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICB2YXIgdCA9IGVsYXBzZWQgPCBzZWxmLmR1cmF0aW9uID8gc2VsZi5lYXNlLmNhbGwobnVsbCwgZWxhcHNlZCAvIHNlbGYuZHVyYXRpb24pIDogKHNlbGYudGltZXIucmVzdGFydChzdG9wKSwgc2VsZi5zdGF0ZSA9IEVORElORywgMSksXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IHR3ZWVuLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB0d2VlbltpXS5jYWxsKG51bGwsIHQpO1xuICAgIH1cblxuICAgIC8vIERpc3BhdGNoIHRoZSBlbmQgZXZlbnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgPT09IEVORElORykge1xuICAgICAgc2VsZi5vbi5jYWxsKFwiZW5kXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgICAgc3RvcCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgc2VsZi5zdGF0ZSA9IEVOREVEO1xuICAgIHNlbGYudGltZXIuc3RvcCgpO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaWRdO1xuICAgIGZvciAodmFyIGkgaW4gc2NoZWR1bGVzKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG4gIH1cbn1cbiIsImltcG9ydCB7U1RBUlRJTkcsIEVORElORywgRU5ERUR9IGZyb20gXCIuL3RyYW5zaXRpb24vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICBzY2hlZHVsZSxcbiAgICAgIGFjdGl2ZSxcbiAgICAgIGVtcHR5ID0gdHJ1ZSxcbiAgICAgIGk7XG5cbiAgaWYgKCFzY2hlZHVsZXMpIHJldHVybjtcblxuICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuXG4gIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICBpZiAoKHNjaGVkdWxlID0gc2NoZWR1bGVzW2ldKS5uYW1lICE9PSBuYW1lKSB7IGVtcHR5ID0gZmFsc2U7IGNvbnRpbnVlOyB9XG4gICAgYWN0aXZlID0gc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORyAmJiBzY2hlZHVsZS5zdGF0ZSA8IEVORElORztcbiAgICBzY2hlZHVsZS5zdGF0ZSA9IEVOREVEO1xuICAgIHNjaGVkdWxlLnRpbWVyLnN0b3AoKTtcbiAgICBpZiAoYWN0aXZlKSBzY2hlZHVsZS5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNjaGVkdWxlLmluZGV4LCBzY2hlZHVsZS5ncm91cCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgfVxuXG4gIGlmIChlbXB0eSkgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gdHdlZW5SZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9IHR3ZWVuMCA9IHR3ZWVuO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMSA9IHR3ZWVuMS5zbGljZSgpO1xuICAgICAgICAgIHR3ZWVuMS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHdlZW5GdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSAodHdlZW4wID0gdHdlZW4pLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciB0ID0ge25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0sIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjFbaV0gPSB0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaSA9PT0gbikgdHdlZW4xLnB1c2godCk7XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIG5hbWUgKz0gXCJcIjtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXQodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuLmxlbmd0aCwgdDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCh0ID0gdHdlZW5baV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHQudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbCA/IHR3ZWVuUmVtb3ZlIDogdHdlZW5GdW5jdGlvbikoaWQsIG5hbWUsIHZhbHVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0d2VlblZhbHVlKHRyYW5zaXRpb24sIG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRyYW5zaXRpb24uX2lkO1xuXG4gIHRyYW5zaXRpb24uZWFjaChmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpO1xuICAgIChzY2hlZHVsZS52YWx1ZSB8fCAoc2NoZWR1bGUudmFsdWUgPSB7fSkpW25hbWVdID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gZ2V0KG5vZGUsIGlkKS52YWx1ZVtuYW1lXTtcbiAgfTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZU51bWJlciwgaW50ZXJwb2xhdGVSZ2IsIGludGVycG9sYXRlU3RyaW5nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYztcbiAgcmV0dXJuICh0eXBlb2YgYiA9PT0gXCJudW1iZXJcIiA/IGludGVycG9sYXRlTnVtYmVyXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IGludGVycG9sYXRlUmdiXG4gICAgICA6IChjID0gY29sb3IoYikpID8gKGIgPSBjLCBpbnRlcnBvbGF0ZVJnYilcbiAgICAgIDogaW50ZXJwb2xhdGVTdHJpbmcpKGEsIGIpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxudmFyIFNlbGVjdGlvbiA9IHNlbGVjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3I7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9ncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHIgZnJvbSBcIi4vYXR0clwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0clR3ZWVuIGZyb20gXCIuL2F0dHJUd2VlblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZGVsYXkgZnJvbSBcIi4vZGVsYXlcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2R1cmF0aW9uIGZyb20gXCIuL2R1cmF0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlIGZyb20gXCIuL2Vhc2VcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXJcIjtcbmltcG9ydCB0cmFuc2l0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9vbiBmcm9tIFwiLi9vblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdFwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbFwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0aW9uIGZyb20gXCIuL3NlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3N0eWxlVHdlZW4gZnJvbSBcIi4vc3R5bGVUd2VlblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX3R3ZWVuIGZyb20gXCIuL3R3ZWVuXCI7XG5cbnZhciBpZCA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBUcmFuc2l0aW9uKGdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbiAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gIHRoaXMuX2lkID0gaWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb24obmFtZSkge1xuICByZXR1cm4gc2VsZWN0aW9uKCkudHJhbnNpdGlvbihuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld0lkKCkge1xuICByZXR1cm4gKytpZDtcbn1cblxudmFyIHNlbGVjdGlvbl9wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlO1xuXG5UcmFuc2l0aW9uLnByb3RvdHlwZSA9IHRyYW5zaXRpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNpdGlvbixcbiAgc2VsZWN0OiB0cmFuc2l0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiB0cmFuc2l0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiB0cmFuc2l0aW9uX2ZpbHRlcixcbiAgbWVyZ2U6IHRyYW5zaXRpb25fbWVyZ2UsXG4gIHNlbGVjdGlvbjogdHJhbnNpdGlvbl9zZWxlY3Rpb24sXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb25fdHJhbnNpdGlvbixcbiAgY2FsbDogc2VsZWN0aW9uX3Byb3RvdHlwZS5jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fcHJvdG90eXBlLnNpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fcHJvdG90eXBlLmVtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fcHJvdG90eXBlLmVhY2gsXG4gIG9uOiB0cmFuc2l0aW9uX29uLFxuICBhdHRyOiB0cmFuc2l0aW9uX2F0dHIsXG4gIGF0dHJUd2VlbjogdHJhbnNpdGlvbl9hdHRyVHdlZW4sXG4gIHN0eWxlOiB0cmFuc2l0aW9uX3N0eWxlLFxuICBzdHlsZVR3ZWVuOiB0cmFuc2l0aW9uX3N0eWxlVHdlZW4sXG4gIHRleHQ6IHRyYW5zaXRpb25fdGV4dCxcbiAgcmVtb3ZlOiB0cmFuc2l0aW9uX3JlbW92ZSxcbiAgdHdlZW46IHRyYW5zaXRpb25fdHdlZW4sXG4gIGRlbGF5OiB0cmFuc2l0aW9uX2RlbGF5LFxuICBkdXJhdGlvbjogdHJhbnNpdGlvbl9kdXJhdGlvbixcbiAgZWFzZTogdHJhbnNpdGlvbl9lYXNlXG59O1xuIiwiaW1wb3J0IHtzZWxlY3Rvcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgc2NoZWR1bGUoc3ViZ3JvdXBbaV0sIG5hbWUsIGlkLCBpLCBzdWJncm91cCwgZ2V0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3RvckFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldChub2RlLCBpZCksIGsgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBrIDwgbDsgKytrKSB7XG4gICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgIHNjaGVkdWxlKGNoaWxkLCBuYW1lLCBpZCwgaywgY2hpbGRyZW4sIGluaGVyaXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdWJncm91cHMucHVzaChjaGlsZHJlbik7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge21hdGNoZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHJhbnNpdGlvbikge1xuICBpZiAodHJhbnNpdGlvbi5faWQgIT09IHRoaXMuX2lkKSB0aHJvdyBuZXcgRXJyb3I7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHRyYW5zaXRpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkMCA9IHRoaXMuX2lkLFxuICAgICAgaWQxID0gbmV3SWQoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICB2YXIgaW5oZXJpdCA9IGdldChub2RlLCBpZDApO1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZDEsIGksIGdyb3VwLCB7XG4gICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkMSk7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKG5hbWUsIGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0KHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtU3ZnIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGVcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICB2YWx1ZTEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCwgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgdmFsdWUxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSksIGkgPSBmdWxsbmFtZSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB0aGlzLmF0dHJUd2VlbihuYW1lLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbikoZnVsbG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJhdHRyLlwiICsgbmFtZSwgdmFsdWUpKVxuICAgICAgOiB2YWx1ZSA9PSBudWxsID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkoZnVsbG5hbWUpXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KShmdWxsbmFtZSwgaSwgdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJpbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5mdW5jdGlvbiBhdHRyVHdlZW5OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLCBpID0gdmFsdWUuYXBwbHkobm9kZSwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgaSh0KSk7XG4gICAgfTtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLCBpID0gdmFsdWUuYXBwbHkobm9kZSwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCBpKHQpKTtcbiAgICB9O1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBrZXkgPSBcImF0dHIuXCIgKyBuYW1lO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCAoZnVsbG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2VlbikoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZVwiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIHZhbHVlMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZSh0aGlzLCBuYW1lKSk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCAmJiB2YWx1ZTEgPT09IHZhbHVlMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEwID0gdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVSZW1vdmVFbmQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIHZhbHVlMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGkgPSAobmFtZSArPSBcIlwiKSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdGhpc1xuICAgICAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlUmVtb3ZlKG5hbWUsIGkpKVxuICAgICAgICAgIC5vbihcImVuZC5zdHlsZS5cIiArIG5hbWUsIHN0eWxlUmVtb3ZlRW5kKG5hbWUpKVxuICAgICAgOiB0aGlzLnN0eWxlVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHN0eWxlRnVuY3Rpb24obmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcInN0eWxlLlwiICsgbmFtZSwgdmFsdWUpKVxuICAgICAgICAgIDogc3R5bGVDb25zdGFudChuYW1lLCBpLCB2YWx1ZSArIFwiXCIpLCBwcmlvcml0eSk7XG59XG4iLCJmdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBpICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgIG5vZGUuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgaSh0KSwgcHJpb3JpdHkpO1xuICAgIH07XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBrZXkgPSBcInN0eWxlLlwiICsgKG5hbWUgKz0gXCJcIik7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSk7XG59XG4iLCJpbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWUxID09IG51bGwgPyBcIlwiIDogdmFsdWUxO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy50d2VlbihcInRleHRcIiwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGV4dEZ1bmN0aW9uKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSlcbiAgICAgIDogdGV4dENvbnN0YW50KHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuX190cmFuc2l0aW9uKSBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMub24oXCJlbmQucmVtb3ZlXCIsIHJlbW92ZUZ1bmN0aW9uKHRoaXMuX2lkKSk7XG59XG4iLCJpbXBvcnQge2dldCwgaW5pdH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gZGVsYXlGdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlbGF5Q29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZGVsYXlGdW5jdGlvblxuICAgICAgICAgIDogZGVsYXlDb25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZGVsYXk7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBkdXJhdGlvbkZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkdXJhdGlvbkNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZHVyYXRpb25GdW5jdGlvblxuICAgICAgICAgIDogZHVyYXRpb25Db25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZHVyYXRpb247XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5lYXNlID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaChlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZWFzZTtcbn1cbiIsInZhciBwaSA9IE1hdGguUEksXG4gICAgaGFsZlBpID0gcGkgLyAyO1xuXG5leHBvcnQgZnVuY3Rpb24gc2luSW4odCkge1xuICByZXR1cm4gMSAtIE1hdGguY29zKHQgKiBoYWxmUGkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2luT3V0KHQpIHtcbiAgcmV0dXJuIE1hdGguc2luKHQgKiBoYWxmUGkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2luSW5PdXQodCkge1xuICByZXR1cm4gKDEgLSBNYXRoLmNvcyhwaSAqIHQpKSAvIDI7XG59XG4iLCJ2YXIgdGF1ID0gMiAqIE1hdGguUEksXG4gICAgYW1wbGl0dWRlID0gMSxcbiAgICBwZXJpb2QgPSAwLjM7XG5cbmV4cG9ydCB2YXIgZWxhc3RpY0luID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNJbih0KSB7XG4gICAgcmV0dXJuIGEgKiBNYXRoLnBvdygyLCAxMCAqIC0tdCkgKiBNYXRoLnNpbigocyAtIHQpIC8gcCk7XG4gIH1cblxuICBlbGFzdGljSW4uYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljSW4ucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gIHJldHVybiBlbGFzdGljSW47XG59KShhbXBsaXR1ZGUsIHBlcmlvZCk7XG5cbmV4cG9ydCB2YXIgZWxhc3RpY091dCA9IChmdW5jdGlvbiBjdXN0b20oYSwgcCkge1xuICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICBmdW5jdGlvbiBlbGFzdGljT3V0KHQpIHtcbiAgICByZXR1cm4gMSAtIGEgKiBNYXRoLnBvdygyLCAtMTAgKiAodCA9ICt0KSkgKiBNYXRoLnNpbigodCArIHMpIC8gcCk7XG4gIH1cblxuICBlbGFzdGljT3V0LmFtcGxpdHVkZSA9IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGN1c3RvbShhLCBwICogdGF1KTsgfTtcbiAgZWxhc3RpY091dC5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNPdXQ7XG59KShhbXBsaXR1ZGUsIHBlcmlvZCk7XG5cbmV4cG9ydCB2YXIgZWxhc3RpY0luT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCA9IHQgKiAyIC0gMSkgPCAwXG4gICAgICAgID8gYSAqIE1hdGgucG93KDIsIDEwICogdCkgKiBNYXRoLnNpbigocyAtIHQpIC8gcClcbiAgICAgICAgOiAyIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHMgKyB0KSAvIHApKSAvIDI7XG4gIH1cblxuICBlbGFzdGljSW5PdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljSW5PdXQucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gIHJldHVybiBlbGFzdGljSW5PdXQ7XG59KShhbXBsaXR1ZGUsIHBlcmlvZCk7XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlIGZyb20gXCIuLi90cmFuc2l0aW9uL3NjaGVkdWxlXCI7XG5pbXBvcnQge2Vhc2VDdWJpY0luT3V0fSBmcm9tIFwiZDMtZWFzZVwiO1xuaW1wb3J0IHtub3d9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZGVmYXVsdFRpbWluZyA9IHtcbiAgdGltZTogbnVsbCwgLy8gU2V0IG9uIHVzZS5cbiAgZGVsYXk6IDAsXG4gIGR1cmF0aW9uOiAyNTAsXG4gIGVhc2U6IGVhc2VDdWJpY0luT3V0XG59O1xuXG5mdW5jdGlvbiBpbmhlcml0KG5vZGUsIGlkKSB7XG4gIHZhciB0aW1pbmc7XG4gIHdoaWxlICghKHRpbWluZyA9IG5vZGUuX190cmFuc2l0aW9uKSB8fCAhKHRpbWluZyA9IHRpbWluZ1tpZF0pKSB7XG4gICAgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0VGltaW5nLnRpbWUgPSBub3coKSwgZGVmYXVsdFRpbWluZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRpbWluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgaWQsXG4gICAgICB0aW1pbmc7XG5cbiAgaWYgKG5hbWUgaW5zdGFuY2VvZiBUcmFuc2l0aW9uKSB7XG4gICAgaWQgPSBuYW1lLl9pZCwgbmFtZSA9IG5hbWUuX25hbWU7XG4gIH0gZWxzZSB7XG4gICAgaWQgPSBuZXdJZCgpLCAodGltaW5nID0gZGVmYXVsdFRpbWluZykudGltZSA9IG5vdygpLCBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQsIGksIGdyb3VwLCB0aW1pbmcgfHwgaW5oZXJpdChub2RlLCBpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBjdWJpY0luKHQpIHtcbiAgcmV0dXJuIHQgKiB0ICogdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljT3V0KHQpIHtcbiAgcmV0dXJuIC0tdCAqIHQgKiB0ICsgMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0ICogdCAqIHQgOiAodCAtPSAyKSAqIHQgKiB0ICsgMikgLyAyO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uKCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBzZWxlY3Rpb25faW50ZXJydXB0IGZyb20gXCIuL2ludGVycnVwdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb25cIjtcblxuc2VsZWN0aW9uLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBzZWxlY3Rpb25faW50ZXJydXB0O1xuc2VsZWN0aW9uLnByb3RvdHlwZS50cmFuc2l0aW9uID0gc2VsZWN0aW9uX3RyYW5zaXRpb247XG4iLCJpbXBvcnQgaW50ZXJydXB0IGZyb20gXCIuLi9pbnRlcnJ1cHRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIGludGVycnVwdCh0aGlzLCBuYW1lKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7ZHJhZ0Rpc2FibGUsIGRyYWdFbmFibGV9IGZyb20gXCJkMy1kcmFnXCI7XG5pbXBvcnQge2ludGVycG9sYXRlfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7Y3VzdG9tRXZlbnQsIGV2ZW50LCBtb3VzZSwgc2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2ludGVycnVwdH0gZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IEJydXNoRXZlbnQgZnJvbSBcIi4vZXZlbnRcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudFwiO1xuXG52YXIgTU9ERV9EUkFHID0ge25hbWU6IFwiZHJhZ1wifSxcbiAgICBNT0RFX1NQQUNFID0ge25hbWU6IFwic3BhY2VcIn0sXG4gICAgTU9ERV9IQU5ETEUgPSB7bmFtZTogXCJoYW5kbGVcIn0sXG4gICAgTU9ERV9DRU5URVIgPSB7bmFtZTogXCJjZW50ZXJcIn07XG5cbnZhciBYID0ge1xuICBuYW1lOiBcInhcIixcbiAgaGFuZGxlczogW1wiZVwiLCBcIndcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeCwgZSkgeyByZXR1cm4geCAmJiBbW3hbMF0sIGVbMF1bMV1dLCBbeFsxXSwgZVsxXVsxXV1dOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSAmJiBbeHlbMF1bMF0sIHh5WzFdWzBdXTsgfVxufTtcblxudmFyIFkgPSB7XG4gIG5hbWU6IFwieVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwic1wiXS5tYXAodHlwZSksXG4gIGlucHV0OiBmdW5jdGlvbih5LCBlKSB7IHJldHVybiB5ICYmIFtbZVswXVswXSwgeVswXV0sIFtlWzFdWzBdLCB5WzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVsxXSwgeHlbMV1bMV1dOyB9XG59O1xuXG52YXIgWFkgPSB7XG4gIG5hbWU6IFwieHlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcImVcIiwgXCJzXCIsIFwid1wiLCBcIm53XCIsIFwibmVcIiwgXCJzZVwiLCBcInN3XCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHk7IH1cbn07XG5cbnZhciBjdXJzb3JzID0ge1xuICBvdmVybGF5OiBcImNyb3NzaGFpclwiLFxuICBzZWxlY3Rpb246IFwibW92ZVwiLFxuICBuOiBcIm5zLXJlc2l6ZVwiLFxuICBlOiBcImV3LXJlc2l6ZVwiLFxuICBzOiBcIm5zLXJlc2l6ZVwiLFxuICB3OiBcImV3LXJlc2l6ZVwiLFxuICBudzogXCJud3NlLXJlc2l6ZVwiLFxuICBuZTogXCJuZXN3LXJlc2l6ZVwiLFxuICBzZTogXCJud3NlLXJlc2l6ZVwiLFxuICBzdzogXCJuZXN3LXJlc2l6ZVwiXG59O1xuXG52YXIgZmxpcFggPSB7XG4gIGU6IFwid1wiLFxuICB3OiBcImVcIixcbiAgbnc6IFwibmVcIixcbiAgbmU6IFwibndcIixcbiAgc2U6IFwic3dcIixcbiAgc3c6IFwic2VcIlxufTtcblxudmFyIGZsaXBZID0ge1xuICBuOiBcInNcIixcbiAgczogXCJuXCIsXG4gIG53OiBcInN3XCIsXG4gIG5lOiBcInNlXCIsXG4gIHNlOiBcIm5lXCIsXG4gIHN3OiBcIm53XCJcbn07XG5cbnZhciBzaWduc1ggPSB7XG4gIG92ZXJsYXk6ICsxLFxuICBzZWxlY3Rpb246ICsxLFxuICBuOiBudWxsLFxuICBlOiArMSxcbiAgczogbnVsbCxcbiAgdzogLTEsXG4gIG53OiAtMSxcbiAgbmU6ICsxLFxuICBzZTogKzEsXG4gIHN3OiAtMVxufTtcblxudmFyIHNpZ25zWSA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IC0xLFxuICBlOiBudWxsLFxuICBzOiArMSxcbiAgdzogbnVsbCxcbiAgbnc6IC0xLFxuICBuZTogLTEsXG4gIHNlOiArMSxcbiAgc3c6ICsxXG59O1xuXG5mdW5jdGlvbiB0eXBlKHQpIHtcbiAgcmV0dXJuIHt0eXBlOiB0fTtcbn1cblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyKCkge1xuICByZXR1cm4gIWV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEV4dGVudCgpIHtcbiAgdmFyIHN2ZyA9IHRoaXMub3duZXJTVkdFbGVtZW50IHx8IHRoaXM7XG4gIHJldHVybiBbWzAsIDBdLCBbc3ZnLndpZHRoLmJhc2VWYWwudmFsdWUsIHN2Zy5oZWlnaHQuYmFzZVZhbC52YWx1ZV1dO1xufVxuXG4vLyBMaWtlIGQzLmxvY2FsLCBidXQgd2l0aCB0aGUgbmFtZSDigJxfX2JydXNo4oCdIHJhdGhlciB0aGFuIGF1dG8tZ2VuZXJhdGVkLlxuZnVuY3Rpb24gbG9jYWwobm9kZSkge1xuICB3aGlsZSAoIW5vZGUuX19icnVzaCkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybjtcbiAgcmV0dXJuIG5vZGUuX19icnVzaDtcbn1cblxuZnVuY3Rpb24gZW1wdHkoZXh0ZW50KSB7XG4gIHJldHVybiBleHRlbnRbMF1bMF0gPT09IGV4dGVudFsxXVswXVxuICAgICAgfHwgZXh0ZW50WzBdWzFdID09PSBleHRlbnRbMV1bMV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFNlbGVjdGlvbihub2RlKSB7XG4gIHZhciBzdGF0ZSA9IG5vZGUuX19icnVzaDtcbiAgcmV0dXJuIHN0YXRlID8gc3RhdGUuZGltLm91dHB1dChzdGF0ZS5zZWxlY3Rpb24pIDogbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoWCgpIHtcbiAgcmV0dXJuIGJydXNoKFgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hZKCkge1xuICByZXR1cm4gYnJ1c2goWSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gYnJ1c2goWFkpO1xufVxuXG5mdW5jdGlvbiBicnVzaChkaW0pIHtcbiAgdmFyIGV4dGVudCA9IGRlZmF1bHRFeHRlbnQsXG4gICAgICBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goYnJ1c2gsIFwic3RhcnRcIiwgXCJicnVzaFwiLCBcImVuZFwiKSxcbiAgICAgIGhhbmRsZVNpemUgPSA2LFxuICAgICAgdG91Y2hlbmRpbmc7XG5cbiAgZnVuY3Rpb24gYnJ1c2goZ3JvdXApIHtcbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwXG4gICAgICAgIC5wcm9wZXJ0eShcIl9fYnJ1c2hcIiwgaW5pdGlhbGl6ZSlcbiAgICAgIC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgLmRhdGEoW3R5cGUoXCJvdmVybGF5XCIpXSk7XG5cbiAgICBvdmVybGF5LmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwib3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSlcbiAgICAgIC5tZXJnZShvdmVybGF5KVxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZXh0ZW50ID0gbG9jYWwodGhpcykuZXh0ZW50O1xuICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAuYXR0cihcInhcIiwgZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcInlcIiwgZXh0ZW50WzBdWzFdKVxuICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGV4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdKTtcbiAgICAgICAgfSk7XG5cbiAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXG4gICAgICAuZGF0YShbdHlwZShcInNlbGVjdGlvblwiKV0pXG4gICAgICAuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJzZWxlY3Rpb25cIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiM3NzdcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgMC4zKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiNmZmZcIilcbiAgICAgICAgLmF0dHIoXCJzaGFwZS1yZW5kZXJpbmdcIiwgXCJjcmlzcEVkZ2VzXCIpO1xuXG4gICAgdmFyIGhhbmRsZSA9IGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgIC5kYXRhKGRpbS5oYW5kbGVzLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGU7IH0pO1xuXG4gICAgaGFuZGxlLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgIGhhbmRsZS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcImhhbmRsZSBoYW5kbGUtLVwiICsgZC50eXBlOyB9KVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjdXJzb3JzW2QudHlwZV07IH0pO1xuXG4gICAgZ3JvdXBcbiAgICAgICAgLmVhY2gocmVkcmF3KVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKVxuICAgICAgICAub24oXCJtb3VzZWRvd24uYnJ1c2ggdG91Y2hzdGFydC5icnVzaFwiLCBzdGFydGVkKTtcbiAgfVxuXG4gIGJydXNoLm1vdmUgPSBmdW5jdGlvbihncm91cCwgc2VsZWN0aW9uKSB7XG4gICAgaWYgKGdyb3VwLnNlbGVjdGlvbikge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAub24oXCJzdGFydC5icnVzaFwiLCBmdW5jdGlvbigpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmJlZm9yZXN0YXJ0KCkuc3RhcnQoKTsgfSlcbiAgICAgICAgICAub24oXCJpbnRlcnJ1cHQuYnJ1c2ggZW5kLmJydXNoXCIsIGZ1bmN0aW9uKCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kKCk7IH0pXG4gICAgICAgICAgLnR3ZWVuKFwiYnJ1c2hcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24wID0gc3RhdGUuc2VsZWN0aW9uLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjEgPSBkaW0uaW5wdXQodHlwZW9mIHNlbGVjdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgICAgaSA9IGludGVycG9sYXRlKHNlbGVjdGlvbjAsIHNlbGVjdGlvbjEpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB0d2Vlbih0KSB7XG4gICAgICAgICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHQgPT09IDEgJiYgZW1wdHkoc2VsZWN0aW9uMSkgPyBudWxsIDogaSh0KTtcbiAgICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbjAgJiYgc2VsZWN0aW9uMSA/IHR3ZWVuIDogdHdlZW4oMSk7XG4gICAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGF0LCBhcmdzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmdzKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgICAgICAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24xID09IG51bGwgfHwgZW1wdHkoc2VsZWN0aW9uMSkgPyBudWxsIDogc2VsZWN0aW9uMTtcbiAgICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgICAgZW1pdC5zdGFydCgpLmJydXNoKCkuZW5kKCk7XG4gICAgICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHJlZHJhdygpIHtcbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhpcyksXG4gICAgICAgIHNlbGVjdGlvbiA9IGxvY2FsKHRoaXMpLnNlbGVjdGlvbjtcblxuICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIHNlbGVjdGlvblswXVswXSlcbiAgICAgICAgICAuYXR0cihcInlcIiwgc2VsZWN0aW9uWzBdWzFdKVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgc2VsZWN0aW9uWzFdWzBdIC0gc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSk7XG5cbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZVtkLnR5cGUubGVuZ3RoIC0gMV0gPT09IFwiZVwiID8gc2VsZWN0aW9uWzFdWzBdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMF0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlWzBdID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVsxXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzFdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGUgPT09IFwiblwiIHx8IGQudHlwZSA9PT0gXCJzXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0gKyBoYW5kbGVTaXplIDogaGFuZGxlU2l6ZTsgfSlcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGUgPT09IFwiZVwiIHx8IGQudHlwZSA9PT0gXCJ3XCIgPyBzZWxlY3Rpb25bMV1bMV0gLSBzZWxlY3Rpb25bMF1bMV0gKyBoYW5kbGVTaXplIDogaGFuZGxlU2l6ZTsgfSk7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uLC5oYW5kbGVcIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBudWxsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbWl0dGVyKHRoYXQsIGFyZ3MpIHtcbiAgICByZXR1cm4gdGhhdC5fX2JydXNoLmVtaXR0ZXIgfHwgbmV3IEVtaXR0ZXIodGhhdCwgYXJncyk7XG4gIH1cblxuICBmdW5jdGlvbiBFbWl0dGVyKHRoYXQsIGFyZ3MpIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5zdGF0ZSA9IHRoYXQuX19icnVzaDtcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gIH1cblxuICBFbWl0dGVyLnByb3RvdHlwZSA9IHtcbiAgICBiZWZvcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkgdGhpcy5zdGF0ZS5lbWl0dGVyID0gdGhpcywgdGhpcy5zdGFydGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnN0YXJ0aW5nKSB0aGlzLnN0YXJ0aW5nID0gZmFsc2UsIHRoaXMuZW1pdChcInN0YXJ0XCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBicnVzaDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmVtaXQoXCJicnVzaFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRoaXMuYWN0aXZlID09PSAwKSBkZWxldGUgdGhpcy5zdGF0ZS5lbWl0dGVyLCB0aGlzLmVtaXQoXCJlbmRcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIGN1c3RvbUV2ZW50KG5ldyBCcnVzaEV2ZW50KGJydXNoLCB0eXBlLCBkaW0ub3V0cHV0KHRoaXMuc3RhdGUuc2VsZWN0aW9uKSksIGxpc3RlbmVycy5hcHBseSwgbGlzdGVuZXJzLCBbdHlwZSwgdGhpcy50aGF0LCB0aGlzLmFyZ3NdKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gc3RhcnRlZCgpIHtcbiAgICBpZiAoZXZlbnQudG91Y2hlcykgeyBpZiAoZXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoIDwgZXZlbnQudG91Y2hlcy5sZW5ndGgpIHJldHVybiBub2V2ZW50KCk7IH1cbiAgICBlbHNlIGlmICh0b3VjaGVuZGluZykgcmV0dXJuO1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcblxuICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgdHlwZSA9IGV2ZW50LnRhcmdldC5fX2RhdGFfXy50eXBlLFxuICAgICAgICBtb2RlID0gKGV2ZW50Lm1ldGFLZXkgPyB0eXBlID0gXCJvdmVybGF5XCIgOiB0eXBlKSA9PT0gXCJzZWxlY3Rpb25cIiA/IE1PREVfRFJBRyA6IChldmVudC5hbHRLZXkgPyBNT0RFX0NFTlRFUiA6IE1PREVfSEFORExFKSxcbiAgICAgICAgc2lnblggPSBkaW0gPT09IFkgPyBudWxsIDogc2lnbnNYW3R5cGVdLFxuICAgICAgICBzaWduWSA9IGRpbSA9PT0gWCA/IG51bGwgOiBzaWduc1lbdHlwZV0sXG4gICAgICAgIHN0YXRlID0gbG9jYWwodGhhdCksXG4gICAgICAgIGV4dGVudCA9IHN0YXRlLmV4dGVudCxcbiAgICAgICAgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uLFxuICAgICAgICBXID0gZXh0ZW50WzBdWzBdLCB3MCwgdzEsXG4gICAgICAgIE4gPSBleHRlbnRbMF1bMV0sIG4wLCBuMSxcbiAgICAgICAgRSA9IGV4dGVudFsxXVswXSwgZTAsIGUxLFxuICAgICAgICBTID0gZXh0ZW50WzFdWzFdLCBzMCwgczEsXG4gICAgICAgIGR4LFxuICAgICAgICBkeSxcbiAgICAgICAgbW92aW5nLFxuICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZICYmIGV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICBsb2NrWCxcbiAgICAgICAgbG9ja1ksXG4gICAgICAgIHBvaW50MCA9IG1vdXNlKHRoYXQpLFxuICAgICAgICBwb2ludCA9IHBvaW50MCxcbiAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJndW1lbnRzKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgaWYgKHR5cGUgPT09IFwib3ZlcmxheVwiKSB7XG4gICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24gPSBbXG4gICAgICAgIFt3MCA9IGRpbSA9PT0gWSA/IFcgOiBwb2ludDBbMF0sIG4wID0gZGltID09PSBYID8gTiA6IHBvaW50MFsxXV0sXG4gICAgICAgIFtlMCA9IGRpbSA9PT0gWSA/IEUgOiB3MCwgczAgPSBkaW0gPT09IFggPyBTIDogbjBdXG4gICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB3MCA9IHNlbGVjdGlvblswXVswXTtcbiAgICAgIG4wID0gc2VsZWN0aW9uWzBdWzFdO1xuICAgICAgZTAgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBzMCA9IHNlbGVjdGlvblsxXVsxXTtcbiAgICB9XG5cbiAgICB3MSA9IHcwO1xuICAgIG4xID0gbjA7XG4gICAgZTEgPSBlMDtcbiAgICBzMSA9IHMwO1xuXG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoYXQpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xuXG4gICAgdmFyIG92ZXJsYXkgPSBncm91cC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5vbihcInRvdWNobW92ZS5icnVzaFwiLCBtb3ZlZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJ0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gc2VsZWN0KGV2ZW50LnZpZXcpXG4gICAgICAgICAgLm9uKFwia2V5ZG93bi5icnVzaFwiLCBrZXlkb3duZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwia2V5dXAuYnJ1c2hcIiwga2V5dXBwZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcIm1vdXNldXAuYnJ1c2hcIiwgZW5kZWQsIHRydWUpO1xuXG4gICAgICBkcmFnRGlzYWJsZShldmVudC52aWV3KTtcbiAgICB9XG5cbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgaW50ZXJydXB0KHRoYXQpO1xuICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgIGVtaXQuc3RhcnQoKTtcblxuICAgIGZ1bmN0aW9uIG1vdmVkKCkge1xuICAgICAgdmFyIHBvaW50MSA9IG1vdXNlKHRoYXQpO1xuICAgICAgaWYgKHNoaWZ0aW5nICYmICFsb2NrWCAmJiAhbG9ja1kpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKHBvaW50MVswXSAtIHBvaW50WzBdKSA+IE1hdGguYWJzKHBvaW50MVsxXSAtIHBvaW50WzFdKSkgbG9ja1kgPSB0cnVlO1xuICAgICAgICBlbHNlIGxvY2tYID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBvaW50ID0gcG9pbnQxO1xuICAgICAgbW92aW5nID0gdHJ1ZTtcbiAgICAgIG5vZXZlbnQoKTtcbiAgICAgIG1vdmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3ZlKCkge1xuICAgICAgdmFyIHQ7XG5cbiAgICAgIGR4ID0gcG9pbnRbMF0gLSBwb2ludDBbMF07XG4gICAgICBkeSA9IHBvaW50WzFdIC0gcG9pbnQwWzFdO1xuXG4gICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgY2FzZSBNT0RFX1NQQUNFOlxuICAgICAgICBjYXNlIE1PREVfRFJBRzoge1xuICAgICAgICAgIGlmIChzaWduWCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgaWYgKHNpZ25ZKSBkeSA9IE1hdGgubWF4KE4gLSBuMCwgTWF0aC5taW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfSEFORExFOiB7XG4gICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSB3MCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwO1xuICAgICAgICAgIGVsc2UgaWYgKHNpZ25YID4gMCkgZHggPSBNYXRoLm1heChXIC0gZTAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgIGlmIChzaWduWSA8IDApIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gbjAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMDtcbiAgICAgICAgICBlbHNlIGlmIChzaWduWSA+IDApIGR5ID0gTWF0aC5tYXgoTiAtIHMwLCBNYXRoLm1pbihTIC0gczAsIGR5KSksIG4xID0gbjAsIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfQ0VOVEVSOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIHcwIC0gZHggKiBzaWduWCkpLCBlMSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIGUwICsgZHggKiBzaWduWCkpO1xuICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBuMCAtIGR5ICogc2lnblkpKSwgczEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBzMCArIGR5ICogc2lnblkpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZTEgPCB3MSkge1xuICAgICAgICBzaWduWCAqPSAtMTtcbiAgICAgICAgdCA9IHcwLCB3MCA9IGUwLCBlMCA9IHQ7XG4gICAgICAgIHQgPSB3MSwgdzEgPSBlMSwgZTEgPSB0O1xuICAgICAgICBpZiAodHlwZSBpbiBmbGlwWCkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBYW3R5cGVdXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzMSA8IG4xKSB7XG4gICAgICAgIHNpZ25ZICo9IC0xO1xuICAgICAgICB0ID0gbjAsIG4wID0gczAsIHMwID0gdDtcbiAgICAgICAgdCA9IG4xLCBuMSA9IHMxLCBzMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBZKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFlbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUhXG4gICAgICBpZiAobG9ja1gpIHcxID0gc2VsZWN0aW9uWzBdWzBdLCBlMSA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIGlmIChsb2NrWSkgbjEgPSBzZWxlY3Rpb25bMF1bMV0sIHMxID0gc2VsZWN0aW9uWzFdWzFdO1xuXG4gICAgICBpZiAoc2VsZWN0aW9uWzBdWzBdICE9PSB3MVxuICAgICAgICAgIHx8IHNlbGVjdGlvblswXVsxXSAhPT0gbjFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMF0gIT09IGUxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzFdICE9PSBzMSkge1xuICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBbW3cxLCBuMV0sIFtlMSwgczFdXTtcbiAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRlZCgpIHtcbiAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAgIGlmIChldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgICAgIGdyb3VwLm9uKFwidG91Y2htb3ZlLmJydXNoIHRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhZ0VuYWJsZShldmVudC52aWV3LCBtb3ZpbmcpO1xuICAgICAgICB2aWV3Lm9uKFwia2V5ZG93bi5icnVzaCBrZXl1cC5icnVzaCBtb3VzZW1vdmUuYnJ1c2ggbW91c2V1cC5icnVzaFwiLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGdyb3VwLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKTtcbiAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpO1xuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUgKG9uIHN0YXJ0KSFcbiAgICAgIGlmIChlbXB0eShzZWxlY3Rpb24pKSBzdGF0ZS5zZWxlY3Rpb24gPSBudWxsLCByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgIGVtaXQuZW5kKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga2V5ZG93bmVkKCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFKSB7XG4gICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFOyB0YWtlcyBwcmlvcml0eSBvdmVyIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSB8fCBtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMSAtIGR4OyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzEgLSBkeDtcbiAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczEgLSBkeTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xIC0gZHk7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9TUEFDRTtcbiAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbik7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXl1cHBlZCgpIHtcbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDE2OiB7IC8vIFNISUZUXG4gICAgICAgICAgaWYgKHNoaWZ0aW5nKSB7XG4gICAgICAgICAgICBsb2NrWCA9IGxvY2tZID0gc2hpZnRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRVxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX1NQQUNFKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogcmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9ldmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fX2JydXNoIHx8IHtzZWxlY3Rpb246IG51bGx9O1xuICAgIHN0YXRlLmV4dGVudCA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHN0YXRlLmRpbSA9IGRpbTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBicnVzaC5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbWytfWzBdWzBdLCArX1swXVsxXV0sIFsrX1sxXVswXSwgK19bMV1bMV1dXSksIGJydXNoKSA6IGV4dGVudDtcbiAgfTtcblxuICBicnVzaC5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBicnVzaCkgOiBmaWx0ZXI7XG4gIH07XG5cbiAgYnJ1c2guaGFuZGxlU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChoYW5kbGVTaXplID0gK18sIGJydXNoKSA6IGhhbmRsZVNpemU7XG4gIH07XG5cbiAgYnJ1c2gub24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gYnJ1c2ggOiB2YWx1ZTtcbiAgfTtcblxuICByZXR1cm4gYnJ1c2g7XG59XG4iLCJpbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IG5vZXZlbnQgZnJvbSBcIi4vbm9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2aWV3KSB7XG4gIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBzZWxlY3Rpb24gPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuX19ub3NlbGVjdCA9IHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdDtcbiAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSBcIm5vbmVcIjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24geWVzZHJhZyh2aWV3LCBub2NsaWNrKSB7XG4gIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBzZWxlY3Rpb24gPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBudWxsKTtcbiAgaWYgKG5vY2xpY2spIHtcbiAgICBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHNlbGVjdGlvbi5vbihcImNsaWNrLmRyYWdcIiwgbnVsbCk7IH0sIDApO1xuICB9XG4gIGlmIChcIm9uc2VsZWN0c3RhcnRcIiBpbiByb290KSB7XG4gICAgc2VsZWN0aW9uLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBudWxsKTtcbiAgfSBlbHNlIHtcbiAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSByb290Ll9fbm9zZWxlY3Q7XG4gICAgZGVsZXRlIHJvb3QuX19ub3NlbGVjdDtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odGFyZ2V0LCB0eXBlLCBzZWxlY3Rpb24pIHtcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IGJpc2VjdG9yIGZyb20gXCIuL2Jpc2VjdG9yXCI7XG5cbnZhciBhc2NlbmRpbmdCaXNlY3QgPSBiaXNlY3Rvcihhc2NlbmRpbmcpO1xuZXhwb3J0IHZhciBiaXNlY3RSaWdodCA9IGFzY2VuZGluZ0Jpc2VjdC5yaWdodDtcbmV4cG9ydCB2YXIgYmlzZWN0TGVmdCA9IGFzY2VuZGluZ0Jpc2VjdC5sZWZ0O1xuZXhwb3J0IGRlZmF1bHQgYmlzZWN0UmlnaHQ7XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmIChjb21wYXJlLmxlbmd0aCA9PT0gMSkgY29tcGFyZSA9IGFzY2VuZGluZ0NvbXBhcmF0b3IoY29tcGFyZSk7XG4gIHJldHVybiB7XG4gICAgbGVmdDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA8IDApIGxvID0gbWlkICsgMTtcbiAgICAgICAgZWxzZSBoaSA9IG1pZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9LFxuICAgIHJpZ2h0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpID4gMCkgaGkgPSBtaWQ7XG4gICAgICAgIGVsc2UgbG8gPSBtaWQgKyAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nQ29tcGFyYXRvcihmKSB7XG4gIHJldHVybiBmdW5jdGlvbihkLCB4KSB7XG4gICAgcmV0dXJuIGFzY2VuZGluZyhmKGQpLCB4KTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbn1cbiIsImltcG9ydCB2YXJpYW5jZSBmcm9tIFwiLi92YXJpYW5jZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnJheSwgZikge1xuICB2YXIgdiA9IHZhcmlhbmNlKGFycmF5LCBmKTtcbiAgcmV0dXJuIHYgPyBNYXRoLnNxcnQodikgOiB2O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG0gPSAwLFxuICAgICAgaSA9IC0xLFxuICAgICAgbWVhbiA9IDAsXG4gICAgICB2YWx1ZSxcbiAgICAgIGRlbHRhLFxuICAgICAgc3VtID0gMDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVzW2ldKSkpIHtcbiAgICAgICAgZGVsdGEgPSB2YWx1ZSAtIG1lYW47XG4gICAgICAgIG1lYW4gKz0gZGVsdGEgLyArK207XG4gICAgICAgIHN1bSArPSBkZWx0YSAqICh2YWx1ZSAtIG1lYW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSkpIHtcbiAgICAgICAgZGVsdGEgPSB2YWx1ZSAtIG1lYW47XG4gICAgICAgIG1lYW4gKz0gZGVsdGEgLyArK207XG4gICAgICAgIHN1bSArPSBkZWx0YSAqICh2YWx1ZSAtIG1lYW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChtID4gMSkgcmV0dXJuIHN1bSAvIChtIC0gMSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtaW4sXG4gICAgICBtYXg7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gW21pbiwgbWF4XTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gIHN0YXJ0ID0gK3N0YXJ0LCBzdG9wID0gK3N0b3AsIHN0ZXAgPSAobiA9IGFyZ3VtZW50cy5sZW5ndGgpIDwgMiA/IChzdG9wID0gc3RhcnQsIHN0YXJ0ID0gMCwgMSkgOiBuIDwgMyA/IDEgOiArc3RlcDtcblxuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IE1hdGgubWF4KDAsIE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApKSB8IDAsXG4gICAgICByYW5nZSA9IG5ldyBBcnJheShuKTtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIHJhbmdlW2ldID0gc3RhcnQgKyBpICogc3RlcDtcbiAgfVxuXG4gIHJldHVybiByYW5nZTtcbn1cbiIsInZhciBlMTAgPSBNYXRoLnNxcnQoNTApLFxuICAgIGU1ID0gTWF0aC5zcXJ0KDEwKSxcbiAgICBlMiA9IE1hdGguc3FydCgyKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciByZXZlcnNlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbixcbiAgICAgIHRpY2tzLFxuICAgICAgc3RlcDtcblxuICBzdG9wID0gK3N0b3AsIHN0YXJ0ID0gK3N0YXJ0LCBjb3VudCA9ICtjb3VudDtcbiAgaWYgKHN0YXJ0ID09PSBzdG9wICYmIGNvdW50ID4gMCkgcmV0dXJuIFtzdGFydF07XG4gIGlmIChyZXZlcnNlID0gc3RvcCA8IHN0YXJ0KSBuID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IG47XG4gIGlmICgoc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSkgPT09IDAgfHwgIWlzRmluaXRlKHN0ZXApKSByZXR1cm4gW107XG5cbiAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wIC8gc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdG9wIC0gc3RhcnQgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0ICsgaSkgKiBzdGVwO1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAqIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAqIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RhcnQgLSBzdG9wICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCAtIGkpIC8gc3RlcDtcbiAgfVxuXG4gIGlmIChyZXZlcnNlKSB0aWNrcy5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHBvd2VyID0gTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwKSAvIE1hdGguTE4xMCksXG4gICAgICBlcnJvciA9IHN0ZXAgLyBNYXRoLnBvdygxMCwgcG93ZXIpO1xuICByZXR1cm4gcG93ZXIgPj0gMFxuICAgICAgPyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKSAqIE1hdGgucG93KDEwLCBwb3dlcilcbiAgICAgIDogLU1hdGgucG93KDEwLCAtcG93ZXIpIC8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAwID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHN0ZXAxID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcDApIC8gTWF0aC5MTjEwKSksXG4gICAgICBlcnJvciA9IHN0ZXAwIC8gc3RlcDE7XG4gIGlmIChlcnJvciA+PSBlMTApIHN0ZXAxICo9IDEwO1xuICBlbHNlIGlmIChlcnJvciA+PSBlNSkgc3RlcDEgKj0gNTtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTIpIHN0ZXAxICo9IDI7XG4gIHJldHVybiBzdG9wIDwgc3RhcnQgPyAtc3RlcDEgOiBzdGVwMTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgcCwgdmFsdWVvZikge1xuICBpZiAodmFsdWVvZiA9PSBudWxsKSB2YWx1ZW9mID0gbnVtYmVyO1xuICBpZiAoIShuID0gdmFsdWVzLmxlbmd0aCkpIHJldHVybjtcbiAgaWYgKChwID0gK3ApIDw9IDAgfHwgbiA8IDIpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbMF0sIDAsIHZhbHVlcyk7XG4gIGlmIChwID49IDEpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbbiAtIDFdLCBuIC0gMSwgdmFsdWVzKTtcbiAgdmFyIG4sXG4gICAgICBpID0gKG4gLSAxKSAqIHAsXG4gICAgICBpMCA9IE1hdGguZmxvb3IoaSksXG4gICAgICB2YWx1ZTAgPSArdmFsdWVvZih2YWx1ZXNbaTBdLCBpMCwgdmFsdWVzKSxcbiAgICAgIHZhbHVlMSA9ICt2YWx1ZW9mKHZhbHVlc1tpMCArIDFdLCBpMCArIDEsIHZhbHVlcyk7XG4gIHJldHVybiB2YWx1ZTAgKyAodmFsdWUxIC0gdmFsdWUwKSAqIChpIC0gaTApO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWF4O1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1heDtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuaW1wb3J0IHF1YW50aWxlIGZyb20gXCIuL3F1YW50aWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG51bWJlcnMgPSBbXTtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVzW2ldKSkpIHtcbiAgICAgICAgbnVtYmVycy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSB7XG4gICAgICAgIG51bWJlcnMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHF1YW50aWxlKG51bWJlcnMuc29ydChhc2NlbmRpbmcpLCAwLjUpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWluO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIG1pbiA+IHZhbHVlKSB7XG4gICAgICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1pbjtcbn1cbiIsImV4cG9ydCB2YXIgcHJlZml4ID0gXCIkXCI7XG5cbmZ1bmN0aW9uIE1hcCgpIHt9XG5cbk1hcC5wcm90b3R5cGUgPSBtYXAucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTWFwLFxuICBoYXM6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiAocHJlZml4ICsga2V5KSBpbiB0aGlzO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiB0aGlzW3ByZWZpeCArIGtleV07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIHRoaXNbcHJlZml4ICsga2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBwcm9wZXJ0eSA9IHByZWZpeCArIGtleTtcbiAgICByZXR1cm4gcHJvcGVydHkgaW4gdGhpcyAmJiBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBrZXlzLnB1c2gocHJvcGVydHkuc2xpY2UoMSkpO1xuICAgIHJldHVybiBrZXlzO1xuICB9LFxuICB2YWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgdmFsdWVzLnB1c2godGhpc1twcm9wZXJ0eV0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH0sXG4gIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGVudHJpZXMucHVzaCh7a2V5OiBwcm9wZXJ0eS5zbGljZSgxKSwgdmFsdWU6IHRoaXNbcHJvcGVydHldfSk7XG4gICAgcmV0dXJuIGVudHJpZXM7XG4gIH0sXG4gIHNpemU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaXplID0gMDtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgKytzaXplO1xuICAgIHJldHVybiBzaXplO1xuICB9LFxuICBlbXB0eTogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZWFjaDogZnVuY3Rpb24oZikge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBmKHRoaXNbcHJvcGVydHldLCBwcm9wZXJ0eS5zbGljZSgxKSwgdGhpcyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG1hcChvYmplY3QsIGYpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXA7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIE1hcCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkgeyBtYXAuc2V0KGtleSwgdmFsdWUpOyB9KTtcblxuICAvLyBJbmRleCBhcnJheSBieSBudW1lcmljIGluZGV4IG9yIHNwZWNpZmllZCBrZXkgZnVuY3Rpb24uXG4gIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBvYmplY3QubGVuZ3RoLFxuICAgICAgICBvO1xuXG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoaSwgb2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYobyA9IG9iamVjdFtpXSwgaSwgb2JqZWN0KSwgbyk7XG4gIH1cblxuICAvLyBDb252ZXJ0IG9iamVjdCB0byBtYXAuXG4gIGVsc2UgaWYgKG9iamVjdCkgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWFwLnNldChrZXksIG9iamVjdFtrZXldKTtcblxuICByZXR1cm4gbWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXA7XG4iLCJpbXBvcnQgbWFwIGZyb20gXCIuL21hcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGtleXMgPSBbXSxcbiAgICAgIHNvcnRLZXlzID0gW10sXG4gICAgICBzb3J0VmFsdWVzLFxuICAgICAgcm9sbHVwLFxuICAgICAgbmVzdDtcblxuICBmdW5jdGlvbiBhcHBseShhcnJheSwgZGVwdGgsIGNyZWF0ZVJlc3VsdCwgc2V0UmVzdWx0KSB7XG4gICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSB7XG4gICAgICBpZiAoc29ydFZhbHVlcyAhPSBudWxsKSBhcnJheS5zb3J0KHNvcnRWYWx1ZXMpO1xuICAgICAgcmV0dXJuIHJvbGx1cCAhPSBudWxsID8gcm9sbHVwKGFycmF5KSA6IGFycmF5O1xuICAgIH1cblxuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGtleSA9IGtleXNbZGVwdGgrK10sXG4gICAgICAgIGtleVZhbHVlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdmFsdWVzQnlLZXkgPSBtYXAoKSxcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICByZXN1bHQgPSBjcmVhdGVSZXN1bHQoKTtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodmFsdWVzID0gdmFsdWVzQnlLZXkuZ2V0KGtleVZhbHVlID0ga2V5KHZhbHVlID0gYXJyYXlbaV0pICsgXCJcIikpIHtcbiAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVzQnlLZXkuc2V0KGtleVZhbHVlLCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YWx1ZXNCeUtleS5lYWNoKGZ1bmN0aW9uKHZhbHVlcywga2V5KSB7XG4gICAgICBzZXRSZXN1bHQocmVzdWx0LCBrZXksIGFwcGx5KHZhbHVlcywgZGVwdGgsIGNyZWF0ZVJlc3VsdCwgc2V0UmVzdWx0KSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gZW50cmllcyhtYXAsIGRlcHRoKSB7XG4gICAgaWYgKCsrZGVwdGggPiBrZXlzLmxlbmd0aCkgcmV0dXJuIG1hcDtcbiAgICB2YXIgYXJyYXksIHNvcnRLZXkgPSBzb3J0S2V5c1tkZXB0aCAtIDFdO1xuICAgIGlmIChyb2xsdXAgIT0gbnVsbCAmJiBkZXB0aCA+PSBrZXlzLmxlbmd0aCkgYXJyYXkgPSBtYXAuZW50cmllcygpO1xuICAgIGVsc2UgYXJyYXkgPSBbXSwgbWFwLmVhY2goZnVuY3Rpb24odiwgaykgeyBhcnJheS5wdXNoKHtrZXk6IGssIHZhbHVlczogZW50cmllcyh2LCBkZXB0aCl9KTsgfSk7XG4gICAgcmV0dXJuIHNvcnRLZXkgIT0gbnVsbCA/IGFycmF5LnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gc29ydEtleShhLmtleSwgYi5rZXkpOyB9KSA6IGFycmF5O1xuICB9XG5cbiAgcmV0dXJuIG5lc3QgPSB7XG4gICAgb2JqZWN0OiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU9iamVjdCwgc2V0T2JqZWN0KTsgfSxcbiAgICBtYXA6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApOyB9LFxuICAgIGVudHJpZXM6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBlbnRyaWVzKGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCksIDApOyB9LFxuICAgIGtleTogZnVuY3Rpb24oZCkgeyBrZXlzLnB1c2goZCk7IHJldHVybiBuZXN0OyB9LFxuICAgIHNvcnRLZXlzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0S2V5c1trZXlzLmxlbmd0aCAtIDFdID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgIHNvcnRWYWx1ZXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRWYWx1ZXMgPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgcm9sbHVwOiBmdW5jdGlvbihmKSB7IHJvbGx1cCA9IGY7IHJldHVybiBuZXN0OyB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdCgpIHtcbiAgcmV0dXJuIHt9O1xufVxuXG5mdW5jdGlvbiBzZXRPYmplY3Qob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1hcCgpIHtcbiAgcmV0dXJuIG1hcCgpO1xufVxuXG5mdW5jdGlvbiBzZXRNYXAobWFwLCBrZXksIHZhbHVlKSB7XG4gIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG59XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgbWFwLCBwcmVmaXh9IGZyb20gXCIuL21hcFwiO1xuXG5mdW5jdGlvbiBTZXQoKSB7fVxuXG52YXIgcHJvdG8gPSBtYXAucHJvdG90eXBlO1xuXG5TZXQucHJvdG90eXBlID0gc2V0LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNldCxcbiAgaGFzOiBwcm90by5oYXMsXG4gIGFkZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YWx1ZSArPSBcIlwiO1xuICAgIHRoaXNbcHJlZml4ICsgdmFsdWVdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogcHJvdG8ucmVtb3ZlLFxuICBjbGVhcjogcHJvdG8uY2xlYXIsXG4gIHZhbHVlczogcHJvdG8ua2V5cyxcbiAgc2l6ZTogcHJvdG8uc2l6ZSxcbiAgZW1wdHk6IHByb3RvLmVtcHR5LFxuICBlYWNoOiBwcm90by5lYWNoXG59O1xuXG5mdW5jdGlvbiBzZXQob2JqZWN0LCBmKSB7XG4gIHZhciBzZXQgPSBuZXcgU2V0O1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBTZXQpIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IHNldC5hZGQodmFsdWUpOyB9KTtcblxuICAvLyBPdGhlcndpc2UsIGFzc3VtZSBpdOKAmXMgYW4gYXJyYXkuXG4gIGVsc2UgaWYgKG9iamVjdCkge1xuICAgIHZhciBpID0gLTEsIG4gPSBvYmplY3QubGVuZ3RoO1xuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChmKG9iamVjdFtpXSwgaSwgb2JqZWN0KSk7XG4gIH1cblxuICByZXR1cm4gc2V0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZXQ7XG4iLCJ2YXIgYXJyYXkgPSBBcnJheS5wcm90b3R5cGU7XG5cbmV4cG9ydCB2YXIgbWFwID0gYXJyYXkubWFwO1xuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuIiwiaW1wb3J0IHttYXB9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuXG5leHBvcnQgdmFyIGltcGxpY2l0ID0ge25hbWU6IFwiaW1wbGljaXRcIn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9yZGluYWwocmFuZ2UpIHtcbiAgdmFyIGluZGV4ID0gbWFwKCksXG4gICAgICBkb21haW4gPSBbXSxcbiAgICAgIHVua25vd24gPSBpbXBsaWNpdDtcblxuICByYW5nZSA9IHJhbmdlID09IG51bGwgPyBbXSA6IHNsaWNlLmNhbGwocmFuZ2UpO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKGQpIHtcbiAgICB2YXIga2V5ID0gZCArIFwiXCIsIGkgPSBpbmRleC5nZXQoa2V5KTtcbiAgICBpZiAoIWkpIHtcbiAgICAgIGlmICh1bmtub3duICE9PSBpbXBsaWNpdCkgcmV0dXJuIHVua25vd247XG4gICAgICBpbmRleC5zZXQoa2V5LCBpID0gZG9tYWluLnB1c2goZCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmFuZ2VbKGkgLSAxKSAlIHJhbmdlLmxlbmd0aF07XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW10sIGluZGV4ID0gbWFwKCk7XG4gICAgdmFyIGkgPSAtMSwgbiA9IF8ubGVuZ3RoLCBkLCBrZXk7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghaW5kZXguaGFzKGtleSA9IChkID0gX1tpXSkgKyBcIlwiKSkgaW5kZXguc2V0KGtleSwgZG9tYWluLnB1c2goZCkpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9yZGluYWwoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG4iLCJpbXBvcnQge3JhbmdlIGFzIHNlcXVlbmNlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCBvcmRpbmFsIGZyb20gXCIuL29yZGluYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmFuZCgpIHtcbiAgdmFyIHNjYWxlID0gb3JkaW5hbCgpLnVua25vd24odW5kZWZpbmVkKSxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbixcbiAgICAgIG9yZGluYWxSYW5nZSA9IHNjYWxlLnJhbmdlLFxuICAgICAgcmFuZ2UgPSBbMCwgMV0sXG4gICAgICBzdGVwLFxuICAgICAgYmFuZHdpZHRoLFxuICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgIHBhZGRpbmdJbm5lciA9IDAsXG4gICAgICBwYWRkaW5nT3V0ZXIgPSAwLFxuICAgICAgYWxpZ24gPSAwLjU7XG5cbiAgZGVsZXRlIHNjYWxlLnVua25vd247XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgbiA9IGRvbWFpbigpLmxlbmd0aCxcbiAgICAgICAgcmV2ZXJzZSA9IHJhbmdlWzFdIDwgcmFuZ2VbMF0sXG4gICAgICAgIHN0YXJ0ID0gcmFuZ2VbcmV2ZXJzZSAtIDBdLFxuICAgICAgICBzdG9wID0gcmFuZ2VbMSAtIHJldmVyc2VdO1xuICAgIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDEsIG4gLSBwYWRkaW5nSW5uZXIgKyBwYWRkaW5nT3V0ZXIgKiAyKTtcbiAgICBpZiAocm91bmQpIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgIHN0YXJ0ICs9IChzdG9wIC0gc3RhcnQgLSBzdGVwICogKG4gLSBwYWRkaW5nSW5uZXIpKSAqIGFsaWduO1xuICAgIGJhbmR3aWR0aCA9IHN0ZXAgKiAoMSAtIHBhZGRpbmdJbm5lcik7XG4gICAgaWYgKHJvdW5kKSBzdGFydCA9IE1hdGgucm91bmQoc3RhcnQpLCBiYW5kd2lkdGggPSBNYXRoLnJvdW5kKGJhbmR3aWR0aCk7XG4gICAgdmFyIHZhbHVlcyA9IHNlcXVlbmNlKG4pLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBzdGFydCArIHN0ZXAgKiBpOyB9KTtcbiAgICByZXR1cm4gb3JkaW5hbFJhbmdlKHJldmVyc2UgPyB2YWx1ZXMucmV2ZXJzZSgpIDogdmFsdWVzKTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4oXyksIHJlc2NhbGUoKSkgOiBkb21haW4oKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IFsrX1swXSwgK19bMV1dLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IFsrX1swXSwgK19bMV1dLCByb3VuZCA9IHRydWUsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5iYW5kd2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZHdpZHRoO1xuICB9O1xuXG4gIHNjYWxlLnN0ZXAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc3RlcDtcbiAgfTtcblxuICBzY2FsZS5yb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEhXywgcmVzY2FsZSgpKSA6IHJvdW5kO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gcGFkZGluZ091dGVyID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZ091dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdPdXRlciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdPdXRlcjtcbiAgfTtcblxuICBzY2FsZS5hbGlnbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbGlnbiA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IGFsaWduO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZCgpXG4gICAgICAgIC5kb21haW4oZG9tYWluKCkpXG4gICAgICAgIC5yYW5nZShyYW5nZSlcbiAgICAgICAgLnJvdW5kKHJvdW5kKVxuICAgICAgICAucGFkZGluZ0lubmVyKHBhZGRpbmdJbm5lcilcbiAgICAgICAgLnBhZGRpbmdPdXRlcihwYWRkaW5nT3V0ZXIpXG4gICAgICAgIC5hbGlnbihhbGlnbik7XG4gIH07XG5cbiAgcmV0dXJuIHJlc2NhbGUoKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRpc2goc2NhbGUpIHtcbiAgdmFyIGNvcHkgPSBzY2FsZS5jb3B5O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nSW5uZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwb2ludGlzaChjb3B5KCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50KCkge1xuICByZXR1cm4gcG9pbnRpc2goYmFuZCgpLnBhZGRpbmdJbm5lcigxKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuICt4O1xufVxuIiwiaW1wb3J0IHtiaXNlY3R9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZSBhcyBpbnRlcnBvbGF0ZVZhbHVlLCBpbnRlcnBvbGF0ZVJvdW5kfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bWFwLCBzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxudmFyIHVuaXQgPSBbMCwgMV07XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWludGVycG9sYXRlTGluZWFyKGEsIGIpIHtcbiAgcmV0dXJuIChiIC09IChhID0gK2EpKVxuICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiAoeCAtIGEpIC8gYjsgfVxuICAgICAgOiBjb25zdGFudChiKTtcbn1cblxuZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZUNsYW1wKGRlaW50ZXJwb2xhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgZCA9IGRlaW50ZXJwb2xhdGUoYSA9ICthLCBiID0gK2IpO1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiB4IDw9IGEgPyAwIDogeCA+PSBiID8gMSA6IGQoeCk7IH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlaW50ZXJwb2xhdGVDbGFtcChyZWludGVycG9sYXRlKSB7XG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHIgPSByZWludGVycG9sYXRlKGEgPSArYSwgYiA9ICtiKTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkgeyByZXR1cm4gdCA8PSAwID8gYSA6IHQgPj0gMSA/IGIgOiByKHQpOyB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW1hcChkb21haW4sIHJhbmdlLCBkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSB7XG4gIHZhciBkMCA9IGRvbWFpblswXSwgZDEgPSBkb21haW5bMV0sIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV07XG4gIGlmIChkMSA8IGQwKSBkMCA9IGRlaW50ZXJwb2xhdGUoZDEsIGQwKSwgcjAgPSByZWludGVycG9sYXRlKHIxLCByMCk7XG4gIGVsc2UgZDAgPSBkZWludGVycG9sYXRlKGQwLCBkMSksIHIwID0gcmVpbnRlcnBvbGF0ZShyMCwgcjEpO1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gcjAoZDAoeCkpOyB9O1xufVxuXG5mdW5jdGlvbiBwb2x5bWFwKGRvbWFpbiwgcmFuZ2UsIGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgIGQgPSBuZXcgQXJyYXkoaiksXG4gICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgaSA9IC0xO1xuXG4gIC8vIFJldmVyc2UgZGVzY2VuZGluZyBkb21haW5zLlxuICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICB3aGlsZSAoKytpIDwgaikge1xuICAgIGRbaV0gPSBkZWludGVycG9sYXRlKGRvbWFpbltpXSwgZG9tYWluW2kgKyAxXSk7XG4gICAgcltpXSA9IHJlaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHZhciBpID0gYmlzZWN0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgIHJldHVybiByW2ldKGRbaV0oeCkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0XG4gICAgICAuZG9tYWluKHNvdXJjZS5kb21haW4oKSlcbiAgICAgIC5yYW5nZShzb3VyY2UucmFuZ2UoKSlcbiAgICAgIC5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSk7XG59XG5cbi8vIGRlaW50ZXJwb2xhdGUoYSwgYikoeCkgdGFrZXMgYSBkb21haW4gdmFsdWUgeCBpbiBbYSxiXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBwYXJhbWV0ZXIgdCBpbiBbMCwxXS5cbi8vIHJlaW50ZXJwb2xhdGUoYSwgYikodCkgdGFrZXMgYSBwYXJhbWV0ZXIgdCBpbiBbMCwxXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBkb21haW4gdmFsdWUgeCBpbiBbYSxiXS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSkge1xuICB2YXIgZG9tYWluID0gdW5pdCxcbiAgICAgIHJhbmdlID0gdW5pdCxcbiAgICAgIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVWYWx1ZSxcbiAgICAgIGNsYW1wID0gZmFsc2UsXG4gICAgICBwaWVjZXdpc2UsXG4gICAgICBvdXRwdXQsXG4gICAgICBpbnB1dDtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHBpZWNld2lzZSA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgPiAyID8gcG9seW1hcCA6IGJpbWFwO1xuICAgIG91dHB1dCA9IGlucHV0ID0gbnVsbDtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgKG91dHB1dCA9IHBpZWNld2lzZShkb21haW4sIHJhbmdlLCBjbGFtcCA/IGRlaW50ZXJwb2xhdGVDbGFtcChkZWludGVycG9sYXRlKSA6IGRlaW50ZXJwb2xhdGUsIGludGVycG9sYXRlKSkpKCt4KTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gKGlucHV0IHx8IChpbnB1dCA9IHBpZWNld2lzZShyYW5nZSwgZG9tYWluLCBkZWludGVycG9sYXRlTGluZWFyLCBjbGFtcCA/IHJlaW50ZXJwb2xhdGVDbGFtcChyZWludGVycG9sYXRlKSA6IHJlaW50ZXJwb2xhdGUpKSkoK3kpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAuY2FsbChfLCBudW1iZXIpLCByZXNjYWxlKCkpIDogZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZS5jYWxsKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IHNsaWNlLmNhbGwoXyksIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVSb3VuZCwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gISFfLCByZXNjYWxlKCkpIDogY2xhbXA7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgcmV0dXJuIHJlc2NhbGUoKTtcbn1cbiIsIi8vIENvbXB1dGVzIHRoZSBkZWNpbWFsIGNvZWZmaWNpZW50IGFuZCBleHBvbmVudCBvZiB0aGUgc3BlY2lmaWVkIG51bWJlciB4IHdpdGhcbi8vIHNpZ25pZmljYW50IGRpZ2l0cyBwLCB3aGVyZSB4IGlzIHBvc2l0aXZlIGFuZCBwIGlzIGluIFsxLCAyMV0gb3IgdW5kZWZpbmVkLlxuLy8gRm9yIGV4YW1wbGUsIGZvcm1hdERlY2ltYWwoMS4yMykgcmV0dXJucyBbXCIxMjNcIiwgMF0uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIGlmICgoaSA9ICh4ID0gcCA/IHgudG9FeHBvbmVudGlhbChwIC0gMSkgOiB4LnRvRXhwb25lbnRpYWwoKSkuaW5kZXhPZihcImVcIikpIDwgMCkgcmV0dXJuIG51bGw7IC8vIE5hTiwgwrFJbmZpbml0eVxuICB2YXIgaSwgY29lZmZpY2llbnQgPSB4LnNsaWNlKDAsIGkpO1xuXG4gIC8vIFRoZSBzdHJpbmcgcmV0dXJuZWQgYnkgdG9FeHBvbmVudGlhbCBlaXRoZXIgaGFzIHRoZSBmb3JtIFxcZFxcLlxcZCtlWy0rXVxcZCtcbiAgLy8gKGUuZy4sIDEuMmUrMykgb3IgdGhlIGZvcm0gXFxkZVstK11cXGQrIChlLmcuLCAxZSszKS5cbiAgcmV0dXJuIFtcbiAgICBjb2VmZmljaWVudC5sZW5ndGggPiAxID8gY29lZmZpY2llbnRbMF0gKyBjb2VmZmljaWVudC5zbGljZSgyKSA6IGNvZWZmaWNpZW50LFxuICAgICt4LnNsaWNlKGkgKyAxKVxuICBdO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID0gZm9ybWF0RGVjaW1hbChNYXRoLmFicyh4KSksIHggPyB4WzFdIDogTmFOO1xufVxuIiwiLy8gW1tmaWxsXWFsaWduXVtzaWduXVtzeW1ib2xdWzBdW3dpZHRoXVssXVsucHJlY2lzaW9uXVt+XVt0eXBlXVxudmFyIHJlID0gL14oPzooLik/KFs8Pj1eXSkpPyhbK1xcLVxcKCBdKT8oWyQjXSk/KDApPyhcXGQrKT8oLCk/KFxcLlxcZCspPyh+KT8oW2EteiVdKT8kL2k7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgcmV0dXJuIG5ldyBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcbn1cblxuZm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZSA9IEZvcm1hdFNwZWNpZmllci5wcm90b3R5cGU7IC8vIGluc3RhbmNlb2ZcblxuZnVuY3Rpb24gRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICBpZiAoIShtYXRjaCA9IHJlLmV4ZWMoc3BlY2lmaWVyKSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZm9ybWF0OiBcIiArIHNwZWNpZmllcik7XG4gIHZhciBtYXRjaDtcbiAgdGhpcy5maWxsID0gbWF0Y2hbMV0gfHwgXCIgXCI7XG4gIHRoaXMuYWxpZ24gPSBtYXRjaFsyXSB8fCBcIj5cIjtcbiAgdGhpcy5zaWduID0gbWF0Y2hbM10gfHwgXCItXCI7XG4gIHRoaXMuc3ltYm9sID0gbWF0Y2hbNF0gfHwgXCJcIjtcbiAgdGhpcy56ZXJvID0gISFtYXRjaFs1XTtcbiAgdGhpcy53aWR0aCA9IG1hdGNoWzZdICYmICttYXRjaFs2XTtcbiAgdGhpcy5jb21tYSA9ICEhbWF0Y2hbN107XG4gIHRoaXMucHJlY2lzaW9uID0gbWF0Y2hbOF0gJiYgK21hdGNoWzhdLnNsaWNlKDEpO1xuICB0aGlzLnRyaW0gPSAhIW1hdGNoWzldO1xuICB0aGlzLnR5cGUgPSBtYXRjaFsxMF0gfHwgXCJcIjtcbn1cblxuRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5maWxsXG4gICAgICArIHRoaXMuYWxpZ25cbiAgICAgICsgdGhpcy5zaWduXG4gICAgICArIHRoaXMuc3ltYm9sXG4gICAgICArICh0aGlzLnplcm8gPyBcIjBcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLndpZHRoID09IG51bGwgPyBcIlwiIDogTWF0aC5tYXgoMSwgdGhpcy53aWR0aCB8IDApKVxuICAgICAgKyAodGhpcy5jb21tYSA/IFwiLFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMucHJlY2lzaW9uID09IG51bGwgPyBcIlwiIDogXCIuXCIgKyBNYXRoLm1heCgwLCB0aGlzLnByZWNpc2lvbiB8IDApKVxuICAgICAgKyAodGhpcy50cmltID8gXCJ+XCIgOiBcIlwiKVxuICAgICAgKyB0aGlzLnR5cGU7XG59O1xuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbFwiO1xuXG5leHBvcnQgdmFyIHByZWZpeEV4cG9uZW50O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV0sXG4gICAgICBpID0gZXhwb25lbnQgLSAocHJlZml4RXhwb25lbnQgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCAvIDMpKSkgKiAzKSArIDEsXG4gICAgICBuID0gY29lZmZpY2llbnQubGVuZ3RoO1xuICByZXR1cm4gaSA9PT0gbiA/IGNvZWZmaWNpZW50XG4gICAgICA6IGkgPiBuID8gY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoaSAtIG4gKyAxKS5qb2luKFwiMFwiKVxuICAgICAgOiBpID4gMCA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGkpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShpKVxuICAgICAgOiBcIjAuXCIgKyBuZXcgQXJyYXkoMSAtIGkpLmpvaW4oXCIwXCIpICsgZm9ybWF0RGVjaW1hbCh4LCBNYXRoLm1heCgwLCBwICsgaSAtIDEpKVswXTsgLy8gbGVzcyB0aGFuIDF5IVxufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV07XG4gIHJldHVybiBleHBvbmVudCA8IDAgPyBcIjAuXCIgKyBuZXcgQXJyYXkoLWV4cG9uZW50KS5qb2luKFwiMFwiKSArIGNvZWZmaWNpZW50XG4gICAgICA6IGNvZWZmaWNpZW50Lmxlbmd0aCA+IGV4cG9uZW50ICsgMSA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGV4cG9uZW50ICsgMSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGV4cG9uZW50ICsgMSlcbiAgICAgIDogY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoZXhwb25lbnQgLSBjb2VmZmljaWVudC5sZW5ndGggKyAyKS5qb2luKFwiMFwiKTtcbn1cbiIsImltcG9ydCBmb3JtYXRQcmVmaXhBdXRvIGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG9cIjtcbmltcG9ydCBmb3JtYXRSb3VuZGVkIGZyb20gXCIuL2Zvcm1hdFJvdW5kZWRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBcIiVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gKHggKiAxMDApLnRvRml4ZWQocCk7IH0sXG4gIFwiYlwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpOyB9LFxuICBcImNcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4geCArIFwiXCI7IH0sXG4gIFwiZFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDEwKTsgfSxcbiAgXCJlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9FeHBvbmVudGlhbChwKTsgfSxcbiAgXCJmXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9GaXhlZChwKTsgfSxcbiAgXCJnXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9QcmVjaXNpb24ocCk7IH0sXG4gIFwib1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDgpOyB9LFxuICBcInBcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gZm9ybWF0Um91bmRlZCh4ICogMTAwLCBwKTsgfSxcbiAgXCJyXCI6IGZvcm1hdFJvdW5kZWQsXG4gIFwic1wiOiBmb3JtYXRQcmVmaXhBdXRvLFxuICBcIlhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgfSxcbiAgXCJ4XCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpOyB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudFwiO1xuaW1wb3J0IGZvcm1hdEdyb3VwIGZyb20gXCIuL2Zvcm1hdEdyb3VwXCI7XG5pbXBvcnQgZm9ybWF0TnVtZXJhbHMgZnJvbSBcIi4vZm9ybWF0TnVtZXJhbHNcIjtcbmltcG9ydCBmb3JtYXRTcGVjaWZpZXIgZnJvbSBcIi4vZm9ybWF0U3BlY2lmaWVyXCI7XG5pbXBvcnQgZm9ybWF0VHJpbSBmcm9tIFwiLi9mb3JtYXRUcmltXCI7XG5pbXBvcnQgZm9ybWF0VHlwZXMgZnJvbSBcIi4vZm9ybWF0VHlwZXNcIjtcbmltcG9ydCB7cHJlZml4RXhwb25lbnR9IGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG9cIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eVwiO1xuXG52YXIgcHJlZml4ZXMgPSBbXCJ5XCIsXCJ6XCIsXCJhXCIsXCJmXCIsXCJwXCIsXCJuXCIsXCLCtVwiLFwibVwiLFwiXCIsXCJrXCIsXCJNXCIsXCJHXCIsXCJUXCIsXCJQXCIsXCJFXCIsXCJaXCIsXCJZXCJdO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihsb2NhbGUpIHtcbiAgdmFyIGdyb3VwID0gbG9jYWxlLmdyb3VwaW5nICYmIGxvY2FsZS50aG91c2FuZHMgPyBmb3JtYXRHcm91cChsb2NhbGUuZ3JvdXBpbmcsIGxvY2FsZS50aG91c2FuZHMpIDogaWRlbnRpdHksXG4gICAgICBjdXJyZW5jeSA9IGxvY2FsZS5jdXJyZW5jeSxcbiAgICAgIGRlY2ltYWwgPSBsb2NhbGUuZGVjaW1hbCxcbiAgICAgIG51bWVyYWxzID0gbG9jYWxlLm51bWVyYWxzID8gZm9ybWF0TnVtZXJhbHMobG9jYWxlLm51bWVyYWxzKSA6IGlkZW50aXR5LFxuICAgICAgcGVyY2VudCA9IGxvY2FsZS5wZXJjZW50IHx8IFwiJVwiO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIpIHtcbiAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcblxuICAgIHZhciBmaWxsID0gc3BlY2lmaWVyLmZpbGwsXG4gICAgICAgIGFsaWduID0gc3BlY2lmaWVyLmFsaWduLFxuICAgICAgICBzaWduID0gc3BlY2lmaWVyLnNpZ24sXG4gICAgICAgIHN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wsXG4gICAgICAgIHplcm8gPSBzcGVjaWZpZXIuemVybyxcbiAgICAgICAgd2lkdGggPSBzcGVjaWZpZXIud2lkdGgsXG4gICAgICAgIGNvbW1hID0gc3BlY2lmaWVyLmNvbW1hLFxuICAgICAgICBwcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uLFxuICAgICAgICB0cmltID0gc3BlY2lmaWVyLnRyaW0sXG4gICAgICAgIHR5cGUgPSBzcGVjaWZpZXIudHlwZTtcblxuICAgIC8vIFRoZSBcIm5cIiB0eXBlIGlzIGFuIGFsaWFzIGZvciBcIixnXCIuXG4gICAgaWYgKHR5cGUgPT09IFwiblwiKSBjb21tYSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIFRoZSBcIlwiIHR5cGUsIGFuZCBhbnkgaW52YWxpZCB0eXBlLCBpcyBhbiBhbGlhcyBmb3IgXCIuMTJ+Z1wiLlxuICAgIGVsc2UgaWYgKCFmb3JtYXRUeXBlc1t0eXBlXSkgcHJlY2lzaW9uID09IG51bGwgJiYgKHByZWNpc2lvbiA9IDEyKSwgdHJpbSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIElmIHplcm8gZmlsbCBpcyBzcGVjaWZpZWQsIHBhZGRpbmcgZ29lcyBhZnRlciBzaWduIGFuZCBiZWZvcmUgZGlnaXRzLlxuICAgIGlmICh6ZXJvIHx8IChmaWxsID09PSBcIjBcIiAmJiBhbGlnbiA9PT0gXCI9XCIpKSB6ZXJvID0gdHJ1ZSwgZmlsbCA9IFwiMFwiLCBhbGlnbiA9IFwiPVwiO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgLy8gRm9yIFNJLXByZWZpeCwgdGhlIHN1ZmZpeCBpcyBsYXppbHkgY29tcHV0ZWQuXG4gICAgdmFyIHByZWZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVswXSA6IHN5bWJvbCA9PT0gXCIjXCIgJiYgL1tib3hYXS8udGVzdCh0eXBlKSA/IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpIDogXCJcIixcbiAgICAgICAgc3VmZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5WzFdIDogL1slcF0vLnRlc3QodHlwZSkgPyBwZXJjZW50IDogXCJcIjtcblxuICAgIC8vIFdoYXQgZm9ybWF0IGZ1bmN0aW9uIHNob3VsZCB3ZSB1c2U/XG4gICAgLy8gSXMgdGhpcyBhbiBpbnRlZ2VyIHR5cGU/XG4gICAgLy8gQ2FuIHRoaXMgdHlwZSBnZW5lcmF0ZSBleHBvbmVudGlhbCBub3RhdGlvbj9cbiAgICB2YXIgZm9ybWF0VHlwZSA9IGZvcm1hdFR5cGVzW3R5cGVdLFxuICAgICAgICBtYXliZVN1ZmZpeCA9IC9bZGVmZ3BycyVdLy50ZXN0KHR5cGUpO1xuXG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0IHByZWNpc2lvbiBpZiBub3Qgc3BlY2lmaWVkLFxuICAgIC8vIG9yIGNsYW1wIHRoZSBzcGVjaWZpZWQgcHJlY2lzaW9uIHRvIHRoZSBzdXBwb3J0ZWQgcmFuZ2UuXG4gICAgLy8gRm9yIHNpZ25pZmljYW50IHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMSwgMjFdLlxuICAgIC8vIEZvciBmaXhlZCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzAsIDIwXS5cbiAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT0gbnVsbCA/IDZcbiAgICAgICAgOiAvW2dwcnNdLy50ZXN0KHR5cGUpID8gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIHByZWNpc2lvbikpXG4gICAgICAgIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMjAsIHByZWNpc2lvbikpO1xuXG4gICAgZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gICAgICB2YXIgdmFsdWVQcmVmaXggPSBwcmVmaXgsXG4gICAgICAgICAgdmFsdWVTdWZmaXggPSBzdWZmaXgsXG4gICAgICAgICAgaSwgbiwgYztcblxuICAgICAgaWYgKHR5cGUgPT09IFwiY1wiKSB7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gZm9ybWF0VHlwZSh2YWx1ZSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSArdmFsdWU7XG5cbiAgICAgICAgLy8gUGVyZm9ybSB0aGUgaW5pdGlhbCBmb3JtYXR0aW5nLlxuICAgICAgICB2YXIgdmFsdWVOZWdhdGl2ZSA9IHZhbHVlIDwgMDtcbiAgICAgICAgdmFsdWUgPSBmb3JtYXRUeXBlKE1hdGguYWJzKHZhbHVlKSwgcHJlY2lzaW9uKTtcblxuICAgICAgICAvLyBUcmltIGluc2lnbmlmaWNhbnQgemVyb3MuXG4gICAgICAgIGlmICh0cmltKSB2YWx1ZSA9IGZvcm1hdFRyaW0odmFsdWUpO1xuXG4gICAgICAgIC8vIElmIGEgbmVnYXRpdmUgdmFsdWUgcm91bmRzIHRvIHplcm8gZHVyaW5nIGZvcm1hdHRpbmcsIHRyZWF0IGFzIHBvc2l0aXZlLlxuICAgICAgICBpZiAodmFsdWVOZWdhdGl2ZSAmJiArdmFsdWUgPT09IDApIHZhbHVlTmVnYXRpdmUgPSBmYWxzZTtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgICAgdmFsdWVQcmVmaXggPSAodmFsdWVOZWdhdGl2ZSA/IChzaWduID09PSBcIihcIiA/IHNpZ24gOiBcIi1cIikgOiBzaWduID09PSBcIi1cIiB8fCBzaWduID09PSBcIihcIiA/IFwiXCIgOiBzaWduKSArIHZhbHVlUHJlZml4O1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9ICh0eXBlID09PSBcInNcIiA/IHByZWZpeGVzWzggKyBwcmVmaXhFeHBvbmVudCAvIDNdIDogXCJcIikgKyB2YWx1ZVN1ZmZpeCArICh2YWx1ZU5lZ2F0aXZlICYmIHNpZ24gPT09IFwiKFwiID8gXCIpXCIgOiBcIlwiKTtcblxuICAgICAgICAvLyBCcmVhayB0aGUgZm9ybWF0dGVkIHZhbHVlIGludG8gdGhlIGludGVnZXIg4oCcdmFsdWXigJ0gcGFydCB0aGF0IGNhbiBiZVxuICAgICAgICAvLyBncm91cGVkLCBhbmQgZnJhY3Rpb25hbCBvciBleHBvbmVudGlhbCDigJxzdWZmaXjigJ0gcGFydCB0aGF0IGlzIG5vdC5cbiAgICAgICAgaWYgKG1heWJlU3VmZml4KSB7XG4gICAgICAgICAgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksIDQ4ID4gYyB8fCBjID4gNTcpIHtcbiAgICAgICAgICAgICAgdmFsdWVTdWZmaXggPSAoYyA9PT0gNDYgPyBkZWNpbWFsICsgdmFsdWUuc2xpY2UoaSArIDEpIDogdmFsdWUuc2xpY2UoaSkpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgbm90IFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGJlZm9yZSBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmICF6ZXJvKSB2YWx1ZSA9IGdyb3VwKHZhbHVlLCBJbmZpbml0eSk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHBhZGRpbmcuXG4gICAgICB2YXIgbGVuZ3RoID0gdmFsdWVQcmVmaXgubGVuZ3RoICsgdmFsdWUubGVuZ3RoICsgdmFsdWVTdWZmaXgubGVuZ3RoLFxuICAgICAgICAgIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgOiBcIlwiO1xuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYWZ0ZXIgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiB6ZXJvKSB2YWx1ZSA9IGdyb3VwKHBhZGRpbmcgKyB2YWx1ZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIHZhbHVlU3VmZml4Lmxlbmd0aCA6IEluZmluaXR5KSwgcGFkZGluZyA9IFwiXCI7XG5cbiAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBmaW5hbCBvdXRwdXQgYmFzZWQgb24gdGhlIGRlc2lyZWQgYWxpZ25tZW50LlxuICAgICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgICBjYXNlIFwiPFwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmc7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiPVwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgcGFkZGluZyArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiXlwiOiB2YWx1ZSA9IHBhZGRpbmcuc2xpY2UoMCwgbGVuZ3RoID0gcGFkZGluZy5sZW5ndGggPj4gMSkgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nLnNsaWNlKGxlbmd0aCk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB2YWx1ZSA9IHBhZGRpbmcgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVtZXJhbHModmFsdWUpO1xuICAgIH1cblxuICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNwZWNpZmllciArIFwiXCI7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSkge1xuICAgIHZhciBmID0gbmV3Rm9ybWF0KChzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSwgc3BlY2lmaWVyLnR5cGUgPSBcImZcIiwgc3BlY2lmaWVyKSksXG4gICAgICAgIGUgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyxcbiAgICAgICAgayA9IE1hdGgucG93KDEwLCAtZSksXG4gICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZihrICogdmFsdWUpICsgcHJlZml4O1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogbmV3Rm9ybWF0LFxuICAgIGZvcm1hdFByZWZpeDogZm9ybWF0UHJlZml4XG4gIH07XG59XG4iLCJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZVwiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciBmb3JtYXQ7XG5leHBvcnQgdmFyIGZvcm1hdFByZWZpeDtcblxuZGVmYXVsdExvY2FsZSh7XG4gIGRlY2ltYWw6IFwiLlwiLFxuICB0aG91c2FuZHM6IFwiLFwiLFxuICBncm91cGluZzogWzNdLFxuICBjdXJyZW5jeTogW1wiJFwiLCBcIlwiXVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gIGZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIGZvcm1hdFByZWZpeCA9IGxvY2FsZS5mb3JtYXRQcmVmaXg7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihncm91cGluZywgdGhvdXNhbmRzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aCxcbiAgICAgICAgdCA9IFtdLFxuICAgICAgICBqID0gMCxcbiAgICAgICAgZyA9IGdyb3VwaW5nWzBdLFxuICAgICAgICBsZW5ndGggPSAwO1xuXG4gICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG4gICAgICBpZiAobGVuZ3RoICsgZyArIDEgPiB3aWR0aCkgZyA9IE1hdGgubWF4KDEsIHdpZHRoIC0gbGVuZ3RoKTtcbiAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xuICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuICAgICAgZyA9IGdyb3VwaW5nW2ogPSAoaiArIDEpICUgZ3JvdXBpbmcubGVuZ3RoXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbih0aG91c2FuZHMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obnVtZXJhbHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1swLTldL2csIGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBudW1lcmFsc1sraV07XG4gICAgfSk7XG4gIH07XG59XG4iLCIvLyBUcmltcyBpbnNpZ25pZmljYW50IHplcm9zLCBlLmcuLCByZXBsYWNlcyAxLjIwMDBrIHdpdGggMS4yay5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHMpIHtcbiAgb3V0OiBmb3IgKHZhciBuID0gcy5sZW5ndGgsIGkgPSAxLCBpMCA9IC0xLCBpMTsgaSA8IG47ICsraSkge1xuICAgIHN3aXRjaCAoc1tpXSkge1xuICAgICAgY2FzZSBcIi5cIjogaTAgPSBpMSA9IGk7IGJyZWFrO1xuICAgICAgY2FzZSBcIjBcIjogaWYgKGkwID09PSAwKSBpMCA9IGk7IGkxID0gaTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBpZiAoaTAgPiAwKSB7IGlmICghK3NbaV0pIGJyZWFrIG91dDsgaTAgPSAwOyB9IGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTAgPiAwID8gcy5zbGljZSgwLCBpMCkgKyBzLnNsaWNlKGkxICsgMSkgOiBzO1xufVxuIiwiaW1wb3J0IHt0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2Zvcm1hdCwgZm9ybWF0UHJlZml4LCBmb3JtYXRTcGVjaWZpZXIsIHByZWNpc2lvbkZpeGVkLCBwcmVjaXNpb25QcmVmaXgsIHByZWNpc2lvblJvdW5kfSBmcm9tIFwiZDMtZm9ybWF0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRvbWFpbiwgY291bnQsIHNwZWNpZmllcikge1xuICB2YXIgc3RhcnQgPSBkb21haW5bMF0sXG4gICAgICBzdG9wID0gZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXSxcbiAgICAgIHN0ZXAgPSB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpLFxuICAgICAgcHJlY2lzaW9uO1xuICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyID09IG51bGwgPyBcIixmXCIgOiBzcGVjaWZpZXIpO1xuICBzd2l0Y2ggKHNwZWNpZmllci50eXBlKSB7XG4gICAgY2FzZSBcInNcIjoge1xuICAgICAgdmFyIHZhbHVlID0gTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSk7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25QcmVmaXgoc3RlcCwgdmFsdWUpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbjtcbiAgICAgIHJldHVybiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSk7XG4gICAgfVxuICAgIGNhc2UgXCJcIjpcbiAgICBjYXNlIFwiZVwiOlxuICAgIGNhc2UgXCJnXCI6XG4gICAgY2FzZSBcInBcIjpcbiAgICBjYXNlIFwiclwiOiB7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25Sb3VuZChzdGVwLCBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcImVcIik7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImZcIjpcbiAgICBjYXNlIFwiJVwiOiB7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25GaXhlZChzdGVwKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiJVwiKSAqIDI7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZvcm1hdChzcGVjaWZpZXIpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyAtIGV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgbWF4KSB7XG4gIHN0ZXAgPSBNYXRoLmFicyhzdGVwKSwgbWF4ID0gTWF0aC5hYnMobWF4KSAtIHN0ZXA7XG4gIHJldHVybiBNYXRoLm1heCgwLCBleHBvbmVudChtYXgpIC0gZXhwb25lbnQoc3RlcCkpICsgMTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwKSB7XG4gIHJldHVybiBNYXRoLm1heCgwLCAtZXhwb25lbnQoTWF0aC5hYnMoc3RlcCkpKTtcbn1cbiIsImltcG9ydCB7dGlja3MsIHRpY2tJbmNyZW1lbnR9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZU51bWJlciBhcyByZWludGVycG9sYXRlfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7ZGVmYXVsdCBhcyBjb250aW51b3VzLCBjb3B5LCBkZWludGVycG9sYXRlTGluZWFyIGFzIGRlaW50ZXJwb2xhdGV9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB0aWNrRm9ybWF0IGZyb20gXCIuL3RpY2tGb3JtYXRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmVhcmlzaChzY2FsZSkge1xuICB2YXIgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiB0aWNrcyhkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50KTtcbiAgfTtcblxuICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24oY291bnQsIHNwZWNpZmllcikge1xuICAgIHJldHVybiB0aWNrRm9ybWF0KGRvbWFpbigpLCBjb3VudCwgc3BlY2lmaWVyKTtcbiAgfTtcblxuICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICBpZiAoY291bnQgPT0gbnVsbCkgY291bnQgPSAxMDtcblxuICAgIHZhciBkID0gZG9tYWluKCksXG4gICAgICAgIGkwID0gMCxcbiAgICAgICAgaTEgPSBkLmxlbmd0aCAtIDEsXG4gICAgICAgIHN0YXJ0ID0gZFtpMF0sXG4gICAgICAgIHN0b3AgPSBkW2kxXSxcbiAgICAgICAgc3RlcDtcblxuICAgIGlmIChzdG9wIDwgc3RhcnQpIHtcbiAgICAgIHN0ZXAgPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gc3RlcDtcbiAgICAgIHN0ZXAgPSBpMCwgaTAgPSBpMSwgaTEgPSBzdGVwO1xuICAgIH1cblxuICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG5cbiAgICBpZiAoc3RlcCA+IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAvIHN0ZXApICogc3RlcDtcbiAgICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfSBlbHNlIGlmIChzdGVwIDwgMCkge1xuICAgICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICB9XG5cbiAgICBpZiAoc3RlcCA+IDApIHtcbiAgICAgIGRbaTBdID0gTWF0aC5mbG9vcihzdGFydCAvIHN0ZXApICogc3RlcDtcbiAgICAgIGRbaTFdID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBkb21haW4oZCk7XG4gICAgfSBlbHNlIGlmIChzdGVwIDwgMCkge1xuICAgICAgZFtpMF0gPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBkW2kxXSA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIGRvbWFpbihkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaW5lYXIoKSB7XG4gIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBsaW5lYXIoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXJcIjtcbmltcG9ydCB7ZGVmYXVsdCBhcyBjb250aW51b3VzLCBjb3B5fSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5cbmZ1bmN0aW9uIHJhaXNlKHgsIGV4cG9uZW50KSB7XG4gIHJldHVybiB4IDwgMCA/IC1NYXRoLnBvdygteCwgZXhwb25lbnQpIDogTWF0aC5wb3coeCwgZXhwb25lbnQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwb3coKSB7XG4gIHZhciBleHBvbmVudCA9IDEsXG4gICAgICBzY2FsZSA9IGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSksXG4gICAgICBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZShhLCBiKSB7XG4gICAgcmV0dXJuIChiID0gcmFpc2UoYiwgZXhwb25lbnQpIC0gKGEgPSByYWlzZShhLCBleHBvbmVudCkpKVxuICAgICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIChyYWlzZSh4LCBleHBvbmVudCkgLSBhKSAvIGI7IH1cbiAgICAgICAgOiBjb25zdGFudChiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlaW50ZXJwb2xhdGUoYSwgYikge1xuICAgIGIgPSByYWlzZShiLCBleHBvbmVudCkgLSAoYSA9IHJhaXNlKGEsIGV4cG9uZW50KSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHsgcmV0dXJuIHJhaXNlKGEgKyBiICogdCwgMSAvIGV4cG9uZW50KTsgfTtcbiAgfVxuXG4gIHNjYWxlLmV4cG9uZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4cG9uZW50ID0gK18sIGRvbWFpbihkb21haW4oKSkpIDogZXhwb25lbnQ7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBwb3coKS5leHBvbmVudChleHBvbmVudCkpO1xuICB9O1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3FydCgpIHtcbiAgcmV0dXJuIHBvdygpLmV4cG9uZW50KDAuNSk7XG59XG4iLCJ2YXIgdDAgPSBuZXcgRGF0ZSxcbiAgICB0MSA9IG5ldyBEYXRlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuZXdJbnRlcnZhbChmbG9vcmksIG9mZnNldGksIGNvdW50LCBmaWVsZCkge1xuXG4gIGZ1bmN0aW9uIGludGVydmFsKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICB9XG5cbiAgaW50ZXJ2YWwuZmxvb3IgPSBpbnRlcnZhbDtcblxuICBpbnRlcnZhbC5jZWlsID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKGRhdGUgLSAxKSksIG9mZnNldGkoZGF0ZSwgMSksIGZsb29yaShkYXRlKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yb3VuZCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgZDAgPSBpbnRlcnZhbChkYXRlKSxcbiAgICAgICAgZDEgPSBpbnRlcnZhbC5jZWlsKGRhdGUpO1xuICAgIHJldHVybiBkYXRlIC0gZDAgPCBkMSAtIGRhdGUgPyBkMCA6IGQxO1xuICB9O1xuXG4gIGludGVydmFsLm9mZnNldCA9IGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICByZXR1cm4gb2Zmc2V0aShkYXRlID0gbmV3IERhdGUoK2RhdGUpLCBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIHZhciByYW5nZSA9IFtdLCBwcmV2aW91cztcbiAgICBzdGFydCA9IGludGVydmFsLmNlaWwoc3RhcnQpO1xuICAgIHN0ZXAgPSBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKTtcbiAgICBpZiAoIShzdGFydCA8IHN0b3ApIHx8ICEoc3RlcCA+IDApKSByZXR1cm4gcmFuZ2U7IC8vIGFsc28gaGFuZGxlcyBJbnZhbGlkIERhdGVcbiAgICBkbyByYW5nZS5wdXNoKHByZXZpb3VzID0gbmV3IERhdGUoK3N0YXJ0KSksIG9mZnNldGkoc3RhcnQsIHN0ZXApLCBmbG9vcmkoc3RhcnQpO1xuICAgIHdoaWxlIChwcmV2aW91cyA8IHN0YXJ0ICYmIHN0YXJ0IDwgc3RvcCk7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuXG4gIGludGVydmFsLmZpbHRlciA9IGZ1bmN0aW9uKHRlc3QpIHtcbiAgICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkgd2hpbGUgKGZsb29yaShkYXRlKSwgIXRlc3QoZGF0ZSkpIGRhdGUuc2V0VGltZShkYXRlIC0gMSk7XG4gICAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkge1xuICAgICAgICBpZiAoc3RlcCA8IDApIHdoaWxlICgrK3N0ZXAgPD0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsIC0xKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfSBlbHNlIHdoaWxlICgtLXN0ZXAgPj0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsICsxKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGlmIChjb3VudCkge1xuICAgIGludGVydmFsLmNvdW50ID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgdDAuc2V0VGltZSgrc3RhcnQpLCB0MS5zZXRUaW1lKCtlbmQpO1xuICAgICAgZmxvb3JpKHQwKSwgZmxvb3JpKHQxKTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKGNvdW50KHQwLCB0MSkpO1xuICAgIH07XG5cbiAgICBpbnRlcnZhbC5ldmVyeSA9IGZ1bmN0aW9uKHN0ZXApIHtcbiAgICAgIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgICAgcmV0dXJuICFpc0Zpbml0ZShzdGVwKSB8fCAhKHN0ZXAgPiAwKSA/IG51bGxcbiAgICAgICAgICA6ICEoc3RlcCA+IDEpID8gaW50ZXJ2YWxcbiAgICAgICAgICA6IGludGVydmFsLmZpbHRlcihmaWVsZFxuICAgICAgICAgICAgICA/IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGZpZWxkKGQpICUgc3RlcCA9PT0gMDsgfVxuICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGludGVydmFsLmNvdW50KDAsIGQpICUgc3RlcCA9PT0gMDsgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBpbnRlcnZhbDtcbn1cbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgbWlsbGlzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgLy8gbm9vcFxufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZCAtIHN0YXJ0O1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbm1pbGxpc2Vjb25kLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICBrID0gTWF0aC5mbG9vcihrKTtcbiAgaWYgKCFpc0Zpbml0ZShrKSB8fCAhKGsgPiAwKSkgcmV0dXJuIG51bGw7XG4gIGlmICghKGsgPiAxKSkgcmV0dXJuIG1pbGxpc2Vjb25kO1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBrKSAqIGspO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGspO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBrO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1pbGxpc2Vjb25kO1xuZXhwb3J0IHZhciBtaWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZC5yYW5nZTtcbiIsImV4cG9ydCB2YXIgZHVyYXRpb25TZWNvbmQgPSAxZTM7XG5leHBvcnQgdmFyIGR1cmF0aW9uTWludXRlID0gNmU0O1xuZXhwb3J0IHZhciBkdXJhdGlvbkhvdXIgPSAzNmU1O1xuZXhwb3J0IHZhciBkdXJhdGlvbkRheSA9IDg2NGU1O1xuZXhwb3J0IHZhciBkdXJhdGlvbldlZWsgPSA2MDQ4ZTU7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXksIGR1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgZGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25EYXk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldERhdGUoKSAtIDE7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGF5O1xuZXhwb3J0IHZhciBkYXlzID0gZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gZHVyYXRpb25TZWNvbmQpICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uU2Vjb25kO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc2Vjb25kO1xuZXhwb3J0IHZhciBzZWNvbmRzID0gc2Vjb25kLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgbWludXRlID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gZHVyYXRpb25NaW51dGUpICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbWludXRlO1xuZXhwb3J0IHZhciBtaW51dGVzID0gbWludXRlLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91ciwgZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBob3VyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICB2YXIgb2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpICogZHVyYXRpb25NaW51dGUgJSBkdXJhdGlvbkhvdXI7XG4gIGlmIChvZmZzZXQgPCAwKSBvZmZzZXQgKz0gZHVyYXRpb25Ib3VyO1xuICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcigoK2RhdGUgLSBvZmZzZXQpIC8gZHVyYXRpb25Ib3VyKSAqIGR1cmF0aW9uSG91ciArIG9mZnNldCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBob3VyO1xuZXhwb3J0IHZhciBob3VycyA9IGhvdXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uV2Vla30gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxuZnVuY3Rpb24gd2Vla2RheShpKSB7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gKGRhdGUuZ2V0RGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25XZWVrO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciBzdW5kYXkgPSB3ZWVrZGF5KDApO1xuZXhwb3J0IHZhciBtb25kYXkgPSB3ZWVrZGF5KDEpO1xuZXhwb3J0IHZhciB0dWVzZGF5ID0gd2Vla2RheSgyKTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5ID0gd2Vla2RheSgzKTtcbmV4cG9ydCB2YXIgdGh1cnNkYXkgPSB3ZWVrZGF5KDQpO1xuZXhwb3J0IHZhciBmcmlkYXkgPSB3ZWVrZGF5KDUpO1xuZXhwb3J0IHZhciBzYXR1cmRheSA9IHdlZWtkYXkoNik7XG5cbmV4cG9ydCB2YXIgc3VuZGF5cyA9IHN1bmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgbW9uZGF5cyA9IG1vbmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdHVlc2RheXMgPSB0dWVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB3ZWRuZXNkYXlzID0gd2VkbmVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB0aHVyc2RheXMgPSB0aHVyc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgZnJpZGF5cyA9IGZyaWRheS5yYW5nZTtcbmV4cG9ydCB2YXIgc2F0dXJkYXlzID0gc2F0dXJkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIHllYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0TW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0RnVsbFllYXIoKSAtIHN0YXJ0LmdldEZ1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxueWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldEZ1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0TW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHllYXI7XG5leHBvcnQgdmFyIHllYXJzID0geWVhci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgbW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0RGF0ZSgxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRNb250aCgpIC0gc3RhcnQuZ2V0TW9udGgoKSArIChlbmQuZ2V0RnVsbFllYXIoKSAtIHN0YXJ0LmdldEZ1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbW9udGg7XG5leHBvcnQgdmFyIG1vbnRocyA9IG1vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgdXRjTWludXRlID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ1NlY29uZHMoMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01pbnV0ZXMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNNaW51dGU7XG5leHBvcnQgdmFyIHV0Y01pbnV0ZXMgPSB1dGNNaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25Ib3VyfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgdXRjSG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENNaW51dGVzKDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0hvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjSG91cjtcbmV4cG9ydCB2YXIgdXRjSG91cnMgPSB1dGNIb3VyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5fSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgdXRjRGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNEYXk7XG5leHBvcnQgdmFyIHV0Y0RheXMgPSB1dGNEYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG5mdW5jdGlvbiB1dGNXZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSAoZGF0ZS5nZXRVVENEYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5ID0gdXRjV2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5ID0gdXRjV2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheSA9IHV0Y1dlZWtkYXkoMik7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheSA9IHV0Y1dlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5ID0gdXRjV2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5ID0gdXRjV2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXkgPSB1dGNXZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHV0Y1N1bmRheXMgPSB1dGNTdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y01vbmRheXMgPSB1dGNNb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5cyA9IHV0Y1dlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXlzID0gdXRjVGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheXMgPSB1dGNGcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5cyA9IHV0Y1NhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciB1dGNZZWFyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldFVUQ0Z1bGxZZWFyKCkgLSBzdGFydC5nZXRVVENGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnV0Y1llYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRVVENGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1dGNZZWFyO1xuZXhwb3J0IHZhciB1dGNZZWFycyA9IHV0Y1llYXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIHV0Y01vbnRoID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0RhdGUoMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoZGF0ZS5nZXRVVENNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDTW9udGgoKSAtIHN0YXJ0LmdldFVUQ01vbnRoKCkgKyAoZW5kLmdldFVUQ0Z1bGxZZWFyKCkgLSBzdGFydC5nZXRVVENGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNb250aCgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y01vbnRoO1xuZXhwb3J0IHZhciB1dGNNb250aHMgPSB1dGNNb250aC5yYW5nZTtcbiIsImltcG9ydCB7XG4gIHRpbWVEYXksXG4gIHRpbWVTdW5kYXksXG4gIHRpbWVNb25kYXksXG4gIHRpbWVUaHVyc2RheSxcbiAgdGltZVllYXIsXG4gIHV0Y0RheSxcbiAgdXRjU3VuZGF5LFxuICB1dGNNb25kYXksXG4gIHV0Y1RodXJzZGF5LFxuICB1dGNZZWFyXG59IGZyb20gXCJkMy10aW1lXCI7XG5cbmZ1bmN0aW9uIGxvY2FsRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG59XG5cbmZ1bmN0aW9uIHV0Y0RhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQygtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG59XG5cbmZ1bmN0aW9uIG5ld1llYXIoeSkge1xuICByZXR1cm4ge3k6IHksIG06IDAsIGQ6IDEsIEg6IDAsIE06IDAsIFM6IDAsIEw6IDB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2NhbGUobG9jYWxlKSB7XG4gIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXG4gICAgICBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLFxuICAgICAgbG9jYWxlX3RpbWUgPSBsb2NhbGUudGltZSxcbiAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXG4gICAgICBsb2NhbGVfd2Vla2RheXMgPSBsb2NhbGUuZGF5cyxcbiAgICAgIGxvY2FsZV9zaG9ydFdlZWtkYXlzID0gbG9jYWxlLnNob3J0RGF5cyxcbiAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gIHZhciBwZXJpb2RSZSA9IGZvcm1hdFJlKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHBlcmlvZExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfcGVyaW9kcyksXG4gICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgd2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgbW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9tb250aHMpLFxuICAgICAgbW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksXG4gICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxuICAgICAgc2hvcnRNb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRNb250aHMpO1xuXG4gIHZhciBmb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFdlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFNob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdE1vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdEhvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0SG91cjEyLFxuICAgIFwialwiOiBmb3JtYXREYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdE1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0TW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdE1pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFBlcmlvZCxcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFNlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFllYXIsXG4gICAgXCJZXCI6IGZvcm1hdEZ1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciB1dGNGb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRVVENTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFVUQ1dlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFVUQ1Nob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdFVUQ01vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRVVENNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdFVUQ0hvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0VVRDSG91cjEyLFxuICAgIFwialwiOiBmb3JtYXRVVENEYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdFVUQ01pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0VVRDTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdFVUQ01pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFVUQ1BlcmlvZCxcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFVUQ1NlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFVUQ1llYXIsXG4gICAgXCJZXCI6IGZvcm1hdFVUQ0Z1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRVVENab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciBwYXJzZXMgPSB7XG4gICAgXCJhXCI6IHBhcnNlU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBwYXJzZVdlZWtkYXksXG4gICAgXCJiXCI6IHBhcnNlU2hvcnRNb250aCxcbiAgICBcIkJcIjogcGFyc2VNb250aCxcbiAgICBcImNcIjogcGFyc2VMb2NhbGVEYXRlVGltZSxcbiAgICBcImRcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJmXCI6IHBhcnNlTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBwYXJzZUhvdXIyNCxcbiAgICBcIklcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJqXCI6IHBhcnNlRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBwYXJzZU1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogcGFyc2VNb250aE51bWJlcixcbiAgICBcIk1cIjogcGFyc2VNaW51dGVzLFxuICAgIFwicFwiOiBwYXJzZVBlcmlvZCxcbiAgICBcIlFcIjogcGFyc2VVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBwYXJzZVNlY29uZHMsXG4gICAgXCJ1XCI6IHBhcnNlV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogcGFyc2VXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBwYXJzZVdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IHBhcnNlV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogcGFyc2VXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBwYXJzZUxvY2FsZURhdGUsXG4gICAgXCJYXCI6IHBhcnNlTG9jYWxlVGltZSxcbiAgICBcInlcIjogcGFyc2VZZWFyLFxuICAgIFwiWVwiOiBwYXJzZUZ1bGxZZWFyLFxuICAgIFwiWlwiOiBwYXJzZVpvbmUsXG4gICAgXCIlXCI6IHBhcnNlTGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICAvLyBUaGVzZSByZWN1cnNpdmUgZGlyZWN0aXZlIGRlZmluaXRpb25zIG11c3QgYmUgZGVmZXJyZWQuXG4gIGZvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIGZvcm1hdHMpO1xuICB1dGNGb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCB1dGNGb3JtYXRzKTtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyLCBmb3JtYXRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBbXSxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBwYWQsXG4gICAgICAgICAgZm9ybWF0O1xuXG4gICAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSk7XG5cbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChzcGVjaWZpZXIuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgICAgIGlmICgocGFkID0gcGFkc1tjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpXSkgIT0gbnVsbCkgYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKTtcbiAgICAgICAgICBlbHNlIHBhZCA9IGMgPT09IFwiZVwiID8gXCIgXCIgOiBcIjBcIjtcbiAgICAgICAgICBpZiAoZm9ybWF0ID0gZm9ybWF0c1tjXSkgYyA9IGZvcm1hdChkYXRlLCBwYWQpO1xuICAgICAgICAgIHN0cmluZy5wdXNoKGMpO1xuICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgcmV0dXJuIHN0cmluZy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBuZXdQYXJzZShzcGVjaWZpZXIsIG5ld0RhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgZCA9IG5ld1llYXIoMTkwMCksXG4gICAgICAgICAgaSA9IHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nICs9IFwiXCIsIDApLFxuICAgICAgICAgIHdlZWssIGRheTtcbiAgICAgIGlmIChpICE9IHN0cmluZy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgICAvLyBJZiBhIFVOSVggdGltZXN0YW1wIGlzIHNwZWNpZmllZCwgcmV0dXJuIGl0LlxuICAgICAgaWYgKFwiUVwiIGluIGQpIHJldHVybiBuZXcgRGF0ZShkLlEpO1xuXG4gICAgICAvLyBUaGUgYW0tcG0gZmxhZyBpcyAwIGZvciBBTSwgYW5kIDEgZm9yIFBNLlxuICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XG5cbiAgICAgIC8vIENvbnZlcnQgZGF5LW9mLXdlZWsgYW5kIHdlZWstb2YteWVhciB0byBkYXktb2YteWVhci5cbiAgICAgIGlmIChcIlZcIiBpbiBkKSB7XG4gICAgICAgIGlmIChkLlYgPCAxIHx8IGQuViA+IDUzKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IDE7XG4gICAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgICAgd2VlayA9IHV0Y0RhdGUobmV3WWVhcihkLnkpKSwgZGF5ID0gd2Vlay5nZXRVVENEYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB1dGNNb25kYXkuY2VpbCh3ZWVrKSA6IHV0Y01vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gdXRjRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRVVENNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0VVRDRGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3ZWVrID0gbmV3RGF0ZShuZXdZZWFyKGQueSkpLCBkYXkgPSB3ZWVrLmdldERheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHRpbWVNb25kYXkuY2VpbCh3ZWVrKSA6IHRpbWVNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHRpbWVEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldE1vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXREYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gXCJ1XCIgaW4gZCA/IGQudSAlIDcgOiBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgIGRheSA9IFwiWlwiIGluIGQgPyB1dGNEYXRlKG5ld1llYXIoZC55KSkuZ2V0VVRDRGF5KCkgOiBuZXdEYXRlKG5ld1llYXIoZC55KSkuZ2V0RGF5KCk7XG4gICAgICAgIGQubSA9IDA7XG4gICAgICAgIGQuZCA9IFwiV1wiIGluIGQgPyAoZC53ICsgNikgJSA3ICsgZC5XICogNyAtIChkYXkgKyA1KSAlIDcgOiBkLncgKyBkLlUgKiA3IC0gKGRheSArIDYpICUgNztcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSB0aW1lIHpvbmUgaXMgc3BlY2lmaWVkLCBhbGwgZmllbGRzIGFyZSBpbnRlcnByZXRlZCBhcyBVVEMgYW5kIHRoZW5cbiAgICAgIC8vIG9mZnNldCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCB0aW1lIHpvbmUuXG4gICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICBkLkggKz0gZC5aIC8gMTAwIHwgMDtcbiAgICAgICAgZC5NICs9IGQuWiAlIDEwMDtcbiAgICAgICAgcmV0dXJuIHV0Y0RhdGUoZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgYWxsIGZpZWxkcyBhcmUgaW4gbG9jYWwgdGltZS5cbiAgICAgIHJldHVybiBuZXdEYXRlKGQpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZywgaikge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgIG0gPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICBjLFxuICAgICAgICBwYXJzZTtcblxuICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgaWYgKGogPj0gbSkgcmV0dXJuIC0xO1xuICAgICAgYyA9IHNwZWNpZmllci5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICBpZiAoYyA9PT0gMzcpIHtcbiAgICAgICAgYyA9IHNwZWNpZmllci5jaGFyQXQoaSsrKTtcbiAgICAgICAgcGFyc2UgPSBwYXJzZXNbYyBpbiBwYWRzID8gc3BlY2lmaWVyLmNoYXJBdChpKyspIDogY107XG4gICAgICAgIGlmICghcGFyc2UgfHwgKChqID0gcGFyc2UoZCwgc3RyaW5nLCBqKSkgPCAwKSkgcmV0dXJuIC0xO1xuICAgICAgfSBlbHNlIGlmIChjICE9IHN0cmluZy5jaGFyQ29kZUF0KGorKykpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBqO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VQZXJpb2QoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBwZXJpb2RSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5wID0gcGVyaW9kTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRXZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHNob3J0V2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSB3ZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydE1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRNb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBzaG9ydE1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBtb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBtb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZVRpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfdGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDUGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldFVUQ0hvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCBmb3JtYXRzKTtcbiAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBmO1xuICAgIH0sXG4gICAgcGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIgKz0gXCJcIiwgbG9jYWxEYXRlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH0sXG4gICAgdXRjRm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCB1dGNGb3JtYXRzKTtcbiAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBmO1xuICAgIH0sXG4gICAgdXRjUGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIsIHV0Y0RhdGUpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9O1xufVxuXG52YXIgcGFkcyA9IHtcIi1cIjogXCJcIiwgXCJfXCI6IFwiIFwiLCBcIjBcIjogXCIwXCJ9LFxuICAgIG51bWJlclJlID0gL15cXHMqXFxkKy8sIC8vIG5vdGU6IGlnbm9yZXMgbmV4dCBkaXJlY3RpdmVcbiAgICBwZXJjZW50UmUgPSAvXiUvLFxuICAgIHJlcXVvdGVSZSA9IC9bXFxcXF4kKis/fFtcXF0oKS57fV0vZztcblxuZnVuY3Rpb24gcGFkKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIixcbiAgICAgIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIixcbiAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVvdGUocykge1xuICByZXR1cm4gcy5yZXBsYWNlKHJlcXVvdGVSZSwgXCJcXFxcJCZcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJlKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TG9va3VwKG5hbWVzKSB7XG4gIHZhciBtYXAgPSB7fSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbWFwW25hbWVzW2ldLnRvTG93ZXJDYXNlKCldID0gaTtcbiAgcmV0dXJuIG1hcDtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVySVNPKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuViA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZ1bGxZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSArICgrblswXSA+IDY4ID8gMTkwMCA6IDIwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWm9uZShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSAvXihaKXwoWystXVxcZFxcZCkoPzo6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuWiA9IG5bMV0gPyAwIDogLShuWzJdICsgKG5bM10gfHwgXCIwMFwiKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNb250aE51bWJlcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLm0gPSBuWzBdIC0gMSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZlllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gMCwgZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIb3VyMjQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5IID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaW51dGVzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuTSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbGxpc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLkwgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pY3Jvc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLkwgPSBNYXRoLmZsb29yKG5bMF0gLyAxMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUxpdGVyYWxQZXJjZW50KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IHBlcmNlbnRSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IGkgKyBuWzBdLmxlbmd0aCA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXAoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLlEgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5RID0gKCtuWzBdKSAqIDEwMDAsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXREYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB0aW1lRGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pY3Jvc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkgKyBcIjAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNb250aE51bWJlcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNb250aCgpICsgMSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbnV0ZXMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0U2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRTZWNvbmRzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5KGQpIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIHJldHVybiBkYXkgPT09IDAgPyA3IDogZGF5O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh0aW1lU3VuZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdGltZVRodXJzZGF5KGQpIDogdGltZVRodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQodGltZVRodXJzZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSArICh0aW1lWWVhcihkKS5nZXREYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0RGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVNb25kYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0Wm9uZShkKSB7XG4gIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICByZXR1cm4gKHogPiAwID8gXCItXCIgOiAoeiAqPSAtMSwgXCIrXCIpKVxuICAgICAgKyBwYWQoeiAvIDYwIHwgMCwgXCIwXCIsIDIpXG4gICAgICArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENEYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB1dGNEYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDU2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkb3cgPSBkLmdldFVUQ0RheSgpO1xuICByZXR1cm4gZG93ID09PSAwID8gNyA6IGRvdztcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjU3VuZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlcklTTyhkLCBwKSB7XG4gIHZhciBkYXkgPSBkLmdldFVUQ0RheSgpO1xuICBkID0gKGRheSA+PSA0IHx8IGRheSA9PT0gMCkgPyB1dGNUaHVyc2RheShkKSA6IHV0Y1RodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQodXRjVGh1cnNkYXkuY291bnQodXRjWWVhcihkKSwgZCkgKyAodXRjWWVhcihkKS5nZXRVVENEYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0VVRDRGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y01vbmRheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1llYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0Z1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1pvbmUoKSB7XG4gIHJldHVybiBcIiswMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExpdGVyYWxQZXJjZW50KCkge1xuICByZXR1cm4gXCIlXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXAoZCkge1xuICByZXR1cm4gK2Q7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzKGQpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoK2QgLyAxMDAwKTtcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIHRpbWVGb3JtYXQ7XG5leHBvcnQgdmFyIHRpbWVQYXJzZTtcbmV4cG9ydCB2YXIgdXRjRm9ybWF0O1xuZXhwb3J0IHZhciB1dGNQYXJzZTtcblxuZGVmYXVsdExvY2FsZSh7XG4gIGRhdGVUaW1lOiBcIiV4LCAlWFwiLFxuICBkYXRlOiBcIiUtbS8lLWQvJVlcIixcbiAgdGltZTogXCIlLUk6JU06JVMgJXBcIixcbiAgcGVyaW9kczogW1wiQU1cIiwgXCJQTVwiXSxcbiAgZGF5czogW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIl0sXG4gIHNob3J0RGF5czogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICBtb250aHM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxuICBzaG9ydE1vbnRoczogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgdGltZUZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIHRpbWVQYXJzZSA9IGxvY2FsZS5wYXJzZTtcbiAgdXRjRm9ybWF0ID0gbG9jYWxlLnV0Y0Zvcm1hdDtcbiAgdXRjUGFyc2UgPSBsb2NhbGUudXRjUGFyc2U7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJpbXBvcnQge3V0Y0Zvcm1hdH0gZnJvbSBcIi4vZGVmYXVsdExvY2FsZVwiO1xuXG5leHBvcnQgdmFyIGlzb1NwZWNpZmllciA9IFwiJVktJW0tJWRUJUg6JU06JVMuJUxaXCI7XG5cbmZ1bmN0aW9uIGZvcm1hdElzb05hdGl2ZShkYXRlKSB7XG4gIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG59XG5cbnZhciBmb3JtYXRJc28gPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZ1xuICAgID8gZm9ybWF0SXNvTmF0aXZlXG4gICAgOiB1dGNGb3JtYXQoaXNvU3BlY2lmaWVyKTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0SXNvO1xuIiwiaW1wb3J0IHtpc29TcGVjaWZpZXJ9IGZyb20gXCIuL2lzb0Zvcm1hdFwiO1xuaW1wb3J0IHt1dGNQYXJzZX0gZnJvbSBcIi4vZGVmYXVsdExvY2FsZVwiO1xuXG5mdW5jdGlvbiBwYXJzZUlzb05hdGl2ZShzdHJpbmcpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZShzdHJpbmcpO1xuICByZXR1cm4gaXNOYU4oZGF0ZSkgPyBudWxsIDogZGF0ZTtcbn1cblxudmFyIHBhcnNlSXNvID0gK25ldyBEYXRlKFwiMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaXCIpXG4gICAgPyBwYXJzZUlzb05hdGl2ZVxuICAgIDogdXRjUGFyc2UoaXNvU3BlY2lmaWVyKTtcblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VJc287XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG4vKipcbiAqIENyZWF0ZXMgYW4gU1ZHXG4gKiBAcGFyYW0gaWQge1N0cmluZ30gYSBET00gZWxlbWVudCBJRCB0aGF0IHN0YXJ0cyB3aXRoIGEgXCIjXCJcbiAqIEBwYXJhbSB3aWR0aCB7TnVtZXJpY31cbiAqIEBwYXJhbSBoZWlnaHQge051bWVyaWN9XG4gKiBAcGFyYW0gbWFyZ2luIHtPYmplY3R9IHdpdGggdHdvIGF0dHJpYnV0ZXM6IHdpZHRoIGFuZCBoZWlnaHRcbiAqIEByZXR1cm4ge1NlbGVjdGlvbn0gdGhlIGQzIHNlbGVjdGlvbiBvYmplY3Qgb2YgdGhlIFNWR1xuICovXG5cbmltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3JhbmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrRG9tSWQoaWQpe1xuICAgIC8vIHRlc3QgaW5wdXQgcGFyYW1zXG4gICAgaWYgKCQoYCMke2lkfWApLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGxldCBlcnJvciA9IGBJbnB1dCBFcnJvcjogRE9NIElEICR7aWR9IGlzIG5vdCBmb3VuZC5gO1xuICAgICAgICBhbGVydChlcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBDYW52YXMgRDMgb2JqZWN0XG4gKiBAcGFyYW0gaWQge1N0cmluZ30gdGhlIHBhcmVudCBkb20gSURcbiAqIEBwYXJhbSB3aWR0aCB7TnVtZXJpY306IHRoZSBvdXRlciB3aWR0aFxuICogQHBhcmFtIGhlaWdodCB7TnVtZXJpY306IHRoZSBvdXRlciBoZWlnaHRcbiAqIEBwYXJhbSBtYXJnaW4ge09iamVjdH0gd2l0aCBhdHRyOiBsZWZ0LCB0b3BcbiAqIEBwYXJhbSBjYW52YXNJZCB7U3RyaW5nfVxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDYW52YXMoaWQsIHdpZHRoLCBoZWlnaHQsIG1hcmdpbiwgY2FudmFzSWQ9dW5kZWZpbmVkLCBwb3NpdGlvbj1cImFic29sdXRlXCIpe1xuICAgIGNoZWNrRG9tSWQoaWQpO1xuICAgIGlmKGNhbnZhc0lkPT09dW5kZWZpbmVkKSBjYW52YXNJZD1gJHtpZH0tY2FudmFzYDtcbiAgICByZXR1cm4gc2VsZWN0KGAjJHtpZH1gKVxuICAgICAgICAuYXBwZW5kKFwiY2FudmFzXCIpXG4gICAgICAgIC5hdHRyKCdpZCcsIGNhbnZhc0lkKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAgIC5zdHlsZShcInBvc2l0aW9uXCIsIHBvc2l0aW9uKSAvLyBUT0RPOiBzaG91bGQgdGhlIHBvc2l0aW9uIGJlIHVzZXItZGVmaW5lZD8gcmVsYXRpdmUgdnMgYWJzb2x1dGVcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gU1ZHIEQzIG9iamVjdFxuICogQHBhcmFtIGlkIHtTdHJpbmd9IHRoZSBwYXJlbnQgZG9tIElEXG4gKiBAcGFyYW0gd2lkdGgge051bWVyaWN9OiB0aGUgb3V0ZXIgd2lkdGhcbiAqIEBwYXJhbSBoZWlnaHQge051bWVyaWN9OiB0aGUgb3V0ZXIgaGVpZ2h0XG4gKiBAcGFyYW0gbWFyZ2luIHtPYmplY3R9IHdpdGggYXR0cjogbGVmdCwgdG9wXG4gKiBAcGFyYW0gc3ZnSWQge1N0cmluZ31cbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3ZnKGlkLCB3aWR0aCwgaGVpZ2h0LCBtYXJnaW4sIHN2Z0lkPXVuZGVmaW5lZCwgcG9zaXRpb249XCJyZWxhdGl2ZVwiKXtcbiAgICBjaGVja0RvbUlkKGlkKTtcbiAgICBpZiAoc3ZnSWQ9PT11bmRlZmluZWQpIHN2Z0lkPWAke2lkfS1zdmdgO1xuICAgIHJldHVybiBzZWxlY3QoXCIjXCIraWQpLmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgc3ZnSWQpXG4gICAgICAgIC8vIC5zdHlsZShcInBvc2l0aW9uXCIsIHBvc2l0aW9uKVxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCAke21hcmdpbi50b3B9KWApXG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBzdmdPYmpcbiAqIEBwYXJhbSBkb3dubG9hZEZpbGVOYW1lIHtTdHJpbmd9XG4gKiBAcGFyYW0gdGVtcERvd25sb2FkRGl2SWQge1N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRvd25sb2FkU3ZnKHN2Z09iaiwgZG93bmxvYWRGaWxlTmFtZSwgdGVtcERvd25sb2FkRGl2SWQpe1xuICAgIGNvbnNvbGUubG9nKHN2Z09iaik7XG4gICAgdmFyICRzdmdDb3B5ID0gc3ZnT2JqLmNsb25lKClcbiAgICAuYXR0cihcInZlcnNpb25cIiwgXCIxLjFcIilcbiAgICAuYXR0cihcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG5cbiAgICAvLyBwYXJzZSBhbmQgYWRkIHRoZSBDU1Mgc3R5bGluZyB1c2VkIGJ5IHRoZSBTVkdcbiAgICB2YXIgc3R5bGVzID0gcGFyc2VDc3NTdHlsZXMoc3ZnT2JqLmdldCgpKTtcbiAgICAkc3ZnQ29weS5wcmVwZW5kKHN0eWxlcyk7XG5cbiAgICAkKFwiI1wiICsgdGVtcERvd25sb2FkRGl2SWQpLmh0bWwoJycpLmhpZGUoKTtcbiAgICB2YXIgc3ZnSHRtbCA9ICQoXCIjXCIgKyB0ZW1wRG93bmxvYWREaXZJZCkuYXBwZW5kKCRzdmdDb3B5KS5odG1sKCk7XG5cbiAgICB2YXIgc3ZnQmxvYiA9IG5ldyBCbG9iKFtzdmdIdG1sXSwge3R5cGU6IFwiaW1hZ2Uvc3ZnK3htbFwifSk7XG4gICAgc2F2ZUFzKHN2Z0Jsb2IsIGRvd25sb2FkRmlsZU5hbWUpO1xuXG4gICAgLy8gY2xlYXIgdGhlIHRlbXAgZG93bmxvYWQgZGl2XG4gICAgJChcIiNcIiArIHRlbXBEb3dubG9hZERpdklkKS5odG1sKCcnKS5oaWRlKCk7XG59XG4vKipcbiAqIEEgZnVuY3Rpb24gZm9yIHBhcnNpbmcgdGhlIENTUyBzdHlsZSBzaGVldCBhbmQgaW5jbHVkaW5nIHRoZSBzdHlsZSBwcm9wZXJ0aWVzIGluIHRoZSBkb3dubG9hZGFibGUgU1ZHLlxuICogQHBhcmFtIGRvbVxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNzc1N0eWxlcyAoZG9tKSB7XG4gICAgdmFyIHVzZWQgPSBcIlwiO1xuICAgIHZhciBzaGVldHMgPSBkb2N1bWVudC5zdHlsZVNoZWV0cztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2hlZXRzLmxlbmd0aDsgaSsrKSB7IC8vIFRPRE86IHdhbGsgdGhyb3VnaCB0aGlzIGJsb2NrIG9mIGNvZGVcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHNoZWV0c1tpXS5jc3NSdWxlcyA9PSBudWxsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHZhciBydWxlcyA9IHNoZWV0c1tpXS5jc3NSdWxlcztcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBydWxlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBydWxlID0gcnVsZXNbal07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihydWxlLnN0eWxlKSAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtcztcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZpbmcgYW55IHNlbGVjdG9yIHRleHQgaW5jbHVkaW5nIHN2ZyBlbGVtZW50IElEIC0tIGRvbSBhbHJlYWR5IHNlbGVjdHMgZm9yIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gcnVsZS5zZWxlY3RvclRleHQgPT09IHVuZGVmaW5lZD8gcnVsZS5zZWxlY3RvclRleHQgOiBydWxlLnNlbGVjdG9yVGV4dC5yZXBsYWNlKGAjJHtkb21bMF0uaWR9IGAsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgLy9Tb21lIHNlbGVjdG9ycyB3b24ndCB3b3JrLCBhbmQgbW9zdCBvZiB0aGVzZSBkb24ndCBtYXR0ZXIuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtcyA9ICQoZG9tKS5maW5kKHNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VkICs9IHJ1bGUuc2VsZWN0b3JUZXh0ICsgXCIgeyBcIiArIHJ1bGUuc3R5bGUuY3NzVGV4dCArIFwiIH1cXG5cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gSW4gRmlyZWZveCwgaWYgc3R5bGVzaGVldCBvcmlnaW5hdGVzIGZyb20gYSBkaWZmIGRvbWFpbixcbiAgICAgICAgICAgIC8vIHRyeWluZyB0byBhY2Nlc3MgdGhlIGNzc1J1bGVzIHdpbGwgdGhyb3cgYSBTZWN1cml0eUVycm9yLlxuICAgICAgICAgICAgLy8gSGVuY2UsIHdlIG11c3QgdXNlIGEgdHJ5L2NhdGNoIHRvIGhhbmRsZSB0aGlzIGluIEZpcmVmb3hcbiAgICAgICAgICAgIGlmIChlLm5hbWUgIT09ICdTZWN1cml0eUVycm9yJykgdGhyb3cgZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHMuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvY3NzJyk7XG4gICAgcy5pbm5lckhUTUwgPSBcIjwhW0NEQVRBW1xcblwiICsgdXNlZCArIFwiXFxuXV0+XCI7XG5cbiAgICByZXR1cm4gcztcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGxpc3Qgb2YgeCp5IGRhdGEgb2JqZWN0cyB3aXRoIHJhbmRvbSB2YWx1ZXNcbiAqIFRoZSBkYXRhIG9iamVjdCBoYXMgdGhpcyBzdHJ1Y3R1cmU6IHt4OiB4bGFiZWwsIHk6IHlsYWJlbCwgdmFsdWU6IHNvbWUgdmFsdWUsIGRpc3BsYXlWYWx1ZTogc29tZSB2YWx1ZX1cbiAqIEBwYXJhbSBwYXJcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tTWF0cml4KHBhcj17eDoyMCwgeToyMCwgc2NhbGVGYWN0b3I6MSwgZGl2ZXJnaW5nOmZhbHNlLCBidWJibGU6ZmFsc2V9KXtcbiAgICBsZXQgWCA9IHJhbmdlKDEsIHBhci54KzEpOyAvLyBnZW5lcmF0ZXMgYSAxLWJhc2VkIGxpc3QuXG4gICAgbGV0IFkgPSByYW5nZSgxLCBwYXIueSsxKTtcbiAgICBsZXQgZGF0YSA9IFtdO1xuICAgIFguZm9yRWFjaCgoeCk9PntcbiAgICAgICAgeCA9ICd4JyArIHgudG9TdHJpbmcoKTtcbiAgICAgICAgWS5mb3JFYWNoKCh5KT0+e1xuICAgICAgICAgICAgeSA9ICd5JyArIHkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGxldCB2ID0gTWF0aC5yYW5kb20oKSpwYXIuc2NhbGVGYWN0b3I7XG4gICAgICAgICAgICB2ID0gcGFyLmRpdmVyZ2luZyYmTWF0aC5yYW5kb20oKSA8IDAuNSA/IC12IDogdjsgLy8gcmFuZG9tbHkgYXNzaWduaW5nIG5lZ2F0aXZlIGFuZCBwb3NpdGl2ZSB2YWx1ZXNcbiAgICAgICAgICAgIGRhdGEucHVzaCh7XG4gICAgICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2LFxuICAgICAgICAgICAgICAgIGRpc3BsYXlWYWx1ZTogcGFyc2VGbG9hdCh2LnRvRXhwb25lbnRpYWwoKSkudG9QcmVjaXNpb24oMyksXG4gICAgICAgICAgICAgICAgcjogcGFyLmJ1YmJsZT9NYXRoLnJhbmRvbSgpKjMwOnVuZGVmaW5lZCAvLyBvbmx5IHJlbGV2YW50IHRvIGJ1YmJsZSBtYXBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgbGlzdCBvZiByYW5kb20gdmFsdWVzXG4gKiBAcGFyYW0gcGFyXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbUxpc3QocGFyPXtuOjEwMCwgc2NhbGVGYWN0b3I6MX0pIHtcbiAgICBsZXQgWCA9IHJhbmdlKDAsIHBhci5uKTsgLy8gZ2VuZXJhdGVzIGEgMS1iYXNlZCBsaXN0LlxuICAgIGxldCBkYXRhID0gW107XG4gICAgcmV0dXJuIFgubWFwKCh4KSA9PiBNYXRoLnJhbmRvbSgpICogcGFyLnNjYWxlRmFjdG9yKTtcblxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0R3RleFVybHMoKXtcbiAgICBjb25zdCBob3N0ID0gJ2h0dHBzOi8vZ3RleHBvcnRhbC5vcmcvcmVzdC92MS8nO1xuICAgIC8vIGNvbnN0IGhvc3QgPSAnbG9jYWwuZ3RleHBvcnRhbC5vcmcvcmVzdC92MS8nXG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gZ2VuZS1lcXRsIHZpc3VhbGl6ZXIgc3BlY2lmaWNcbiAgICAgICAgc2luZ2xlVGlzc3VlRXF0bDogaG9zdCArICdhc3NvY2lhdGlvbi9zaW5nbGVUaXNzdWVFcXRsP2Zvcm1hdD1qc29uJmRhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuICAgICAgICBsZDogaG9zdCArICdkYXRhc2V0L2xkP2Zvcm1hdD1qc29uJmRhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuICAgICAgICB0aXNzdWVTdW1tYXJ5OiBob3N0ICsgJ2RhdGFzZXQvdGlzc3VlU3VtbWFyeT9kYXRhc2V0SWQ9Z3RleF92NycsXG5cbiAgICAgICAgLy8gZXF0bCBEYXNoYm9hcmQgc3BlY2lmaWNcbiAgICAgICAgZHluZXF0bDogaG9zdCArICdhc3NvY2lhdGlvbi9keW5lcXRsJyxcbiAgICAgICAgc25wOiBob3N0ICsgJ3JlZmVyZW5jZS92YXJpYW50P2Zvcm1hdD1qc29uJnNucElkPScsXG4gICAgICAgIHZhcmlhbnRJZDogaG9zdCArICdkYXRhc2V0L3ZhcmlhbnQ/Zm9ybWF0PWpzb24mdmFyaWFudElkPScsXG5cbiAgICAgICAgLy8gdHJhbnNjcmlwdCwgZXhvbiwganVuY3Rpb24gZXhwcmVzc2lvbiBzcGVjaWZpY1xuICAgICAgICBleG9uRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuRXhvbkV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjcmaGNsdXN0ZXI9dHJ1ZSZnZW5jb2RlSWQ9JyxcbiAgICAgICAgdHJhbnNjcmlwdEV4cDogaG9zdCArICdleHByZXNzaW9uL21lZGlhblRyYW5zY3JpcHRFeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmhjbHVzdGVyPXRydWUmZ2VuY29kZUlkPScsXG4gICAgICAgIGp1bmN0aW9uRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmhjbHVzdGVyPXRydWUmZ2VuY29kZUlkPScsXG4gICAgICAgIHRyYW5zY3JpcHQ6IGhvc3QgKyAncmVmZXJlbmNlL3RyYW5zY3JpcHQ/ZGF0YXNldElkPWd0ZXhfdjcmZ2VuY29kZUlkPScsXG4gICAgICAgIGV4b246IGhvc3QgKyAncmVmZXJlbmNlL2V4b24/ZGF0YXNldElkPWd0ZXhfdjcmZ2VuY29kZUlkPScsXG4gICAgICAgIGdlbmVNb2RlbDogaG9zdCArICdkYXRhc2V0L2NvbGxhcHNlZEdlbmVNb2RlbEV4b24/ZGF0YXNldElkPWd0ZXhfdjcmZ2VuY29kZUlkPScsXG4gICAgICAgIGdlbmVNb2RlbFVuZmlsdGVyZWQ6IGhvc3QgKyAnZGF0YXNldC9mdWxsQ29sbGFwc2VkR2VuZU1vZGVsRXhvbj9kYXRhc2V0SWQ9Z3RleF92NyZnZW5jb2RlSWQ9JyxcblxuICAgICAgICAvLyBnZW5lIGV4cHJlc3Npb24gdmlvbGluIHBsb3Qgc3BlY2lmaWNcbiAgICAgICAgZ2VuZUV4cDogaG9zdCArICdleHByZXNzaW9uL2dlbmVFeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuXG4gICAgICAgIC8vIGdlbmUgZXhwcmVzc2lvbiBoZWF0IG1hcCBzcGVjaWZpY1xuICAgICAgICBtZWRHZW5lRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuR2VuZUV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjcmaGNsdXN0ZXI9dHJ1ZSZwYWdlU2l6ZT0xMDAwMCcsXG5cbiAgICAgICAgLy8gZ2VuZSBleHByZXNzaW9uIGJveHBsb3Qgc3BlY2lmaWNcbiAgICAgICAgZ2VuZUV4cEJveHBsb3Q6IGhvc3QgKyAnZXhwcmVzc2lvbi9nZW5lRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92NyZib3hwbG90RGV0YWlsPWZ1bGwmZ2VuY29kZUlkPScsXG5cbiAgICAgICAgLy8gdG9wIGV4cHJlc3NlZCBnZW5lIGV4cHJlc3Npb24gc3BlY2lmaWNcbiAgICAgICAgdG9wSW5UaXNzdWVGaWx0ZXJlZDogaG9zdCArICdleHByZXNzaW9uL3RvcEV4cHJlc3NlZEdlbmU/ZGF0YXNldElkPWd0ZXhfdjcmZmlsdGVyTXRHZW5lPXRydWUmc29ydEJ5PW1lZGlhbiZzb3J0RGlyZWN0aW9uPWRlc2MmcGFnZVNpemU9NTAmdGlzc3VlU2l0ZURldGFpbElkPScsXG4gICAgICAgIHRvcEluVGlzc3VlOiBob3N0ICsgJ2V4cHJlc3Npb24vdG9wRXhwcmVzc2VkR2VuZT9kYXRhc2V0SWQ9Z3RleF92NyZzb3J0Qnk9bWVkaWFuJnNvcnREaXJlY3Rpb249ZGVzYyZwYWdlU2l6ZT01MCZ0aXNzdWVTaXRlRGV0YWlsSWQ9JyxcblxuICAgICAgICBnZW5lSWQ6IGhvc3QgKyAncmVmZXJlbmNlL2dlbmU/Zm9ybWF0PWpzb24mZ2VuY29kZVZlcnNpb249djE5Jmdlbm9tZUJ1aWxkPUdSQ2gzNyUyRmhnMTkmZ2VuZUlkPScsXG5cbiAgICAgICAgLy8gdGlzc3VlIG1lbnUgc3BlY2lmaWNcbiAgICAgICAgLy8gVE9ETzogcmVtb3ZlIHJlZHVuZGFudCBVUkxzXG4gICAgICAgIHRpc3N1ZTogIGhvc3QgKyAnbWV0YWRhdGEvdGlzc3VlU2l0ZURldGFpbD9mb3JtYXQ9anNvbicsXG4gICAgICAgIHRpc3N1ZVNpdGVzOiBob3N0ICsgJ21ldGFkYXRhL3Rpc3N1ZVNpdGVEZXRhaWw/Zm9ybWF0PWpzb24nLFxuXG4gICAgICAgIC8vIGxvY2FsIHN0YXRpYyBmaWxlc1xuICAgICAgICBzYW1wbGU6ICd0bXBTdW1tYXJ5RGF0YS9ndGV4LlNhbXBsZS5jc3YnLFxuICAgICAgICBybmFzZXFDcmFtOiAndG1wU3VtbWFyeURhdGEvcm5hc2VxX2NyYW1fZmlsZXNfdjdfZGJHYVBfMDExNTE2LnR4dCcsXG4gICAgICAgIHdnc0NyYW06ICd0bXBTdW1tYXJ5RGF0YS93Z3NfY3JhbV9maWxlc192N19oZzM4X2RiR2FQXzAxMTUxNi50eHQnLFxuXG4gICAgICAgIC8vIGZpcmVDbG91ZFxuICAgICAgICBmY0JpbGxpbmc6ICdodHRwczovL2FwaS5maXJlY2xvdWQub3JnL2FwaS9wcm9maWxlL2JpbGxpbmcnLFxuICAgICAgICBmY1dvcmtTcGFjZTogJ2h0dHBzOi8vYXBpLmZpcmVjbG91ZC5vcmcvYXBpL3dvcmtzcGFjZXMnLFxuICAgICAgICBmY1BvcnRhbFdvcmtTcGFjZTogJ2h0dHBzOi8vcG9ydGFsLmZpcmVjbG91ZC5vcmcvI3dvcmtzcGFjZXMnXG4gICAgfVxufVxuXG4vKipcbiAqIHBhcnNlIEdURXggZHluZXF0bCBqc29uXG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gZnJvbSBHVEV4IGR5bmVxdGwgd2ViIHNlcnZpY2VcbiAqIEByZXR1cm5zIGRhdGEge0pTT059IG1vZGlmaWVkIGRhdGFcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUR5bkVxdGwoanNvbil7XG4gICAgLy8gY2hlY2sgcmVxdWlyZWQganNvbiBhdHRyaWJ1dGVzXG4gICAgWydkYXRhJywgJ2dlbm90eXBlcycsICdwVmFsdWUnLCAncFZhbHVlVGhyZXNob2xkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGQpKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoanNvbik7XG4gICAgICAgICAgICB0aHJvdyAnUGFyc2UgRXJyb3I6IFJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBkO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBqc29uLmV4cHJlc3Npb25fdmFsdWVzID0ganNvbi5kYXRhLm1hcCgoZCk9PnBhcnNlRmxvYXQoZCkpO1xuICAgIGpzb24uZ2Vub3R5cGVzID0ganNvbi5nZW5vdHlwZXMubWFwKChkKT0+cGFyc2VGbG9hdChkKSk7XG5cbiAgICBqc29uLmhvbW9SZWZFeHAgPSBqc29uLmV4cHJlc3Npb25fdmFsdWVzLmZpbHRlcigoZCxpKSA9PiB7XG4gICAgICAgIHJldHVybiBqc29uLmdlbm90eXBlc1tpXSA9PSAwXG4gICAgfSk7XG4gICAganNvbi5ob21vQWx0RXhwID0ganNvbi5leHByZXNzaW9uX3ZhbHVlcy5maWx0ZXIoKGQsaSkgPT4ge1xuICAgICAgICByZXR1cm4ganNvbi5nZW5vdHlwZXNbaV0gPT0gMlxuICAgIH0pO1xuICAgIGpzb24uaGV0ZXJvRXhwID0ganNvbi5leHByZXNzaW9uX3ZhbHVlcy5maWx0ZXIoKGQsaSkgPT4ge1xuICAgICAgICByZXR1cm4ganNvbi5nZW5vdHlwZXNbaV0gPT0gMVxuICAgIH0pO1xuXG4gICAgLy8gZ2VuZXJhdGUgZ2Vub3R5cGUgdGV4dCBsYWJlbHNcbiAgICBsZXQgcmVmID0ganNvbi52YXJpYW50SWQuc3BsaXQoL18vKVsyXTtcbiAgICBsZXQgYWx0ID0ganNvbi52YXJpYW50SWQuc3BsaXQoL18vKVszXTtcbiAgICBqc29uLmhldCA9IHJlZiArIGFsdDtcbiAgICBqc29uLnJlZiA9IHJlZiArIHJlZjtcbiAgICBqc29uLmFsdCA9IGFsdCArIGFsdDtcblxuICAgIHJldHVybiBqc29uO1xufVxuXG5cbi8qKlxuICogUGFyc2UgdGhlIHNpbmdsZSB0aXNzdWUgZXF0bHMgZnJvbSBHVEV4IHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEBwYXJhbSB0aXNzdWVTaXRlVGFibGUge0pzb259IG9wdGlvbmFsIGZvciBtYXBwaW5nIHRpc3N1ZVNpdGVEZXRhaWxJZCB0byB0aXNzdWVTaXRlRGV0YWlsLCBhIGRpY3Rpb25hcnkgb2YgdGlzc3VlU2l0ZSBvYmplY3RzICh3aXRoIHRoZSBhdHRyIHRpc3N1ZVNpdGVEZXRhaWwpIGluZGV4ZWQgYnkgdGlzc3VlU2l0ZURldGFpbElkLCBhbmRcbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBlcXRscyB3aXRoIGF0dHJpYnV0ZXMgcmVxdWlyZWQgZm9yIEdFViByZW5kZXJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU2luZ2xlVGlzc3VlRXF0bHMoZGF0YSwgdGlzc3VlU2l0ZVRhYmxlID0gdW5kZWZpbmVkKXtcbiAgICBjb25zdCBhdHRyID0gJ3NpbmdsZVRpc3N1ZUVxdGwnO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGF0dHJpYnV0ZSBpcyBub3QgZm91bmQ6IFwiICsgYXR0cjtcbiAgICBbJ3ZhcmlhbnRJZCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnbmVzJywgJ3BWYWx1ZSddLmZvckVhY2goKGspPT57XG4gICAgICAgIGlmICghZGF0YVthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShrKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICB9KTtcblxuXG4gICAgcmV0dXJuIGRhdGFbYXR0cl0ubWFwKChkKT0+e1xuICAgICAgICBkLnggPSBkLnZhcmlhbnRJZDtcbiAgICAgICAgZC5kaXNwbGF5WCA9IGdlbmVyYXRlU2hvcnRWYXJpYW50SWQoZC52YXJpYW50SWQpO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgaWYgKHRpc3N1ZVNpdGVUYWJsZSkgZC5kaXNwbGF5WSA9IHRpc3N1ZVNpdGVUYWJsZVtkLnRpc3N1ZVNpdGVEZXRhaWxJZF0udGlzc3VlU2l0ZURldGFpbDtcbiAgICAgICAgZC52YWx1ZSA9IGQubmVzO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IGQubmVzLnRvUHJlY2lzaW9uKDMpO1xuICAgICAgICBkLnIgPSAtTWF0aC5sb2cxMChkLnBWYWx1ZSk7IC8vIHNldCByIHRvIGJlIHRoZSAtbG9nMTAocC12YWx1ZSlcbiAgICAgICAgZC5yRGlzcGxheVZhbHVlID0gcGFyc2VGbG9hdChkLnBWYWx1ZS50b0V4cG9uZW50aWFsKCkpLnRvUHJlY2lzaW9uKDMpO1xuICAgICAgICByZXR1cm4gZDtcbiAgICB9KVxufVxuXG4vKipcbiAqIFBhcnNlIHRoZSBnZW5lcyBmcm9tIEdURXggd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHJldHVybnMge0xpc3R9IG9mIGdlbmVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVzKGRhdGEsIHNpbmdsZT1mYWxzZSwgZ2VuZUlkPW51bGwpe1xuICAgIGNvbnN0IGF0dHIgPSAnZ2VuZSc7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93IFwiUGFyc2luZyBFcnJvcjogYXR0cmlidXRlIGdlbmUgZG9lc24ndCBleGlzdC5cIjtcbiAgICBpZiAoZGF0YS5nZW5lLmxlbmd0aD09MCl7XG4gICAgICAgICBhbGVydChcIk5vIGdlbmUgaXMgZm91bmRcIik7XG4gICAgICAgICB0aHJvdyBcIkZhdGFsIEVycm9yOiBnZW5lKHMpIG5vdCBmb3VuZFwiO1xuICAgICB9XG4gICAgaWYgKHNpbmdsZSl7XG4gICAgICAgIGlmIChnZW5lSWQgPT09IG51bGwpIHRocm93IFwiUGxlYXNlIHByb3ZpZGUgYSBnZW5lIElEIGZvciBzZWFyY2ggcmVzdWx0cyB2YWxpZGF0aW9uXCI7XG4gICAgICAgIGlmIChkYXRhLmdlbmUubGVuZ3RoPjEpIHsgLy8gd2hlbiBhIHNpbmdsZSBnZW5lIElEIGhhcyBtdWx0aXBsZSBtYXRjaGVzXG4gICAgICAgICAgICAgbGV0IGZpbHRlcmVkID0gZGF0YS5nZW5lLmZpbHRlcigoZyk9PntcbiAgICAgICAgICAgICAgICAgcmV0dXJuIGcuZ2VuZVN5bWJvbFVwcGVyPT1nZW5lSWQudG9VcHBlckNhc2UoKSB8fCBnLmdlbmNvZGVJZCA9PSBnZW5lSWQudG9VcHBlckNhc2UoKVxuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIGlmIChmaWx0ZXJlZC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgIGFsZXJ0KFwiRmF0YWwgRXJyb3I6IGlucHV0IGdlbmUgSUQgaXMgbm90IHVuaXF1ZS5cIik7XG4gICAgICAgICAgICAgICAgIHRocm93IFwiRmF0YWwgRXJyb3I6IGlucHV0IGdlbmUgSUQgaXMgbm90IHVuaXF1ZS5cIjtcbiAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgfSBlbHNlIGlmIChmaWx0ZXJlZC5sZW5ndGggPT0gMCl7XG4gICAgICAgICAgICAgICAgIGFsZXJ0KFwiTm8gZ2VuZSBpcyBmb3VuZCB3aXRoIFwiICsgZ2VuZUlkKTtcbiAgICAgICAgICAgICAgICAgdGhyb3cgXCJGYXRhbCBFcnJvcjogZ2VuZSBub3QgZm91bmRcIjtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgZGF0YS5nZW5lID0gZmlsdGVyZWRcbiAgICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgICByZXR1cm4gZGF0YS5nZW5lWzBdXG4gICAgfVxuICAgIGVsc2UgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZXNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHJldHVybnMge0xpc3R9IG9mIHRpc3N1ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3Vlcyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ3Rpc3N1ZVNpdGVEZXRhaWwnO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIGNvbnN0IHRpc3N1ZXMgPSBqc29uW2F0dHJdO1xuXG4gICAgLy8gc2FuaXR5IGNoZWNrXG4gICAgWyd0aXNzdWVTaXRlRGV0YWlsSWQnLCAndGlzc3VlU2l0ZURldGFpbCcsICdjb2xvckhleCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghdGlzc3Vlc1swXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0ciBpcyBtaXNzaW5nOiAnICsgZDtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aXNzdWVzO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSB0aXNzdWVzIGFuZCByZXR1cm4gYSBsb29rdXAgdGFibGUgaW5kZXhlZCBieSB0aXNzdWVTaXRlRGV0YWlsSWRcbiAqIEBwYXJhbSBqc29uIGZyb20gd2ViIHNlcnZpY2UgdGlzc3VlU2l0ZURldGFpbFxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpc3N1ZURpY3QoanNvbil7XG4gICAgY29uc3QgYXR0ciA9ICd0aXNzdWVTaXRlRGV0YWlsJztcbiAgICBpZighanNvbi5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0ciBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBjb25zdCB0aXNzdWVzID0ganNvblthdHRyXTtcbiAgICAvLyBzYW5pdHkgY2hlY2tcbiAgICBbJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICd0aXNzdWVTaXRlRGV0YWlsJywgJ2NvbG9ySGV4J10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCF0aXNzdWVzWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6ICcgKyBkO1xuICAgIH0pO1xuICAgIHJldHVybiB0aXNzdWVzLnJlZHVjZSgoYXJyLCBkKT0+e2FycltkLnRpc3N1ZVNpdGVEZXRhaWxJZF0gPSBkOyByZXR1cm4gYXJyO30se30pO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSB0aXNzdWVzIHNhbXBsZSBjb3VudHMsIEdURXggcmVsZWFzZSBzcGVjaWZpY1xuICogQHBhcmFtIGpzb24gZnJvbSB3ZWIgc2VydmljZSB0aXNzdWVTdW1tYXJ5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpc3N1ZVNhbXBsZUNvdW50cyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ3Rpc3N1ZVN1bW1hcnknO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIGNvbnN0IHRpc3N1ZXMgPSBqc29uW2F0dHJdO1xuXG4gICAgLy8gY2hlY2sganNvbiBzdHJ1Y3R1cmVcbiAgICBjb25zdCB0aXNzdWUgPSB0aXNzdWVzWzBdO1xuICAgIGlmICghdGlzc3VlLmhhc093blByb3BlcnR5KCd0aXNzdWVTaXRlRGV0YWlsSWQnKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGF0dHIgaXMgbWlzc2luZzogdGlzc3VlU2l0ZURldGFpbElkJztcbiAgICBpZiAoIXRpc3N1ZS5oYXNPd25Qcm9wZXJ0eSgncm5hU2VxQW5kR2Vub3R5cGVTYW1wbGVDb3VudCcpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQgYXR0ciBpcyBtaXNzaW5nOiBybmFTZXFBbmRHZW5vdHlwZVNhbXBsZUNvdW50JztcbiAgICByZXR1cm4gdGlzc3Vlcztcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgdGlzc3VlIGdyb3Vwc1xuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcGFyYW0gZm9yRXF0bCB7Qm9vbGVhbn0gcmVzdHJpY3QgdG8gZXF0bCB0aXNzdWVzXG4gKiBAcmV0dXJucyB7RGljdGlvbmFyeX0gb2YgbGlzdHMgb2YgdGlzc3VlcyBpbmRleGVkIGJ5IHRoZSB0aXNzdWUgZ3JvdXAgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaXNzdWVTaXRlcyhkYXRhLCBmb3JFcXRsPWZhbHNlKXtcbiAgICAvLyB0aGUgbGlzdCBvZiBpbnZhbGlkZSBlcXRsIHRpc3N1ZXMgZHVlIHRvIHNhbXBsZSBzaXplIDwgNzBcbiAgICAvLyBhIGhhcmQtY29kZWQgbGlzdCBiZWNhdXNlIHRoZSBzYW1wbGUgc2l6ZSBpcyBub3QgZWFzeSB0byByZXRyaWV2ZVxuICAgIGNvbnN0IGludmFsaWRUaXNzdWVzID0gWydCbGFkZGVyJywgJ0NlcnZpeF9FY3RvY2Vydml4JywgJ0NlcnZpeF9FbmRvY2Vydml4JywgJ0ZhbGxvcGlhbl9UdWJlJywgJ0tpZG5leV9Db3J0ZXgnXTtcblxuICAgIGNvbnN0IGF0dHIgPSAndGlzc3VlU2l0ZURldGFpbCc7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBsZXQgdGlzc3VlcyA9IGRhdGFbYXR0cl07XG4gICAgWyd0aXNzdWVTaXRlJywndGlzc3VlU2l0ZURldGFpbElkJywndGlzc3VlU2l0ZURldGFpbCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghdGlzc3Vlc1swXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgYHBhcnNlVGlzc3VlU2l0ZXMgYXR0ciBlcnJvci4gJHtkfSBpcyBub3QgZm91bmRgO1xuICAgIH0pO1xuICAgIHRpc3N1ZXMgPSBmb3JFcXRsPT1mYWxzZT90aXNzdWVzOnRpc3N1ZXMuZmlsdGVyKChkKT0+e3JldHVybiAhaW52YWxpZFRpc3N1ZXMuaW5jbHVkZXMoZC50aXNzdWVTaXRlRGV0YWlsSWQpfSk7IC8vIGFuIGFycmF5IG9mIHRpc3N1ZVNpdGVEZXRhaWxJZCBvYmplY3RzXG5cbiAgICAvLyBidWlsZCB0aGUgdGlzc3VlR3JvdXBzIGxvb2t1cCBkaWN0aW9uYXJ5IGluZGV4ZWQgYnkgdGhlIHRpc3N1ZSBncm91cCBuYW1lIChpLmUuIHRoZSB0aXNzdWUgbWFpbiBzaXRlIG5hbWUpXG4gICAgbGV0IHRpc3N1ZUdyb3VwcyA9IHRpc3N1ZXMucmVkdWNlKChhcnIsIGQpPT57XG4gICAgICAgIGxldCBncm91cE5hbWUgPSBkLnRpc3N1ZVNpdGU7XG4gICAgICAgIGxldCBzaXRlID0ge1xuICAgICAgICAgICAgaWQ6IGQudGlzc3VlU2l0ZURldGFpbElkLFxuICAgICAgICAgICAgbmFtZTogZC50aXNzdWVTaXRlRGV0YWlsXG4gICAgICAgIH07XG4gICAgICAgIGlmICghYXJyLmhhc093blByb3BlcnR5KGdyb3VwTmFtZSkpIGFycltncm91cE5hbWVdID0gW107IC8vIGluaXRpYXRlIGFuIGFycmF5XG4gICAgICAgIGFycltncm91cE5hbWVdLnB1c2goc2l0ZSk7XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfSwge30pO1xuXG4gICAgLy8gbW9kaWZ5IHRoZSB0aXNzdWUgZ3JvdXBzIHRoYXQgaGF2ZSBvbmx5IGEgc2luZ2xlIHNpdGVcbiAgICAvLyBieSByZXBsYWNpbmcgdGhlIGdyb3VwJ3MgbmFtZSB3aXRoIHRoZSBzaW5nbGUgc2l0ZSdzIG5hbWUgLS0gcmVzdWx0aW5nIGEgYmV0dGVyIEFscGhhYmV0aWNhbCBvcmRlciBvZiB0aGUgdGlzc3VlIGdyb3Vwc1xuXG4gICAgT2JqZWN0LmtleXModGlzc3VlR3JvdXBzKS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAodGlzc3VlR3JvdXBzW2RdLmxlbmd0aCA9PSAxKXsgLy8gYSBzaW5nbGUtc2l0ZSBncm91cFxuICAgICAgICAgICAgbGV0IHNpdGUgPSB0aXNzdWVHcm91cHNbZF1bMF07IC8vIHRoZSBzaW5nbGUgc2l0ZVxuICAgICAgICAgICAgZGVsZXRlIHRpc3N1ZUdyb3Vwc1tkXTsgLy8gcmVtb3ZlIHRoZSBvbGQgZ3JvdXAgaW4gdGhlIGRpY3Rpb25hcnlcbiAgICAgICAgICAgIHRpc3N1ZUdyb3Vwc1tzaXRlLm5hbWVdID0gW3NpdGVdOyAvLyBjcmVhdGUgYSBuZXcgZ3JvdXAgd2l0aCB0aGUgc2l0ZSdzIG5hbWVcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aXNzdWVHcm91cHM7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGV4b25zXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEBwYXJhbSBmdWxsIHtCb29sZWFufVxuICogQHJldHVybnMge0xpc3R9IG9mIGV4b25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1vZGVsRXhvbnMoanNvbil7XG4gICAgY29uc3QgYXR0ciA9ICdjb2xsYXBzZWRHZW5lTW9kZWxFeG9uJztcbiAgICBpZighanNvbi5oYXNPd25Qcm9wZXJ0eShhdHRyKSl7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoanNvbik7XG4gICAgICAgIHRocm93ICdQYXJzaW5nIEVycm9yOiBSZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICB9XG4gICAgLy8gc2FuaXR5IGNoZWNrXG4gICAgWydzdGFydCcsICdlbmQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWpzb25bYXR0cl1bMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93ICdQYXJzaW5nIEVycm9yOiBSZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgZDtcbiAgICB9KTtcbiAgICByZXR1cm4ganNvblthdHRyXS5tYXAoKGQpPT57XG4gICAgICAgIGQuY2hyb21TdGFydCA9IGQuc3RhcnQ7XG4gICAgICAgIGQuY2hyb21FbmQgPSBkLmVuZDtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGp1bmN0aW9uc1xuICogQHBhcmFtIGRhdGFcbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBqdW5jdGlvbnNcbiAqIC8vIGp1bmN0aW9uIGFubm90YXRpb25zIGFyZSBub3Qgc3RvcmVkIGluIE1vbmdvXG4gICAgLy8gc28gaGVyZSB3ZSB1c2UgdGhlIGp1bmN0aW9uIGV4cHJlc3Npb24gd2ViIHNlcnZpY2UgdG8gcGFyc2UgdGhlIGp1bmN0aW9uIElEIGZvciBpdHMgZ2Vub21pYyBsb2NhdGlvblxuICAgIC8vIGFzc3VtaW5nIHRoYXQgZWFjaCB0aXNzdWUgaGFzIHRoZSBzYW1lIGp1bmN0aW9ucyxcbiAgICAvLyB0byBncmFiIGFsbCB0aGUga25vd24ganVuY3Rpb25zIG9mIGEgZ2VuZSwgd2Ugb25seSBuZWVkIHRvIHF1ZXJ5IG9uZSB0aXNzdWVcbiAgICAvLyBoZXJlIHdlIGFyYml0cmFyaWx5IHBpY2sgTGl2ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUp1bmN0aW9ucyhqc29uKXtcblxuICAgIGNvbnN0IGF0dHIgPSAnbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uJztcbiAgICBpZighanNvbi5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHBhcnNlSnVuY3Rpb25zIGlucHV0IGVycm9yLiAnICsgYXR0cjtcblxuICAgIC8vIGNoZWNrIHJlcXVpcmVkIGpzb24gYXR0cmlidXRlc1xuICAgIFsndGlzc3VlU2l0ZURldGFpbElkJywgJ2p1bmN0aW9uSWQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICAvLyB1c2UgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGpzb24gb2JqZWN0cyBhcyBhIHRlc3QgY2FzZVxuICAgICAgICBpZighanNvblthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShkKSl7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGpzb25bYXR0cl1bMF0pO1xuICAgICAgICAgICAgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGp1bmN0aW9uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgZDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBqc29uW2F0dHJdLmZpbHRlcigoZCk9PmQudGlzc3VlU2l0ZURldGFpbElkPT0nTGl2ZXInKVxuICAgICAgICAgICAgICAgICAgICAubWFwKChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG9zID0gZC5qdW5jdGlvbklkLnNwbGl0KCdfJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tOiBwb3NbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21TdGFydDogcG9zWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tRW5kOiBwb3NbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganVuY3Rpb25JZDogZC5qdW5jdGlvbklkXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXMgZnJvbSB0aGUgR1RFeCB3ZWIgc2VydmljZTogJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIHJldHVybnMgYSBkaWN0aW9uYXJ5IG9mIHRyYW5zY3JpcHQgZXhvbiBvYmplY3QgbGlzdHMgaW5kZXhlZCBieSB0cmFuc2NyaXB0IElEcyAtLSBFTlNUIElEc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFeG9ucyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ2V4b24nO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogZXhvbic7XG4gICAgcmV0dXJuIGpzb25bYXR0cl0ucmVkdWNlKChhLCBkKT0+e1xuICAgICAgICAvLyBjaGVjayByZXF1aXJlZCBhdHRyaWJ1dGVzXG4gICAgICAgIFsndHJhbnNjcmlwdElkJywgJ2Nocm9tb3NvbWUnLCAnc3RhcnQnLCAnZW5kJywgJ2V4b25OdW1iZXInLCAnZXhvbklkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChhW2QudHJhbnNjcmlwdElkXSA9PT0gdW5kZWZpbmVkKSBhW2QudHJhbnNjcmlwdElkXSA9IFtdO1xuICAgICAgICBkLmNocm9tID0gZC5jaHJvbW9zb21lO1xuICAgICAgICBkLmNocm9tU3RhcnQgPSBkLnN0YXJ0O1xuICAgICAgICBkLmNocm9tRW5kID0gZC5lbmQ7XG4gICAgICAgIGFbZC50cmFuc2NyaXB0SWRdLnB1c2goZCk7XG4gICAgICAgIHJldHVybiBhO1xuICAgIH0sIHt9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGlzb2Zvcm1zIGZyb20gdGhlIEdURXggd2ViIHNlcnZpY2U6ICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9yZWxlYXNlPXY3JmdlbmNvZGVfaWQ9J1xuICogQHBhcmFtIGRhdGEge0pzb259IGZyb20gd2ViIHNlcnZpY2UgZXhvblxuICogcmV0dXJucyBhIGxpc3Qgb2YgYWxsIEV4b25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV4b25zVG9MaXN0KGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAnZXhvbic7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBleG9uJztcbiAgICByZXR1cm4ganNvblthdHRyXTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGlzb2Zvcm1zXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn0gZnJvbSBHVEV4IHdlYiBzZXJ2aWNlICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9yZWxlYXNlPXY3JmdlbmNvZGVfaWQ9J1xuICogcmV0dXJucyBhIGxpc3Qgb2YgaXNvZm9ybSBvYmplY3RzIHNvcnRlZCBieSBsZW5ndGggaW4gZGVzY2VuZGluZyBvcmRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUcmFuc2NyaXB0cyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ3RyYW5zY3JpcHQnO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdygncGFyc2VJc29mb3JtcyBpbnB1dCBlcnJvcicpO1xuXG4gICAgLy8gY2hlY2sgcmVxdWlyZWQgYXR0cmlidXRlcywgdXNlIHRoZSBmaXJzdCB0cmFuc2NyaXB0IGFzIHRoZSB0ZXN0IGNhc2VcbiAgICBbJ3RyYW5zY3JpcHRJZCcsICdzdGFydCcsICdlbmQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICBpZighanNvblthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsga1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ganNvblthdHRyXS5zb3J0KChhLCBiKT0+e1xuICAgICAgICBjb25zdCBsMSA9IE1hdGguYWJzKGEuZW5kIC0gYS5zdGFydCkgKyAxO1xuICAgICAgICBjb25zdCBsMiA9IE1hdGguYWJzKGIuZW5kIC0gYi5zdGFydCkgKyAxO1xuICAgICAgICByZXR1cm4gLShsMS1sMik7IC8vIHNvcnQgYnkgaXNvZm9ybSBsZW5ndGggaW4gZGVzY2VuZGluZyBvcmRlclxuICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIGZpbmFsIChtYXNrZWQpIGdlbmUgbW9kZWwgZXhvbiBleHByZXNzaW9uXG4gKiBleHByZXNzaW9uIGlzIG5vcm1hbGl6ZWQgdG8gcmVhZHMgcGVyIGtiXG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gb2YgZXhvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gZXhvbnMge0xpc3R9IG9mIGV4b25zIHdpdGggcG9zaXRpb25zXG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgZXhvbiBvYmplY3RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV4b25FeHByZXNzaW9uKGRhdGEsIGV4b25zKXtcbiAgICBjb25zdCBleG9uRGljdCA9IGV4b25zLnJlZHVjZSgoYSwgZCk9PnthW2QuZXhvbklkXSA9IGQ7IHJldHVybiBhO30sIHt9KTtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhbkV4b25FeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ3BhcnNlRXhvbkV4cHJlc3Npb24gaW5wdXQgZXJyb3InKTtcblxuICAgIGNvbnN0IGV4b25PYmplY3RzID0gZGF0YVthdHRyXTtcbiAgICAvLyBlcnJvci1jaGVja2luZ1xuICAgIFsnbWVkaWFuJywgJ2V4b25JZCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWV4b25PYmplY3RzWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlRXhvbkV4cHJlc3Npb24gYXR0ciBub3QgZm91bmQ6ICcgKyBkO1xuICAgIH0pO1xuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGV4b24gY291bnRzXG4gICAgZXhvbk9iamVjdHMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBjb25zdCBleG9uID0gZXhvbkRpY3RbZC5leG9uSWRdOyAvLyBmb3IgcmV0cmlldmluZyBleG9uIHBvc2l0aW9uc1xuICAgICAgICAvLyBlcnJvci1jaGVja2luZ1xuICAgICAgICBbJ2VuZCcsICdzdGFydCddLmZvckVhY2goKHApPT57XG4gICAgICAgICAgICBpZiAoIWV4b24uaGFzT3duUHJvcGVydHkocCkpIHRocm93ICdGYXRhbCBFcnJvcjogcGFyc2VFeG9uRXhwcmVzc2lvbiBwb3NpdGlvbiBhdHRyIG5vdCBmb3VuZDogJyArIHA7XG4gICAgICAgIH0pO1xuICAgICAgICBkLmwgPSBleG9uLmVuZCAtIGV4b24uc3RhcnQgKyAxO1xuICAgICAgICBkLnZhbHVlID0gTnVtYmVyKGQubWVkaWFuKS9kLmw7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKGQubWVkaWFuKS9kLmw7XG4gICAgICAgIGQueCA9IGQuZXhvbklkO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLmNocm9tU3RhcnQgPSBleG9uLnN0YXJ0O1xuICAgICAgICBkLmNocm9tRW5kID0gZXhvbi5lbmQ7XG4gICAgICAgIGQudW5pdCA9ICdtZWRpYW4gJyArIGQudW5pdCArICcgcGVyIGJhc2UnO1xuICAgICAgICBkLnRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGV4b25PYmplY3RzLnNvcnQoKGEsYik9PntcbiAgICAgICAgaWYgKGEuY2hyb21TdGFydDxiLmNocm9tU3RhcnQpIHJldHVybiAtMTtcbiAgICAgICAgaWYgKGEuY2hyb21TdGFydD5iLmNocm9tU3RhcnQpIHJldHVybiAxO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTsgLy8gc29ydCBieSBnZW5vbWljIGxvY2F0aW9uIGluIGFzY2VuZGluZyBvcmRlclxufVxuXG4vKipcbiAqIFBhcnNlIGp1bmN0aW9uIG1lZGlhbiByZWFkIGNvdW50IGRhdGFcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBvZiB0aGUganVuY3Rpb24gZXhwcmVzc2lvbiB3ZWIgc2VydmljZVxuICogQHJldHVybnMge0xpc3R9IG9mIGp1bmN0aW9uIG9iamVjdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSnVuY3Rpb25FeHByZXNzaW9uKGRhdGEpe1xuICAgIGNvbnN0IGF0dHIgPSAnbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ3BhcnNlSnVuY3Rpb25FeHByZXNzaW9uIGlucHV0IGVycm9yJyk7XG5cbiAgICBjb25zdCBqdW5jdGlvbnMgPSBkYXRhW2F0dHJdO1xuXG4gICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICBpZiAoanVuY3Rpb25zID09PSB1bmRlZmluZWQgfHwganVuY3Rpb25zLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignTm8ganVuY3Rpb24gZGF0YSBmb3VuZCcpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuXG4gICAgLy8gcGFyc2UgR1RFeCBtZWRpYW4ganVuY3Rpb24gcmVhZCBjb3VudHNcbiAgICBqdW5jdGlvbnMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBbJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdqdW5jdGlvbklkJywgJ21lZGlhbicsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYgKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2luZ3IgRXJyb3I6IHBhcnNlSnVuY3Rpb25FeHByZXNzaW9uIGF0dHIgbm90IGZvdW5kOiAnICsgaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBtZWRpYW4gPSBkLm1lZGlhbjtcbiAgICAgICAgbGV0IHRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQudGlzc3VlSWQgPSB0aXNzdWVJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLnggPSBkLmp1bmN0aW9uSWQ7XG4gICAgICAgIGQueSA9IHRpc3N1ZUlkO1xuICAgICAgICBkLnZhbHVlID0gTnVtYmVyKG1lZGlhbik7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKG1lZGlhbik7XG4gICAgfSk7XG5cbiAgICAvLyBzb3J0IGJ5IGdlbm9taWMgbG9jYXRpb24gaW4gYXNjZW5kaW5nIG9yZGVyXG4gICAgcmV0dXJuIGp1bmN0aW9ucy5zb3J0KChhLGIpPT57XG4gICAgICAgIGlmIChhLmp1bmN0aW9uSWQ+Yi5qdW5jdGlvbklkKSByZXR1cm4gMTtcbiAgICAgICAgZWxzZSBpZiAoYS5qdW5jdGlvbklkPGIuanVuY3Rpb25JZCkgcmV0dXJuIC0xO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGV4cHJlc3Npb25cbiAqIEBwYXJhbSBkYXRhXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb24oZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5UcmFuc2NyaXB0RXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdQYXJzaW5nIEVycm9yOiBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uIGlucHV0IGVycm9yJyk7XG4gICAgLy8gcGFyc2UgR1RFeCBpc29mb3JtIG1lZGlhbiBUUE1cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgWydtZWRpYW4nLCAndHJhbnNjcmlwdElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93KCdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCB0cmFuc2NpcHQgYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGQudmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IE51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQueCA9IGQudHJhbnNjcmlwdElkO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLnRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGF0YVthdHRyXTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGV4cHJlc3Npb24sIGFuZCB0cmFuc3Bvc2UgdGhlIG1hdHJpeFxuICogQHBhcmFtIGRhdGFcbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvblRyYW5zcG9zZShkYXRhKXtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhblRyYW5zY3JpcHRFeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGRhdGEpO1xuICAgICAgICB0aHJvdygnUGFyc2luZyBFcnJvcjogcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvblRyYW5zcG9zZSBpbnB1dCBlcnJvci4nKTtcbiAgICB9XG4gICAgLy8gcGFyc2UgR1RFeCBpc29mb3JtIG1lZGlhbiBUUE1cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgWydtZWRpYW4nLCAndHJhbnNjcmlwdElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93KCdQYXJzaW5nIEVycm9yOiBSZXF1aXJlZCB0cmFuc2NyaXB0IGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBtZWRpYW4gPSBkLm1lZGlhbjtcbiAgICAgICAgY29uc3QgdGlzc3VlSWQgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC52YWx1ZSA9IE51bWJlcihtZWRpYW4pO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IE51bWJlcihtZWRpYW4pO1xuICAgICAgICBkLnkgPSBkLnRyYW5zY3JpcHRJZDtcbiAgICAgICAgZC54ID0gdGlzc3VlSWQ7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZDtcbiAgICAgICAgZC50aXNzdWVJZCA9IHRpc3N1ZUlkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogcGFyc2UgbWVkaWFuIGdlbmUgZXhwcmVzc2lvblxuICogQHBhcmFtIGRhdGEge0pzb259IHdpdGggYXR0ciBtZWRpYW5HZW5lRXhwcmVzc2lvblxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1lZGlhbkV4cHJlc3Npb24oZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5HZW5lRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBjb25zdCBhZGp1c3QgPSAxO1xuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGdlbmUgZXhwcmVzc2lvblxuICAgIC8vIGVycm9yLWNoZWNraW5nIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGVzOlxuICAgIGlmIChkYXRhW2F0dHJdLmxlbmd0aCA9PSAwKSB0aHJvdyAncGFyc2VNZWRpYW5FeHByZXNzaW9uIGZpbmRzIG5vIGRhdGEuJztcbiAgICBbJ21lZGlhbicsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnZ2VuY29kZUlkJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCFkYXRhW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGQpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGRhdGFbYXR0cl1bMF0pO1xuICAgICAgICAgICAgdGhyb3cgYFBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3NpbmdwOiAke2R9YDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGxldCByZXN1bHRzID0gZGF0YVthdHRyXTtcbiAgICByZXN1bHRzLmZvckVhY2goZnVuY3Rpb24oZCl7XG4gICAgICAgIGQudmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pO1xuICAgICAgICBkLnggPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC55ID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKGQubWVkaWFuKTtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGV4cHJlc3Npb24gZGF0YSBvZiBhIGdlbmUgZm9yIGEgZ3JvdXBlZCB2aW9saW4gcGxvdFxuICogQHBhcmFtIGRhdGEge0pTT059IGZyb20gR1RFeCBnZW5lIGV4cHJlc3Npb24gd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBjb2xvcnMge0RpY3Rpb25hcnl9IHRoZSB2aW9saW4gY29sb3IgZm9yIGdlbmVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVFeHByZXNzaW9uRm9yVmlvbGluKGRhdGEsIHVzZUxvZz10cnVlLCBjb2xvcnM9dW5kZWZpbmVkKXtcbiAgICBjb25zdCBhdHRyID0gJ2dlbmVFeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIGRhdGFbYXR0cl0uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgWydkYXRhJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5lU3ltYm9sJywgJ2dlbmNvZGVJZCddLmZvckVhY2goKGspPT57XG4gICAgICAgICAgICBpZighZC5oYXNPd25Qcm9wZXJ0eShrKSl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkLnZhbHVlcyA9IHVzZUxvZz9kLmRhdGEubWFwKChkZCk9PntyZXR1cm4gTWF0aC5sb2cxMCgrZGQrMSl9KTpkLmRhdGE7XG4gICAgICAgIGQuZ3JvdXAgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC5sYWJlbCA9IGQuZ2VuZVN5bWJvbDtcbiAgICAgICAgZC5jb2xvciA9IGNvbG9ycz09PXVuZGVmaW5lZD8nIzkwYzFjMSc6Y29sb3JzW2QuZ2VuY29kZUlkXTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGF0YVthdHRyXTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0aGUgTEQgKGxpbmthZ2UgZGlzZXF1aWxpYnJpdW0gZGF0YSlcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggbGQgd2ViIHNlcnZpY2VcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTEQoZGF0YSkge1xuICAgIGNvbnN0IGF0dHIgPSAnbGQnO1xuICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIGxldCBwYXJzZWQgPSBbXTtcbiAgICBsZXQgdW5pcXVlID0ge307XG4gICAgZGF0YVthdHRyXS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIGxldCBsYWJlbHMgPSBkWzBdLnNwbGl0KFwiLFwiKS5zb3J0KCk7IC8vIHNvcnQgdGhlIHZhcmlhbnQgSURzXG4gICAgICAgIHVuaXF1ZVtsYWJlbHNbMF1dID0gdHJ1ZTtcbiAgICAgICAgdW5pcXVlW2xhYmVsc1sxXV0gPSB0cnVlO1xuICAgICAgICBwYXJzZWQucHVzaCh7XG4gICAgICAgICAgICB4OiBsYWJlbHNbMF0sXG4gICAgICAgICAgICBkaXNwbGF5WDogZ2VuZXJhdGVTaG9ydFZhcmlhbnRJZChsYWJlbHNbMF0pLFxuICAgICAgICAgICAgeTogbGFiZWxzWzFdLFxuICAgICAgICAgICAgZGlzcGxheVk6IGdlbmVyYXRlU2hvcnRWYXJpYW50SWQobGFiZWxzWzFdKSxcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZUZsb2F0KGRbMV0pLFxuICAgICAgICAgICAgZGlzcGxheVZhbHVlOiBwYXJzZUZsb2F0KGRbMV0pLnRvUHJlY2lzaW9uKDMpIC8vIHRvUHJlY2lzaW9uKCkgcmV0dXJucyBhIHN0cmluZ1xuICAgICAgICB9KVxuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKHVuaXF1ZSkuZm9yRWFjaCgoZCk9PntcbiAgICAgICAgcGFyc2VkLnB1c2goe1xuICAgICAgICAgICAgeDogZCxcbiAgICAgICAgICAgIGRpc3BsYXlYOiBnZW5lcmF0ZVNob3J0VmFyaWFudElkKGQpLFxuICAgICAgICAgICAgeTogZCxcbiAgICAgICAgICAgIGRpc3BsYXlZOiBnZW5lcmF0ZVNob3J0VmFyaWFudElkKGQpLFxuICAgICAgICAgICAgdmFsdWU6IDEsXG4gICAgICAgICAgICBkaXNwbGF5VmFsdWU6IFwiMVwiXG4gICAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnNlZDtcbn1cblxuLyogcGFyc2UgdGhlIGV4cHJlc3Npb24gZGF0YSBvZiBhIGdlbmUgZm9yIGJveHBsb3RcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggZ2VuZSBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gdGlzc3VlcyB7T2JqZWN0fSBtYXBwaW5nIG9mIHRpc3N1ZSBpZHMgdG8gbGFiZWxzICh0aXNzdWUgbmFtZSlcbiAqIEBwYXJhbSBjb2xvcnMge09iamVjdH0gbWFwcGluZyBvZiB0aXNzdWUgaWRzIHRvIGJveHBsb3QgY29sb3JzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVFeHByZXNzaW9uRm9yQm94cGxvdChkYXRhLCB0aXNzdWVzPXVuZGVmaW5lZCwgY29sb3JzPXVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGF0dHIgPSAnZ2VuZUV4cHJlc3Npb24nO1xuXG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KGBQYXJzaW5nIGVycm9yOiByZXF1aXJlZCBKU09OIGF0dHJpYnV0ZSAke2F0dHJ9IG1pc3NpbmcuYCk7XG5cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpPT57XG4gICAgICAgIFsnZGF0YScsICdnZW5jb2RlSWQnLCAnZ2VuZVN5bWJvbCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYgKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBgUGFyc2luZyBlcnJvcjogcmVxdWlyZWQgSlNPTiBhdHRyaWJ1dGUgJHtrfSBpcyBtaXNzaW5nIGZyb20gYSByZWNvcmQuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGQubGFiZWwgPSB0aXNzdWVzPT09dW5kZWZpbmVkP2QudGlzc3VlU2l0ZURldGFpbElkOnRpc3N1ZXNbZC50aXNzdWVTaXRlRGV0YWlsSWRdO1xuICAgICAgICBkLmNvbG9yID0gY29sb3JzPT09dW5kZWZpbmVkPycjNDY4MmI0Jzpjb2xvcnNbZC50aXNzdWVTaXRlRGV0YWlsSWRdO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogZ2VuZXJhdGUgdmFyaWFudCBJRCBzaG9ydGhhbmRcbiAqIEBwYXJhbSBpZFxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlU2hvcnRWYXJpYW50SWQoaWQpe1xuICAgIGxldCB0ZW1wID0gaWQuc3BsaXQoXCJfXCIpO1xuICAgIGlmKHRlbXBbMl0ubGVuZ3RoID09IDEgJiYgdGVtcFszXS5sZW5ndGggPT0gMSkgcmV0dXJuIGlkO1xuICAgIGlmKHRlbXBbMl0ubGVuZ3RoID4gdGVtcFszXS5sZW5ndGgpIHtcbiAgICAgICAgdGVtcFsyXSA9IFwiZGVsXCI7XG4gICAgICAgIHRlbXAuc3BsaWNlKDMsIDEpOyAvLyBkZWxldGUgdGhlIGFsdFxuICAgIH1cbiAgICBlbHNlIGlmKHRlbXBbM10ubGVuZ3RoID4gdGVtcFsyXS5sZW5ndGgpIHtcbiAgICAgICAgdGVtcFszXSA9IFwiaW5zXCI7XG4gICAgICAgIHRlbXAuc3BsaWNlKDIsIDEpOyAvLyBkZWxldGUgdGhlIHJlZlxuICAgIH1cbiAgICBlbHNlIHsgLy8gdGVtcFszXS5sZW5ndGggPT0gdGVtcFsyXS5sZW5ndGggYW5kIHRlbXBbM10ubGVuZ3RoID4gMVxuICAgICAgICB0ZW1wWzNdID0gXCJzdWJcIjtcbiAgICAgICAgdGVtcC5zcGxpY2UoMiwgMSk7IC8vIGRlbGV0ZSB0aGUgcmVmXG4gICAgfVxuICAgIHJldHVybiB0ZW1wLmpvaW4oXCJfXCIpO1xufSIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbmltcG9ydCB7c2VsZWN0LCBldmVudH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHt0cmFuc2l0aW9ufSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2x0aXAge1xuICAgIGNvbnN0cnVjdG9yKGlkLCB2ZXJib3NlPWZhbHNlLCBvZmZzZXRYPTMwLCBvZmZzZXRZPS00MCwgZHVyYXRpb249MTAwKXtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnZlcmJvc2UgPSB2ZXJib3NlO1xuICAgICAgICB0aGlzLm9mZnNldFggPSBvZmZzZXRYO1xuICAgICAgICB0aGlzLm9mZnNldFkgPSBvZmZzZXRZO1xuICAgICAgICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgfVxuXG4gICAgc2hvdyhpbmZvKSB7XG4gICAgICAgIGlmKHRoaXMudmVyYm9zZSkgY29uc29sZS5sb2coaW5mbyk7XG4gICAgICAgIHRoaXMuZWRpdChpbmZvKTtcbiAgICAgICAgdGhpcy5tb3ZlKCk7XG4gICAgICAgIHNlbGVjdChcIiNcIiArIHRoaXMuaWQpXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwiaW5saW5lXCIpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuZHVyYXRpb24odGhpcy5kdXJhdGlvbilcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMS4wKVxuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICAgIHNlbGVjdChcIiNcIiArIHRoaXMuaWQpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuZHVyYXRpb24odGhpcy5kdXJhdGlvbilcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMC4wKTtcbiAgICAgICAgdGhpcy5lZGl0KFwiXCIpO1xuICAgIH1cblxuICAgIG1vdmUoeCA9IGV2ZW50LnBhZ2VYLCB5ID0gZXZlbnQucGFnZVkpIHtcbiAgICAgICAgaWYgKHRoaXMudmVyYm9zZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coeCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh5KTtcbiAgICAgICAgfVxuICAgICAgICB4ID0geCArIHRoaXMub2Zmc2V0WDsgLy8gVE9ETzogZ2V0IHJpZCBvZiB0aGUgaGFyZC1jb2RlZCBhZGp1c3RtZW50XG4gICAgICAgIHkgPSAoeSArIHRoaXMub2Zmc2V0WSk8MD8xMDp5K3RoaXMub2Zmc2V0WTtcbiAgICAgICAgY29uc3QgdCA9IHNlbGVjdCgnIycrdGhpcy5pZClcbiAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgYCR7eH1weGApXG4gICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgYCR7eX1weGApXG4gICAgfVxuXG4gICAgZWRpdChpbmZvKSB7XG4gICAgICAgIHNlbGVjdChcIiNcIiArIHRoaXMuaWQpXG4gICAgICAgICAgICAuaHRtbChpbmZvKVxuICAgIH1cbn1cblxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gIHZhciBuID0gc3BlY2lmaWVyLmxlbmd0aCAvIDYgfCAwLCBjb2xvcnMgPSBuZXcgQXJyYXkobiksIGkgPSAwO1xuICB3aGlsZSAoaSA8IG4pIGNvbG9yc1tpXSA9IFwiI1wiICsgc3BlY2lmaWVyLnNsaWNlKGkgKiA2LCArK2kgKiA2KTtcbiAgcmV0dXJuIGNvbG9ycztcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVSZ2JCYXNpc30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNjaGVtZSkge1xuICByZXR1cm4gaW50ZXJwb2xhdGVSZ2JCYXNpcyhzY2hlbWVbc2NoZW1lLmxlbmd0aCAtIDFdKTtcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCIxZjc3YjRmZjdmMGUyY2EwMmNkNjI3Mjg5NDY3YmQ4YzU2NGJlMzc3YzI3ZjdmN2ZiY2JkMjIxN2JlY2ZcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiN2ZjOTdmYmVhZWQ0ZmRjMDg2ZmZmZjk5Mzg2Y2IwZjAwMjdmYmY1YjE3NjY2NjY2XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjFiOWU3N2Q5NWYwMjc1NzBiM2U3Mjk4YTY2YTYxZWU2YWIwMmE2NzYxZDY2NjY2NlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJhNmNlZTMxZjc4YjRiMmRmOGEzM2EwMmNmYjlhOTllMzFhMWNmZGJmNmZmZjdmMDBjYWIyZDY2YTNkOWFmZmZmOTliMTU5MjhcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiZmJiNGFlYjNjZGUzY2NlYmM1ZGVjYmU0ZmVkOWE2ZmZmZmNjZTVkOGJkZmRkYWVjZjJmMmYyXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcImIzZTJjZGZkY2RhY2NiZDVlOGY0Y2FlNGU2ZjVjOWZmZjJhZWYxZTJjY2NjY2NjY1wiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJlNDFhMWMzNzdlYjg0ZGFmNGE5ODRlYTNmZjdmMDBmZmZmMzNhNjU2MjhmNzgxYmY5OTk5OTlcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiNjZjMmE1ZmM4ZDYyOGRhMGNiZTc4YWMzYTZkODU0ZmZkOTJmZTVjNDk0YjNiM2IzXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjhkZDNjN2ZmZmZiM2JlYmFkYWZiODA3MjgwYjFkM2ZkYjQ2MmIzZGU2OWZjY2RlNWQ5ZDlkOWJjODBiZGNjZWJjNWZmZWQ2ZlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImQ4YjM2NWY1ZjVmNTVhYjRhY1wiLFxuICBcImE2NjExYWRmYzI3ZDgwY2RjMTAxODU3MVwiLFxuICBcImE2NjExYWRmYzI3ZGY1ZjVmNTgwY2RjMTAxODU3MVwiLFxuICBcIjhjNTEwYWQ4YjM2NWY2ZThjM2M3ZWFlNTVhYjRhYzAxNjY1ZVwiLFxuICBcIjhjNTEwYWQ4YjM2NWY2ZThjM2Y1ZjVmNWM3ZWFlNTVhYjRhYzAxNjY1ZVwiLFxuICBcIjhjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2M3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZVwiLFxuICBcIjhjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2Y1ZjVmNWM3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZVwiLFxuICBcIjU0MzAwNThjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2M3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZTAwM2MzMFwiLFxuICBcIjU0MzAwNThjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2Y1ZjVmNWM3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZTAwM2MzMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJhZjhkYzNmN2Y3Zjc3ZmJmN2JcIixcbiAgXCI3YjMyOTRjMmE1Y2ZhNmRiYTAwMDg4MzdcIixcbiAgXCI3YjMyOTRjMmE1Y2ZmN2Y3ZjdhNmRiYTAwMDg4MzdcIixcbiAgXCI3NjJhODNhZjhkYzNlN2Q0ZThkOWYwZDM3ZmJmN2IxYjc4MzdcIixcbiAgXCI3NjJhODNhZjhkYzNlN2Q0ZThmN2Y3ZjdkOWYwZDM3ZmJmN2IxYjc4MzdcIixcbiAgXCI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzdcIixcbiAgXCI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThmN2Y3ZjdkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzdcIixcbiAgXCI0MDAwNGI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzcwMDQ0MWJcIixcbiAgXCI0MDAwNGI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThmN2Y3ZjdkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzcwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTlhM2M5ZjdmN2Y3YTFkNzZhXCIsXG4gIFwiZDAxYzhiZjFiNmRhYjhlMTg2NGRhYzI2XCIsXG4gIFwiZDAxYzhiZjFiNmRhZjdmN2Y3YjhlMTg2NGRhYzI2XCIsXG4gIFwiYzUxYjdkZTlhM2M5ZmRlMGVmZTZmNWQwYTFkNzZhNGQ5MjIxXCIsXG4gIFwiYzUxYjdkZTlhM2M5ZmRlMGVmZjdmN2Y3ZTZmNWQwYTFkNzZhNGQ5MjIxXCIsXG4gIFwiYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxXCIsXG4gIFwiYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZjdmN2Y3ZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxXCIsXG4gIFwiOGUwMTUyYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxMjc2NDE5XCIsXG4gIFwiOGUwMTUyYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZjdmN2Y3ZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxMjc2NDE5XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcIjk5OGVjM2Y3ZjdmN2YxYTM0MFwiLFxuICBcIjVlM2M5OWIyYWJkMmZkYjg2M2U2NjEwMVwiLFxuICBcIjVlM2M5OWIyYWJkMmY3ZjdmN2ZkYjg2M2U2NjEwMVwiLFxuICBcIjU0Mjc4ODk5OGVjM2Q4ZGFlYmZlZTBiNmYxYTM0MGIzNTgwNlwiLFxuICBcIjU0Mjc4ODk5OGVjM2Q4ZGFlYmY3ZjdmN2ZlZTBiNmYxYTM0MGIzNTgwNlwiLFxuICBcIjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNlwiLFxuICBcIjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmY3ZjdmN2ZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNlwiLFxuICBcIjJkMDA0YjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNjdmM2IwOFwiLFxuICBcIjJkMDA0YjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmY3ZjdmN2ZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNjdmM2IwOFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZjhhNjJmN2Y3Zjc2N2E5Y2ZcIixcbiAgXCJjYTAwMjBmNGE1ODI5MmM1ZGUwNTcxYjBcIixcbiAgXCJjYTAwMjBmNGE1ODJmN2Y3Zjc5MmM1ZGUwNTcxYjBcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdkMWU1ZjA2N2E5Y2YyMTY2YWNcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdmN2Y3ZjdkMWU1ZjA2N2E5Y2YyMTY2YWNcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWNcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmN2Y3ZjdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWNcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWMwNTMwNjFcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmN2Y3ZjdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWMwNTMwNjFcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWY4YTYyZmZmZmZmOTk5OTk5XCIsXG4gIFwiY2EwMDIwZjRhNTgyYmFiYWJhNDA0MDQwXCIsXG4gIFwiY2EwMDIwZjRhNTgyZmZmZmZmYmFiYWJhNDA0MDQwXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZTBlMGUwOTk5OTk5NGQ0ZDRkXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZmZmZmZmZTBlMGUwOTk5OTk5NGQ0ZDRkXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZmZmZmZmZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkMWExYTFhXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZmZmZmZmZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkMWExYTFhXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZjOGQ1OWZmZmZiZjkxYmZkYlwiLFxuICBcImQ3MTkxY2ZkYWU2MWFiZDllOTJjN2JiNlwiLFxuICBcImQ3MTkxY2ZkYWU2MWZmZmZiZmFiZDllOTJjN2JiNlwiLFxuICBcImQ3MzAyN2ZjOGQ1OWZlZTA5MGUwZjNmODkxYmZkYjQ1NzViNFwiLFxuICBcImQ3MzAyN2ZjOGQ1OWZlZTA5MGZmZmZiZmUwZjNmODkxYmZkYjQ1NzViNFwiLFxuICBcImQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNFwiLFxuICBcImQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGZmZmZiZmUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNFwiLFxuICBcImE1MDAyNmQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNDMxMzY5NVwiLFxuICBcImE1MDAyNmQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGZmZmZiZmUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNDMxMzY5NVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5MWNmNjBcIixcbiAgXCJkNzE5MWNmZGFlNjFhNmQ5NmExYTk2NDFcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhNmQ5NmExYTk2NDFcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOGJkOWVmOGI5MWNmNjAxYTk4NTBcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOGJmZmZmYmZkOWVmOGI5MWNmNjAxYTk4NTBcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTBcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJmZmZmYmZkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTBcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTAwMDY4MzdcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJmZmZmYmZkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTAwMDY4MzdcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmM4ZDU5ZmZmZmJmOTlkNTk0XCIsXG4gIFwiZDcxOTFjZmRhZTYxYWJkZGE0MmI4M2JhXCIsXG4gIFwiZDcxOTFjZmRhZTYxZmZmZmJmYWJkZGE0MmI4M2JhXCIsXG4gIFwiZDUzZTRmZmM4ZDU5ZmVlMDhiZTZmNTk4OTlkNTk0MzI4OGJkXCIsXG4gIFwiZDUzZTRmZmM4ZDU5ZmVlMDhiZmZmZmJmZTZmNTk4OTlkNTk0MzI4OGJkXCIsXG4gIFwiZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkXCIsXG4gIFwiZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkXCIsXG4gIFwiOWUwMTQyZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkNWU0ZmEyXCIsXG4gIFwiOWUwMTQyZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkNWU0ZmEyXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU1ZjVmOTk5ZDhjOTJjYTI1ZlwiLFxuICBcImVkZjhmYmIyZTJlMjY2YzJhNDIzOGI0NVwiLFxuICBcImVkZjhmYmIyZTJlMjY2YzJhNDJjYTI1ZjAwNmQyY1wiLFxuICBcImVkZjhmYmNjZWNlNjk5ZDhjOTY2YzJhNDJjYTI1ZjAwNmQyY1wiLFxuICBcImVkZjhmYmNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNTgyNFwiLFxuICBcImY3ZmNmZGU1ZjVmOWNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNTgyNFwiLFxuICBcImY3ZmNmZGU1ZjVmOWNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNmQyYzAwNDQxYlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlMGVjZjQ5ZWJjZGE4ODU2YTdcIixcbiAgXCJlZGY4ZmJiM2NkZTM4Yzk2YzY4ODQxOWRcIixcbiAgXCJlZGY4ZmJiM2NkZTM4Yzk2YzY4ODU2YTc4MTBmN2NcIixcbiAgXCJlZGY4ZmJiZmQzZTY5ZWJjZGE4Yzk2YzY4ODU2YTc4MTBmN2NcIixcbiAgXCJlZGY4ZmJiZmQzZTY5ZWJjZGE4Yzk2YzY4YzZiYjE4ODQxOWQ2ZTAxNmJcIixcbiAgXCJmN2ZjZmRlMGVjZjRiZmQzZTY5ZWJjZGE4Yzk2YzY4YzZiYjE4ODQxOWQ2ZTAxNmJcIixcbiAgXCJmN2ZjZmRlMGVjZjRiZmQzZTY5ZWJjZGE4Yzk2YzY4YzZiYjE4ODQxOWQ4MTBmN2M0ZDAwNGJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTBmM2RiYThkZGI1NDNhMmNhXCIsXG4gIFwiZjBmOWU4YmFlNGJjN2JjY2M0MmI4Y2JlXCIsXG4gIFwiZjBmOWU4YmFlNGJjN2JjY2M0NDNhMmNhMDg2OGFjXCIsXG4gIFwiZjBmOWU4Y2NlYmM1YThkZGI1N2JjY2M0NDNhMmNhMDg2OGFjXCIsXG4gIFwiZjBmOWU4Y2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg1ODllXCIsXG4gIFwiZjdmY2YwZTBmM2RiY2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg1ODllXCIsXG4gIFwiZjdmY2YwZTBmM2RiY2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg2OGFjMDg0MDgxXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZThjOGZkYmI4NGUzNGEzM1wiLFxuICBcImZlZjBkOWZkY2M4YWZjOGQ1OWQ3MzAxZlwiLFxuICBcImZlZjBkOWZkY2M4YWZjOGQ1OWUzNGEzM2IzMDAwMFwiLFxuICBcImZlZjBkOWZkZDQ5ZWZkYmI4NGZjOGQ1OWUzNGEzM2IzMDAwMFwiLFxuICBcImZlZjBkOWZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZjk5MDAwMFwiLFxuICBcImZmZjdlY2ZlZThjOGZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZjk5MDAwMFwiLFxuICBcImZmZjdlY2ZlZThjOGZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZmIzMDAwMDdmMDAwMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlY2UyZjBhNmJkZGIxYzkwOTlcIixcbiAgXCJmNmVmZjdiZGM5ZTE2N2E5Y2YwMjgxOGFcIixcbiAgXCJmNmVmZjdiZGM5ZTE2N2E5Y2YxYzkwOTkwMTZjNTlcIixcbiAgXCJmNmVmZjdkMGQxZTZhNmJkZGI2N2E5Y2YxYzkwOTkwMTZjNTlcIixcbiAgXCJmNmVmZjdkMGQxZTZhNmJkZGI2N2E5Y2YzNjkwYzAwMjgxOGEwMTY0NTBcIixcbiAgXCJmZmY3ZmJlY2UyZjBkMGQxZTZhNmJkZGI2N2E5Y2YzNjkwYzAwMjgxOGEwMTY0NTBcIixcbiAgXCJmZmY3ZmJlY2UyZjBkMGQxZTZhNmJkZGI2N2E5Y2YzNjkwYzAwMjgxOGEwMTZjNTkwMTQ2MzZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWNlN2YyYTZiZGRiMmI4Y2JlXCIsXG4gIFwiZjFlZWY2YmRjOWUxNzRhOWNmMDU3MGIwXCIsXG4gIFwiZjFlZWY2YmRjOWUxNzRhOWNmMmI4Y2JlMDQ1YThkXCIsXG4gIFwiZjFlZWY2ZDBkMWU2YTZiZGRiNzRhOWNmMmI4Y2JlMDQ1YThkXCIsXG4gIFwiZjFlZWY2ZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDM0ZTdiXCIsXG4gIFwiZmZmN2ZiZWNlN2YyZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDM0ZTdiXCIsXG4gIFwiZmZmN2ZiZWNlN2YyZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDQ1YThkMDIzODU4XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU3ZTFlZmM5OTRjN2RkMWM3N1wiLFxuICBcImYxZWVmNmQ3YjVkOGRmNjViMGNlMTI1NlwiLFxuICBcImYxZWVmNmQ3YjVkOGRmNjViMGRkMWM3Nzk4MDA0M1wiLFxuICBcImYxZWVmNmQ0YjlkYWM5OTRjN2RmNjViMGRkMWM3Nzk4MDA0M1wiLFxuICBcImYxZWVmNmQ0YjlkYWM5OTRjN2RmNjViMGU3Mjk4YWNlMTI1NjkxMDAzZlwiLFxuICBcImY3ZjRmOWU3ZTFlZmQ0YjlkYWM5OTRjN2RmNjViMGU3Mjk4YWNlMTI1NjkxMDAzZlwiLFxuICBcImY3ZjRmOWU3ZTFlZmQ0YjlkYWM5OTRjN2RmNjViMGU3Mjk4YWNlMTI1Njk4MDA0MzY3MDAxZlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZGUwZGRmYTlmYjVjNTFiOGFcIixcbiAgXCJmZWViZTJmYmI0YjlmNzY4YTFhZTAxN2VcIixcbiAgXCJmZWViZTJmYmI0YjlmNzY4YTFjNTFiOGE3YTAxNzdcIixcbiAgXCJmZWViZTJmY2M1YzBmYTlmYjVmNzY4YTFjNTFiOGE3YTAxNzdcIixcbiAgXCJmZWViZTJmY2M1YzBmYTlmYjVmNzY4YTFkZDM0OTdhZTAxN2U3YTAxNzdcIixcbiAgXCJmZmY3ZjNmZGUwZGRmY2M1YzBmYTlmYjVmNzY4YTFkZDM0OTdhZTAxN2U3YTAxNzdcIixcbiAgXCJmZmY3ZjNmZGUwZGRmY2M1YzBmYTlmYjVmNzY4YTFkZDM0OTdhZTAxN2U3YTAxNzc0OTAwNmFcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWRmOGIxN2ZjZGJiMmM3ZmI4XCIsXG4gIFwiZmZmZmNjYTFkYWI0NDFiNmM0MjI1ZWE4XCIsXG4gIFwiZmZmZmNjYTFkYWI0NDFiNmM0MmM3ZmI4MjUzNDk0XCIsXG4gIFwiZmZmZmNjYzdlOWI0N2ZjZGJiNDFiNmM0MmM3ZmI4MjUzNDk0XCIsXG4gIFwiZmZmZmNjYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MGMyYzg0XCIsXG4gIFwiZmZmZmQ5ZWRmOGIxYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MGMyYzg0XCIsXG4gIFwiZmZmZmQ5ZWRmOGIxYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MjUzNDk0MDgxZDU4XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImY3ZmNiOWFkZGQ4ZTMxYTM1NFwiLFxuICBcImZmZmZjY2MyZTY5OTc4YzY3OTIzODQ0M1wiLFxuICBcImZmZmZjY2MyZTY5OTc4YzY3OTMxYTM1NDAwNjgzN1wiLFxuICBcImZmZmZjY2Q5ZjBhM2FkZGQ4ZTc4YzY3OTMxYTM1NDAwNjgzN1wiLFxuICBcImZmZmZjY2Q5ZjBhM2FkZGQ4ZTc4YzY3OTQxYWI1ZDIzODQ0MzAwNWEzMlwiLFxuICBcImZmZmZlNWY3ZmNiOWQ5ZjBhM2FkZGQ4ZTc4YzY3OTQxYWI1ZDIzODQ0MzAwNWEzMlwiLFxuICBcImZmZmZlNWY3ZmNiOWQ5ZjBhM2FkZGQ4ZTc4YzY3OTQxYWI1ZDIzODQ0MzAwNjgzNzAwNDUyOVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZmY3YmNmZWM0NGZkOTVmMGVcIixcbiAgXCJmZmZmZDRmZWQ5OGVmZTk5MjljYzRjMDJcIixcbiAgXCJmZmZmZDRmZWQ5OGVmZTk5MjlkOTVmMGU5OTM0MDRcIixcbiAgXCJmZmZmZDRmZWUzOTFmZWM0NGZmZTk5MjlkOTVmMGU5OTM0MDRcIixcbiAgXCJmZmZmZDRmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI4YzJkMDRcIixcbiAgXCJmZmZmZTVmZmY3YmNmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI4YzJkMDRcIixcbiAgXCJmZmZmZTVmZmY3YmNmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI5OTM0MDQ2NjI1MDZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmZlZGEwZmViMjRjZjAzYjIwXCIsXG4gIFwiZmZmZmIyZmVjYzVjZmQ4ZDNjZTMxYTFjXCIsXG4gIFwiZmZmZmIyZmVjYzVjZmQ4ZDNjZjAzYjIwYmQwMDI2XCIsXG4gIFwiZmZmZmIyZmVkOTc2ZmViMjRjZmQ4ZDNjZjAzYjIwYmQwMDI2XCIsXG4gIFwiZmZmZmIyZmVkOTc2ZmViMjRjZmQ4ZDNjZmM0ZTJhZTMxYTFjYjEwMDI2XCIsXG4gIFwiZmZmZmNjZmZlZGEwZmVkOTc2ZmViMjRjZmQ4ZDNjZmM0ZTJhZTMxYTFjYjEwMDI2XCIsXG4gIFwiZmZmZmNjZmZlZGEwZmVkOTc2ZmViMjRjZmQ4ZDNjZmM0ZTJhZTMxYTFjYmQwMDI2ODAwMDI2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImRlZWJmNzllY2FlMTMxODJiZFwiLFxuICBcImVmZjNmZmJkZDdlNzZiYWVkNjIxNzFiNVwiLFxuICBcImVmZjNmZmJkZDdlNzZiYWVkNjMxODJiZDA4NTE5Y1wiLFxuICBcImVmZjNmZmM2ZGJlZjllY2FlMTZiYWVkNjMxODJiZDA4NTE5Y1wiLFxuICBcImVmZjNmZmM2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NDU5NFwiLFxuICBcImY3ZmJmZmRlZWJmN2M2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NDU5NFwiLFxuICBcImY3ZmJmZmRlZWJmN2M2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NTE5YzA4MzA2YlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlNWY1ZTBhMWQ5OWIzMWEzNTRcIixcbiAgXCJlZGY4ZTliYWU0YjM3NGM0NzYyMzhiNDVcIixcbiAgXCJlZGY4ZTliYWU0YjM3NGM0NzYzMWEzNTQwMDZkMmNcIixcbiAgXCJlZGY4ZTljN2U5YzBhMWQ5OWI3NGM0NzYzMWEzNTQwMDZkMmNcIixcbiAgXCJlZGY4ZTljN2U5YzBhMWQ5OWI3NGM0NzY0MWFiNWQyMzhiNDUwMDVhMzJcIixcbiAgXCJmN2ZjZjVlNWY1ZTBjN2U5YzBhMWQ5OWI3NGM0NzY0MWFiNWQyMzhiNDUwMDVhMzJcIixcbiAgXCJmN2ZjZjVlNWY1ZTBjN2U5YzBhMWQ5OWI3NGM0NzY0MWFiNWQyMzhiNDUwMDZkMmMwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZjBmMGYwYmRiZGJkNjM2MzYzXCIsXG4gIFwiZjdmN2Y3Y2NjY2NjOTY5Njk2NTI1MjUyXCIsXG4gIFwiZjdmN2Y3Y2NjY2NjOTY5Njk2NjM2MzYzMjUyNTI1XCIsXG4gIFwiZjdmN2Y3ZDlkOWQ5YmRiZGJkOTY5Njk2NjM2MzYzMjUyNTI1XCIsXG4gIFwiZjdmN2Y3ZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1XCIsXG4gIFwiZmZmZmZmZjBmMGYwZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1XCIsXG4gIFwiZmZmZmZmZjBmMGYwZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1MDAwMDAwXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmZWRmNWJjYmRkYzc1NmJiMVwiLFxuICBcImYyZjBmN2NiYzllMjllOWFjODZhNTFhM1wiLFxuICBcImYyZjBmN2NiYzllMjllOWFjODc1NmJiMTU0Mjc4ZlwiLFxuICBcImYyZjBmN2RhZGFlYmJjYmRkYzllOWFjODc1NmJiMTU0Mjc4ZlwiLFxuICBcImYyZjBmN2RhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzRhMTQ4NlwiLFxuICBcImZjZmJmZGVmZWRmNWRhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzRhMTQ4NlwiLFxuICBcImZjZmJmZGVmZWRmNWRhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzU0Mjc4ZjNmMDA3ZFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWUwZDJmYzkyNzJkZTJkMjZcIixcbiAgXCJmZWU1ZDlmY2FlOTFmYjZhNGFjYjE4MWRcIixcbiAgXCJmZWU1ZDlmY2FlOTFmYjZhNGFkZTJkMjZhNTBmMTVcIixcbiAgXCJmZWU1ZDlmY2JiYTFmYzkyNzJmYjZhNGFkZTJkMjZhNTBmMTVcIixcbiAgXCJmZWU1ZDlmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWQ5OTAwMGRcIixcbiAgXCJmZmY1ZjBmZWUwZDJmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWQ5OTAwMGRcIixcbiAgXCJmZmY1ZjBmZWUwZDJmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWRhNTBmMTU2NzAwMGRcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmVlNmNlZmRhZTZiZTY1NTBkXCIsXG4gIFwiZmVlZGRlZmRiZTg1ZmQ4ZDNjZDk0NzAxXCIsXG4gIFwiZmVlZGRlZmRiZTg1ZmQ4ZDNjZTY1NTBkYTYzNjAzXCIsXG4gIFwiZmVlZGRlZmRkMGEyZmRhZTZiZmQ4ZDNjZTY1NTBkYTYzNjAzXCIsXG4gIFwiZmVlZGRlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxOGMyZDA0XCIsXG4gIFwiZmZmNWViZmVlNmNlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxOGMyZDA0XCIsXG4gIFwiZmZmNWViZmVlNmNlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxYTYzNjAzN2YyNzA0XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCB7Y3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nKGN1YmVoZWxpeCgzMDAsIDAuNSwgMC4wKSwgY3ViZWhlbGl4KC0yNDAsIDAuNSwgMS4wKSk7XG4iLCJpbXBvcnQge2N1YmVoZWxpeH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlQ3ViZWhlbGl4TG9uZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCB2YXIgd2FybSA9IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoLTEwMCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbmV4cG9ydCB2YXIgY29vbCA9IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoMjYwLCAwLjc1LCAwLjM1KSwgY3ViZWhlbGl4KDgwLCAxLjUwLCAwLjgpKTtcblxudmFyIGMgPSBjdWJlaGVsaXgoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odCkge1xuICBpZiAodCA8IDAgfHwgdCA+IDEpIHQgLT0gTWF0aC5mbG9vcih0KTtcbiAgdmFyIHRzID0gTWF0aC5hYnModCAtIDAuNSk7XG4gIGMuaCA9IDM2MCAqIHQgLSAxMDA7XG4gIGMucyA9IDEuNSAtIDEuNSAqIHRzO1xuICBjLmwgPSAwLjggLSAwLjkgKiB0cztcbiAgcmV0dXJuIGMgKyBcIlwiO1xufVxuIiwiaW1wb3J0IHtyZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuXG52YXIgYyA9IHJnYigpLFxuICAgIHBpXzFfMyA9IE1hdGguUEkgLyAzLFxuICAgIHBpXzJfMyA9IE1hdGguUEkgKiAyIC8gMztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odCkge1xuICB2YXIgeDtcbiAgdCA9ICgwLjUgLSB0KSAqIE1hdGguUEk7XG4gIGMuciA9IDI1NSAqICh4ID0gTWF0aC5zaW4odCkpICogeDtcbiAgYy5nID0gMjU1ICogKHggPSBNYXRoLnNpbih0ICsgcGlfMV8zKSkgKiB4O1xuICBjLmIgPSAyNTUgKiAoeCA9IE1hdGguc2luKHQgKyBwaV8yXzMpKSAqIHg7XG4gIHJldHVybiBjICsgXCJcIjtcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5mdW5jdGlvbiByYW1wKHJhbmdlKSB7XG4gIHZhciBuID0gcmFuZ2UubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiByYW5nZVtNYXRoLm1heCgwLCBNYXRoLm1pbihuIC0gMSwgTWF0aC5mbG9vcih0ICogbikpKV07XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoY29sb3JzKFwiNDQwMTU0NDQwMjU2NDUwNDU3NDUwNTU5NDYwNzVhNDYwODVjNDYwYTVkNDYwYjVlNDcwZDYwNDcwZTYxNDcxMDYzNDcxMTY0NDcxMzY1NDgxNDY3NDgxNjY4NDgxNzY5NDgxODZhNDgxYTZjNDgxYjZkNDgxYzZlNDgxZDZmNDgxZjcwNDgyMDcxNDgyMTczNDgyMzc0NDgyNDc1NDgyNTc2NDgyNjc3NDgyODc4NDgyOTc5NDcyYTdhNDcyYzdhNDcyZDdiNDcyZTdjNDcyZjdkNDYzMDdlNDYzMjdlNDYzMzdmNDYzNDgwNDUzNTgxNDUzNzgxNDUzODgyNDQzOTgzNDQzYTgzNDQzYjg0NDMzZDg0NDMzZTg1NDIzZjg1NDI0MDg2NDI0MTg2NDE0Mjg3NDE0NDg3NDA0NTg4NDA0Njg4M2Y0Nzg4M2Y0ODg5M2U0OTg5M2U0YTg5M2U0YzhhM2Q0ZDhhM2Q0ZThhM2M0ZjhhM2M1MDhiM2I1MThiM2I1MjhiM2E1MzhiM2E1NDhjMzk1NThjMzk1NjhjMzg1ODhjMzg1OThjMzc1YThjMzc1YjhkMzY1YzhkMzY1ZDhkMzU1ZThkMzU1ZjhkMzQ2MDhkMzQ2MThkMzM2MjhkMzM2MzhkMzI2NDhlMzI2NThlMzE2NjhlMzE2NzhlMzE2ODhlMzA2OThlMzA2YThlMmY2YjhlMmY2YzhlMmU2ZDhlMmU2ZThlMmU2ZjhlMmQ3MDhlMmQ3MThlMmM3MThlMmM3MjhlMmM3MzhlMmI3NDhlMmI3NThlMmE3NjhlMmE3NzhlMmE3ODhlMjk3OThlMjk3YThlMjk3YjhlMjg3YzhlMjg3ZDhlMjc3ZThlMjc3ZjhlMjc4MDhlMjY4MThlMjY4MjhlMjY4MjhlMjU4MzhlMjU4NDhlMjU4NThlMjQ4NjhlMjQ4NzhlMjM4ODhlMjM4OThlMjM4YThkMjI4YjhkMjI4YzhkMjI4ZDhkMjE4ZThkMjE4ZjhkMjE5MDhkMjE5MThjMjA5MjhjMjA5MjhjMjA5MzhjMWY5NDhjMWY5NThiMWY5NjhiMWY5NzhiMWY5ODhiMWY5OThhMWY5YThhMWU5YjhhMWU5Yzg5MWU5ZDg5MWY5ZTg5MWY5Zjg4MWZhMDg4MWZhMTg4MWZhMTg3MWZhMjg3MjBhMzg2MjBhNDg2MjFhNTg1MjFhNjg1MjJhNzg1MjJhODg0MjNhOTgzMjRhYTgzMjVhYjgyMjVhYzgyMjZhZDgxMjdhZDgxMjhhZTgwMjlhZjdmMmFiMDdmMmNiMTdlMmRiMjdkMmViMzdjMmZiNDdjMzFiNTdiMzJiNjdhMzRiNjc5MzViNzc5MzdiODc4MzhiOTc3M2FiYTc2M2JiYjc1M2RiYzc0M2ZiYzczNDBiZDcyNDJiZTcxNDRiZjcwNDZjMDZmNDhjMTZlNGFjMTZkNGNjMjZjNGVjMzZiNTBjNDZhNTJjNTY5NTRjNTY4NTZjNjY3NThjNzY1NWFjODY0NWNjODYzNWVjOTYyNjBjYTYwNjNjYjVmNjVjYjVlNjdjYzVjNjljZDViNmNjZDVhNmVjZTU4NzBjZjU3NzNkMDU2NzVkMDU0NzdkMTUzN2FkMTUxN2NkMjUwN2ZkMzRlODFkMzRkODRkNDRiODZkNTQ5ODlkNTQ4OGJkNjQ2OGVkNjQ1OTBkNzQzOTNkNzQxOTVkODQwOThkODNlOWJkOTNjOWRkOTNiYTBkYTM5YTJkYTM3YTVkYjM2YThkYjM0YWFkYzMyYWRkYzMwYjBkZDJmYjJkZDJkYjVkZTJiYjhkZTI5YmFkZTI4YmRkZjI2YzBkZjI1YzJkZjIzYzVlMDIxYzhlMDIwY2FlMTFmY2RlMTFkZDBlMTFjZDJlMjFiZDVlMjFhZDhlMjE5ZGFlMzE5ZGRlMzE4ZGZlMzE4ZTJlNDE4ZTVlNDE5ZTdlNDE5ZWFlNTFhZWNlNTFiZWZlNTFjZjFlNTFkZjRlNjFlZjZlNjIwZjhlNjIxZmJlNzIzZmRlNzI1XCIpKTtcblxuZXhwb3J0IHZhciBtYWdtYSA9IHJhbXAoY29sb3JzKFwiMDAwMDA0MDEwMDA1MDEwMTA2MDEwMTA4MDIwMTA5MDIwMjBiMDIwMjBkMDMwMzBmMDMwMzEyMDQwNDE0MDUwNDE2MDYwNTE4MDYwNTFhMDcwNjFjMDgwNzFlMDkwNzIwMGEwODIyMGIwOTI0MGMwOTI2MGQwYTI5MGUwYjJiMTAwYjJkMTEwYzJmMTIwZDMxMTMwZDM0MTQwZTM2MTUwZTM4MTYwZjNiMTgwZjNkMTkxMDNmMWExMDQyMWMxMDQ0MWQxMTQ3MWUxMTQ5MjAxMTRiMjExMTRlMjIxMTUwMjQxMjUzMjUxMjU1MjcxMjU4MjkxMTVhMmExMTVjMmMxMTVmMmQxMTYxMmYxMTYzMzExMTY1MzMxMDY3MzQxMDY5MzYxMDZiMzgxMDZjMzkwZjZlM2IwZjcwM2QwZjcxM2YwZjcyNDAwZjc0NDIwZjc1NDQwZjc2NDUxMDc3NDcxMDc4NDkxMDc4NGExMDc5NGMxMTdhNGUxMTdiNGYxMjdiNTExMjdjNTIxMzdjNTQxMzdkNTYxNDdkNTcxNTdlNTkxNTdlNWExNjdlNWMxNjdmNWQxNzdmNWYxODdmNjAxODgwNjIxOTgwNjQxYTgwNjUxYTgwNjcxYjgwNjgxYzgxNmExYzgxNmIxZDgxNmQxZDgxNmUxZTgxNzAxZjgxNzIxZjgxNzMyMDgxNzUyMTgxNzYyMTgxNzgyMjgxNzkyMjgyN2IyMzgyN2MyMzgyN2UyNDgyODAyNTgyODEyNTgxODMyNjgxODQyNjgxODYyNzgxODgyNzgxODkyODgxOGIyOTgxOGMyOTgxOGUyYTgxOTAyYTgxOTEyYjgxOTMyYjgwOTQyYzgwOTYyYzgwOTgyZDgwOTkyZDgwOWIyZTdmOWMyZTdmOWUyZjdmYTAyZjdmYTEzMDdlYTMzMDdlYTUzMTdlYTYzMTdkYTgzMjdkYWEzMzdkYWIzMzdjYWQzNDdjYWUzNDdiYjAzNTdiYjIzNTdiYjMzNjdhYjUzNjdhYjczNzc5YjgzNzc5YmEzODc4YmMzOTc4YmQzOTc3YmYzYTc3YzAzYTc2YzIzYjc1YzQzYzc1YzUzYzc0YzczZDczYzgzZTczY2EzZTcyY2MzZjcxY2Q0MDcxY2Y0MDcwZDA0MTZmZDI0MjZmZDM0MzZlZDU0NDZkZDY0NTZjZDg0NTZjZDk0NjZiZGI0NzZhZGM0ODY5ZGU0OTY4ZGY0YTY4ZTA0YzY3ZTI0ZDY2ZTM0ZTY1ZTQ0ZjY0ZTU1MDY0ZTc1MjYzZTg1MzYyZTk1NDYyZWE1NjYxZWI1NzYwZWM1ODYwZWQ1YTVmZWU1YjVlZWY1ZDVlZjA1ZjVlZjE2MDVkZjI2MjVkZjI2NDVjZjM2NTVjZjQ2NzVjZjQ2OTVjZjU2YjVjZjY2YzVjZjY2ZTVjZjc3MDVjZjc3MjVjZjg3NDVjZjg3NjVjZjk3ODVkZjk3OTVkZjk3YjVkZmE3ZDVlZmE3ZjVlZmE4MTVmZmI4MzVmZmI4NTYwZmI4NzYxZmM4OTYxZmM4YTYyZmM4YzYzZmM4ZTY0ZmM5MDY1ZmQ5MjY2ZmQ5NDY3ZmQ5NjY4ZmQ5ODY5ZmQ5YTZhZmQ5YjZiZmU5ZDZjZmU5ZjZkZmVhMTZlZmVhMzZmZmVhNTcxZmVhNzcyZmVhOTczZmVhYTc0ZmVhYzc2ZmVhZTc3ZmViMDc4ZmViMjdhZmViNDdiZmViNjdjZmViNzdlZmViOTdmZmViYjgxZmViZDgyZmViZjg0ZmVjMTg1ZmVjMjg3ZmVjNDg4ZmVjNjhhZmVjODhjZmVjYThkZmVjYzhmZmVjZDkwZmVjZjkyZmVkMTk0ZmVkMzk1ZmVkNTk3ZmVkNzk5ZmVkODlhZmRkYTljZmRkYzllZmRkZWEwZmRlMGExZmRlMmEzZmRlM2E1ZmRlNWE3ZmRlN2E5ZmRlOWFhZmRlYmFjZmNlY2FlZmNlZWIwZmNmMGIyZmNmMmI0ZmNmNGI2ZmNmNmI4ZmNmN2I5ZmNmOWJiZmNmYmJkZmNmZGJmXCIpKTtcblxuZXhwb3J0IHZhciBpbmZlcm5vID0gcmFtcChjb2xvcnMoXCIwMDAwMDQwMTAwMDUwMTAxMDYwMTAxMDgwMjAxMGEwMjAyMGMwMjAyMGUwMzAyMTAwNDAzMTIwNDAzMTQwNTA0MTcwNjA0MTkwNzA1MWIwODA1MWQwOTA2MWYwYTA3MjIwYjA3MjQwYzA4MjYwZDA4MjkwZTA5MmIxMDA5MmQxMTBhMzAxMjBhMzIxNDBiMzQxNTBiMzcxNjBiMzkxODBjM2MxOTBjM2UxYjBjNDExYzBjNDMxZTBjNDUxZjBjNDgyMTBjNGEyMzBjNGMyNDBjNGYyNjBjNTEyODBiNTMyOTBiNTUyYjBiNTcyZDBiNTkyZjBhNWIzMTBhNWMzMjBhNWUzNDBhNWYzNjA5NjEzODA5NjIzOTA5NjMzYjA5NjQzZDA5NjUzZTA5NjY0MDBhNjc0MjBhNjg0NDBhNjg0NTBhNjk0NzBiNmE0OTBiNmE0YTBjNmI0YzBjNmI0ZDBkNmM0ZjBkNmM1MTBlNmM1MjBlNmQ1NDBmNmQ1NTBmNmQ1NzEwNmU1OTEwNmU1YTExNmU1YzEyNmU1ZDEyNmU1ZjEzNmU2MTEzNmU2MjE0NmU2NDE1NmU2NTE1NmU2NzE2NmU2OTE2NmU2YTE3NmU2YzE4NmU2ZDE4NmU2ZjE5NmU3MTE5NmU3MjFhNmU3NDFhNmU3NTFiNmU3NzFjNmQ3ODFjNmQ3YTFkNmQ3YzFkNmQ3ZDFlNmQ3ZjFlNmM4MDFmNmM4MjIwNmM4NDIwNmI4NTIxNmI4NzIxNmI4ODIyNmE4YTIyNmE4YzIzNjk4ZDIzNjk4ZjI0Njk5MDI1Njg5MjI1Njg5MzI2Njc5NTI2Njc5NzI3NjY5ODI3NjY5YTI4NjU5YjI5NjQ5ZDI5NjQ5ZjJhNjNhMDJhNjNhMjJiNjJhMzJjNjFhNTJjNjBhNjJkNjBhODJlNWZhOTJlNWVhYjJmNWVhZDMwNWRhZTMwNWNiMDMxNWJiMTMyNWFiMzMyNWFiNDMzNTliNjM0NThiNzM1NTdiOTM1NTZiYTM2NTViYzM3NTRiZDM4NTNiZjM5NTJjMDNhNTFjMTNhNTBjMzNiNGZjNDNjNGVjNjNkNGRjNzNlNGNjODNmNGJjYTQwNGFjYjQxNDljYzQyNDhjZTQzNDdjZjQ0NDZkMDQ1NDVkMjQ2NDRkMzQ3NDNkNDQ4NDJkNTRhNDFkNzRiM2ZkODRjM2VkOTRkM2RkYTRlM2NkYjUwM2JkZDUxM2FkZTUyMzhkZjUzMzdlMDU1MzZlMTU2MzVlMjU3MzRlMzU5MzNlNDVhMzFlNTVjMzBlNjVkMmZlNzVlMmVlODYwMmRlOTYxMmJlYTYzMmFlYjY0MjllYjY2MjhlYzY3MjZlZDY5MjVlZTZhMjRlZjZjMjNlZjZlMjFmMDZmMjBmMTcxMWZmMTczMWRmMjc0MWNmMzc2MWJmMzc4MTlmNDc5MThmNTdiMTdmNTdkMTVmNjdlMTRmNjgwMTNmNzgyMTJmNzg0MTBmODg1MGZmODg3MGVmODg5MGNmOThiMGJmOThjMGFmOThlMDlmYTkwMDhmYTkyMDdmYTk0MDdmYjk2MDZmYjk3MDZmYjk5MDZmYjliMDZmYjlkMDdmYzlmMDdmY2ExMDhmY2EzMDlmY2E1MGFmY2E2MGNmY2E4MGRmY2FhMGZmY2FjMTFmY2FlMTJmY2IwMTRmY2IyMTZmY2I0MThmYmI2MWFmYmI4MWRmYmJhMWZmYmJjMjFmYmJlMjNmYWMwMjZmYWMyMjhmYWM0MmFmYWM2MmRmOWM3MmZmOWM5MzJmOWNiMzVmOGNkMzdmOGNmM2FmN2QxM2RmN2QzNDBmNmQ1NDNmNmQ3NDZmNWQ5NDlmNWRiNGNmNGRkNGZmNGRmNTNmNGUxNTZmM2UzNWFmM2U1NWRmMmU2NjFmMmU4NjVmMmVhNjlmMWVjNmRmMWVkNzFmMWVmNzVmMWYxNzlmMmYyN2RmMmY0ODJmM2Y1ODZmM2Y2OGFmNGY4OGVmNWY5OTJmNmZhOTZmOGZiOWFmOWZjOWRmYWZkYTFmY2ZmYTRcIikpO1xuXG5leHBvcnQgdmFyIHBsYXNtYSA9IHJhbXAoY29sb3JzKFwiMGQwODg3MTAwNzg4MTMwNzg5MTYwNzhhMTkwNjhjMWIwNjhkMWQwNjhlMjAwNjhmMjIwNjkwMjQwNjkxMjYwNTkxMjgwNTkyMmEwNTkzMmMwNTk0MmUwNTk1MmYwNTk2MzEwNTk3MzMwNTk3MzUwNDk4MzcwNDk5MzgwNDlhM2EwNDlhM2MwNDliM2UwNDljM2YwNDljNDEwNDlkNDMwMzllNDQwMzllNDYwMzlmNDgwMzlmNDkwM2EwNGIwM2ExNGMwMmExNGUwMmEyNTAwMmEyNTEwMmEzNTMwMmEzNTUwMmE0NTYwMWE0NTgwMWE0NTkwMWE1NWIwMWE1NWMwMWE2NWUwMWE2NjAwMWE2NjEwMGE3NjMwMGE3NjQwMGE3NjYwMGE3NjcwMGE4NjkwMGE4NmEwMGE4NmMwMGE4NmUwMGE4NmYwMGE4NzEwMGE4NzIwMWE4NzQwMWE4NzUwMWE4NzcwMWE4NzgwMWE4N2EwMmE4N2IwMmE4N2QwM2E4N2UwM2E4ODAwNGE4ODEwNGE3ODMwNWE3ODQwNWE3ODYwNmE2ODcwN2E2ODgwOGE2OGEwOWE1OGIwYWE1OGQwYmE1OGUwY2E0OGYwZGE0OTEwZWEzOTIwZmEzOTQxMGEyOTUxMWExOTYxM2ExOTgxNGEwOTkxNTlmOWExNjlmOWMxNzllOWQxODlkOWUxOTlkYTAxYTljYTExYjliYTIxZDlhYTMxZTlhYTUxZjk5YTYyMDk4YTcyMTk3YTgyMjk2YWEyMzk1YWIyNDk0YWMyNjk0YWQyNzkzYWUyODkyYjAyOTkxYjEyYTkwYjIyYjhmYjMyYzhlYjQyZThkYjUyZjhjYjYzMDhiYjczMThhYjgzMjg5YmEzMzg4YmIzNDg4YmMzNTg3YmQzNzg2YmUzODg1YmYzOTg0YzAzYTgzYzEzYjgyYzIzYzgxYzMzZDgwYzQzZTdmYzU0MDdlYzY0MTdkYzc0MjdjYzg0MzdiYzk0NDdhY2E0NTdhY2I0Njc5Y2M0Nzc4Y2M0OTc3Y2Q0YTc2Y2U0Yjc1Y2Y0Yzc0ZDA0ZDczZDE0ZTcyZDI0ZjcxZDM1MTcxZDQ1MjcwZDU1MzZmZDU1NDZlZDY1NTZkZDc1NjZjZDg1NzZiZDk1ODZhZGE1YTZhZGE1YjY5ZGI1YzY4ZGM1ZDY3ZGQ1ZTY2ZGU1ZjY1ZGU2MTY0ZGY2MjYzZTA2MzYzZTE2NDYyZTI2NTYxZTI2NjYwZTM2ODVmZTQ2OTVlZTU2YTVkZTU2YjVkZTY2YzVjZTc2ZTViZTc2ZjVhZTg3MDU5ZTk3MTU4ZTk3MjU3ZWE3NDU3ZWI3NTU2ZWI3NjU1ZWM3NzU0ZWQ3OTUzZWQ3YTUyZWU3YjUxZWY3YzUxZWY3ZTUwZjA3ZjRmZjA4MDRlZjE4MTRkZjE4MzRjZjI4NDRiZjM4NTRiZjM4NzRhZjQ4ODQ5ZjQ4OTQ4ZjU4YjQ3ZjU4YzQ2ZjY4ZDQ1ZjY4ZjQ0Zjc5MDQ0Zjc5MTQzZjc5MzQyZjg5NDQxZjg5NTQwZjk5NzNmZjk5ODNlZjk5YTNlZmE5YjNkZmE5YzNjZmE5ZTNiZmI5ZjNhZmJhMTM5ZmJhMjM4ZmNhMzM4ZmNhNTM3ZmNhNjM2ZmNhODM1ZmNhOTM0ZmRhYjMzZmRhYzMzZmRhZTMyZmRhZjMxZmRiMTMwZmRiMjJmZmRiNDJmZmRiNTJlZmViNzJkZmViODJjZmViYTJjZmViYjJiZmViZDJhZmViZTJhZmVjMDI5ZmRjMjI5ZmRjMzI4ZmRjNTI3ZmRjNjI3ZmRjODI3ZmRjYTI2ZmRjYjI2ZmNjZDI1ZmNjZTI1ZmNkMDI1ZmNkMjI1ZmJkMzI0ZmJkNTI0ZmJkNzI0ZmFkODI0ZmFkYTI0ZjlkYzI0ZjlkZDI1ZjhkZjI1ZjhlMTI1ZjdlMjI1ZjdlNDI1ZjZlNjI2ZjZlODI2ZjVlOTI2ZjVlYjI3ZjRlZDI3ZjNlZTI3ZjNmMDI3ZjJmMjI3ZjFmNDI2ZjFmNTI1ZjBmNzI0ZjBmOTIxXCIpKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbmltcG9ydCB7bWF4LCBtaW59IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzY2FsZVNlcXVlbnRpYWx9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0ICogYXMgZDNDaHJvbWF0aWMgZnJvbSBcImQzLXNjYWxlLWNocm9tYXRpY1wiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2xvckNoYXJ0KHNodWZmbGU9dHJ1ZSl7XG4gICAgLy8gcmVmIGlsbHVzdHJhdG9yIGNvbG9yIHRoZW1lc1xuICAgIGNvbnN0IGNvbG9ycyA9IFtcbiAgICAgICAgXCJyZ2IoMTAwLDExOCwxMjApXCIsXG4gICAgICAgIFwicmdiKDEwMSwxNDEsMTQ1KVwiLFxuICAgICAgICBcInJnYigxMDMsMTI2LDgyKVwiLFxuICAgICAgICBcInJnYigxMDMsMTg0LDIyMilcIixcbiAgICAgICAgXCJyZ2IoMTA4LDExMCw4OClcIixcblxuICAgICAgICBcInJnYigxMDgsMTQ3LDEyOClcIixcbiAgICAgICAgXCJyZ2IoMTE5LDE0NCwxODIpXCIsXG4gICAgICAgIFwicmdiKDEyNiwxMzAsMTIyKVwiLFxuICAgICAgICBcInJnYigxMzMsMTczLDE4NilcIixcbiAgICAgICAgXCJyZ2IoMTM3LDExNCw5MSlcIixcbiAgICAgICAgXCJyZ2IoMTQ1LDE3MCwxNTcpXCIsXG5cbiAgICAgICAgXCJyZ2IoMTQ1LDIwMSwyMzIpXCIsXG4gICAgICAgIFwicmdiKDE0NywxMDUsNjYpXCIsXG4gICAgICAgIFwicmdiKDE1OSwxMTQsMTE2KVwiLFxuICAgICAgICBcInJnYigxNTksMTg4LDE5MSlcIixcbiAgICAgICAgXCJyZ2IoMTU5LDIyOSwxOTQpXCIsXG4gICAgICAgIFwicmdiKDE2MywxNjMsMTcxKVwiLFxuXG4gICAgICAgIFwicmdiKDE2NCwyMDcsMTkwKVwiLFxuICAgICAgICBcInJnYigxNzIsMTA4LDEzMClcIixcbiAgICAgICAgXCJyZ2IoMTczLDg0LDExNClcIixcbiAgICAgICAgXCJyZ2IoMTc0LDE5NSwyMjIpXCIsXG4gICAgICAgIFwicmdiKDE3NiwyMDQsMTUzKVwiLFxuXG4gICAgICAgIFwicmdiKDE3OSwxODAsMTUwKVwiLFxuICAgICAgICBcInJnYigxODAsMjIwLDIzNylcIixcbiAgICAgICAgXCJyZ2IoMTgzLDIwMiwxMjEpXCIsXG4gICAgICAgIFwicmdiKDE5MiwyMDIsODUpXCIsXG4gICAgICAgIFwicmdiKDE5MywxOTEsMTkzXCIsXG4gICAgICAgIFwicmdiKDE5NSw5NywxMzYpXCIsXG5cbiAgICAgICAgXCJyZ2IoMTk5LDEyMSwxMDIpXCIsXG4gICAgICAgIFwicmdiKDIwNywyMDIsNzYpXCIsXG4gICAgICAgIFwicmdiKDIwOSwyMTksMTg5KVwiLFxuICAgICAgICBcInJnYigyMTMsMjUxLDI1NSlcIixcbiAgICAgICAgXCJyZ2IoMjE1LDk0LDU2KVwiLFxuXG4gICAgICAgIFwicmdiKDIxOCwxMTQsMTI2KVwiLFxuICAgICAgICBcInJnYigyMjMsOTAsNzMpXCIsXG4gICAgICAgIFwicmdiKDIyNCwyNDcsMjE3KVwiLFxuICAgICAgICBcInJnYigyMjcsMjA1LDE2NClcIixcbiAgICAgICAgXCJyZ2IoMjI4LDE2OCwxODUpXCIsXG5cbiAgICAgICAgXCJyZ2IoMjMwLDE3NiwxNTIpXCIsXG4gICAgICAgIFwicmdiKDIzMiwyMTIsMTc1KVwiLFxuICAgICAgICBcInJnYigyMzksMjAxLDc2KVwiLFxuICAgICAgICBcInJnYigyNDAsMTI0LDEwOClcIixcbiAgICAgICAgXCJyZ2IoMjQ2LDIzMiwxNzcpXCIsXG5cbiAgICAgICAgXCJyZ2IoMjQ5LDIyOCwxNzMpXCIsXG4gICAgICAgIFwicmdiKDI1MiwyNDUsMTkxKVwiLFxuICAgICAgICBcInJnYigyNTUsMTg4LDEwMylcIixcbiAgICAgICAgXCJyZ2IoNDUsOTQsMTEwKVwiLFxuICAgICAgICBcInJnYig1MSwxNTMsMjA0KVwiLFxuXG4gICAgICAgIFwicmdiKDYwLDEyNCwxNDUpXCIsXG4gICAgICAgIFwicmdiKDYyLDg3LDE0NSlcIixcbiAgICAgICAgXCJyZ2IoNjUsMTE1LDEyMClcIixcbiAgICAgICAgXCJyZ2IoODksMjE2LDIyOSlcIixcbiAgICAgICAgXCJyZ2IoOTQsMTc4LDE1MylcIixcbiAgICAgICAgXCJyZ2IoOTUsMTI0LDEzNClcIlxuICAgIF07XG5cbiAgICBpZiAoc2h1ZmZsZSkgcmV0dXJuIHNodWZmbGVDb2xvcnMoY29sb3JzKTtcbiAgICByZXR1cm4gY29sb3JzO1xufVxuXG5mdW5jdGlvbiBzaHVmZmxlQ29sb3JzKGFycmF5KSB7XG4gICAgLy8gRmlzaGVyLVlhdGVzIHNodWZmbGVcbiAgICBsZXQgY291bnRlciA9IGFycmF5Lmxlbmd0aDtcblxuICAgIC8vIFdoaWxlIHRoZXJlIGFyZSBlbGVtZW50cyBpbiB0aGUgYXJyYXlcbiAgICB3aGlsZSAoY291bnRlciA+IDApIHtcbiAgICAgICAgLy8gUGljayBhIHJhbmRvbSBpbmRleFxuICAgICAgICBsZXQgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjb3VudGVyKTtcblxuICAgICAgICAvLyBEZWNyZWFzZSBjb3VudGVyIGJ5IDFcbiAgICAgICAgY291bnRlci0tO1xuXG4gICAgICAgIC8vIEFuZCBzd2FwIHRoZSBsYXN0IGVsZW1lbnQgd2l0aCBpdFxuICAgICAgICBsZXQgdGVtcCA9IGFycmF5W2NvdW50ZXJdO1xuICAgICAgICBhcnJheVtjb3VudGVyXSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdGVtcDtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogZ2V0IGEgY29sb3Igc2NoZW1lIGJ5IG5hbWVcbiAqIEBwYXJhbSBuYW1lIHtlbnVtfTogQnVHbiwgT3JSZC4uLi5cbiAqIEByZXR1cm5zIHsqfTogYSBjb250aW51b3VzIGludGVycG9sYXRvciAodXNlZCB3aXRoIGQzLnNjYWxlU2VxdWVudGlhbClcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbG9ySW50ZXJwb2xhdG9yKG5hbWUpe1xuICAgIC8vIHJlZmVyZW5jZTogaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLXNjYWxlLWNocm9tYXRpYy9ibG9iL21hc3Rlci9SRUFETUUubWQjc2VxdWVudGlhbC1tdWx0aS1odWVcblxuICAgIGNvbnN0IGludGVycG9sYXRvcnMgPSB7XG4gICAgICAgIEJ1R246IGQzQ2hyb21hdGljLmludGVycG9sYXRlQnVHbixcbiAgICAgICAgT3JSZDogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVPclJkLFxuICAgICAgICBQdUJ1OiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVB1QnUsXG4gICAgICAgIFlsR25CdTogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVZbEduQnUsXG4gICAgICAgIEJsdWVzOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZUJsdWVzLFxuICAgICAgICBPcmFuZ2VzOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZU9yYW5nZXMsXG4gICAgICAgIEdyZWVuczogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVHcmVlbnMsXG4gICAgICAgIFB1cnBsZXM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlUHVycGxlcyxcbiAgICAgICAgUmVkczogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVSZWRzLFxuICAgICAgICBHcmV5czogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVHcmV5cyxcbiAgICAgICAgR3JheXM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlR3JleXMsXG5cbiAgICAgICAgLy8gZGl2ZXJnaW5nIGNvbG9yIHNjaGVtZXNcbiAgICAgICAgUmRCdTogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVSZEJ1LFxuICAgICAgICBSZEd5OiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVJkR3ksXG4gICAgICAgIFBpWUc6IGQzQ2hyb21hdGljLmludGVycG9sYXRlUGlZRyxcbiAgICAgICAgUHVPcjogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVQdU9yLFxuICAgICAgICBSZFlsQnU6IGQzQ2hyb21hdGljLmludGVycG9sYXRlUmRZbEJ1XG4gICAgfTtcbiAgICBpZiAoIWludGVycG9sYXRvcnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY29uc3QgZXJyID0gXCJVbnJlY29nbml6ZWQgY29sb3I6IFwiICsgbmFtZTtcbiAgICAgICAgYWxlcnQoZXJyKTtcbiAgICAgICAgdGhyb3coZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIGludGVycG9sYXRvcnNbbmFtZV07XG59XG5cbi8qKlxuICogcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtc2NhbGVcbiAqIHJlZmVyZW5jZTogaHR0cDovL2JsLm9ja3Mub3JnL2N1cnJhbi8zMDk0YjM3ZTYzYjkxOGJhYjBhMDY3ODdlMTYxNjA3YlxuICogc2NhbGVTZXF1ZW50aWFsIG1hcHMgdGhlIGNvbnRpbnVvdXMgZG9tYWluIHRvIGEgY29udGludW91cyBjb2xvciBzY2FsZVxuICogQHBhcmFtIGRhdGEge0xpc3R9IG9mIG51bWVyaWNhbCBkYXRhXG4gKiBAcGFyYW0gY29sb3JzIHtTdHJpbmd9IGEgY29sb3IgbmFtZSB0aGF0IGlzIGF2YWlsYWJsZSBpbiBnZXRDb2xvckludGVycG9sYXRvcigpXG4gKiBAcGFyYW0gZG1pbiB7TnVtYmVyfSBtaW5pbXVtIGRvbWFpbiB2YWx1ZVxuICogQHBhcmFtIGRtYXgge051bWJlcn0gbWF4aW11bSBkb21haW4gdmFsdWVcbiAqIEBwYXJhbSByZXZlcnNlIHtCb29sZWFufSByZXZlcnNlIHRoZSBjb2xvciBzY2hlbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldENvbG9yU2NhbGUoZGF0YSwgY29sb3JzPVwiWWxHbkJ1XCIsIGRtaW49dW5kZWZpbmVkLCBkbWF4PXVuZGVmaW5lZCwgcmV2ZXJzZT1mYWxzZSkge1xuICAgIC8vIGxldCBkbWF4ID0gTWF0aC5yb3VuZChtYXgoZGF0YSkpO1xuICAgIGRtYXggPSBkbWF4ID09PSB1bmRlZmluZWQ/bWF4KGRhdGEpOmRtYXg7XG4gICAgZG1pbiA9IGRtaW4gPT09IHVuZGVmaW5lZD9taW4oZGF0YSk6ZG1pbjtcbiAgICBjb25zdCBzY2FsZSA9IHNjYWxlU2VxdWVudGlhbChnZXRDb2xvckludGVycG9sYXRvcihjb2xvcnMpKTtcbiAgICBpZihyZXZlcnNlKSBzY2FsZS5kb21haW4oW2RtYXgsIGRtaW5dKTtcbiAgICBlbHNlIHNjYWxlLmRvbWFpbihbZG1pbiwgZG1heF0pO1xuICAgIHJldHVybiBzY2FsZTtcbn1cblxuLyoqXG4gKiBEcmF3IGEgY29sb3IgbGVnZW5kIGJhci5cbiAqIERlcGVuZGVuY2llczogZXhwcmVzc2lvbk1hcC5jc3NcbiAqIEBwYXJhbSB0aXRsZSB7U3RyaW5nfVxuICogQHBhcmFtIGRvbSB7b2JqZWN0fSBEMyBkb20gb2JqZWN0XG4gKiBAcGFyYW0gc2NhbGUge09iamVjdH0gRDMgc2NhbGUgb2YgdGhlIGNvbG9yXG4gKiBAcGFyYW0gY29uZmlnIHtPYmplY3R9IHdpdGggYXR0cjogeCwgeVxuICogQHBhcmFtIHVzZUxvZyB7Qm9vbGVhbn1cbiAqIEBwYXJhbSB0aWNrcyB7SW50ZWdlcn0gbnVtYmVyIG9mIHRpY2tzIChvbmUtc2lkZWQpXG4gKiBAcGFyYW0gYmFzZSB7SW50ZWdlcn0gbG9nIGJhc2VcbiAqIEBwYXJhbSBjZWxsIHtPYmplY3R9IHdpdGggYXR0cmlidXRlczogaCwgd1xuICogQHBhcmFtIG9yaWVudGF0aW9uIHtlbnVtfSBoIG9yIHYsIGkuZS4gaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbFxuICogQHBhcmFtIGRpdmVyZ2luZyB7Qm9vbGVhbn0gd2hldGhlciB0aGUgY29sb3Igc2NoZW1lIGlzIGRpdmVyZ2luZ1xuICogQHBhcmFtIGNlbGxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRyYXdDb2xvckxlZ2VuZCh0aXRsZSwgZG9tLCBzY2FsZSwgY29uZmlnLCB1c2VMb2csIHRpY2tzPTEwLCBiYXNlPTEwLCBjZWxsPXtoOjEwLCB3OjQwfSwgb3JpZW50YXRpb249XCJoXCIsIGRpdmVyZ2luZz1mYWxzZSl7XG4gICAgbGV0IGRhdGEgPSBbXTtcblxuICAgIGlmKGRpdmVyZ2luZyl7XG4gICAgICAgIGxldCByYW5nZSA9IFsuLi5BcnJheSh0aWNrcysxKS5rZXlzKCldO1xuICAgICAgICBsZXQgaW50ZXJ2YWwgPSBzY2FsZS5kb21haW4oKVsxXS90aWNrcztcbiAgICAgICAgZGF0YSA9IHJhbmdlLm1hcCgoZCk9PmQqaW50ZXJ2YWwpO1xuICAgICAgICBkYXRhID0gZGF0YS5jb25jYXQocmFuZ2UuZmlsdGVyKChkKT0+ZCE9MCkubWFwKChkKT0+MC1kKmludGVydmFsKSkuc29ydCgoYSwgYikgPT4ge3JldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjt9KTtcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgICAgbGV0IHJhbmdlID0gWy4uLkFycmF5KHRpY2tzKzEpLmtleXMoKV07XG4gICAgICAgIGxldCBpbnRlcnZhbCA9IHNjYWxlLmRvbWFpbigpWzFdL3RpY2tzO1xuICAgICAgICBkYXRhID0gcmFuZ2UubWFwKChkKT0+ZCppbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgLy8gbGVnZW5kIGdyb3Vwc1xuICAgIGNvbnN0IGxlZ2VuZHMgPSBkb20uYXBwZW5kKFwiZ1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtjb25maWcueH0sICR7Y29uZmlnLnl9KWApXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCIubGVnZW5kXCIpLmRhdGEoZGF0YSk7XG5cbiAgICBjb25zdCBnID0gbGVnZW5kcy5lbnRlcigpLmFwcGVuZChcImdcIikuY2xhc3NlZChcImxlZ2VuZFwiLCB0cnVlKTtcblxuICAgIGlmIChvcmllbnRhdGlvbiA9PSAnaCcpe1xuICAgICAgICAgLy8gbGVnZW5kIHRpdGxlXG4gICAgICAgIGRvbS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29sb3ItbGVnZW5kXCIpXG4gICAgICAgICAgICAudGV4dCh0aXRsZSlcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAtMTApXG4gICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgY2VsbC5oKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2NvbmZpZy54fSwgJHtjb25maWcueX0pYCk7XG5cbiAgICAgICAgLy8gdGhlIGNvbG9yIGxlZ2VuZFxuICAgICAgICBnLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCwgaSkgPT4gY2VsbC53KmkpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgNSlcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgY2VsbC53KVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgY2VsbC5oKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBzY2FsZSk7XG5cbiAgICAgICAgZy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29sb3ItbGVnZW5kXCIpXG4gICAgICAgICAgICAudGV4dCgoZCkgPT4gdXNlTG9nPyhNYXRoLnBvdyhiYXNlLCBkKSkudG9QcmVjaXNpb24oMik6ZC50b1ByZWNpc2lvbigyKSlcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCwgaSkgPT4gY2VsbC53ICogaSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAgLy8gbGVnZW5kIHRpdGxlXG4gICAgICAgIGRvbS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29sb3ItbGVnZW5kXCIpXG4gICAgICAgICAgICAudGV4dCh0aXRsZSlcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCA1KVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtjb25maWcueH0sICR7Y29uZmlnLnkgKyBjZWxsLmggKiBkYXRhLmxlbmd0aH0pcm90YXRlKDkwKWApO1xuXG4gICAgICAgIGcuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKGQsIGkpID0+IGNlbGwuaCppKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBjZWxsLncpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBjZWxsLmgpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIHNjYWxlKTtcblxuICAgICAgICBnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjb2xvci1sZWdlbmRcIilcbiAgICAgICAgICAgIC50ZXh0KChkKSA9PiB1c2VMb2c/KE1hdGgucG93KGJhc2UsIGQpLTEpLnRvUHJlY2lzaW9uKDIpOmQudG9QcmVjaXNpb24oMikpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgMTUpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKGQsIGkpID0+IGNlbGwuaCAqIGkgKyAoY2VsbC5oLzIpKTtcbiAgICB9XG5cblxuXG59IiwiaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXF1ZW50aWFsKGludGVycG9sYXRvcikge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeDEgPSAxLFxuICAgICAgazEwID0gMSxcbiAgICAgIGNsYW1wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHZhciB0ID0gKHggLSB4MCkgKiBrMTA7XG4gICAgcmV0dXJuIGludGVycG9sYXRvcihjbGFtcCA/IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHQpKSA6IHQpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gK19bMF0sIHgxID0gK19bMV0sIGsxMCA9IHgwID09PSB4MSA/IDAgOiAxIC8gKHgxIC0geDApLCBzY2FsZSkgOiBbeDAsIHgxXTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9ICEhXywgc2NhbGUpIDogY2xhbXA7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdG9yID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRvciA9IF8sIHNjYWxlKSA6IGludGVycG9sYXRvcjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlcXVlbnRpYWwoaW50ZXJwb2xhdG9yKS5kb21haW4oW3gwLCB4MV0pLmNsYW1wKGNsYW1wKTtcbiAgfTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQge25lc3R9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge2V4dGVudCwgbWF4LCBtaW59IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzZWxlY3QsIHNlbGVjdEFsbCwgZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2NhbGVCYW5kLCBzY2FsZUxpbmVhciwgc2NhbGVTcXJ0fSBmcm9tIFwiZDMtc2NhbGVcIjtcbmltcG9ydCB7YnJ1c2hYfSBmcm9tIFwiZDMtYnJ1c2hcIjtcblxuaW1wb3J0IFRvb2x0aXAgZnJvbSBcIi4vVG9vbHRpcFwiO1xuaW1wb3J0IHtzZXRDb2xvclNjYWxlLCBkcmF3Q29sb3JMZWdlbmR9IGZyb20gXCIuL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdWJibGVNYXAge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIHVzZUxvZz10cnVlLCBsb2dCYXNlPTEwLCBjb2xvclNjaGVtZT1cIlJlZHNcIil7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMudXNlTG9nID0gdXNlTG9nO1xuICAgICAgICB0aGlzLmxvZ0Jhc2UgPSBsb2dCYXNlO1xuICAgICAgICB0aGlzLmNvbG9yU2NoZW1lID0gY29sb3JTY2hlbWU7XG5cbiAgICAgICAgLy8gaW5pdGlhdGVzIGFkZGl0aW9uYWwgYXR0cmlidXRlc1xuICAgICAgICB0aGlzLnhTY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy55U2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY29sb3JTY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5idWJibGVTY2FsZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICB0aGlzLnRvb2xiYXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBhZGRUb29sdGlwKHBhcmVudElkKXtcbiAgICAgICAgbGV0IHBhcmVudCA9ICQoYCMke3BhcmVudElkfWApO1xuICAgICAgICBsZXQgdG9vbHRpcElkID0gcGFyZW50SWQgKyAnLXRvb2x0aXAnO1xuICAgICAgICBpZiAoJChgIyR7dG9vbHRpcElkfWApLmxlbmd0aCA9PSAwKSAkKCc8ZGl2Lz4nKS5hdHRyKCdpZCcsIHRvb2x0aXBJZCkuYXBwZW5kVG8ocGFyZW50KTtcbiAgICAgICAgdGhpcy50b29sdGlwID0gbmV3IFRvb2x0aXAodG9vbHRpcElkKTtcbiAgICAgICAgc2VsZWN0KGAjJHt0b29sdGlwSWR9YCkuY2xhc3NlZCgnYnViYmxlbWFwLXRvb2x0aXAnLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgdGhlIGJ1YmJsZSBtYXAgaW4gY2FudmFzXG4gICAgICogQHBhcmFtIGNhbnZhcyB7T0JKRUNUfTogdGhlIGNhbnZhcyBET00gRDMgc2VsZWN0IG9iamVjdFxuICAgICAqIEBwYXJhbSBkaW1lbnNpb25zIHtPQkpFQ1R9OiB0aGUgcGxvdCdzIGRpbWVuc2lvbnNcbiAgICAgKiBAcGFyYW0gY29sb3JTY2FsZURvbWFpbiB7TElTVH0gZGVmaW5lIHRoZSBjb2xvciBzY2FsZSBkb21haW4oKVxuICAgICAqIEBwYXJhbSBzaG93TGFiZWxzIHtCb29sZWFufVxuICAgICAqIEBwYXJhbSBjb2x1bW5MYWJlbEFuZ2xlIHtJbnRlZ2VyfVxuICAgICAqIEBwYXJhbSBjb2x1bW5MYWJlbFBvc0FkanVzdCB7SW50ZWdlcn1cbiAgICAgKi9cbiAgICBkcmF3Q2FudmFzKGNhbnZhcyxcbiAgICAgICAgZGltZW5zaW9ucz17dzoxMDAwLCBoOjYwMCwgdG9wOjIwLCBsZWZ0OjIwfSxcbiAgICAgICAgY29sb3JTY2FsZURvbWFpbj11bmRlZmluZWQsXG4gICAgICAgIGxhYmVsQ29uZmlnID0ge1xuICAgICAgICAgICAgY29sdW1uOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbmdsZTogMzAsXG4gICAgICAgICAgICAgICAgYWRqdXN0OiAwLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnYm90dG9tJyxcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgcm93OiB7XG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbmdsZTogMCxcbiAgICAgICAgICAgICAgICBhZGp1c3Q6IDAsXG4gICAgICAgICAgICAgICAgbG9jYXRpb246ICdsZWZ0JyxcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdyaWdodCcsXG4gICAgICAgICAgIH1cbiAgICB9KXtcbiAgICAgICAgdGhpcy5fc2V0U2NhbGVzKGRpbWVuc2lvbnMsIGNvbG9yU2NhbGVEb21haW4pO1xuXG4gICAgICAgIGxldCBjb250ZXh0ID0gY2FudmFzLm5vZGUoKS5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgICAgIC8vYmFja2dyb3VuZFxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICcjZmZmZmZmJztcbiAgICAgICAgY29udGV4dC5yZWN0KDAsMCxjYW52YXMuYXR0cignd2lkdGgnKSwgY2FudmFzLmF0dHIoJ2hlaWdodCcpKTtcbiAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICAgIC8vIGJ1YmJsZXNcbiAgICAgICAgdGhpcy5kYXRhLmZvckVhY2goKGQpPT57XG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLmNvbG9yU2NhbGUoZC52YWx1ZSk7XG4gICAgICAgICAgICBjb250ZXh0LmFyYyh0aGlzLnhTY2FsZShkLngpICsgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkvMiwgdGhpcy55U2NhbGUoZC55KSwgdGhpcy5idWJibGVTY2FsZShkLnIpLCAwLCAyKk1hdGguUEkpO1xuICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyB0ZXh0IGxhYmVsc1xuICAgICAgICBsZXQgY2wgPSBsYWJlbENvbmZpZy5jb2x1bW47XG4gICAgICAgIGxldCBybCA9IGxhYmVsQ29uZmlnLnJvdztcbiAgICAgICAgaWYocmwuc2hvdykge1xuICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICAgICAgICBjb250ZXh0LnRleHRBbGlnbiA9IGNsLnRleHRBbGlnbjtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJ2JsYWNrJztcbiAgICAgICAgICAgIGNvbnRleHQuZm9udCA9ICcxMHB4IE9wZW4gU2Fucyc7XG4gICAgICAgICAgICB0aGlzLnlTY2FsZS5kb21haW4oKS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dChkLCB0aGlzLnhTY2FsZS5yYW5nZSgpWzBdIC0gcmwuYWRqdXN0LCB0aGlzLnlTY2FsZShkKSArIDIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGNsLnNob3cpIHtcbiAgICAgICAgICAgIHRoaXMueFNjYWxlLmRvbWFpbigpLmZvckVhY2goKGQpPT57XG4gICAgICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAnYmxhY2snO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuZm9udCA9ICcxMHB4IE9wZW4gU2Fucyc7XG4gICAgICAgICAgICAgICAgY29udGV4dC50ZXh0QWxpZ24gPSBjbC50ZXh0QWxpZ247XG4gICAgICAgICAgICAgICAgY29udGV4dC50cmFuc2xhdGUodGhpcy54U2NhbGUoZCkrdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkvMiAtIDMsIHRoaXMueVNjYWxlLnJhbmdlKClbMV0gKyBjbC5hZGp1c3QpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQucm90YXRlKGNsLmFuZ2xlPT0wPzA6TWF0aC5QSS8oMTgwL2NsLmFuZ2xlKSk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dChkLCAwLCAwKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkcmF3Q29tYm8oXG4gICAgbWluaURvbSxcbiAgICBmb2N1c0RvbSxcbiAgICBkaW1lbnNpb25zPXt3OjEwMDAsIGg6NjAwLCB0b3A6MCwgbGVmdDowfSxcbiAgICBjb2xvclNjYWxlRG9tYWluPXVuZGVmaW5lZCxcbiAgICBhZGRCcnVzaD10cnVlLFxuICAgIGxhYmVsQ29uZmlnID0ge1xuICAgICAgICBjb2x1bW46IHtcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICBhbmdsZTogMzAsXG4gICAgICAgICAgICBhZGp1c3Q6IDAsXG4gICAgICAgICAgICBsb2NhdGlvbjogJ2JvdHRvbScsXG4gICAgICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0J1xuICAgICAgICB9LFxuICAgICAgIHJvdzoge1xuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgIGFuZ2xlOiAwLFxuICAgICAgICAgICAgYWRqdXN0OiAwLFxuICAgICAgICAgICAgbG9jYXRpb246ICdsZWZ0JyxcbiAgICAgICAgICAgIHRleHRBbGlnbjogJ3JpZ2h0JyxcbiAgICAgICB9XG4gICAgfSkge1xuXG4gICAgICAgIGxldCBzdmdEaW0gPSB7XG4gICAgICAgICAgICB3OiBkaW1lbnNpb25zLncsXG4gICAgICAgICAgICBoOiBkaW1lbnNpb25zLmgyLFxuICAgICAgICAgICAgdG9wOiBkaW1lbnNpb25zLnRvcCxcbiAgICAgICAgICAgIGxlZnQ6IGRpbWVuc2lvbnMubGVmdFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRyYXdTdmcoZm9jdXNEb20sIHN2Z0RpbSwgY29sb3JTY2FsZURvbWFpbiwgNTAsIGxhYmVsQ29uZmlnKTtcblxuICAgICAgICBsZXQgYnViYmxlcyA9IG1pbmlEb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGlwLXBhdGhcIiwgXCJ1cmwoI2NsaXApXCIpO1xuICAgICAgICB0aGlzLl9zZXRNaW5pU2NhbGVzKGRpbWVuc2lvbnMsIGNvbG9yU2NhbGVEb21haW4pO1xuICAgICAgICBidWJibGVzLnNlbGVjdEFsbChcIi5taW5pLW1hcC1jZWxsXCIpXG4gICAgICAgICAgICAuZGF0YSh0aGlzLmRhdGEsIChkKSA9PiBkLnZhbHVlKVxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdtaW5pLW1hcC1jZWxsJylcbiAgICAgICAgICAgIC5hdHRyKFwicm93XCIsIChkKSA9PiBgeCR7dGhpcy54U2NhbGVNaW5pLmRvbWFpbigpLmluZGV4T2YoZC54KX1gKVxuICAgICAgICAgICAgLmF0dHIoXCJjb2xcIiwgKGQpID0+IGB5JHt0aGlzLnlTY2FsZU1pbmkuZG9tYWluKCkuaW5kZXhPZihkLnkpfWApXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIChkKSA9PiB0aGlzLnhTY2FsZU1pbmkoZC54KSArIHRoaXMueFNjYWxlTWluaS5iYW5kd2lkdGgoKSAvIDIpXG4gICAgICAgICAgICAuYXR0cihcImN5XCIsIChkKSA9PiB0aGlzLnlTY2FsZU1pbmkoZC55KSlcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCAoZCkgPT4gdGhpcy5idWJibGVTY2FsZU1pbmkoZC5yKSlcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQpID0+IHRoaXMuY29sb3JTY2FsZShkLnZhbHVlKSk7XG5cbiAgICAgICAgaWYgKGFkZEJydXNoKSB7XG5cbiAgICAgICAgICAgIGxldCBicnVzaCA9IGJydXNoWCgpXG4gICAgICAgICAgICAgICAgLmV4dGVudChbXG4gICAgICAgICAgICAgICAgICAgIFswLCAwXSxcbiAgICAgICAgICAgICAgICAgICAgW2RpbWVuc2lvbnMudywgZGltZW5zaW9ucy5oXVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgLm9uKFwiYnJ1c2hcIiwgKCk9PntcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYnJ1c2hlZChmb2N1c0RvbSwgbGFiZWxDb25maWcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbWluaURvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJydXNoXCIpXG4gICAgICAgICAgICAgICAgLmNhbGwoYnJ1c2gpXG4gICAgICAgICAgICAgICAgLy8gLmNhbGwoYnJ1c2gubW92ZSwgdGhpcy54U2NhbGVNaW5pLnJhbmdlKCkpO1xuICAgICAgICAgICAgICAgIC5jYWxsKGJydXNoLm1vdmUsIFswLCB0aGlzLnhTY2FsZU1pbmkuYmFuZHdpZHRoKCkgKiA1MF0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBkcmF3U3ZnKGRvbSwgZGltZW5zaW9ucz17dzoxMDAwLCBoOjYwMCwgdG9wOjAsIGxlZnQ6MH0sIGNvbG9yU2NhbGVEb21haW49dW5kZWZpbmVkLCBicnVzaFNpemU9NTAsIGxhYmVsQ29uZmlnPXtcbiAgICAgICAgICAgIGNvbHVtbjoge1xuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgYW5nbGU6IDMwLFxuICAgICAgICAgICAgICAgIGFkanVzdDogMCxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ2JvdHRvbScsXG4gICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnbGVmdCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgIHJvdzoge1xuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgYW5nbGU6IDAsXG4gICAgICAgICAgICAgICAgYWRqdXN0OiAwLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnbGVmdCcsXG4gICAgICAgICAgICAgICAgdGV4dEFsaWduOiAncmlnaHQnLFxuICAgICAgICAgICB9XG4gICAgICAgIH0pe1xuICAgICAgICB0aGlzLl9zZXRTY2FsZXMoZGltZW5zaW9ucywgY29sb3JTY2FsZURvbWFpbiwgYnJ1c2hTaXplKTtcbiAgICAgICAgbGV0IHRvb2x0aXAgPSB0aGlzLnRvb2x0aXA7XG4gICAgICAgIC8vIGJ1YmJsZXNcbiAgICAgICAgbGV0IGJ1YmJsZXMgPSBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGlwLXBhdGhcIiwgXCJ1cmwoI2NsaXApXCIpO1xuXG4gICAgICAgIGJ1YmJsZXMuc2VsZWN0QWxsKFwiLmJ1YmJsZS1tYXAtY2VsbFwiKVxuICAgICAgICAgICAgLmRhdGEodGhpcy5kYXRhLCAoZCk9PmQudmFsdWUpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJ1YmJsZS1tYXAtY2VsbFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJyb3dcIiwgKGQpPT4gYHgke3RoaXMueFNjYWxlLmRvbWFpbigpLmluZGV4T2YoZC54KX1gKVxuICAgICAgICAgICAgLmF0dHIoXCJjb2xcIiwgKGQpPT4gYHkke3RoaXMueVNjYWxlLmRvbWFpbigpLmluZGV4T2YoZC55KX1gKVxuICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCAoZCkgPT4gdGhpcy54U2NhbGUoZC54KSArIHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcImN5XCIsIChkKSA9PiB0aGlzLnlTY2FsZShkLnkpICsgdGhpcy55U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCAoZCkgPT4gdGhpcy5idWJibGVTY2FsZShkLnIpKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCkgPT4gdGhpcy5jb2xvclNjYWxlKGQudmFsdWUpKVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgIGxldCBzZWxlY3RlZCA9IHNlbGVjdCh0aGlzKTtcbiAgICAgICAgICAgICAgICBsZXQgcm93Q2xhc3MgPSBzZWxlY3RlZC5hdHRyKFwicm93XCIpO1xuICAgICAgICAgICAgICAgIGxldCBjb2xDbGFzcyA9IHNlbGVjdGVkLmF0dHIoXCJjb2xcIik7XG4gICAgICAgICAgICAgICAgZG9tLnNlbGVjdEFsbChcIi5idWJibGUtbWFwLXhsYWJlbFwiKS5maWx0ZXIoYC4ke3Jvd0NsYXNzfWApXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIGRvbS5zZWxlY3RBbGwoXCIuYnViYmxlLW1hcC15bGFiZWxcIikuZmlsdGVyKGAuJHtjb2xDbGFzc31gKVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZC5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIGxldCBkaXNwbGF5VmFsdWUgPSBkLmRpc3BsYXlWYWx1ZSA9PT0gdW5kZWZpbmVkP3BhcnNlRmxvYXQoZC52YWx1ZS50b0V4cG9uZW50aWFsKCkpLnRvUHJlY2lzaW9uKDQpOmQuZGlzcGxheVZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBkaXNwbGF5U2l6ZSA9IGQuckRpc3BsYXlWYWx1ZSA9PT0gdW5kZWZpbmVkPyBkLnIudG9QcmVjaXNpb24oNCk6ZC5yRGlzcGxheVZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBkaXNwbGF5WCA9IGQuZGlzcGxheVggPT09IHVuZGVmaW5lZD8gZC54OmQuZGlzcGxheVg7XG4gICAgICAgICAgICAgICAgbGV0IGRpc3BsYXlZID0gZC5kaXNwbGF5WSA9PT0gdW5kZWZpbmVkPyBkLnk6ZC5kaXNwbGF5WTtcbiAgICAgICAgICAgICAgICB0b29sdGlwLnNob3coYENvbHVtbjogJHtkaXNwbGF5WH0gPGJyLz4gUm93OiAke2Rpc3BsYXlZfTxici8+IFZhbHVlOiAke2Rpc3BsYXlWYWx1ZX08YnIvPiBTaXplOiAke2Rpc3BsYXlTaXplfWApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgZG9tLnNlbGVjdEFsbChcIipcIikuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgdG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyB0ZXh0IGxhYmVsc1xuICAgICAgICBsZXQgY2wgPSBsYWJlbENvbmZpZy5jb2x1bW47XG4gICAgICAgIGxldCBybCA9IGxhYmVsQ29uZmlnLnJvdztcbiAgICAgICAgaWYoY2wuc2hvdykge1xuICAgICAgICAgICAgLy8gY29sdW1uIGxhYmVsc1xuICAgICAgICAgICAgbGV0IGxvb2t1cCA9IHt9O1xuICAgICAgICAgICAgbmVzdCgpXG4gICAgICAgICAgICAgICAgLmtleSgoZCkgPT4gZC54KSAvLyBncm91cCB0aGlzLmRhdGEgYnkgZC54XG4gICAgICAgICAgICAgICAgLmVudHJpZXModGhpcy5kYXRhKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxvb2t1cFtkLmtleV0gPSBkLnZhbHVlc1swXS5kaXNwbGF5WFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IHhMYWJlbHMgPSBkb20uc2VsZWN0QWxsKCcuYnViYmxlLW1hcC14bGFiZWwnKS5kYXRhKHRoaXMueFNjYWxlLmRvbWFpbigpKVxuICAgICAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIChkLCBpKSA9PiBgYnViYmxlLW1hcC14bGFiZWwgeCR7aX1gKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCAwKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAwKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgY2wudGV4dEFsaWduPT0nbGVmdCc/J3N0YXJ0JzonZW5kJylcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJkZWZhdWx0XCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNpemUgPSBNYXRoLmZsb29yKHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpLyAyKT4xMj8xMjpNYXRoLmZsb29yKHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke3NpemV9cHhgXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgeCA9IHRoaXMueFNjYWxlKGQpICsgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkgLyAzO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeSA9IHRoaXMueVNjYWxlLnJhbmdlKClbMV0gKyBjbC5hZGp1c3Q7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7eH0sICR7eX0pIHJvdGF0ZSgke2NsLmFuZ2xlfSlgO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRleHQoKGQpID0+IGxvb2t1cFtkXXx8ZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJsLnNob3cpe1xuICAgICAgICAgICAgLy8gcm93IGxhYmVsc1xuICAgICAgICAgICAgbGV0IGxvb2t1cCA9IHt9O1xuICAgICAgICAgICAgbmVzdCgpXG4gICAgICAgICAgICAgICAgLmtleSgoZCkgPT4gZC55KSAvLyBncm91cCB0aGlzLmRhdGEgYnkgZC55XG4gICAgICAgICAgICAgICAgLmVudHJpZXModGhpcy5kYXRhKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxvb2t1cFtkLmtleV0gPSBkLnZhbHVlc1swXS5kaXNwbGF5WVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IHlMYWJlbHMgPSBkb20uc2VsZWN0QWxsKCcuYnViYmxlLW1hcC15bGFiZWwnKS5kYXRhKHRoaXMueVNjYWxlLmRvbWFpbigpKVxuICAgICAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIChkLCBpKSA9PiBgYnViYmxlLW1hcC15bGFiZWwgeSR7aX1gKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCAwKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAwKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgcmwudGV4dEFsaWduPT0nbGVmdCc/J3N0YXJ0JzonZW5kJylcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJkZWZhdWx0XCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsICgpPT57XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHNpemUgPSBNYXRoLmZsb29yKHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpLzEuNSk+MTQ/MTQ6TWF0aC5mbG9vcih0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8xLjUpPDEwPzEwOk1hdGguZmxvb3IodGhpcy55U2NhbGUuYmFuZHdpZHRoKCkvMS41KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke3NpemV9cHhgXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgeCA9IHRoaXMueFNjYWxlLnJhbmdlKClbMF0gLSBybC5hZGp1c3Q7XG4gICAgICAgICAgICAgICAgICAgIGxldCB5ID0gdGhpcy55U2NhbGUoZCkgKyB0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8xLjU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7eH0sICR7eX0pIHJvdGF0ZSgke3JsLmFuZ2xlfSlgO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRleHQoKGQpID0+IGxvb2t1cFtkXXx8ZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkcmF3Q29sb3JMZWdlbmQoZG9tLCBsZWdlbmRDb25maWc9e3g6MCwgeTowfSwgdGlja3M9NSwgdW5pdD1cIlwiKXtcbiAgICAgICAgZHJhd0NvbG9yTGVnZW5kKHVuaXQsIGRvbSwgdGhpcy5jb2xvclNjYWxlLCBsZWdlbmRDb25maWcsIHRoaXMudXNlTG9nLCB0aWNrcywgdGhpcy5sb2dCYXNlLCB7aDoxMCwgdzo0MH0sIFwiaFwiLCB0cnVlKTtcbiAgICB9XG5cbiAgICBkcmF3QnViYmxlTGVnZW5kKGRvbSwgbGVnZW5kQ29uZmlnPXt4OjAsIHk6MCwgdGl0bGU6XCJCdWJibGUgbGVnZW5kXCJ9LCB0aWNrcz01LCB1bml0PVwiXCIpe1xuICAgICAgICBkb20uc2VsZWN0QWxsKFwiLmJtYXAtYnViYmxlLWxlZ2VuZFwiKS5yZW1vdmUoKTsgLy8gY2xlYXIgcHJldmlvdXNseSByZW5kZXJlZCBsZWdlbmQgaWYgYW55LlxuXG4gICAgICAgIGxldCByYW5nZSA9IFsuLi5BcnJheSh0aWNrcysxKS5rZXlzKCldO1xuICAgICAgICBsZXQgaW50ZXJ2YWwgPSAodGhpcy5idWJibGVTY2FsZS5kb21haW4oKVsxXS10aGlzLmJ1YmJsZVNjYWxlLmRvbWFpbigpWzBdKS90aWNrcztcbiAgICAgICAgbGV0IGRhdGEgPSByYW5nZS5tYXAoKGQpPT50aGlzLmJ1YmJsZVNjYWxlLmRvbWFpbigpWzBdK2QqaW50ZXJ2YWwpOyAvLyBhc3N1bWluZyBkIGlzIHBvc2l0aXZlXG5cbiAgICAgICAgLy8gbGVnZW5kIGdyb3Vwc1xuICAgICAgICBsZXQgbGVnZW5kRyA9IGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJtYXAtYnViYmxlLWxlZ2VuZFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtsZWdlbmRDb25maWcueH0sICR7bGVnZW5kQ29uZmlnLnl9KWApO1xuICAgICAgICAgLy8gbGVnZW5kIHRpdGxlXG4gICAgICAgIGxlZ2VuZEcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNvbG9yLWxlZ2VuZFwiKVxuICAgICAgICAgICAgLnRleHQobGVnZW5kQ29uZmlnLnRpdGxlKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIC0xMClcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIilcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAxMCk7XG5cbiAgICAgICAgbGV0IGxlZ2VuZHMgPSBsZWdlbmRHLnNlbGVjdEFsbChcIi5sZWdlbmRcIikuZGF0YShkYXRhKTtcblxuICAgICAgICBsZXQgZyA9IGxlZ2VuZHMuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmNsYXNzZWQoXCJsZWdlbmRcIiwgdHJ1ZSk7XG4gICAgICAgIC8vIHRoZSBidWJibGVzXG4gICAgICAgIGxldCBjZWxsVyA9IDQwO1xuICAgICAgICBnLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCAoZCwgaSkgPT4gY2VsbFcqaSlcbiAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgMTApXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgKGQpPT50aGlzLmJ1YmJsZVNjYWxlKGQpKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBcImJsYWNrXCIpO1xuXG4gICAgICAgIGcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNvbG9yLWxlZ2VuZFwiKVxuICAgICAgICAgICAgLnRleHQoKGQpID0+IHRoaXMudXNlTG9nPyhNYXRoLnBvdyhiYXNlLCBkKSkudG9QcmVjaXNpb24oMik6ZC50b1ByZWNpc2lvbigyKSlcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCwgaSkgPT4gY2VsbFcgKiBpIC01KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApO1xuICAgIH1cblxuICAgIC8vIHByaXZhdGUgbWV0aG9kc1xuICAgIF9icnVzaGVkKGZvY3VzRG9tLCBsYWJlbENvbmZpZyl7XG5cbiAgICAgICAgbGV0IHNlbGVjdGlvbiA9IGV2ZW50LnNlbGVjdGlvbjtcbiAgICAgICAgbGV0IGJydXNoTGVmdCA9IE1hdGgucm91bmQoc2VsZWN0aW9uWzBdIC8gdGhpcy54U2NhbGVNaW5pLnN0ZXAoKSk7XG4gICAgICAgIGxldCBicnVzaFJpZ2h0ID0gTWF0aC5yb3VuZChzZWxlY3Rpb25bMV0gLyB0aGlzLnhTY2FsZU1pbmkuc3RlcCgpKTtcbiAgICAgICAgdGhpcy54U2NhbGUuZG9tYWluKHRoaXMueFNjYWxlTWluaS5kb21haW4oKS5zbGljZShicnVzaExlZnQsIGJydXNoUmlnaHQpKTsgLy8gcmVzZXQgdGhlIHhTY2FsZSBkb21haW5cbiAgICAgICAgbGV0IGJ1YmJsZU1heCA9IHRoaXMuX3NldEJ1YmJsZU1heCgpO1xuICAgICAgICB0aGlzLmJ1YmJsZVNjYWxlID0gdGhpcy5fc2V0QnViYmxlU2NhbGUoe21heDogYnViYmxlTWF4LCBtaW46IDJ9KTsgLy8gVE9ETzogY2hhbmdlIGhhcmQtY29kZWQgbWluIHJhZGl1c1xuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgZm9jdXMgYnViYmxlc1xuICAgICAgICBmb2N1c0RvbS5zZWxlY3RBbGwoXCIuYnViYmxlLW1hcC1jZWxsXCIpXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHggPSB0aGlzLnhTY2FsZShkLngpO1xuICAgICAgICAgICAgICAgIHJldHVybiB4ID09PSB1bmRlZmluZWQgPyB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKSAvIDIgOiB4ICsgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkgLyAyO1xuXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJyXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHggPSB0aGlzLnhTY2FsZShkLngpO1xuICAgICAgICAgICAgICAgIHJldHVybiB4ID09PSB1bmRlZmluZWQgPyAwIDogdGhpcy5idWJibGVTY2FsZShkLnIpOyAvLyBpbmRpY2F0aW5nIHRoYXQgdGhlIGJ1YmJsZSBpcyBub3QgaW4gZm9jdXMgem9uZSwgc28gc2V0IHRoZSByYWRpdXMgdG8gemVyb1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gdXBkYXRlIHRoZSBjb2x1bW4gbGFiZWxzXG4gICAgICAgIGZvY3VzRG9tLnNlbGVjdEFsbChcIi5idWJibGUtbWFwLXhsYWJlbFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgeCA9IHRoaXMueFNjYWxlKGQpICsgNSB8fCAwOyAvLyBUT0RPOiByZW1vdmUgaGFyZC1jb2RlZCB2YWx1ZVxuICAgICAgICAgICAgICAgIGxldCB5ID0gdGhpcy55U2NhbGUucmFuZ2UoKVsxXSArIGxhYmVsQ29uZmlnLmNvbHVtbi5hZGp1c3Q7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSkgcm90YXRlKCR7bGFiZWxDb25maWcuY29sdW1uLmFuZ2xlfSlgO1xuXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gdGhpcy54U2NhbGUoZCk7IC8vIFRPRE86IHJlbW92ZSBoYXJkLWNvZGVkIHZhbHVlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHggPT09IHVuZGVmaW5lZCA/IFwibm9uZVwiIDogXCJibG9ja1wiO1xuICAgICAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBfc2V0TWluaVNjYWxlcyhkaW1lbnNpb25zPXt3OjEwMDAsIGg6NjAwLCB0b3A6MjAsIGxlZnQ6MjB9LCBjRG9tYWluKXtcbiAgICAgICAgaWYgKHRoaXMueFNjYWxlTWluaSA9PT0gdW5kZWZpbmVkKSB0aGlzLnhTY2FsZU1pbmkgPSB0aGlzLl9zZXRYU2NhbGVNaW5pKGRpbWVuc2lvbnMpO1xuICAgICAgICBpZiAodGhpcy55U2NhbGVNaW5pID09PSB1bmRlZmluZWQpIHRoaXMueVNjYWxlTWluaSA9IHRoaXMuX3NldFlTY2FsZU1pbmkoZGltZW5zaW9ucyk7XG4gICAgICAgIGlmICh0aGlzLmNvbG9yU2NhbGUgPT09IHVuZGVmaW5lZCkgdGhpcy5jb2xvclNjYWxlID0gdGhpcy5fc2V0Q29sb3JTY2FsZShjRG9tYWluKTtcbiAgICAgICAgaWYgKHRoaXMuYnViYmxlU2NhbGVNaW5pID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxldCBidWJibGVNYXggPSB0aGlzLl9zZXRCdWJibGVNYXgodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmJ1YmJsZVNjYWxlTWluaSA9IHRoaXMuX3NldEJ1YmJsZVNjYWxlKHttYXg6IGJ1YmJsZU1heCwgbWluOjF9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXRTY2FsZXMoZGltZW5zaW9ucz17dzoxMDAwLCBoOjYwMCwgdG9wOjIwLCBsZWZ0OjIwfSwgY0RvbWFpbil7XG4gICAgICAgIGlmICh0aGlzLnhTY2FsZSA9PT0gdW5kZWZpbmVkKSB0aGlzLnhTY2FsZSA9IHRoaXMuX3NldFhTY2FsZShkaW1lbnNpb25zKTtcbiAgICAgICAgaWYgKHRoaXMueVNjYWxlID09PSB1bmRlZmluZWQpIHRoaXMueVNjYWxlID0gdGhpcy5fc2V0WVNjYWxlKGRpbWVuc2lvbnMpO1xuICAgICAgICBpZiAodGhpcy5jb2xvclNjYWxlID09PSB1bmRlZmluZWQpIHRoaXMuY29sb3JTY2FsZSA9IHRoaXMuX3NldENvbG9yU2NhbGUoY0RvbWFpbik7XG4gICAgICAgIGlmICh0aGlzLmJ1YmJsZVNjYWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxldCBidWJibGVNYXggPSB0aGlzLl9zZXRCdWJibGVNYXgoKTtcbiAgICAgICAgICAgIHRoaXMuYnViYmxlU2NhbGUgPSB0aGlzLl9zZXRCdWJibGVTY2FsZSh7bWF4OmJ1YmJsZU1heCwgbWluOiAyfSk7IC8vIFRPRE86IGNoYW5nZSBoYXJkLWNvZGVkIG1pbiByYWRpdXNcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9wYXJzZVhMaXN0KCl7XG4gICAgICAgICBsZXQgeExpc3QgPSBuZXN0KClcbiAgICAgICAgICAgIC5rZXkoKGQpID0+IGQueCkgLy8gZ3JvdXAgdGhpcy5kYXRhIGJ5IGQueFxuICAgICAgICAgICAgLmVudHJpZXModGhpcy5kYXRhKVxuICAgICAgICAgICAgLm1hcCgoZCkgPT4gZC5rZXkpIC8vIHRoZW4gcmV0dXJuIHRoZSB1bmlxdWUgbGlzdCBvZiBkLnhcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiB7cmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO30pO1xuICAgICAgICAgcmV0dXJuIHhMaXN0O1xuICAgIH1cblxuICAgIF9wYXJzZVlMaXN0KCl7XG4gICAgICAgIGxldCB5TGlzdCA9IG5lc3QoKVxuICAgICAgICAgICAgLmtleSgoZCkgPT4gZC55KSAvLyBncm91cCB0aGlzLmRhdGEgYnkgZC54XG4gICAgICAgICAgICAuZW50cmllcyh0aGlzLmRhdGEpXG4gICAgICAgICAgICAubWFwKChkKSA9PiBkLmtleSkgLy8gdGhlbiByZXR1cm4gdGhlIHVuaXF1ZSBsaXN0IG9mIGQueFxuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IHtyZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47fSk7XG4gICAgICAgIHJldHVybiB5TGlzdDtcbiAgICB9XG5cbiAgICBfc2V0WFNjYWxlTWluaShkaW09e3c6MTAwMCwgbGVmdDoyMH0pe1xuICAgICAgICBsZXQgeExpc3QgPSB0aGlzLl9wYXJzZVhMaXN0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXRYU2NhbGUoZGltLCB4TGlzdCk7XG4gICAgfVxuXG4gICAgX3NldFhTY2FsZShkaW09e3c6MTAwMCwgbGVmdDoyMH0sIHhMaXN0ID0gdW5kZWZpbmVkKXtcbiAgICAgICAgLy8gdXNlIGQzIG5lc3QgZGF0YSBzdHJ1Y3R1cmUgdG8gZmluZCB0aGUgdW5pcXVlIGxpc3Qgb2YgeCBsYWJlbHNcbiAgICAgICAgLy8gcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtY29sbGVjdGlvbiNuZXN0c1xuICAgICAgICB4TGlzdCA9IHhMaXN0PT09dW5kZWZpbmVkP3RoaXMuX3BhcnNlWExpc3QoKTp4TGlzdDtcbiAgICAgICAgcmV0dXJuIHNjYWxlQmFuZCgpIC8vIHJlZmVyZW5jZTogaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLXNjYWxlI3NjYWxlQmFuZFxuICAgICAgICAgICAgLmRvbWFpbih4TGlzdCkgLy8gcGVyaGFwcyBpdCBpc24ndCBuZWNlc3NhcnkgdG8gc3RvcmUgeExpc3QsIGl0IGNvdWxkIGJlIHJldHJpZXZlZCBieSB4U2NhbGUuZG9tYWluXG4gICAgICAgICAgICAucmFuZ2UoW2RpbS5sZWZ0LCBkaW0ubGVmdCtkaW0ud10pXG4gICAgICAgICAgICAucGFkZGluZyguMDUpOyAvLyB0ZW1wb3JhcmlseSBoYXJkLWNvZGVkIHZhbHVlXG4gICAgfVxuXG4gICAgX3NldFlTY2FsZU1pbmkoZGltPXtoOjYwMCwgdG9wOjIwfSl7XG4gICAgICAgIC8vIHVzZSBkMyBuZXN0IGRhdGEgc3RydWN0dXJlIHRvIGZpbmQgdGhlIHVuaXF1ZSBsaXN0IG9mIHkgbGFiZWxzXG4gICAgICAgIC8vIHJlZmVyZW5jZTogaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLWNvbGxlY3Rpb24jbmVzdHNcbiAgICAgICAgbGV0IHlMaXN0ID0gdGhpcy5fcGFyc2VZTGlzdCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5fc2V0WVNjYWxlKGRpbSwgeUxpc3QpO1xuICAgIH1cblxuICAgIF9zZXRZU2NhbGUoZGltPXtoOjYwMCwgdG9wOjIwfSwgeUxpc3Q9dW5kZWZpbmVkKXtcbiAgICAgICAgLy8gdXNlIGQzIG5lc3QgZGF0YSBzdHJ1Y3R1cmUgdG8gZmluZCB0aGUgdW5pcXVlIGxpc3Qgb2YgeSBsYWJlbHNcbiAgICAgICAgLy8gcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtY29sbGVjdGlvbiNuZXN0c1xuICAgICAgICB5TGlzdCA9IHlMaXN0PT09dW5kZWZpbmVkP3RoaXMuX3BhcnNlWUxpc3QoKTp5TGlzdDtcblxuICAgICAgICByZXR1cm4gc2NhbGVCYW5kKCkgLy8gcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtc2NhbGUjc2NhbGVCYW5kXG4gICAgICAgICAgICAuZG9tYWluKHlMaXN0KSAvLyBwZXJoYXBzIGl0IGlzbid0IG5lY2Vzc2FyeSB0byBzdG9yZSB4TGlzdCwgaXQgY291bGQgYmUgcmV0cmlldmVkIGJ5IHhTY2FsZS5kb21haW5cbiAgICAgICAgICAgIC5yYW5nZShbZGltLnRvcCwgZGltLnRvcCtkaW0uaF0pXG4gICAgICAgICAgICAucGFkZGluZyguMDUpOyAvLyB0ZW1wb3JhcmlseSBoYXJkLWNvZGVkIHZhbHVlXG4gICAgfVxuXG4gICAgX3NldENvbG9yU2NhbGUoZG9tYWluKXtcbiAgICAgICAgbGV0IHVzZUxvZyA9IHRoaXMudXNlTG9nO1xuICAgICAgICBsZXQgZGF0YSA9IGRvbWFpbj09PXVuZGVmaW5lZD90aGlzLmRhdGEubWFwKChkKT0+dXNlTG9nP3RoaXMuX2xvZyhkLnZhbHVlKTpkLnZhbHVlKTpkb21haW47XG4gICAgICAgIHJldHVybiBzZXRDb2xvclNjYWxlKGRhdGEsIHRoaXMuY29sb3JTY2hlbWUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBidWJibGUgbWF4XG4gICAgICogQHBhcmFtIG1pbmkge0Jvb2xlYW59IHNldHRpbmcgZm9yIHRoZSBtaW5pIG1hcFxuICAgICAqIEBwYXJhbSBzY2FsZUZhY3RvciB7SW50ZWdlcn1cbiAgICAgKiBAcGFyYW0gYWJzTWF4IHtOdW1iZXJ9IHNldCBhbiBhYnNvbHV0ZSBtYXggdmFsdWVcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NldEJ1YmJsZU1heChtaW5pPWZhbHNlLCBzY2FsZUZhY3Rvcj0yLCBhYnNNYXggPSAxMCl7XG4gICAgICAgIGxldCB4U2NhbGUgPSBtaW5pPyB0aGlzLnhTY2FsZU1pbmk6dGhpcy54U2NhbGU7XG4gICAgICAgIGxldCB5U2NhbGUgPSBtaW5pPyB0aGlzLnlTY2FsZU1pbmk6dGhpcy55U2NhbGU7XG4gICAgICAgIGxldCBybWF4ID0gbWF4KFt4U2NhbGUuYmFuZHdpZHRoKCksIHlTY2FsZS5iYW5kd2lkdGgoKV0pL3NjYWxlRmFjdG9yXG4gICAgICAgIHJldHVybiBhYnNNYXg8cm1heD9hYnNNYXg6cm1heDtcbiAgICB9XG5cbiAgICBfc2V0QnViYmxlU2NhbGUocmFuZ2U9e21heDoxMCwgbWluOjB9KXtcbiAgICAgICAgcmV0dXJuIHNjYWxlU3FydCgpXG4gICAgICAgICAgICAuZG9tYWluKFszLCBtYXgodGhpcy5kYXRhLm1hcCgoZCk9PmQucikpXSkgLy8gc2V0IG1pbiBhdCAyIGZvciAtbG9nKDAuMDEpXG4gICAgICAgICAgICAucmFuZ2UoW3JhbmdlLm1pbiwgcmFuZ2UubWF4XSk7XG4gICAgfVxuXG4gICAgX2xvZyh2KXtcbiAgICAgICAgY29uc3QgYWRqdXN0ID0gMTtcbiAgICAgICAgcmV0dXJuIE1hdGgubG9nKE51bWJlcih2K2FkanVzdCkpL01hdGgubG9nKHRoaXMubG9nQmFzZSk7XG4gICAgfVxuXG5cbn1cblxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcbmltcG9ydCBUb29sdGlwIGZyb20gXCIuL1Rvb2x0aXBcIjtcbmltcG9ydCB7ZHJhd0NvbG9yTGVnZW5kLCBzZXRDb2xvclNjYWxlfSBmcm9tIFwiLi9jb2xvcnNcIjtcbmltcG9ydCB7c2VsZWN0LCBzZWxlY3RBbGwsIG1vdXNlLCBldmVudH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtuZXN0fSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHtzY2FsZUJhbmQsIHNjYWxlTGluZWFyfSBmcm9tIFwiZDMtc2NhbGVcIjtcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIYWxmTWFwe1xuICAgIC8qKlxuICAgICAqIEhhbGZNYXAgaXMgYSBzcGVjaWFsIGhlYXRtYXAgZGVzaWduZWQgZm9yIGEgc3ltbWV0cmljYWwgbWF0cml4XG4gICAgICogQHBhcmFtIGRhdGEge09iamVjdH0gVE9ETzogZGVzY3JpYmUgdGhlIGRhdGEgc3RydWN0dXJlXG4gICAgICogQHBhcmFtIGN1dG9mZlxuICAgICAqIEBwYXJhbSB1c2VMb2dcbiAgICAgKiBAcGFyYW0gbG9nQmFzZVxuICAgICAqIEBwYXJhbSBjb2xvclNjaGVtZVxuICAgICAqIEBwYXJhbSB0b29sdGlwSWRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihkYXRhLCBjdXRvZmYgPSAwLjAsIHVzZUxvZz10cnVlLCBsb2dCYXNlPTEwLCBjb2xvclNjaGVtZT1cIkdyZXlzXCIsIGNvbG9yU2NhbGVEb21haW49WzAsMV0pe1xuICAgICAgICB0aGlzLmRhdGE9IHRoaXMuX3VuaXF1ZShkYXRhKTsgLy8gcmVtb3ZlIHJlZHVuZGFuY3lcbiAgICAgICAgdGhpcy5kYXRhRGljdCA9IHt9O1xuICAgICAgICB0aGlzLmN1dG9mZiA9IGN1dG9mZjtcbiAgICAgICAgdGhpcy5maWx0ZXJlZERhdGEgPSB0aGlzLl9maWx0ZXIodGhpcy5kYXRhLCB0aGlzLmN1dG9mZik7XG4gICAgICAgIHRoaXMuZGF0YURpY3QgPSB0aGlzLl9nZW5lcmF0ZURhdGFEaWN0KHRoaXMuZmlsdGVyZWREYXRhKTtcbiAgICAgICAgdGhpcy51c2VMb2cgPSB1c2VMb2c7XG4gICAgICAgIHRoaXMubG9nQmFzZSA9IGxvZ0Jhc2U7XG4gICAgICAgIHRoaXMuY29sb3JTY2hlbWUgPSBjb2xvclNjaGVtZTtcblxuICAgICAgICAvLyBjb2xvciBzY2FsZSBub3JtYWxseSBkb2Vzbid0IGNoYW5nZSB3aXRoIHRoZSBzYW1lIGRhdGEgc2V0XG4gICAgICAgIC8vIHRoZXJlZm9yZSBjYW4gYmUgZGVmaW5lZCBhdCBpbnN0YW50aWF0aW9uXG4gICAgICAgIHRoaXMuY29sb3JTY2FsZSA9IHRoaXMuX3NldENvbG9yU2NhbGUoY29sb3JTY2FsZURvbWFpbik7XG5cbiAgICAgICAgLy8gdGhlIGZvbGxvd2luZyBzY2FsZXMgY291bGQgY2hhbmdlIGRlcGVuZGluZyBvbiB0aGUgdXNlciBkZWZpbmVkIGRpbWVuc2lvbnNcbiAgICAgICAgLy8gdGhlcmVmb3JlIHRoZXkgYXJlIHVuZGVmaW5lZCBhdCBpbnN0YW50aWF0aW9uXG4gICAgICAgIHRoaXMueFNjYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnlTY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sYWJlbFNjYWxlID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIHBlcmlwaGVyYWwgZmVhdHVyZXNcbiAgICAgICAgdGhpcy50b29sdGlwID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGFkZFRvb2x0aXAocGFyZW50SWQpe1xuICAgICAgICBsZXQgdG9vbHRpcElkID0gcGFyZW50SWQgKyAnLXRvb2x0aXAnO1xuICAgICAgICBpZiAoJChgIyR7dG9vbHRpcElkfWApLmxlbmd0aCA9PSAwKSAkKCc8ZGl2Lz4nKS5hdHRyKCdpZCcsIHRvb2x0aXBJZCkuYXBwZW5kVG8oJChgIyR7cGFyZW50SWR9YCkpO1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSBuZXcgVG9vbHRpcCh0b29sdGlwSWQsIGZhbHNlLCA0MCwgMCk7XG4gICAgICAgIHNlbGVjdChgIyR7dG9vbHRpcElkfWApLmNsYXNzZWQoJ2hhbGYtbWFwLXRvb2x0aXAnLCB0cnVlKTtcbiAgICB9XG5cbiAgICBkcmF3KGNhbnZhcywgc3ZnLCBkaW1lbnNpb25zPXt3OjYwMCwgdG9wOjIwLCBsZWZ0OjIwfSwgY29sb3JTY2FsZURvbWFpbj1bMCwxXSwgc2hvd0xhYmVscz10cnVlLCBsYWJlbEFuZ2xlPTkwLCB4U2NhbGVEb21haW49dW5kZWZpbmVkLCB5U2NhbGVEb21haW49dW5kZWZpbmVkKXtcbiAgICAgICAgdGhpcy5fZHJhd0NhbnZhcyhjYW52YXMsIGRpbWVuc2lvbnMsIGNvbG9yU2NhbGVEb21haW4sIHhTY2FsZURvbWFpbiwgeVNjYWxlRG9tYWluKTtcbiAgICAgICAgbGV0IGRyYXdDZWxscyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRyYXdTdmcoc3ZnLCBkaW1lbnNpb25zLCBkcmF3Q2VsbHMsIHNob3dMYWJlbHMsIGxhYmVsQW5nbGUsIGNvbG9yU2NhbGVEb21haW4sIHhTY2FsZURvbWFpbiwgeVNjYWxlRG9tYWluKTtcbiAgICB9XG5cbiAgICBkcmF3Q29sb3JMZWdlbmQoZG9tLCBsZWdlbmRDb25maWc9e3g6MCwgeTowfSwgdGlja3M9NSwgdW5pdD1cIlwiLCBjb2xvclNjYWxlRG9tYWluPVswLDFdKXtcbiAgICAgICAgaWYgKHRoaXMuY29sb3JTY2FsZSA9PT0gdW5kZWZpbmVkKSB0aGlzLl9zZXRDb2xvclNjYWxlKGNvbG9yU2NhbGVEb21haW4pO1xuICAgICAgICBkcmF3Q29sb3JMZWdlbmQodW5pdCwgZG9tLCB0aGlzLmNvbG9yU2NhbGUsIGxlZ2VuZENvbmZpZywgdGhpcy51c2VMb2csIHRpY2tzLCB0aGlzLmxvZ0Jhc2UsIHtoOjIwLCB3OjEwfSwgXCJ2XCIpO1xuICAgIH1cblxuICAgIC8vIHByaXZhdGUgbWV0aG9kc1xuICAgIF9sb2codil7XG4gICAgICAgIGNvbnN0IGFkanVzdCA9IDE7XG4gICAgICAgIHJldHVybiBNYXRoLmxvZyhOdW1iZXIodithZGp1c3QpKS9NYXRoLmxvZyh0aGlzLmxvZ0Jhc2UpO1xuICAgIH1cbiAgICBfZHJhd0NhbnZhcyhjYW52YXMsIGRpbWVuc2lvbnM9e3c6NjAwLCB0b3A6MjAsIGxlZnQ6MjB9LCBjb2xvclNjYWxlRG9tYWluPVswLDFdLCB4U2NhbGVEb21haW49dW5kZWZpbmVkLCB5U2NhbGVEb21haW49dW5kZWZpbmVkKXtcbiAgICAgICAgdGhpcy5fc2V0U2NhbGVzKGRpbWVuc2lvbnMsIGNvbG9yU2NhbGVEb21haW4sIHhTY2FsZURvbWFpbiwgeVNjYWxlRG9tYWluKTtcbiAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMubm9kZSgpLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICAgICAgLy8gdHJhbnNmb3JtIHRoZSBjYW52YXNcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICAgIGNvbnRleHQudHJhbnNsYXRlKGRpbWVuc2lvbnMubGVmdCAsIGRpbWVuc2lvbnMudG9wICsgKHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpKk1hdGguc3FydCgyKS8yKSk7IC8vIHNoaWZ0IHRoZSByYWRpdXMgZGlzdGFuY2UuLi5cbiAgICAgICAgY29udGV4dC5yb3RhdGUoTWF0aC5QSSooLTQ1LzE4MCkpOyAvLyByb3RhdGUgY291bnRlcmNsb2Nrd2lzZSAobmVnYXRpdmUpIDQ1IGRlZ3JlZXNcbiAgICAgICAgY29udGV4dC5jbGVhclJlY3QoLWRpbWVuc2lvbnMudywtZGltZW5zaW9ucy53LGRpbWVuc2lvbnMudyoyLCBkaW1lbnNpb25zLncqMik7XG4gICAgICAgIC8vIExEIGNhbnZhcyByZW5kZXJpbmcgZnJvbSBHRVYgb2xkIGNvZGVcbiAgICAgICAgdGhpcy5maWx0ZXJlZERhdGEuZm9yRWFjaCgoZCk9PntcbiAgICAgICAgICAgIGxldCB4ID0gdGhpcy54U2NhbGUoZC54KTtcbiAgICAgICAgICAgIGxldCB5ID0gdGhpcy55U2NhbGUoZC55KTtcbiAgICAgICAgICAgIGlmICh4ID09PSB1bmRlZmluZWQgfHwgeSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICAgICAgICBkLmNvbG9yID0gZC52YWx1ZT09MD9cIiNmZmZcIjp0aGlzLnVzZUxvZz90aGlzLmNvbG9yU2NhbGUodGhpcy5fbG9nKGQudmFsdWUpKTp0aGlzLmNvbG9yU2NhbGUoZC52YWx1ZSk7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuY29sb3JTY2FsZShkLnZhbHVlKTtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QoeCwgeSwgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCksIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpKTtcbiAgICAgICAgICAgIC8vIHVuY29tbWVudCB0aGUgZm9sbG93aW5nIGZvciBkZWJ1Z2dpbmdcbiAgICAgICAgICAgIC8vIGNvbnRleHQudGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgICAgLy8gY29udGV4dC5maWxsU3R5bGUgPSAnd2hpdGUnO1xuICAgICAgICAgICAgLy8gY29udGV4dC5mb250ID0gJzEwcHggT3BlbiBTYW5zJztcbiAgICAgICAgICAgIC8vIGNvbnRleHQuZmlsbFRleHQoZC54LCB4KzEwLCB5KzEwKTtcbiAgICAgICAgICAgIC8vIGNvbnRleHQuZmlsbFRleHQoZC55LCB4KzEwLCB5KzMwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgIH1cblxuICAgIGRyYXdTdmcoc3ZnLCBkaW1lbnNpb25zLCBkcmF3Q2VsbHM9dHJ1ZSwgc2hvd0xhYmVscz10cnVlLCBsYWJlbEFuZ2xlPTkwLCBjb2xvclNjYWxlRG9tYWluPVswLDFdLCB4U2NhbGVEb21haW4sIHlTY2FsZURvbWFpbj11bmRlZmluZWQpe1xuICAgICAgICBpZiAoZHJhd0NlbGxzKXtcbiAgICAgICAgICAgIHRoaXMuX3NldFNjYWxlcyhkaW1lbnNpb25zLCBjb2xvclNjYWxlRG9tYWluLCB4U2NhbGVEb21haW4sIHlTY2FsZURvbWFpbik7XG4gICAgICAgICAgICBsZXQgbWFwRyA9IHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGlwLXBhdGhcIiwgXCJ1cmwoI2NsaXApXCIpO1xuICAgICAgICAgICAgbGV0IGNlbGxzID0gbWFwRy5zZWxlY3RBbGwoXCIuaGFsZi1tYXAtY2VsbFwiKVxuICAgICAgICAgICAgICAgIC5kYXRhKHRoaXMuZmlsdGVyZWREYXRhKTtcblxuICAgICAgICAgICAgLy8gYWRkIG5ldyByZWN0c1xuICAgICAgICAgICAgY2VsbHMuZW50ZXIoKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImhhbGYtbWFwLWNlbGxcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInJvd1wiLCAoZCk9PmB5JHt0aGlzLnlTY2FsZS5kb21haW4oKS5pbmRleE9mKGQueSl9YClcbiAgICAgICAgICAgICAgICAuYXR0cihcImNvbHVtblwiLCAoZCk9PmB4JHt0aGlzLnhTY2FsZS5kb21haW4oKS5pbmRleE9mKGQueCl9YClcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCk9PnRoaXMueFNjYWxlKGQueCkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChkKT0+dGhpcy55U2NhbGUoZC55KSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgcm90YXRlKC00NSlgKVxuICAgICAgICAgICAgICAgIC5tZXJnZShjZWxscylcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKT0+ZC52YWx1ZT09MD9cIiNmZmZcIjp0aGlzLnVzZUxvZz90aGlzLmNvbG9yU2NhbGUodGhpcy5fbG9nKGQudmFsdWUpKTp0aGlzLmNvbG9yU2NhbGUoZC52YWx1ZSkpXG4gICAgICAgIH1cblxuICAgICAgICBpZihzaG93TGFiZWxzKXtcbiAgICAgICAgICAgIHRoaXMuX3NldExhYmVsU2NhbGUoZGltZW5zaW9ucyk7XG4gICAgICAgICAgICBzdmcuc2VsZWN0QWxsKCkuZGF0YSh0aGlzLmxhYmVsU2NhbGUuZG9tYWluKCkpXG4gICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgKGQsIGkpID0+IGBoYWxmLW1hcC1sYWJlbCBsJHtpfWApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwibm9uZVwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB4ID0gdGhpcy5sYWJlbFNjYWxlKGQpICsgdGhpcy5sYWJlbFNjYWxlLnN0ZXAoKS8yO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeSA9IC01O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke3h9LCAke3l9KSByb3RhdGUoLSR7bGFiZWxBbmdsZX0pYDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50ZXh0KChkKT0+ZClcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjdXJzb3IgPSBzdmcuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdoYWxmLW1hcC1jdXJzb3InKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCB0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKSlcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcIiNkMjExMWJcIilcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCBcIjFweFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpO1xuXG4gICAgICAgIHN2Zy5vbignbW91c2VvdXQnLCAoKT0+e1xuICAgICAgICAgICAgY3Vyc29yLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG4gICAgICAgICAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgc3ZnLnNlbGVjdEFsbCgnLmhhbGYtbWFwLWxhYmVsJykuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZWxlY3Qoc3ZnLm5vZGUoKS5wYXJlbnROb2RlKVxuICAgICAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwibm9uZVwiKVxuICAgICAgICAgICAgLnN0eWxlKFwicG9zaXRpb25cIiwgXCJhYnNvbHV0ZVwiKVxuICAgICAgICAgICAgLm9uKCdtb3VzZW1vdmUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHBvcyA9IG1vdXNlKHN2Zy5ub2RlKCkpOyAvLyByZXRyaWV2ZSB0aGUgbW91c2UgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIFNWRyBlbGVtZW50XG4gICAgICAgICAgICAgICAgbGV0IHggPSBwb3NbMF07XG4gICAgICAgICAgICAgICAgbGV0IHkgPSBwb3NbMV07XG5cbiAgICAgICAgICAgICAgICAvLyBmaW5kIHRoZSBjb2xsaWRpbmcgY2VsbCdzIGNvb3JkaW5hdGVzIChiZWZvcmUgdHJhbnNmb3JtYXRpb24pXG4gICAgICAgICAgICAgICAgbGV0IHJhZGlhbiA9IE1hdGguUEkqKDQ1LzE4MCk7IC8vIHRoZSByYWRpYW4gYXQgNDUgZGVncmVlIGFuZ2xlXG4gICAgICAgICAgICAgICAgbGV0IHgyID0geCpNYXRoLmNvcyhyYWRpYW4pIC0geSpNYXRoLnNpbihyYWRpYW4pICsgdGhpcy54U2NhbGUuc3RlcCgpLzI7XG4gICAgICAgICAgICAgICAgbGV0IHkyID0geCpNYXRoLnNpbihyYWRpYW4pICsgeSpNYXRoLmNvcyhyYWRpYW4pIC0gdGhpcy55U2NhbGUuc3RlcCgpLzI7XG4gICAgICAgICAgICAgICAgaWYgKHggPCAwIHx8IHk8MCB8fCB4MiA8IDAgfHwgeTI8MCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3Iuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgaSA9IE1hdGguZmxvb3IoeDIvdGhpcy54U2NhbGUuc3RlcCgpKTtcbiAgICAgICAgICAgICAgICBsZXQgaiA9IE1hdGguZmxvb3IoKHkyKS90aGlzLnlTY2FsZS5zdGVwKCkpO1xuICAgICAgICAgICAgICAgIC8vIHNob3cgdG9vbHRpcFxuICAgICAgICAgICAgICAgIGxldCBjb2wgPSB0aGlzLnhTY2FsZS5kb21haW4oKVtpXTtcbiAgICAgICAgICAgICAgICBsZXQgcm93ID0gdGhpcy55U2NhbGUuZG9tYWluKClbal07XG4gICAgICAgICAgICAgICAgbGV0IGNlbGwgPSB0aGlzLmRhdGFEaWN0W2NvbCtyb3ddO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFt4LCB5LCB4MiwgeTIsIGNvbCwgcm93XSk7IC8vIGRlYnVnZ2luZ1xuICAgICAgICAgICAgICAgIGlmIChjZWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt4fSwke3l9KSByb3RhdGUoLTQ1KWApO1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3Iuc3R5bGUoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLnNob3coYCR7Y29sfTxici8+ICR7cm93fTxici8+IFZhbHVlOiAke2NlbGwuZGlzcGxheVZhbHVlfWApO1xuICAgICAgICAgICAgICAgICAgICBpZihzaG93TGFiZWxzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoJy5oYWxmLW1hcC1sYWJlbCcpLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgZmFsc2UpOyAvLyBjbGVhciBwcmV2aW91cyBoaWdobGlnaHRlZCBsYWJlbHNcbiAgICAgICAgICAgICAgICAgICAgICAgIHN2Zy5zZWxlY3QoYC5sJHtpfWApLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdmcuc2VsZWN0KGAubCR7an1gKS5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vIC5vbignbW91c2VvdXQnLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyAgICAgLy8gY3Vyc29yLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG4gICAgICAgICAgICAvLyAgICAgLy8gdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgICAgIC8vICAgICAvLyBzdmcuc2VsZWN0QWxsKCcuaGFsZi1tYXAtbGFiZWwnKS5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIC8vIH0pXG4gICAgfVxuXG4gICAgX3VuaXF1ZShkYXRhKXtcbiAgICAgICAgLy8gZmlyc3Qgc29ydCB0aGUgZGF0YSBiYXNlZCBvbiB0aGUgeCwgeSBhbHBoYWJldGljYWwgb3JkZXJcbiAgICAgICAgZGF0YS5zb3J0KChhLCBiKT0+e1xuICAgICAgICAgICAgaWYoYS54IDwgYi54KSByZXR1cm4gLTE7XG4gICAgICAgICAgICBpZiAoYS54ID4gYi54KSByZXR1cm4gMTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChhLnkgPCBiLnkpIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICBpZiAoYS55ID4gYi55KSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IHBhaXJzID0ge307XG4gICAgICAgIHJldHVybiBkYXRhLmZpbHRlcigoZCk9PntcbiAgICAgICAgICAgIC8vIGNoZWNrIHJlZHVuZGFudCBkYXRhXG4gICAgICAgICAgICBsZXQgcCA9IGQueCArIGQueTtcbiAgICAgICAgICAgIGxldCBwMiA9IGQueSArIGQueDtcbiAgICAgICAgICAgIGlmIChwYWlycy5oYXNPd25Qcm9wZXJ0eShwKSB8fCBwYWlycy5oYXNPd25Qcm9wZXJ0eShwMikpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIHBhaXJzW3BdID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlsdGVyIHJlZHVuZGFudCBkYXRhIGluIGEgc3ltbWV0cmljYWwgbWF0cml4XG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKiBAcGFyYW0gY3V0b2ZmIHtOdW1iZXJ9IGZpbHRlciBkYXRhIGJ5IHRoaXMgbWluaW11bSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2ZpbHRlcihkYXRhLCBjdXRvZmYpe1xuICAgICAgICByZXR1cm4gZGF0YS5maWx0ZXIoKGQpPT57XG4gICAgICAgICAgICBpZiAoZC52YWx1ZSA8IGN1dG9mZikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIGEgZGF0YSBkaWN0aW9uYXJ5IGluZGV4ZWQgYnkgeCBhbmQgeSwgZm9yIGZhc3QgZGF0YSBsb29rIHVwXG4gICAgICogQHBhcmFtIGRhdGEge0xpc3R9OiBhIGxpc3Qgb2Ygb2JqZWN0cyB3aXRoIGF0dHJpYnV0ZXMgeCBhbmQgeVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2dlbmVyYXRlRGF0YURpY3QoZGF0YSl7XG4gICAgICAgIGxldCBkaWN0ID0ge307XG4gICAgICAgIGRhdGEuZm9yRWFjaCgoZCk9PntcbiAgICAgICAgICAgIGRpY3RbZC54K2QueV0gPSBkO1xuICAgICAgICAgICAgZGljdFtkLnkrZC54XSA9IGQ7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGljdDtcbiAgICB9XG5cbiAgICBfc2V0U2NhbGVzKGRpbWVuc2lvbnM9e3c6NjAwLCB0b3A6MjAsIGxlZnQ6MjB9LCBjb2xvclNjYWxlRG9tYWluPVswLDFdLCB4U2NhbGVEb21haW4sIHlTY2FsZURvbWFpbil7XG4gICAgICAgIGlmICh4U2NhbGVEb21haW4gfHwgdGhpcy54U2NhbGUgPT09IHVuZGVmaW5lZCkgdGhpcy5fc2V0WFNjYWxlKGRpbWVuc2lvbnMsIHhTY2FsZURvbWFpbik7XG4gICAgICAgIGlmICh5U2NhbGVEb21haW4gfHwgdGhpcy55U2NhbGUgPT09IHVuZGVmaW5lZCkgdGhpcy5fc2V0WVNjYWxlKGRpbWVuc2lvbnMsIHlTY2FsZURvbWFpbik7XG4gICAgICAgIGlmICh0aGlzLmNvbG9yU2NhbGUgPT09IHVuZGVmaW5lZCkgdGhpcy5fc2V0Q29sb3JTY2FsZShjb2xvclNjYWxlRG9tYWluKTtcbiAgICB9XG5cbiAgICBfc2V0WFNjYWxlKGRpbT17dzo2MDB9LCB4TGlzdD11bmRlZmluZWQpe1xuICAgICAgICBpZiAoeExpc3QgPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICB4TGlzdCA9IG5lc3QoKVxuICAgICAgICAgICAgLmtleSgoZCkgPT4gZC54KSAvLyBncm91cCB0aGlzLmRhdGEgYnkgZC54XG4gICAgICAgICAgICAuZW50cmllcyh0aGlzLmRhdGEpXG4gICAgICAgICAgICAubWFwKChkKSA9PiBkLmtleSkgLy8gdGhlbiByZXR1cm4gdGhlIHVuaXF1ZSBsaXN0IG9mIGQueFxuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IHtyZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47fSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnhTY2FsZSA9IHNjYWxlQmFuZCgpIC8vIHJlZmVyZW5jZTogaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLXNjYWxlI3NjYWxlQmFuZFxuICAgICAgICAgICAgLmRvbWFpbih4TGlzdCkgLy8gcGVyaGFwcyBpdCBpc24ndCBuZWNlc3NhcnkgdG8gc3RvcmUgeExpc3QsIGl0IGNvdWxkIGJlIHJldHJpZXZlZCBieSB4U2NhbGUuZG9tYWluXG4gICAgICAgICAgICAvLyAucmFuZ2UoW2RpbS5sZWZ0LCBkaW0ubGVmdCsoZGltLncvTWF0aC5zcXJ0KDIpKV0pXG4gICAgICAgICAgICAucmFuZ2UoWzAsIGRpbS53L01hdGguc3FydCgyKV0pXG4gICAgICAgICAgICAucGFkZGluZyguMDUpOyAvLyB0ZW1wb3JhcmlseSBoYXJkLWNvZGVkIHZhbHVlXG4gICAgfVxuXG4gICAgX3NldFlTY2FsZShkaW09e3c6NjAwfSwgeUxpc3Qpe1xuICAgICAgICAvLyB1c2UgZDMgbmVzdCBkYXRhIHN0cnVjdHVyZSB0byBmaW5kIHRoZSB1bmlxdWUgbGlzdCBvZiB5IGxhYmVsc1xuICAgICAgICAvLyByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1jb2xsZWN0aW9uI25lc3RzXG4gICAgICAgIGlmICh5TGlzdCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIHlMaXN0ID0gbmVzdCgpXG4gICAgICAgICAgICAua2V5KChkKSA9PiBkLnkpIC8vIGdyb3VwIHRoaXMuZGF0YSBieSBkLnhcbiAgICAgICAgICAgIC5lbnRyaWVzKHRoaXMuZGF0YSlcbiAgICAgICAgICAgIC5tYXAoKGQpID0+IGQua2V5KSAvLyB0aGVuIHJldHVybiB0aGUgdW5pcXVlIGxpc3Qgb2YgZC54XG4gICAgICAgICAgICAuc29ydCgoYSwgYikgPT4ge3JldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjt9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMueVNjYWxlID0gc2NhbGVCYW5kKCkgLy8gcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtc2NhbGUjc2NhbGVCYW5kXG4gICAgICAgICAgICAuZG9tYWluKHlMaXN0KSAvLyBwZXJoYXBzIGl0IGlzbid0IG5lY2Vzc2FyeSB0byBzdG9yZSB4TGlzdCwgaXQgY291bGQgYmUgcmV0cmlldmVkIGJ5IHhTY2FsZS5kb21haW5cbiAgICAgICAgICAgIC8vIC5yYW5nZShbZGltLnRvcCwgZGltLnRvcCsoZGltLncvTWF0aC5zcXJ0KDIpKV0pXG4gICAgICAgICAgICAucmFuZ2UoWzAsIGRpbS53L01hdGguc3FydCgyKV0pXG4gICAgICAgICAgICAucGFkZGluZyguMDUpOyAvLyB0ZW1wb3JhcmlseSBoYXJkLWNvZGVkIHZhbHVlXG4gICAgfVxuXG4gICAgX3NldExhYmVsU2NhbGUoZGltPXt3OjYwMH0pe1xuICAgICAgICBpZiAodGhpcy54U2NhbGUgPT09IHVuZGVmaW5lZCkgdGhpcy5fc2V0WFNjYWxlKCk7XG4gICAgICAgIGxldCB4TGlzdCA9IHRoaXMueFNjYWxlLmRvbWFpbigpOyAvLyBUT0RPOiB0aGlzIGFzc3VtZXMgdGhhdCB0aGUgaGFsZiBtYXAgaXMgc3ltbWV0cmljYWxcbiAgICAgICAgdGhpcy5sYWJlbFNjYWxlID0gc2NhbGVCYW5kKClcbiAgICAgICAgICAgIC5kb21haW4oeExpc3QpXG4gICAgICAgICAgICAucmFuZ2UoWzAsIGRpbS53XSlcbiAgICAgICAgICAgIC5wYWRkaW5nKC4wNSlcbiAgICB9XG5cbiAgICBfc2V0Q29sb3JTY2FsZShkb21haW4pe1xuICAgICAgICBsZXQgdXNlTG9nID0gdGhpcy51c2VMb2c7XG4gICAgICAgIGxldCBkYXRhID0gZG9tYWluPT09dW5kZWZpbmVkP3RoaXMuZGF0YS5tYXAoKGQpPT51c2VMb2c/dGhpcy5fbG9nKGQudmFsdWUpOmQudmFsdWUpOmRvbWFpbjtcbiAgICAgICAgdGhpcy5jb2xvclNjYWxlID0gc2V0Q29sb3JTY2FsZShkYXRhLCB0aGlzLmNvbG9yU2NoZW1lKTtcbiAgICB9XG59IiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tTm9ybWFsKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21Ob3JtYWwobXUsIHNpZ21hKSB7XG4gICAgdmFyIHgsIHI7XG4gICAgbXUgPSBtdSA9PSBudWxsID8gMCA6ICttdTtcbiAgICBzaWdtYSA9IHNpZ21hID09IG51bGwgPyAxIDogK3NpZ21hO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB5O1xuXG4gICAgICAvLyBJZiBhdmFpbGFibGUsIHVzZSB0aGUgc2Vjb25kIHByZXZpb3VzbHktZ2VuZXJhdGVkIHVuaWZvcm0gcmFuZG9tLlxuICAgICAgaWYgKHggIT0gbnVsbCkgeSA9IHgsIHggPSBudWxsO1xuXG4gICAgICAvLyBPdGhlcndpc2UsIGdlbmVyYXRlIGEgbmV3IHggYW5kIHkuXG4gICAgICBlbHNlIGRvIHtcbiAgICAgICAgeCA9IHNvdXJjZSgpICogMiAtIDE7XG4gICAgICAgIHkgPSBzb3VyY2UoKSAqIDIgLSAxO1xuICAgICAgICByID0geCAqIHggKyB5ICogeTtcbiAgICAgIH0gd2hpbGUgKCFyIHx8IHIgPiAxKTtcblxuICAgICAgcmV0dXJuIG11ICsgc2lnbWEgKiB5ICogTWF0aC5zcXJ0KC0yICogTWF0aC5sb2cocikgLyByKTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tTm9ybWFsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbU5vcm1hbDtcblxuICByZXR1cm4gcmFuZG9tTm9ybWFsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG4vKipcbiAqIENyZWF0ZSBhIHRvb2xiYXJcbiAqIFRoaXMgY2xhc3MgdXNlcyBhIGxvdCBvZiBqUXVlcnkgZm9yIGRvbSBlbGVtZW50IG1hbmlwdWxhdGlvblxuICovXG5cbmltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3BhcnNlQ3NzU3R5bGVzfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sYmFyIHtcbiAgICBjb25zdHJ1Y3Rvcihkb21JZCwgdG9vbHRpcD11bmRlZmluZWQsIHZlcnRpY2FsPWZhbHNlKXtcbiAgICAgICAgJChgIyR7ZG9tSWR9YCkuc2hvdygpOyAvLyBpZiBoaWRkZW5cblxuICAgICAgICAvLyBhZGQgYSBuZXcgYmFyZ3JvdXAgZGl2IHRvIGRvbUlEIHdpdGggYm9vdHN0cmFwIGJ1dHRvbiBjbGFzc2VzXG4gICAgICAgIGNvbnN0IGJ0bkNsYXNzZXMgPSB2ZXJ0aWNhbD8nYnRuLWdyb3VwLXZlcnRpY2FsIGJ0bi1ncm91cC1zbSc6ICdidG4tZ3JvdXAgYnRuLWdyb3VwLXNtJztcbiAgICAgICAgdGhpcy5iYXIgPSAkKCc8ZGl2Lz4nKS5hZGRDbGFzcyhidG5DbGFzc2VzKS5hcHBlbmRUbyhgIyR7ZG9tSWR9YCk7XG4gICAgICAgIHRoaXMuYnV0dG9ucyA9IHt9O1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0b29sdGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGRvd25sb2FkIGJ1dHRvbiBmb3IgU1ZHXG4gICAgICogQHBhcmFtIGlkIHtTdHJpbmd9IHRoZSBidXR0b24gZG9tIElEXG4gICAgICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9IHRoZSBTVkcgZG9tIElEIHRvIGdyYWIgYW5kIGRvd25sb2FkXG4gICAgICogQHBhcmFtIG91dGZpbGVOYW1lIHtTdHJpbmd9IHRoZSBkb3dubG9hZCBmaWxlIG5hbWVcbiAgICAgKiBAcGFyYW0gY2xvbmVJZCB7U3RyaW5nfSB0aGUgY2xvbmVkIFNWRyBkb20gSURcbiAgICAgKiBAcGFyYW0gaWNvbiB7U3RyaW5nfSBhIGZvbnRhd2Vzb21lJ3MgaWNvbiBjbGFzcyBuYW1lXG4gICAgICovXG4gICAgY3JlYXRlRG93bmxvYWRTdmdCdXR0b24oaWQsIHN2Z0lkLCBvdXRmaWxlTmFtZSwgY2xvbmVJZCwgaWNvbj0nZmEtZG93bmxvYWQnKXtcbiAgICAgICAgY29uc3QgJGJ1dHRvbiA9IHRoaXMuY3JlYXRlQnV0dG9uKGlkLCBpY29uKTtcbiAgICAgICAgc2VsZWN0KGAjJHtpZH1gKVxuICAgICAgICAgICAgLm9uKCdjbGljaycsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZFN2ZyhzdmdJZCwgb3V0ZmlsZU5hbWUsIGNsb25lSWQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuc2hvdyhcIkRvd25sb2FkXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjcmVhdGVSZXNldEJ1dHRvbihpZCwgY2FsbGJhY2ssIGljb249J2ZhLWV4cGFuZC1hcnJvd3MtYWx0Jyl7XG4gICAgICAgIGNvbnN0ICRidXR0b24gPSB0aGlzLmNyZWF0ZUJ1dHRvbihpZCwgaWNvbik7XG4gICAgICAgIHNlbGVjdChgIyR7aWR9YClcbiAgICAgICAgICAgIC5vbignY2xpY2snLCBjYWxsYmFjaylcbiAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuc2hvdyhcIlJlc2V0IHRoZSBzY2FsZXNcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNyZWF0ZSBhIGJ1dHRvbiB0byB0aGUgdG9vbGJhclxuICAgICAqIEBwYXJhbSBpZCB7U3RyaW5nfSB0aGUgYnV0dG9uJ3MgaWRcbiAgICAgKiBAcGFyYW0gaWNvbiB7U3RyaW5nfSBhIGZvbnRhd2Vzb21lIGljb24gY2xhc3NcbiAgICAgKiBEZXBlbmRlbmNpZXM6IEJvb3RzdHJhcCwgalF1ZXJ5LCBGb250YXdlc29tZVxuICAgICAqL1xuICAgIGNyZWF0ZUJ1dHRvbihpZCwgaWNvbj0nZmEtZG93bmxvYWQnKXtcbiAgICAgICAgY29uc3QgJGJ1dHRvbiA9ICQoJzxhLz4nKS5hdHRyKCdpZCcsIGlkKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdidG4gYnRuLWRlZmF1bHQnKS5hcHBlbmRUbyh0aGlzLmJhcik7XG4gICAgICAgICQoJzxpLz4nKS5hZGRDbGFzcyhgZmEgJHtpY29ufWApLmFwcGVuZFRvKCRidXR0b24pO1xuICAgICAgICB0aGlzLmJ1dHRvbnNbaWRdID0gJGJ1dHRvbjtcbiAgICAgICAgcmV0dXJuICRidXR0b247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYXR0YWNoIGEgdG9vbHRpcCBkb20gd2l0aCB0aGUgdG9vbGJhclxuICAgICAqIEBwYXJhbSB0b29sdGlwIHtUb29sdGlwfVxuICAgICAqL1xuICAgIGF0dGFjaFRvb2x0aXAodG9vbHRpcCl7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRvb2x0aXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRG93bmxvYWQgU1ZHIG9ialxuICAgICAqIEBwYXJhbSBzdmdJZCB7U3RyaW5nfSB0aGUgU1ZHIGRvbSBJRFxuICAgICAqIEBwYXJhbSBmaWxlTmFtZSB7U3RyaW5nfSB0aGUgb3V0cHV0IGZpbGUgbmFtZVxuICAgICAqIEBwYXJhbSBjbG9uZUlkIHtTdHJpbmd9IHRoZSB0ZW1wb3JhcnkgZG9tIElEIHRvIGNvcHkgdGhlIFNWRyB0b1xuICAgICAqIERlcGVuZGVuY2llczogRmlsZVNhdmVyXG4gICAgICovXG4gICAgZG93bmxvYWRTdmcoc3ZnSWQsIGZpbGVOYW1lLCBjbG9uZUlkKXtcbiAgICAgICAgLy8gbGV0IHN2Z09iaiA9ICQoJCgkKGAke1wiI1wiICtzdmdJZH0gc3ZnYCkpWzBdKTsgLy8gY29tcGxpY2F0ZWQgalF1ZXJ5IHRvIGdldCB0byB0aGUgU1ZHIG9iamVjdFxuICAgICAgICBsZXQgc3ZnT2JqID0gJCgkKCQoYCR7XCIjXCIgK3N2Z0lkfWApKVswXSk7XG4gICAgICAgIGxldCAkc3ZnQ29weSA9IHN2Z09iai5jbG9uZSgpXG4gICAgICAgIC5hdHRyKFwidmVyc2lvblwiLCBcIjEuMVwiKVxuICAgICAgICAuYXR0cihcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG5cbiAgICAgICAgLy8gcGFyc2UgYW5kIGFkZCBhbGwgdGhlIENTUyBzdHlsaW5nIHVzZWQgYnkgdGhlIFNWR1xuICAgICAgICBsZXQgc3R5bGVzID0gcGFyc2VDc3NTdHlsZXMoc3ZnT2JqLmdldCgpKTtcbiAgICAgICAgJHN2Z0NvcHkucHJlcGVuZChzdHlsZXMpO1xuXG4gICAgICAgICQoXCIjXCIgKyBjbG9uZUlkKS5odG1sKCcnKS5oaWRlKCk7IC8vIG1ha2Ugc3VyZSB0aGUgY29weUlEIGlzIGludmlzaWJsZVxuICAgICAgICBsZXQgc3ZnSHRtbCA9ICQoYCMke2Nsb25lSWR9YCkuYXBwZW5kKCRzdmdDb3B5KS5odG1sKCk7XG5cbiAgICAgICAgbGV0IHN2Z0Jsb2IgPSBuZXcgQmxvYihbc3ZnSHRtbF0sIHt0eXBlOiBcImltYWdlL3N2Zyt4bWxcIn0pO1xuICAgICAgICBzYXZlQXMoc3ZnQmxvYiwgZmlsZU5hbWUpOyAvLyB0aGlzIGlzIGEgRmlsZVNhdmVyIGZ1bmN0aW9uLi4uLlxuXG4gICAgICAgIC8vIGNsZWFyIHRoZSB0ZW1wIGRvd25sb2FkIGRpdlxuICAgICAgICAkKGAjJHtjbG9uZUlkfWApLmh0bWwoJycpLmhpZGUoKTtcbiAgICB9XG59IiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5XCI7XG5cbnZhciB0b3AgPSAxLFxuICAgIHJpZ2h0ID0gMixcbiAgICBib3R0b20gPSAzLFxuICAgIGxlZnQgPSA0LFxuICAgIGVwc2lsb24gPSAxZS02O1xuXG5mdW5jdGlvbiB0cmFuc2xhdGVYKHgpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgKHggKyAwLjUpICsgXCIsMClcIjtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlWSh5KSB7XG4gIHJldHVybiBcInRyYW5zbGF0ZSgwLFwiICsgKHkgKyAwLjUpICsgXCIpXCI7XG59XG5cbmZ1bmN0aW9uIG51bWJlcihzY2FsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiArc2NhbGUoZCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNlbnRlcihzY2FsZSkge1xuICB2YXIgb2Zmc2V0ID0gTWF0aC5tYXgoMCwgc2NhbGUuYmFuZHdpZHRoKCkgLSAxKSAvIDI7IC8vIEFkanVzdCBmb3IgMC41cHggb2Zmc2V0LlxuICBpZiAoc2NhbGUucm91bmQoKSkgb2Zmc2V0ID0gTWF0aC5yb3VuZChvZmZzZXQpO1xuICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiArc2NhbGUoZCkgKyBvZmZzZXQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVudGVyaW5nKCkge1xuICByZXR1cm4gIXRoaXMuX19heGlzO1xufVxuXG5mdW5jdGlvbiBheGlzKG9yaWVudCwgc2NhbGUpIHtcbiAgdmFyIHRpY2tBcmd1bWVudHMgPSBbXSxcbiAgICAgIHRpY2tWYWx1ZXMgPSBudWxsLFxuICAgICAgdGlja0Zvcm1hdCA9IG51bGwsXG4gICAgICB0aWNrU2l6ZUlubmVyID0gNixcbiAgICAgIHRpY2tTaXplT3V0ZXIgPSA2LFxuICAgICAgdGlja1BhZGRpbmcgPSAzLFxuICAgICAgayA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gbGVmdCA/IC0xIDogMSxcbiAgICAgIHggPSBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09PSByaWdodCA/IFwieFwiIDogXCJ5XCIsXG4gICAgICB0cmFuc2Zvcm0gPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGJvdHRvbSA/IHRyYW5zbGF0ZVggOiB0cmFuc2xhdGVZO1xuXG4gIGZ1bmN0aW9uIGF4aXMoY29udGV4dCkge1xuICAgIHZhciB2YWx1ZXMgPSB0aWNrVmFsdWVzID09IG51bGwgPyAoc2NhbGUudGlja3MgPyBzY2FsZS50aWNrcy5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBzY2FsZS5kb21haW4oKSkgOiB0aWNrVmFsdWVzLFxuICAgICAgICBmb3JtYXQgPSB0aWNrRm9ybWF0ID09IG51bGwgPyAoc2NhbGUudGlja0Zvcm1hdCA/IHNjYWxlLnRpY2tGb3JtYXQuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogaWRlbnRpdHkpIDogdGlja0Zvcm1hdCxcbiAgICAgICAgc3BhY2luZyA9IE1hdGgubWF4KHRpY2tTaXplSW5uZXIsIDApICsgdGlja1BhZGRpbmcsXG4gICAgICAgIHJhbmdlID0gc2NhbGUucmFuZ2UoKSxcbiAgICAgICAgcmFuZ2UwID0gK3JhbmdlWzBdICsgMC41LFxuICAgICAgICByYW5nZTEgPSArcmFuZ2VbcmFuZ2UubGVuZ3RoIC0gMV0gKyAwLjUsXG4gICAgICAgIHBvc2l0aW9uID0gKHNjYWxlLmJhbmR3aWR0aCA/IGNlbnRlciA6IG51bWJlcikoc2NhbGUuY29weSgpKSxcbiAgICAgICAgc2VsZWN0aW9uID0gY29udGV4dC5zZWxlY3Rpb24gPyBjb250ZXh0LnNlbGVjdGlvbigpIDogY29udGV4dCxcbiAgICAgICAgcGF0aCA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIuZG9tYWluXCIpLmRhdGEoW251bGxdKSxcbiAgICAgICAgdGljayA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIudGlja1wiKS5kYXRhKHZhbHVlcywgc2NhbGUpLm9yZGVyKCksXG4gICAgICAgIHRpY2tFeGl0ID0gdGljay5leGl0KCksXG4gICAgICAgIHRpY2tFbnRlciA9IHRpY2suZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcInRpY2tcIiksXG4gICAgICAgIGxpbmUgPSB0aWNrLnNlbGVjdChcImxpbmVcIiksXG4gICAgICAgIHRleHQgPSB0aWNrLnNlbGVjdChcInRleHRcIik7XG5cbiAgICBwYXRoID0gcGF0aC5tZXJnZShwYXRoLmVudGVyKCkuaW5zZXJ0KFwicGF0aFwiLCBcIi50aWNrXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkb21haW5cIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCIjMDAwXCIpKTtcblxuICAgIHRpY2sgPSB0aWNrLm1lcmdlKHRpY2tFbnRlcik7XG5cbiAgICBsaW5lID0gbGluZS5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiMwMDBcIilcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcikpO1xuXG4gICAgdGV4dCA9IHRleHQubWVyZ2UodGlja0VudGVyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzAwMFwiKVxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLmF0dHIoXCJkeVwiLCBvcmllbnQgPT09IHRvcCA/IFwiMGVtXCIgOiBvcmllbnQgPT09IGJvdHRvbSA/IFwiMC43MWVtXCIgOiBcIjAuMzJlbVwiKSk7XG5cbiAgICBpZiAoY29udGV4dCAhPT0gc2VsZWN0aW9uKSB7XG4gICAgICBwYXRoID0gcGF0aC50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgdGljayA9IHRpY2sudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIGxpbmUgPSBsaW5lLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0ZXh0ID0gdGV4dC50cmFuc2l0aW9uKGNvbnRleHQpO1xuXG4gICAgICB0aWNrRXhpdCA9IHRpY2tFeGl0LnRyYW5zaXRpb24oY29udGV4dClcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBpc0Zpbml0ZShkID0gcG9zaXRpb24oZCkpID8gdHJhbnNmb3JtKGQpIDogdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7IH0pO1xuXG4gICAgICB0aWNrRW50ZXJcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHZhciBwID0gdGhpcy5wYXJlbnROb2RlLl9fYXhpczsgcmV0dXJuIHRyYW5zZm9ybShwICYmIGlzRmluaXRlKHAgPSBwKGQpKSA/IHAgOiBwb3NpdGlvbihkKSk7IH0pO1xuICAgIH1cblxuICAgIHRpY2tFeGl0LnJlbW92ZSgpO1xuXG4gICAgcGF0aFxuICAgICAgICAuYXR0cihcImRcIiwgb3JpZW50ID09PSBsZWZ0IHx8IG9yaWVudCA9PSByaWdodFxuICAgICAgICAgICAgPyBcIk1cIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCIsXCIgKyByYW5nZTAgKyBcIkgwLjVWXCIgKyByYW5nZTEgKyBcIkhcIiArIGsgKiB0aWNrU2l6ZU91dGVyXG4gICAgICAgICAgICA6IFwiTVwiICsgcmFuZ2UwICsgXCIsXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiVjAuNUhcIiArIHJhbmdlMSArIFwiVlwiICsgayAqIHRpY2tTaXplT3V0ZXIpO1xuXG4gICAgdGlja1xuICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uKGQpKTsgfSk7XG5cbiAgICBsaW5lXG4gICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpO1xuXG4gICAgdGV4dFxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLnRleHQoZm9ybWF0KTtcblxuICAgIHNlbGVjdGlvbi5maWx0ZXIoZW50ZXJpbmcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgMTApXG4gICAgICAgIC5hdHRyKFwiZm9udC1mYW1pbHlcIiwgXCJzYW5zLXNlcmlmXCIpXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgb3JpZW50ID09PSByaWdodCA/IFwic3RhcnRcIiA6IG9yaWVudCA9PT0gbGVmdCA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcblxuICAgIHNlbGVjdGlvblxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHsgdGhpcy5fX2F4aXMgPSBwb3NpdGlvbjsgfSk7XG4gIH1cblxuICBheGlzLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlID0gXywgYXhpcykgOiBzY2FsZTtcbiAgfTtcblxuICBheGlzLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRpY2tBcmd1bWVudHMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksIGF4aXM7XG4gIH07XG5cbiAgYXhpcy50aWNrQXJndW1lbnRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tBcmd1bWVudHMgPSBfID09IG51bGwgPyBbXSA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja0FyZ3VtZW50cy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrVmFsdWVzID0gXyA9PSBudWxsID8gbnVsbCA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja1ZhbHVlcyAmJiB0aWNrVmFsdWVzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrRm9ybWF0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tGb3JtYXQgPSBfLCBheGlzKSA6IHRpY2tGb3JtYXQ7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gdGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZUlubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVPdXRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVPdXRlcjtcbiAgfTtcblxuICBheGlzLnRpY2tQYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tQYWRkaW5nID0gK18sIGF4aXMpIDogdGlja1BhZGRpbmc7XG4gIH07XG5cbiAgcmV0dXJuIGF4aXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzVG9wKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHJpZ2h0LCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzQm90dG9tKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGJvdHRvbSwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc0xlZnQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xufVxuIiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICB0YXUgPSAyICogcGksXG4gICAgZXBzaWxvbiA9IDFlLTYsXG4gICAgdGF1RXBzaWxvbiA9IHRhdSAtIGVwc2lsb247XG5cbmZ1bmN0aW9uIFBhdGgoKSB7XG4gIHRoaXMuX3gwID0gdGhpcy5feTAgPSAvLyBzdGFydCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5feDEgPSB0aGlzLl95MSA9IG51bGw7IC8vIGVuZCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5fID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gcGF0aCgpIHtcbiAgcmV0dXJuIG5ldyBQYXRoO1xufVxuXG5QYXRoLnByb3RvdHlwZSA9IHBhdGgucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGF0aCxcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl94MSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5feDEgPSB0aGlzLl94MCwgdGhpcy5feTEgPSB0aGlzLl95MDtcbiAgICAgIHRoaXMuXyArPSBcIlpcIjtcbiAgICB9XG4gIH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJRXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkNcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKCt4MikgKyBcIixcIiArICgreTIpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYXJjVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCByKSB7XG4gICAgeDEgPSAreDEsIHkxID0gK3kxLCB4MiA9ICt4MiwgeTIgPSAreTIsIHIgPSArcjtcbiAgICB2YXIgeDAgPSB0aGlzLl94MSxcbiAgICAgICAgeTAgPSB0aGlzLl95MSxcbiAgICAgICAgeDIxID0geDIgLSB4MSxcbiAgICAgICAgeTIxID0geTIgLSB5MSxcbiAgICAgICAgeDAxID0geDAgLSB4MSxcbiAgICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgICAgbDAxXzIgPSB4MDEgKiB4MDEgKyB5MDEgKiB5MDE7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDEseTEpLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4MCx5MCk/IERvIG5vdGhpbmcuXG4gICAgZWxzZSBpZiAoIShsMDFfMiA+IGVwc2lsb24pKSB7fVxuXG4gICAgLy8gT3IsIGFyZSAoeDAseTApLCAoeDEseTEpIGFuZCAoeDIseTIpIGNvbGxpbmVhcj9cbiAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgLy8gT3IsIGlzIHRoZSByYWRpdXMgemVybz8gTGluZSB0byAoeDEseTEpLlxuICAgIGVsc2UgaWYgKCEoTWF0aC5hYnMoeTAxICogeDIxIC0geTIxICogeDAxKSA+IGVwc2lsb24pIHx8ICFyKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHgyMCA9IHgyIC0geDAsXG4gICAgICAgICAgeTIwID0geTIgLSB5MCxcbiAgICAgICAgICBsMjFfMiA9IHgyMSAqIHgyMSArIHkyMSAqIHkyMSxcbiAgICAgICAgICBsMjBfMiA9IHgyMCAqIHgyMCArIHkyMCAqIHkyMCxcbiAgICAgICAgICBsMjEgPSBNYXRoLnNxcnQobDIxXzIpLFxuICAgICAgICAgIGwwMSA9IE1hdGguc3FydChsMDFfMiksXG4gICAgICAgICAgbCA9IHIgKiBNYXRoLnRhbigocGkgLSBNYXRoLmFjb3MoKGwyMV8yICsgbDAxXzIgLSBsMjBfMikgLyAoMiAqIGwyMSAqIGwwMSkpKSAvIDIpLFxuICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgdDIxID0gbCAvIGwyMTtcblxuICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxuICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbikge1xuICAgICAgICB0aGlzLl8gKz0gXCJMXCIgKyAoeDEgKyB0MDEgKiB4MDEpICsgXCIsXCIgKyAoeTEgKyB0MDEgKiB5MDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwwLFwiICsgKCsoeTAxICogeDIwID4geDAxICogeTIwKSkgKyBcIixcIiArICh0aGlzLl94MSA9IHgxICsgdDIxICogeDIxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEgKyB0MjEgKiB5MjEpO1xuICAgIH1cbiAgfSxcbiAgYXJjOiBmdW5jdGlvbih4LCB5LCByLCBhMCwgYTEsIGNjdykge1xuICAgIHggPSAreCwgeSA9ICt5LCByID0gK3I7XG4gICAgdmFyIGR4ID0gciAqIE1hdGguY29zKGEwKSxcbiAgICAgICAgZHkgPSByICogTWF0aC5zaW4oYTApLFxuICAgICAgICB4MCA9IHggKyBkeCxcbiAgICAgICAgeTAgPSB5ICsgZHksXG4gICAgICAgIGN3ID0gMSBeIGNjdyxcbiAgICAgICAgZGEgPSBjY3cgPyBhMCAtIGExIDogYTEgLSBhMDtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MCx5MCkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MCx5MCkgbm90IGNvaW5jaWRlbnQgd2l0aCB0aGUgcHJldmlvdXMgcG9pbnQ/IExpbmUgdG8gKHgwLHkwKS5cbiAgICBlbHNlIGlmIChNYXRoLmFicyh0aGlzLl94MSAtIHgwKSA+IGVwc2lsb24gfHwgTWF0aC5hYnModGhpcy5feTEgLSB5MCkgPiBlcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgZW1wdHk/IFdl4oCZcmUgZG9uZS5cbiAgICBpZiAoIXIpIHJldHVybjtcblxuICAgIC8vIERvZXMgdGhlIGFuZ2xlIGdvIHRoZSB3cm9uZyB3YXk/IEZsaXAgdGhlIGRpcmVjdGlvbi5cbiAgICBpZiAoZGEgPCAwKSBkYSA9IGRhICUgdGF1ICsgdGF1O1xuXG4gICAgLy8gSXMgdGhpcyBhIGNvbXBsZXRlIGNpcmNsZT8gRHJhdyB0d28gYXJjcyB0byBjb21wbGV0ZSB0aGUgY2lyY2xlLlxuICAgIGlmIChkYSA+IHRhdUVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHggLSBkeCkgKyBcIixcIiArICh5IC0gZHkpICsgXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHgwKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTApO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIG5vbi1lbXB0eT8gRHJhdyBhbiBhcmMhXG4gICAgZWxzZSBpZiAoZGEgPiBlcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCxcIiArICgrKGRhID49IHBpKSkgKyBcIixcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4ICsgciAqIE1hdGguY29zKGExKSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkgKyByICogTWF0aC5zaW4oYTEpKTtcbiAgICB9XG4gIH0sXG4gIHJlY3Q6IGZ1bmN0aW9uKHgsIHksIHcsIGgpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSkgKyBcImhcIiArICgrdykgKyBcInZcIiArICgraCkgKyBcImhcIiArICgtdykgKyBcIlpcIjtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl87XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBhdGg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb25zdGFudCgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnM7XG5leHBvcnQgdmFyIGF0YW4yID0gTWF0aC5hdGFuMjtcbmV4cG9ydCB2YXIgY29zID0gTWF0aC5jb3M7XG5leHBvcnQgdmFyIG1heCA9IE1hdGgubWF4O1xuZXhwb3J0IHZhciBtaW4gPSBNYXRoLm1pbjtcbmV4cG9ydCB2YXIgc2luID0gTWF0aC5zaW47XG5leHBvcnQgdmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG5cbmV4cG9ydCB2YXIgZXBzaWxvbiA9IDFlLTEyO1xuZXhwb3J0IHZhciBwaSA9IE1hdGguUEk7XG5leHBvcnQgdmFyIGhhbGZQaSA9IHBpIC8gMjtcbmV4cG9ydCB2YXIgdGF1ID0gMiAqIHBpO1xuXG5leHBvcnQgZnVuY3Rpb24gYWNvcyh4KSB7XG4gIHJldHVybiB4ID4gMSA/IDAgOiB4IDwgLTEgPyBwaSA6IE1hdGguYWNvcyh4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzaW4oeCkge1xuICByZXR1cm4geCA+PSAxID8gaGFsZlBpIDogeCA8PSAtMSA/IC1oYWxmUGkgOiBNYXRoLmFzaW4oeCk7XG59XG4iLCJmdW5jdGlvbiBMaW5lYXIoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTGluZWFyKGNvbnRleHQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHgocCkge1xuICByZXR1cm4gcFswXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkocCkge1xuICByZXR1cm4gcFsxXTtcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGN1cnZlTGluZWFyIGZyb20gXCIuL2N1cnZlL2xpbmVhclwiO1xuaW1wb3J0IGxpbmUgZnJvbSBcIi4vbGluZVwiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuL3BvaW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgeDAgPSBwb2ludFgsXG4gICAgICB4MSA9IG51bGwsXG4gICAgICB5MCA9IGNvbnN0YW50KDApLFxuICAgICAgeTEgPSBwb2ludFksXG4gICAgICBkZWZpbmVkID0gY29uc3RhbnQodHJ1ZSksXG4gICAgICBjb250ZXh0ID0gbnVsbCxcbiAgICAgIGN1cnZlID0gY3VydmVMaW5lYXIsXG4gICAgICBvdXRwdXQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGFyZWEoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBqLFxuICAgICAgICBrLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGQsXG4gICAgICAgIGRlZmluZWQwID0gZmFsc2UsXG4gICAgICAgIGJ1ZmZlcixcbiAgICAgICAgeDB6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICB5MHogPSBuZXcgQXJyYXkobik7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSB7XG4gICAgICAgICAgaiA9IGk7XG4gICAgICAgICAgb3V0cHV0LmFyZWFTdGFydCgpO1xuICAgICAgICAgIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgICAgIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgICBmb3IgKGsgPSBpIC0gMTsgayA+PSBqOyAtLWspIHtcbiAgICAgICAgICAgIG91dHB1dC5wb2ludCh4MHpba10sIHkweltrXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICAgICAgb3V0cHV0LmFyZWFFbmQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRlZmluZWQwKSB7XG4gICAgICAgIHgweltpXSA9ICt4MChkLCBpLCBkYXRhKSwgeTB6W2ldID0gK3kwKGQsIGksIGRhdGEpO1xuICAgICAgICBvdXRwdXQucG9pbnQoeDEgPyAreDEoZCwgaSwgZGF0YSkgOiB4MHpbaV0sIHkxID8gK3kxKGQsIGksIGRhdGEpIDogeTB6W2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gb3V0cHV0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJlYWxpbmUoKSB7XG4gICAgcmV0dXJuIGxpbmUoKS5kZWZpbmVkKGRlZmluZWQpLmN1cnZlKGN1cnZlKS5jb250ZXh0KGNvbnRleHQpO1xuICB9XG5cbiAgYXJlYS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHgxID0gbnVsbCwgYXJlYSkgOiB4MDtcbiAgfTtcblxuICBhcmVhLngwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeDA7XG4gIH07XG5cbiAgYXJlYS54MSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MSA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB4MTtcbiAgfTtcblxuICBhcmVhLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgeTEgPSBudWxsLCBhcmVhKSA6IHkwO1xuICB9O1xuXG4gIGFyZWEueTAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB5MDtcbiAgfTtcblxuICBhcmVhLnkxID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkxID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHkxO1xuICB9O1xuXG4gIGFyZWEubGluZVgwID1cbiAgYXJlYS5saW5lWTAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgwKS55KHkwKTtcbiAgfTtcblxuICBhcmVhLmxpbmVZMSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTEpO1xuICB9O1xuXG4gIGFyZWEubGluZVgxID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MSkueSh5MCk7XG4gIH07XG5cbiAgYXJlYS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGFyZWEpIDogZGVmaW5lZDtcbiAgfTtcblxuICBhcmVhLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGFyZWEpIDogY3VydmU7XG4gIH07XG5cbiAgYXJlYS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBhcmVhKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGFyZWE7XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9jdXJ2ZS9saW5lYXJcIjtcbmltcG9ydCB7eCBhcyBwb2ludFgsIHkgYXMgcG9pbnRZfSBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSBwb2ludFgsXG4gICAgICB5ID0gcG9pbnRZLFxuICAgICAgZGVmaW5lZCA9IGNvbnN0YW50KHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBsaW5lKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXI7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIGVsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkgb3V0cHV0LnBvaW50KCt4KGQsIGksIGRhdGEpLCAreShkLCBpLCBkYXRhKSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmUpIDogeDtcbiAgfTtcblxuICBsaW5lLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHk7XG4gIH07XG5cbiAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGxpbmUpIDogZGVmaW5lZDtcbiAgfTtcblxuICBsaW5lLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGxpbmUpIDogY3VydmU7XG4gIH07XG5cbiAgbGluZS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBsaW5lKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmU7XG59XG4iLCJmdW5jdGlvbiBzaWduKHgpIHtcbiAgcmV0dXJuIHggPCAwID8gLTEgOiAxO1xufVxuXG4vLyBDYWxjdWxhdGUgdGhlIHNsb3BlcyBvZiB0aGUgdGFuZ2VudHMgKEhlcm1pdGUtdHlwZSBpbnRlcnBvbGF0aW9uKSBiYXNlZCBvblxuLy8gdGhlIGZvbGxvd2luZyBwYXBlcjogU3RlZmZlbiwgTS4gMTk5MC4gQSBTaW1wbGUgTWV0aG9kIGZvciBNb25vdG9uaWNcbi8vIEludGVycG9sYXRpb24gaW4gT25lIERpbWVuc2lvbi4gQXN0cm9ub215IGFuZCBBc3Ryb3BoeXNpY3MsIFZvbC4gMjM5LCBOTy5cbi8vIE5PVihJSSksIFAuIDQ0MywgMTk5MC5cbmZ1bmN0aW9uIHNsb3BlMyh0aGF0LCB4MiwgeTIpIHtcbiAgdmFyIGgwID0gdGhhdC5feDEgLSB0aGF0Ll94MCxcbiAgICAgIGgxID0geDIgLSB0aGF0Ll94MSxcbiAgICAgIHMwID0gKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gKGgwIHx8IGgxIDwgMCAmJiAtMCksXG4gICAgICBzMSA9ICh5MiAtIHRoYXQuX3kxKSAvIChoMSB8fCBoMCA8IDAgJiYgLTApLFxuICAgICAgcCA9IChzMCAqIGgxICsgczEgKiBoMCkgLyAoaDAgKyBoMSk7XG4gIHJldHVybiAoc2lnbihzMCkgKyBzaWduKHMxKSkgKiBNYXRoLm1pbihNYXRoLmFicyhzMCksIE1hdGguYWJzKHMxKSwgMC41ICogTWF0aC5hYnMocCkpIHx8IDA7XG59XG5cbi8vIENhbGN1bGF0ZSBhIG9uZS1zaWRlZCBzbG9wZS5cbmZ1bmN0aW9uIHNsb3BlMih0aGF0LCB0KSB7XG4gIHZhciBoID0gdGhhdC5feDEgLSB0aGF0Ll94MDtcbiAgcmV0dXJuIGggPyAoMyAqICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIGggLSB0KSAvIDIgOiB0O1xufVxuXG4vLyBBY2NvcmRpbmcgdG8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3ViaWNfSGVybWl0ZV9zcGxpbmUjUmVwcmVzZW50YXRpb25zXG4vLyBcInlvdSBjYW4gZXhwcmVzcyBjdWJpYyBIZXJtaXRlIGludGVycG9sYXRpb24gaW4gdGVybXMgb2YgY3ViaWMgQsOpemllciBjdXJ2ZXNcbi8vIHdpdGggcmVzcGVjdCB0byB0aGUgZm91ciB2YWx1ZXMgcDAsIHAwICsgbTAgLyAzLCBwMSAtIG0xIC8gMywgcDFcIi5cbmZ1bmN0aW9uIHBvaW50KHRoYXQsIHQwLCB0MSkge1xuICB2YXIgeDAgPSB0aGF0Ll94MCxcbiAgICAgIHkwID0gdGhhdC5feTAsXG4gICAgICB4MSA9IHRoYXQuX3gxLFxuICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgIGR4ID0gKHgxIC0geDApIC8gMztcbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwICsgZHgsIHkwICsgZHggKiB0MCwgeDEgLSBkeCwgeTEgLSBkeCAqIHQxLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBNb25vdG9uZVgoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTW9ub3RvbmVYLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID1cbiAgICB0aGlzLl90MCA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3QwLCBzbG9wZTIodGhpcywgdGhpcy5fdDApKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHQxID0gTmFOO1xuXG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgaWYgKHggPT09IHRoaXMuX3gxICYmIHkgPT09IHRoaXMuX3kxKSByZXR1cm47IC8vIElnbm9yZSBjb2luY2lkZW50IHBvaW50cy5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHBvaW50KHRoaXMsIHNsb3BlMih0aGlzLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSksIHQxKTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB0aGlzLl90MCwgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICAgIHRoaXMuX3QwID0gdDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gTW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IG5ldyBSZWZsZWN0Q29udGV4dChjb250ZXh0KTtcbn1cblxuKE1vbm90b25lWS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1vbm90b25lWC5wcm90b3R5cGUpKS5wb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgTW9ub3RvbmVYLnByb3RvdHlwZS5wb2ludC5jYWxsKHRoaXMsIHksIHgpO1xufTtcblxuZnVuY3Rpb24gUmVmbGVjdENvbnRleHQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuUmVmbGVjdENvbnRleHQucHJvdG90eXBlID0ge1xuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5tb3ZlVG8oeSwgeCk7IH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7IHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7IH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLl9jb250ZXh0LmxpbmVUbyh5LCB4KTsgfSxcbiAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHsgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHkxLCB4MSwgeTIsIHgyLCB5LCB4KTsgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1vbm90b25lWChjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVYKGNvbnRleHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBNb25vdG9uZVkoY29udGV4dCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5pbXBvcnQge21lYW4sIHF1YW50aWxlLCBkZXZpYXRpb259IGZyb20gXCJkMy1hcnJheVwiO1xuXG5cbi8vIHJlZmVyZW5jZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvS2VybmVsXyhzdGF0aXN0aWNzKVxuLy8gcmVmZXJlbmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9LZXJuZWxfZGVuc2l0eV9lc3RpbWF0aW9uXG5leHBvcnQgY29uc3Qga2VybmVsID0ge1xuICAgIGVwYW5lY2huaWtvdjogZnVuY3Rpb24odSl7cmV0dXJuIE1hdGguYWJzKHUpIDw9IDE/ICgzLzQpKigxLXUqdSk6MH0sXG4gICAgZ2F1c3NpYW46IGZ1bmN0aW9uKHUpe3JldHVybiAxL01hdGguc3FydCgyKk1hdGguUEkpKk1hdGguZXhwKC0uNSp1KnUpfVxufTtcblxuLy8gcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vamFzb25kYXZpZXMvc2NpZW5jZS5qcy9ibG9iL21hc3Rlci9zcmMvc3RhdHMvYmFuZHdpZHRoLmpzXG5leHBvcnQgY29uc3Qga2VybmVsQmFuZHdpZHRoID0ge1xuICAgIC8vIEJhbmR3aWR0aCBzZWxlY3RvcnMgZm9yIEdhdXNzaWFuIGtlcm5lbHMuXG4gICAgbnJkOiBmdW5jdGlvbih4KSB7XG4gICAgICAgIGxldCBpcXIgPSBxdWFudGlsZSh4LCAwLjc1KSAtIHF1YW50aWxlKHgsIDAuMjUpO1xuICAgICAgICBsZXQgaCA9IGlxciAvIDEuMzQ7XG4gICAgICAgIHJldHVybiAxLjA2ICogTWF0aC5taW4oZGV2aWF0aW9uKHgpLCBoKSAqIE1hdGgucG93KHgubGVuZ3RoLCAtMS81KTtcbiAgICB9XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ga2VybmVsOiB0aGUga2VybmVsIGZ1bmN0aW9uLCBzdWNoIGFzIGdhdXNzaWFuXG4gKiBAcGFyYW0gWDogbGlzdCBvZiBiaW5zXG4gKiBAcGFyYW0gaDogdGhlIGJhbmR3aWR0aCwgZWl0aGVyIGEgbnVtZXJpY2FsIHZhbHVlIGdpdmVuIGJ5IHRoZSB1c2VyIG9yIGNhbGN1bGF0ZWQgdXNpbmcgdGhlIGZ1bmN0aW9uIGtlcm5lbEJhbmR3aWR0aFxuICogQHJldHVybnMge0Z1bmN0aW9ufTogdGhlIGtlcm5lbCBkZW5zaXR5IGVzdGltYXRvclxuICovXG5leHBvcnQgZnVuY3Rpb24ga2VybmVsRGVuc2l0eUVzdGltYXRvcihrZXJuZWwsIFgsIGgpe1xuICAgIHJldHVybiBmdW5jdGlvbihWKSB7XG4gICAgICAgIC8vIFggaXMgdGhlIGJpbnNcbiAgICAgICAgcmV0dXJuIFgubWFwKCh4KSA9PiBbeCwgbWVhbihWLCAodikgPT4ga2VybmVsKCh4LXYpL2gpKS9oXSk7XG4gICAgfVxufVxuXG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgbSA9IG4sXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBpZiAobSkgcmV0dXJuIHN1bSAvIG07XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG4vKlxuSW5wdXQgZGF0YSBzdHJ1Y3R1cmU6IGEgbGlzdCBvZiBkYXRhIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlOlxuW1xuICAgIHtcbiAgICAgICAgZ3JvdXA6IFwiZ3JvdXAxXCJcbiAgICAgICAgbGFiZWw6IFwiZGF0YXNldCAxXCIsXG4gICAgICAgIHZhbHVlczogW2EgbGlzdCBvZiBudW1lcmljYWwgdmFsdWVzXVxuICAgICB9LFxuICAgICB7XG4gICAgICAgIGdyb3VwOiBcImdyb3VwMVwiXG4gICAgICAgIGxhYmVsOiBcImRhdGFzZXQgMlwiLFxuICAgICAgICB2YWx1ZXM6IFthIGxpc3Qgb2YgbnVtZXJpY2FsIHZhbHVlc11cbiAgICAgfSxcbiAgICAge1xuICAgICAgICBncm91cDogXCJncm91cDJcIlxuICAgICAgICBsYWJlbDogXCJkYXRhc2V0IDNcIixcbiAgICAgICAgdmFsdWVzOiBbYSBsaXN0IG9mIG51bWVyaWNhbCB2YWx1ZXNdXG4gICAgIH1cbl1cbiovXG5cbmltcG9ydCB7ZXh0ZW50LCBtZWRpYW4sIGFzY2VuZGluZywgcXVhbnRpbGUsIG1heCwgbWlufSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7bmVzdH0gZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcbmltcG9ydCB7c2NhbGVCYW5kLCBzY2FsZUxpbmVhcn0gZnJvbSBcImQzLXNjYWxlXCI7XG5pbXBvcnQge2FyZWF9IGZyb20gXCJkMy1zaGFwZVwiO1xuaW1wb3J0IHtheGlzVG9wLCBheGlzQm90dG9tLCBheGlzTGVmdH0gZnJvbSBcImQzLWF4aXNcIjtcbmltcG9ydCB7c2VsZWN0LCBzZWxlY3RBbGwsIGV2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2JydXNofSBmcm9tIFwiZDMtYnJ1c2hcIjtcbmltcG9ydCB7cmFuZG9tTm9ybWFsfSBmcm9tIFwiZDMtcmFuZG9tXCI7XG5cbmltcG9ydCB7a2VybmVsRGVuc2l0eUVzdGltYXRvciwga2VybmVsLCBrZXJuZWxCYW5kd2lkdGh9IGZyb20gXCIuL2tkZVwiO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSBcIi4vVG9vbHRpcFwiO1xuaW1wb3J0IFRvb2xiYXIgZnJvbSBcIi4vVG9vbGJhclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcm91cGVkVmlvbGluIHtcbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvciBmb3IgR3JvdXBlZFZpb2xpblxuICAgICAqIEBwYXJhbSBkYXRhIHtMaXN0fTogYSBsaXN0IG9mIG9iamVjdHMgd2l0aCBhdHRyaWJ1dGVzOiBncm91cDoge1N0cmluZ30sIGxhYmVsOiB7U3RyaW5nfSwgdmFsdWVzOiB7TGlzdH0gb2YgbnVtZXJpY2FsIHZhbHVlcywgc2l6ZTogaW50ZWdlciwgb3B0aW9uYWxcbiAgICAgKiBAcGFyYW0gZ3JvdXBJbmZvIHtEaWN0aW9uYXJ5fTogbWV0YWRhdGEgb2YgdGhlIGdyb3VwLCBpbmRleGVkIGJ5IGdyb3VwIElEXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGF0YSwgZ3JvdXBJbmZvID0ge30pe1xuICAgICAgICB0aGlzLl9zYW5pdHlDaGVjayhkYXRhKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5ncm91cEluZm8gPSBncm91cEluZm87XG4gICAgICAgIHRoaXMudG9vbGJhciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGRvbSB7RE9NfSB0aGUgU1ZHIGRvbSBvYmplY3QgdG8gYXBwZW5kIHRoZSB2aW9saW4gcGxvdCB0b1xuICAgICAqIEBwYXJhbSB3aWR0aCB7RmxvYXR9XG4gICAgICogQHBhcmFtIGhlaWdodCB7RmxvYXR9XG4gICAgICogQHBhcmFtIHhQYWRkaW5nIHtGbG9hdH0gcGFkZGluZyBvZiB0aGUgeCBheGlzXG4gICAgICogQHBhcmFtIHhEb21haW4ge0xpc3R9IHRoZSBvcmRlciBvZiBYIGdyb3Vwc1xuICAgICAqIEBwYXJhbSB5RG9tYWluICB7TGlzdH0gdGhlIG1pbiBhbmQgbWF4IHZhbHVlcyBvZiB0aGUgeSBkb21haW4uIFNldCB0byBlbXB0eSBhcnJheSBvciB1bmRlZmluZWQgdG8gYXV0by1jYWxjdWxhdGUuXG4gICAgICogQHBhcmFtIHlMYWJlbCB7U3RyaW5nfVxuICAgICAqIEBwYXJhbSBzaG93WFxuICAgICAqIEBwYXJhbSBzaG93U3ViWFxuICAgICAqIEBwYXJhbSBzdWJYQW5nbGVcbiAgICAgKiBAcGFyYW0gc2hvd1doaXNrZXJcbiAgICAgKiBAcGFyYW0gc2hvd0RpdmlkZXJcbiAgICAgKiBAcGFyYW0gc2hvd0xlZ2VuZFxuICAgICAqIEBwYXJhbSBzaG93U2l6ZVxuICAgICAqIEBwYXJhbSBzb3J0U3ViWFxuICAgICAqIEBwYXJhbSBzaG93T3V0bGllcnNcbiAgICAgKiBAcGFyYW0gbnVtUG9pbnRzIHtJbnRlZ2VyfSBOdW1iZXIgb2YgcG9pbnRzIHJlcXVpcmVkIHRvIHJlbmRlciB2aW9saW4gcGxvdC4gRGlzcGxheXMgcG9pbnRzIGlmIG4gPCBudW1Qb2ludHMuXG4gICAgICovXG5cbiAgICByZW5kZXIoZG9tLFxuICAgICAgICAgICB3aWR0aD01MDAsXG4gICAgICAgICAgIGhlaWdodD0zNTcsXG4gICAgICAgICAgIHhQYWRkaW5nPTAuMDUsXG4gICAgICAgICAgIHhEb21haW49dW5kZWZpbmVkLFxuICAgICAgICAgICB5RG9tYWluPVstMywzXSxcbiAgICAgICAgICAgeUxhYmVsPVwiWSBheGlzXCIsXG4gICAgICAgICAgIHNob3dYPXRydWUsXG4gICAgICAgICAgIHhBbmdsZT0zMCxcbiAgICAgICAgICAgc2hvd1N1Ylg9dHJ1ZSxcbiAgICAgICAgICAgc3ViWEFuZ2xlPTAsXG4gICAgICAgICAgIHNob3dXaGlza2VyPWZhbHNlLFxuICAgICAgICAgICBzaG93RGl2aWRlcj1mYWxzZSxcbiAgICAgICAgICAgc2hvd0xlZ2VuZD1mYWxzZSxcbiAgICAgICAgICAgc2hvd1NpemU9ZmFsc2UsXG4gICAgICAgICAgIHNvcnRTdWJYPWZhbHNlLFxuICAgICAgICAgICBzaG93T3V0bGllcnM9ZmFsc2UsXG4gICAgICAgICAgIG51bVBvaW50cz0wKXtcblxuICAgICAgICAvLyBkZWZpbmUgdGhlIHJlc2V0IGZvciB0aGlzIHBsb3RcbiAgICAgICAgdGhpcy5yZXNldCA9ICgpID0+IHtcbiAgICAgICAgICAgIGRvbS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoZG9tLCB3aWR0aCwgaGVpZ2h0LCB4UGFkZGluZywgeERvbWFpbiwgeURvbWFpbiwgeUxhYmVsLCBzaG93WCwgeEFuZ2xlLCBzaG93U3ViWCwgc3ViWEFuZ2xlLCBzaG93V2hpc2tlciwgc2hvd0RpdmlkZXIsIHNob3dMZWdlbmQsIHNob3dTaXplLCBzb3J0U3ViWCwgc2hvd091dGxpZXJzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnVwZGF0ZVlTY2FsZSA9IGZ1bmN0aW9uKHlMYWJlbD11bmRlZmluZWQsIHlTY2FsZT11bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRvbS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgaWYgKHlTY2FsZSA9PT0gdW5kZWZpbmVkKSB5U2NhbGUgPSBbXTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKGRvbSwgd2lkdGgsIGhlaWdodCwgeFBhZGRpbmcsIHhEb21haW4sIFtdLCB5TGFiZWwsIHNob3dYLCB4QW5nbGUsIHNob3dTdWJYLCBzdWJYQW5nbGUsIHNob3dXaGlza2VyLCBzaG93RGl2aWRlciwgc2hvd0xlZ2VuZCwgc2hvd1NpemUsIHNvcnRTdWJYLCBzaG93T3V0bGllcnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudXBkYXRlWFNjYWxlID0gZnVuY3Rpb24oeERvbWFpbj11bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh4RG9tYWluID09PSB1bmRlZmluZWQpIGNvbnNvbGUuZXJyb3IoJ3VwZGF0ZVhTY2FsZSBjYWxsZWQgd2l0aG91dCBuZXcgWCBkb21haW4nKTtcbiAgICAgICAgICAgIGRvbS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoZG9tLCB3aWR0aCwgaGVpZ2h0LCB4UGFkZGluZywgeERvbWFpbiwgW10sIHlMYWJlbCwgc2hvd1gsIHhBbmdsZSwgc2hvd1N1YlgsIHN1YlhBbmdsZSwgc2hvd1doaXNrZXIsIHNob3dEaXZpZGVyLCBzaG93TGVnZW5kLCBzaG93U2l6ZSwgc29ydFN1YlgsIHNob3dPdXRsaWVycyk7XG5cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBkZWZpbmVzIHRoZSBYLCBzdWJYLCBZLCBaIHNjYWxlc1xuICAgICAgICBpZiAoeURvbWFpbj09PXVuZGVmaW5lZCB8fCAwID09IHlEb21haW4ubGVuZ3RoKXtcbiAgICAgICAgICAgIGxldCBhbGxWID0gW107XG4gICAgICAgICAgICB0aGlzLmRhdGEuZm9yRWFjaCgoZCkgPT4gYWxsViA9IGFsbFYuY29uY2F0KGQudmFsdWVzKSk7XG4gICAgICAgICAgICB5RG9tYWluID0gZXh0ZW50KGFsbFYpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmUtb3JnYW5pemVkIHRoaXMuZGF0YSBpbmRleGVkIGJ5IGdyb3Vwc1xuICAgICAgICB0aGlzLmdyb3VwcyA9IG5lc3QoKVxuICAgICAgICAgICAgLmtleSgoZCkgPT4gZC5ncm91cClcbiAgICAgICAgICAgIC5lbnRyaWVzKHRoaXMuZGF0YSk7XG5cbiAgICAgICAgdGhpcy5zY2FsZSA9IHtcbiAgICAgICAgICAgIHg6IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoWzAsIHdpZHRoXSlcbiAgICAgICAgICAgICAgICAuZG9tYWluKHhEb21haW58fHRoaXMuZ3JvdXBzLm1hcCgoZCkgPT4gZC5rZXkpKVxuICAgICAgICAgICAgICAgIC5wYWRkaW5nSW5uZXIoeFBhZGRpbmcpLFxuICAgICAgICAgICAgc3VieDogc2NhbGVCYW5kKCksXG4gICAgICAgICAgICB5OiBzY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoW2hlaWdodCwgMF0pXG4gICAgICAgICAgICAgICAgLmRvbWFpbih5RG9tYWluKSxcbiAgICAgICAgICAgIHo6IHNjYWxlTGluZWFyKCkgLy8gdGhpcyBpcyB0aGUgdmlvbGluIHdpZHRoLCB0aGUgZG9tYWluIGFuZCByYW5nZSBhcmUgZGV0ZXJtaW5lZCBsYXRlciBpbmRpdmlkdWFsbHkgZm9yIGVhY2ggdmlvbGluXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZm9yIGVhY2ggZ3JvdXBcbiAgICAgICAgdGhpcy5ncm91cHMuZm9yRWFjaCgoZykgPT4ge1xuICAgICAgICAgICAgbGV0IGdyb3VwID0gZy5rZXk7XG4gICAgICAgICAgICBsZXQgZW50cmllcyA9IGcudmFsdWVzO1xuICAgICAgICAgICAgbGV0IGluZm8gPSB0aGlzLmdyb3VwSW5mb1tncm91cF07IC8vIG9wdGlvbmFsXG4gICAgICAgICAgICBnLmluZGV4ID0gdGhpcy5zY2FsZS54LmRvbWFpbigpLmluZGV4T2YoZ3JvdXApO1xuXG4gICAgICAgICAgICBpZiAoaW5mbyAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgLy8gcmVuZGVycyBncm91cCBpbmZvIHN1Y2ggYXMgcC12YWx1ZSwgZ3JvdXAgbmFtZVxuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwSW5mb0RvbSA9IGRvbS5hcHBlbmQoXCJnXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwTGFiZWxzID0gZ3JvdXBJbmZvRG9tLnNlbGVjdEFsbChcIi52aW9saW4tZ3JvdXAtbGFiZWxcIilcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEoWydwdmFsdWUnXSk7XG4gICAgICAgICAgICAgICAgZ3JvdXBMYWJlbHMuZW50ZXIoKS5hcHBlbmQoXCJ0ZXh0XCIpIC8vIENvZGUgcmV2aWV3OiBjb25zaWRlciBtb3ZpbmcgdGhpcyBwYXJ0IHRvIHRoZSBlUVRMIGRhc2hib2FyZFxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tZ3JvdXAtbGFiZWxcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcImNlbnRlclwiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImZpbGxcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGluZm9bJ3B2YWx1ZVRocmVzaG9sZCddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkPT0ncHZhbHVlJyYmcGFyc2VGbG9hdChpbmZvW2RdKTw9cGFyc2VGbG9hdChpbmZvWydwdmFsdWVUaHJlc2hvbGQnXSk/XCJvcmFuZ2VyZWRcIjpcIlNsYXRlR3JheVwiXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIChkLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeCA9IHRoaXMuc2NhbGUueChncm91cCkgKyB0aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkvMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB5ID0gdGhpcy5zY2FsZS55KHlEb21haW5bMF0pICsgNTA7IC8vIHRvZG86IGF2b2lkIGhhcmQtY29kZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke3h9LCAke3l9KWBcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoKGQpID0+IGAke2R9OiAke3BhcnNlRmxvYXQocGFyc2VGbG9hdChpbmZvW2RdKS50b1ByZWNpc2lvbigzKSkudG9FeHBvbmVudGlhbCgpfWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBkZWZpbmVzIHRoZSB0aGlzLnNjYWxlLnN1YnggYmFzZWQgb24gdGhpcy5zY2FsZS54XG4gICAgICAgICAgICBpZiAoc29ydFN1YlgpIHtcbiAgICAgICAgICAgICAgICBlbnRyaWVzLnNvcnQoKGEsYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYS5sYWJlbCA8IGIubGFiZWwpIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYS5sYWJlbCA+IGIubGFiZWwpIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zY2FsZS5zdWJ4XG4gICAgICAgICAgICAgICAgLmRvbWFpbihlbnRyaWVzLm1hcCgoZCkgPT4gZC5sYWJlbCkpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoW3RoaXMuc2NhbGUueChncm91cCksIHRoaXMuc2NhbGUueChncm91cCkgKyB0aGlzLnNjYWxlLnguYmFuZHdpZHRoKCldKTtcblxuICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKDAgPT0gZW50cnkudmFsdWVzLmxlbmd0aCkgcmV0dXJuOyAvLyBubyBmdXJ0aGVyIHJlbmRlcmluZyBpZiB0aGlzIGdyb3VwIGhhcyBubyBlbnRyaWVzXG4gICAgICAgICAgICAgICAgZW50cnkudmFsdWVzID0gZW50cnkudmFsdWVzLnNvcnQoYXNjZW5kaW5nKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9kcmF3VmlvbGluKGRvbSwgZW50cnksIHNob3dXaGlza2VyLCBnLmluZGV4LCBzaG93T3V0bGllcnMsIG51bVBvaW50cyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gYWRkcyB0aGUgc3ViLXggYXhpcyBpZiB0aGVyZSBhcmUgbW9yZSB0aGFuIG9uZSBlbnRyaWVzXG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gMTg7XG4gICAgICAgICAgICBpZiAoc2hvd1NpemUpe1xuICAgICAgICAgICAgICAgICBjb25zdCBzaXplU2NhbGUgPSBzY2FsZUJhbmQoKVxuICAgICAgICAgICAgICAgICAgICAuZG9tYWluKGVudHJpZXMubWFwKChkKSA9PiB7cmV0dXJuIGQuc2l6ZT09dW5kZWZpbmVkPycoMCknOmAoJHtkLnNpemV8fDB9KWB9KSlcbiAgICAgICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoW3RoaXMuc2NhbGUueChncm91cCksIHRoaXMuc2NhbGUueChncm91cCkgKyB0aGlzLnNjYWxlLnguYmFuZHdpZHRoKCldKTtcbiAgICAgICAgICAgICAgICAgY29uc3Qgc2l6ZXhHID0gZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tc2l6ZS1heGlzXCIpXG4gICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKDAsICR7aGVpZ2h0ICsgYnVmZmVyfSlgKVxuICAgICAgICAgICAgICAgICAgICAgLmNhbGwoYXhpc0JvdHRvbShzaXplU2NhbGUpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNob3dTdWJYKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IDU7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3VieEcgPSBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLXN1Yi1heGlzXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwgJHtoZWlnaHQgKyBidWZmZXJ9KWApXG4gICAgICAgICAgICAgICAgICAgIC5jYWxsKGF4aXNCb3R0b20odGhpcy5zY2FsZS5zdWJ4KSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3ViWEFuZ2xlID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJ4Ry5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGByb3RhdGUoJHtzdWJYQW5nbGV9LCAyLCAxMClgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZW5kZXJzIHRoZSB4IGF4aXNcbiAgICAgICAgbGV0IGJ1ZmZlciA9IHNob3dTdWJYPzU1OjA7IC8vIENvZGUgcmV2aWV3OiBoYXJkLWNvZGVkIHZhbHVlc1xuICAgICAgICB0aGlzLnhBeGlzID0gc2hvd1g/YXhpc0JvdHRvbSh0aGlzLnNjYWxlLngpOmF4aXNCb3R0b20odGhpcy5zY2FsZS54KS50aWNrRm9ybWF0KFwiXCIpO1xuICAgICAgICBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi14LWF4aXMgYXhpcy0teFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAke2hlaWdodCArIGJ1ZmZlcn0pYClcbiAgICAgICAgICAgIC5jYWxsKHRoaXMueEF4aXMpIC8vIHNldCB0aWNrRm9ybWF0KFwiXCIpIHRvIHNob3cgdGljayBtYXJrcyB3aXRob3V0IHRleHQgbGFiZWxzXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgcm90YXRlKCR7eEFuZ2xlfSwgLTEwLCAxMClgKTtcblxuICAgICAgICAvLyBhZGRzIHRoZSB5IEF4aXNcbiAgICAgICAgYnVmZmVyID0gNTtcbiAgICAgICAgdGhpcy55QXhpcyA9IGF4aXNMZWZ0KHRoaXMuc2NhbGUueSlcbiAgICAgICAgICAgICAgICAgICAgLnRpY2tWYWx1ZXModGhpcy5zY2FsZS55LnRpY2tzKDUpKTtcbiAgICAgICAgZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4teS1heGlzIGF4aXMtLXlcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoLSR7YnVmZmVyfSwgMClgKVxuICAgICAgICAgICAgLmNhbGwodGhpcy55QXhpcyk7XG5cbiAgICAgICAgLy8gYWRkcyB0aGUgdGV4dCBsYWJlbCBmb3IgdGhlIHkgYXhpc1xuICAgICAgICBkb20uYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1heGlzLWxhYmVsXCIpXG4gICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKC0ke2J1ZmZlciAqIDIgKyBzZWxlY3QoJy52aW9saW4teS1heGlzJykubm9kZSgpLmdldEJCb3goKS53aWR0aH0sICR7dGhpcy5zY2FsZS55LnJhbmdlKClbMF0gKyAodGhpcy5zY2FsZS55LnJhbmdlKClbMV0gLSB0aGlzLnNjYWxlLnkucmFuZ2UoKVswXSkvMn0pIHJvdGF0ZSgtOTApYClcbiAgICAgICAgICAgIC50ZXh0KHlMYWJlbCk7XG5cbiAgICAgICAgLy8gcGxvdCBtb3VzZSBldmVudHNcbiAgICAgICAgZG9tLm9uKFwibW91c2VvdXRcIiwgKCk9PntcbiAgICAgICAgICAgIGlmKHRoaXMudG9vbHRpcCAhPT0gdW5kZWZpbmVkKSB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBhZGQgZ3JvdXAgZGl2aWRlcnNcbiAgICAgICAgaWYoc2hvd0RpdmlkZXIpe1xuICAgICAgICAgICAgdGhpcy5fYWRkR3JvdXBEaXZpZGVyKGRvbSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgY29sb3IgbGVnZW5kXG4gICAgICAgIGlmIChzaG93TGVnZW5kKSB7XG4gICAgICAgICAgICBjb25zdCBsZWdlbmRHID0gZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImlkXCIsIFwidmlvbGluTGVnZW5kXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAwKWApO1xuXG4gICAgICAgICAgICBsZWdlbmRHLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy5zY2FsZS54LnJhbmdlKClbMF0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIC0zNSlcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIDYwKih0aGlzLmdyb3Vwc1swXS52YWx1ZXMubGVuZ3RoKSArIDEwKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIDI0KVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwic2lsdmVyXCIpO1xuXG4gICAgICAgICAgICBjb25zdCBsZWdlbmRzID0gbGVnZW5kRy5zZWxlY3RBbGwoXCIudmlvbGluLWxlZ2VuZFwiKS5kYXRhKHRoaXMuZ3JvdXBzWzBdLnZhbHVlcyk7XG5cblxuICAgICAgICAgICAgY29uc3QgZyA9IGxlZ2VuZHMuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmNsYXNzZWQoXCJ2aW9saW4tbGVnZW5kXCIsIHRydWUpO1xuICAgICAgICAgICAgY29uc3QgdyA9IDEwO1xuICAgICAgICAgICAgZy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkLCBpKSA9PiA1ICsgNjAqKGkpICArIHRoaXMuc2NhbGUueC5yYW5nZSgpWzBdKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtMjgpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHcpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCkgPT4gZC5jb2xvcik7XG5cbiAgICAgICAgICAgIGcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tbGVnZW5kLXRleHRcIilcbiAgICAgICAgICAgICAgICAudGV4dCgoZCkgPT4gZC5sYWJlbClcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgKGQsIGkpID0+IDE3ICsgNjAqKGkpICsgdGhpcy5zY2FsZS54LnJhbmdlKClbMF0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIC0yMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRQbG90VGl0bGUoZG9tLCB0aXRsZSl7XG4gICAgICAgIGxldCB4ID0gKHRoaXMuc2NhbGUueC5yYW5nZSgpWzFdLXRoaXMuc2NhbGUueC5yYW5nZSgpWzBdICsgMSkgLzI7XG4gICAgICAgIGxldCB5ID0gKHRoaXMuc2NhbGUueS5yYW5nZSgpWzFdIC0gMTApO1xuICAgICAgICBkb20uYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi10aXRsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke3h9LCAke3l9KWApXG4gICAgICAgICAgICAudGV4dCh0aXRsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSB0b29sdGlwIG9iamVjdFxuICAgICAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgdG9vbHRpcCdzIGRvbSBJRFxuICAgICAqIEByZXR1cm5zIHtUb29sdGlwfVxuICAgICAqL1xuICAgIGNyZWF0ZVRvb2x0aXAoZG9tSWQpe1xuICAgICAgICBpZiAoJChgIyR7ZG9tSWR9YCkubGVuZ3RoID09IDApICQoJzxkaXYvPicpLmF0dHIoJ2lkJywgZG9tSWQpLmFwcGVuZFRvKCQoJ2JvZHknKSk7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IG5ldyBUb29sdGlwKGRvbUlkKTtcbiAgICAgICAgc2VsZWN0KGAjJHtkb21JZH1gKS5jbGFzc2VkKCd2aW9saW4tdG9vbHRpcCcsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sdGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgdG9vbGJhciBwYW5lbFxuICAgICAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgdG9vbGJhcidzIGRvbSBJRFxuICAgICAqIEBwYXJhbSB0b29sdGlwIHtUb29sdGlwfVxuICAgICAqIEByZXR1cm5zIHtUb29sYmFyfVxuICAgICAqL1xuXG4gICAgY3JlYXRlVG9vbGJhcihkb21JZCwgdG9vbHRpcCl7XG4gICAgICAgIC8vIGlmICh0b29sdGlwID09PSB1bmRlZmluZWQpIHRvb2x0aXAgPSB0aGlzLmNyZWF0ZVRvb2x0aXAoZG9tSWQpO1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSBuZXcgVG9vbGJhcihkb21JZCwgdG9vbHRpcCk7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2xiYXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgYnJ1c2ggdG8gdGhlIHBsb3RcbiAgICAgKiBAcGFyYW0gZG9tIHtEM30gRG9tIGVsZW1lbnRcbiAgICAgKi9cbiAgICBhZGRCcnVzaChkb20pe1xuICAgICAgICBjb25zdCB0aGVCcnVzaCA9IGJydXNoKCk7XG4gICAgICAgIHRoZUJydXNoLm9uKFwiZW5kXCIsICgpPT57dGhpcy56b29tKGRvbSwgdGhlQnJ1c2gpfSk7XG4gICAgICAgIGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYnJ1c2hcIilcbiAgICAgICAgICAgIC5jYWxsKHRoZUJydXNoKTtcbiAgICB9XG5cbiAgICB6b29tKGRvbSwgdGhlQnJ1c2gpe1xuICAgICAgICBsZXQgcyA9IGV2ZW50LnNlbGVjdGlvbixcbiAgICAgICAgICAgIGlkZWxUaW1lb3V0LFxuICAgICAgICAgICAgaWRlbERlbGF5ID0gMzUwO1xuICAgICAgICBpZiAodGhlQnJ1c2ggPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXMpIHtcbiAgICAgICAgICAgIGlmICghaWRlbFRpbWVvdXQpIHJldHVybiBpZGVsVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlkZWxUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIH0sIGlkZWxEZWxheSk7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBjdXJyZW50IHNjYWxlcycgZG9tYWlucyBiYXNlZCBvbiB0aGUgYnJ1c2hlZCB3aW5kb3dcbiAgICAgICAgICAgIHRoaXMuc2NhbGUueC5kb21haW4odGhpcy5zY2FsZS54LmRvbWFpbigpLmZpbHRlcigoZCwgaSk9PntcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGxvd0JvdW5kID0gTWF0aC5mbG9vcihzWzBdWzBdL3RoaXMuc2NhbGUueC5iYW5kd2lkdGgoKSk7XG4gICAgICAgICAgICAgICAgICBjb25zdCB1cHBlckJvdW5kID0gTWF0aC5mbG9vcihzWzFdWzBdL3RoaXMuc2NhbGUueC5iYW5kd2lkdGgoKSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaSA+PSBsb3dCb3VuZCAmJiBpIDw9dXBwZXJCb3VuZDtcbiAgICAgICAgICAgIH0pKTsgLy8gVE9ETzogYWRkIGNvbW1lbnRzXG5cbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IE1hdGguZmxvb3IodGhpcy5zY2FsZS55LmludmVydChzWzFdWzFdKSk7XG4gICAgICAgICAgICBjb25zdCBtYXggPSBNYXRoLmZsb29yKHRoaXMuc2NhbGUueS5pbnZlcnQoc1swXVsxXSkpO1xuICAgICAgICAgICAgdGhpcy5zY2FsZS55LmRvbWFpbihbbWluLCBtYXhdKTsgLy8gdG9kbzogZGVidWdcblxuICAgICAgICAgICAgZG9tLnNlbGVjdChcIi5icnVzaFwiKS5jYWxsKHRoZUJydXNoLm1vdmUsIG51bGwpO1xuICAgICAgICB9XG5cblxuICAgICAgICAgLy8gem9vbVxuICAgICAgICBsZXQgdCA9IGRvbS50cmFuc2l0aW9uKCkuZHVyYXRpb24oNzUwKTtcbiAgICAgICAgZG9tLnNlbGVjdChcIi5heGlzLS14XCIpLnRyYW5zaXRpb24odCkuY2FsbCh0aGlzLnhBeGlzKTtcbiAgICAgICAgZG9tLnNlbGVjdChcIi5heGlzLS15XCIpLnRyYW5zaXRpb24odCkuY2FsbCh0aGlzLnlBeGlzKTtcblxuICAgICAgICB0aGlzLmdyb3Vwcy5mb3JFYWNoKChnZywgaSk9PiB7XG4gICAgICAgICAgICBsZXQgZ3JvdXAgPSBnZy5rZXk7XG4gICAgICAgICAgICBsZXQgZW50cmllcyA9IGdnLnZhbHVlcztcblxuICAgICAgICAgICAgLy8gcmUtZGVmaW5lIHRoZSBzdWJ4J3MgcmFuZ2VcbiAgICAgICAgICAgIHRoaXMuc2NhbGUuc3VieFxuICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kKFt0aGlzLnNjYWxlLngoZ3JvdXApLCB0aGlzLnNjYWxlLngoZ3JvdXApICsgdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpXSk7XG5cbiAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoMCA9PSBlbnRyeS52YWx1ZXMubGVuZ3RoKSByZXR1cm47IC8vIG5vIGZ1cnRoZXIgcmVuZGVyaW5nIGlmIHRoaXMgZ3JvdXAgaGFzIG5vIGVudHJpZXNcbiAgICAgICAgICAgICAgICBjb25zdCBnSW5kZXggPSB0aGlzLnNjYWxlLnguZG9tYWluKCkuaW5kZXhPZihncm91cCk7XG5cblxuICAgICAgICAgICAgICAgIC8vIHJlLWRlZmluZSB0aGUgc2NhbGUueidzIHJhbmdlXG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZS56XG4gICAgICAgICAgICAgICAgICAgIC5yYW5nZShbdGhpcy5zY2FsZS5zdWJ4KGVudHJ5LmxhYmVsKSwgdGhpcy5zY2FsZS5zdWJ4KGVudHJ5LmxhYmVsKSArIHRoaXMuc2NhbGUuc3VieC5iYW5kd2lkdGgoKV0pO1xuXG4gICAgICAgICAgICAgICAgLy8gcmUtcmVuZGVyIHRoZSB2aW9saW5cbiAgICAgICAgICAgICAgICBjb25zdCBnID0gZG9tLnNlbGVjdChgI3Zpb2xpbiR7Z2cuaW5kZXh9LSR7ZW50cnkubGFiZWx9YCk7XG4gICAgICAgICAgICAgICAgZy5zZWxlY3QoXCIudmlvbGluXCIpXG4gICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKHQpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBhcmVhKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC54MCgoZCkgPT4gdGhpcy5zY2FsZS56KGRbMV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgLngxKChkKSA9PiB0aGlzLnNjYWxlLnooLWRbMV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnkoKGQpID0+IHRoaXMuc2NhbGUueShkWzBdKSlcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuXG4gICAgICAgICAgICAgICAgLy8gcmUtcmVuZGVyIHRoZSBib3ggcGxvdFxuICAgICAgICAgICAgICAgIC8vIGludGVycXVhcnRpbGUgcmFuZ2VcbiAgICAgICAgICAgICAgICBjb25zdCBxMSA9IHF1YW50aWxlKGVudHJ5LnZhbHVlcywgMC4yNSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcTMgPSBxdWFudGlsZShlbnRyeS52YWx1ZXMsIDAuNzUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHogPSAwLjE7XG4gICAgICAgICAgICAgICAgZy5zZWxlY3QoXCIudmlvbGluLWlyXCIpXG4gICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKHQpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCB0aGlzLnNjYWxlLnooLXopKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgdGhpcy5zY2FsZS55KHEzKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBNYXRoLmFicyh0aGlzLnNjYWxlLnooLXopIC0gdGhpcy5zY2FsZS56KHopKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgTWF0aC5hYnModGhpcy5zY2FsZS55KHEzKSAtIHRoaXMuc2NhbGUueShxMSkpKTtcblxuICAgICAgICAgICAgICAgIC8vIHRoZSBtZWRpYW4gbGluZVxuICAgICAgICAgICAgICAgIGNvbnN0IG1lZCA9IG1lZGlhbihlbnRyeS52YWx1ZXMpO1xuICAgICAgICAgICAgICAgIGcuc2VsZWN0KFwiLnZpb2xpbi1tZWRpYW5cIilcbiAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24odClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCB0aGlzLnNjYWxlLnooLXopKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcIngyXCIsIHRoaXMuc2NhbGUueih6KSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCB0aGlzLnNjYWxlLnkobWVkKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCB0aGlzLnNjYWxlLnkobWVkKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlbmRlciB0aGUgdmlvbGluIGFuZCBib3ggcGxvdHNcbiAgICAgKiBAcGFyYW0gZG9tIHtEMyBET019XG4gICAgICogQHBhcmFtIGVudHJ5IHtPYmplY3R9IHdpdGggYXR0cnM6IHZhbHVlcywgbGFiZWxcbiAgICAgKiBAcGFyYW0gc2hvd1doaXNrZXIge0Jvb2xlYW59XG4gICAgICogQHBhcmFtIGdJbmRleFxuICAgICAqIEBwYXJhbSBzaG93T3V0bGllcnMge0Jvb2xlYW59XG4gICAgICogQHBhcmFtIHNob3dQb2ludHMge0Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZHJhd1Zpb2xpbihkb20sIGVudHJ5LCBzaG93V2hpc2tlciwgZ0luZGV4LCBzaG93T3V0bGllcnMsIG51bVBvaW50cyl7XG5cbiAgICAgICAgLy8gZ2VuZXJhdGUgdGhlIHZlcnRpY2VzIGZvciB0aGUgdmlvbGluIHBhdGggdXNlIGEga2RlXG4gICAgICAgIGxldCBrZGUgPSBrZXJuZWxEZW5zaXR5RXN0aW1hdG9yKFxuICAgICAgICAgICAga2VybmVsLmdhdXNzaWFuLFxuICAgICAgICAgICAgdGhpcy5zY2FsZS55LnRpY2tzKDEwMCksIC8vIHVzZSB1cCB0byAxMDAgdmVydGljZXMgYWxvbmcgdGhlIFkgYXhpcyAodG8gY3JlYXRlIHRoZSB2aW9saW4gcGF0aClcbiAgICAgICAgICAgIGtlcm5lbEJhbmR3aWR0aC5ucmQoZW50cnkudmFsdWVzKSAvLyBlc3RpbWF0ZSB0aGUgYmFuZHdpZHRoIGJhc2VkIG9uIHRoZSBkYXRhXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGVEb21haW4gPSBleHRlbnQoZW50cnkudmFsdWVzKTsgLy8gZ2V0IHRoZSBtYXggYW5kIG1pbiBpbiBlbnRyeS52YWx1ZXNcbiAgICAgICAgY29uc3QgdmVydGljZXMgPSBrZGUoZW50cnkudmFsdWVzKS5maWx0ZXIoKGQpPT5kWzBdPj1lRG9tYWluWzBdJiZkWzBdPD1lRG9tYWluWzFdKTsgLy8gZmlsdGVyIHRoZSB2ZXJ0aWNlcyB0aGF0IGFyZW4ndCBpbiB0aGUgZW50cnkudmFsdWVzXG5cbiAgICAgICAgY29uc3QgdmlvbGluRyA9IGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2lkJywgYHZpb2xpbiR7Z0luZGV4fS0ke2VudHJ5LmxhYmVsfWApXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3Zpb2xpbi1nJylcbiAgICAgICAgICAgICAgICAuZGF0dW0oZW50cnkpO1xuXG4gICAgICAgIC8vIHZpb2xpbiBwbG90IGFuZCBib3ggY2FuIG9ubHkgYmUgZHJhd24gd2hlbiB2ZXJ0aWNlcyBleGlzdCBhbmQgdGhlcmUgYXJlIG5vIE5hTiBwb2ludHNcbiAgICAgICAgaWYgKGVudHJ5LnZhbHVlcy5sZW5ndGggPj0gbnVtUG9pbnRzICYmIHZlcnRpY2VzLmxlbmd0aCAmJiB0aGlzLl92YWxpZFZlcnRpY2VzKHZlcnRpY2VzKSkge1xuICAgICAgICAgICAgLy8gZGVmaW5lIHRoZSB6IHNjYWxlIC0tIHRoZSB2aW9saW4gd2lkdGhcbiAgICAgICAgICAgIGxldCB6TWF4ID0gbWF4KHZlcnRpY2VzLCAoZCk9Pk1hdGguYWJzKGRbMV0pKTsgLy8gZmluZCB0aGUgYWJzKHZhbHVlKSBpbiBlbnRyeS52YWx1ZXNcbiAgICAgICAgICAgIHRoaXMuc2NhbGUuelxuICAgICAgICAgICAgICAgIC5kb21haW4oWy16TWF4LCB6TWF4XSlcbiAgICAgICAgICAgICAgICAucmFuZ2UoW3RoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCksIHRoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCkgKyB0aGlzLnNjYWxlLnN1YnguYmFuZHdpZHRoKCldKTtcblxuICAgICAgICAgICAgLy8gdmlzdWFsIHJlbmRlcmluZ1xuICAgICAgICAgICAgbGV0IHZpb2xpbiA9IGFyZWEoKVxuICAgICAgICAgICAgICAgIC54MCgoZCkgPT4gdGhpcy5zY2FsZS56KGRbMV0pKVxuICAgICAgICAgICAgICAgIC54MSgoZCkgPT4gdGhpcy5zY2FsZS56KC1kWzFdKSlcbiAgICAgICAgICAgICAgICAueSgoZCkgPT4gdGhpcy5zY2FsZS55KGRbMF0pKTtcbiAgICAgICAgICAgIGNvbnN0IHZQYXRoID0gdmlvbGluRy5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgICAgICAgICAgLmRhdHVtKHZlcnRpY2VzKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCB2aW9saW4pXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJ2aW9saW5cIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsICgpPT57XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeS5jb2xvciAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZW50cnkuY29sb3I7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFsdGVybmF0ZSB0aGUgb2RkIGFuZCBldmVuIGNvbG9ycywgbWF5YmUgd2UgZG9uJ3Qgd2FudCB0aGlzIGZlYXR1cmVcbiAgICAgICAgICAgICAgICAgICAgaWYoZ0luZGV4JTIgPT0gMCkgcmV0dXJuIFwiIzkwYzFjMVwiO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIjOTRhOGI4XCI7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGJveHBsb3RcbiAgICAgICAgICAgIGNvbnN0IHExID0gcXVhbnRpbGUoZW50cnkudmFsdWVzLCAwLjI1KTtcbiAgICAgICAgICAgIGNvbnN0IHEzID0gcXVhbnRpbGUoZW50cnkudmFsdWVzLCAwLjc1KTtcbiAgICAgICAgICAgIGNvbnN0IHogPSB0aGlzLnNjYWxlLnouZG9tYWluKClbMV0vMztcblxuICAgICAgICAgICAgaWYoc2hvd1doaXNrZXIpe1xuICAgICAgICAgICAgICAgIC8vIHRoZSB1cHBlciBhbmQgbG93ZXIgbGltaXRzIG9mIGVudHJ5LnZhbHVlc1xuICAgICAgICAgICAgICAgIGNvbnN0IGlxciA9IE1hdGguYWJzKHEzLXExKTtcbiAgICAgICAgICAgICAgICBjb25zdCB1cHBlciA9IG1heChlbnRyeS52YWx1ZXMuZmlsdGVyKChkKT0+ZDw9cTMrKGlxcioxLjUpKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbG93ZXIgPSBtaW4oZW50cnkudmFsdWVzLmZpbHRlcigoZCk9PmQ+PXExLShpcXIqMS41KSkpO1xuICAgICAgICAgICAgICAgIGRvbS5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwid2hpc2tlclwiLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcIngxXCIsIHRoaXMuc2NhbGUueigwKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCB0aGlzLnNjYWxlLnooMCkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgdGhpcy5zY2FsZS55KHVwcGVyKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCB0aGlzLnNjYWxlLnkobG93ZXIpKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJzdHJva2VcIiwgXCIjZmZmXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpbnRlcnF1YXJ0aWxlIHJhbmdlXG4gICAgICAgICAgICB2aW9saW5HLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy5zY2FsZS56KC16KSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgdGhpcy5zY2FsZS55KHEzKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIE1hdGguYWJzKHRoaXMuc2NhbGUueigteiktdGhpcy5zY2FsZS56KHopKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBNYXRoLmFicyh0aGlzLnNjYWxlLnkocTMpIC0gdGhpcy5zY2FsZS55KHExKSkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1pclwiKTtcblxuICAgICAgICAgICAgLy8gbWVkaWFuXG4gICAgICAgICAgICBjb25zdCBtZWQgPSBtZWRpYW4oZW50cnkudmFsdWVzKTtcbiAgICAgICAgICAgIHZpb2xpbkcuYXBwZW5kKFwibGluZVwiKSAvLyB0aGUgbWVkaWFuIGxpbmVcbiAgICAgICAgICAgICAgICAuYXR0cihcIngxXCIsIHRoaXMuc2NhbGUueigteikpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCB0aGlzLnNjYWxlLnooeikpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCB0aGlzLnNjYWxlLnkobWVkKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInkyXCIsIHRoaXMuc2NhbGUueShtZWQpKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tbWVkaWFuXCIpO1xuXG4gICAgICAgICAgICAvLyBvdXRsaWVyc1xuICAgICAgICAgICAgIGlmIChzaG93T3V0bGllcnMpIHtcbiAgICAgICAgICAgICAgICBsZXQgaml0dGVyID0gcmFuZG9tTm9ybWFsKDAsIHovMik7XG4gICAgICAgICAgICAgICAgY29uc3QgaXFyID0gTWF0aC5hYnMocTMtcTEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVwcGVyID0gbWF4KGVudHJ5LnZhbHVlcy5maWx0ZXIoKGQpPT5kPD1xMysoaXFyKjEuNSkpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsb3dlciA9IG1pbihlbnRyeS52YWx1ZXMuZmlsdGVyKChkKT0+ZD49cTEtKGlxcioxLjUpKSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0bGllcnMgPSBlbnRyeS52YWx1ZXMuZmlsdGVyKChkKT0+ZDxsb3dlcnx8ZD51cHBlcik7XG4gICAgICAgICAgICAgICAgdmlvbGluRy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tb3V0bGllcnNcIilcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbChcImNpcmNsZVwiKVxuICAgICAgICAgICAgICAgICAgICAuZGF0YShvdXRsaWVycylcbiAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAuYXR0cihcImN4XCIsICgpPT50aGlzLnNjYWxlLnooMCkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgKCk9PnRoaXMuc2NhbGUueihqaXR0ZXIoKSkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgKGQpPT50aGlzLnNjYWxlLnkoZCkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCAyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbW91c2UgZXZlbnRzXG4gICAgICAgICAgICB2aW9saW5HLm9uKFwibW91c2VvdmVyXCIsICgpPT57XG4gICAgICAgICAgICAgICAgdlBhdGguY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGVudHJ5KTtcbiAgICAgICAgICAgICAgICBpZih0aGlzLnRvb2x0aXAgPT09IHVuZGVmaW5lZCkgY29uc29sZS53YXJuKFwiR3JvdXBWaW9saW4gV2FybmluZzogdG9vbHRpcCBub3QgZGVmaW5lZFwiKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLnNob3coXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5ncm91cCArIFwiPGJyLz5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5sYWJlbCArIFwiPGJyLz5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIk1lZGlhbjogXCIgKyBtZWQudG9QcmVjaXNpb24oNCkgKyBcIjxici8+XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmlvbGluRy5vbihcIm1vdXNlb3V0XCIsICgpPT57XG4gICAgICAgICAgICAgICAgdlBhdGguY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG51bVBvaW50cykge1xuICAgICAgICAgICAgLy8gZGVmaW5lIHRoZSB6IHNjYWxlIC0tIHRoZSB2aW9saW4gd2lkdGhcbiAgICAgICAgICAgIGxldCB6TWF4ID0gbWF4KGVudHJ5LnZhbHVlcywgKGQpPT5NYXRoLmFicyhkKSk7IC8vIGZpbmQgdGhlIGFicyh2YWx1ZSkgaW4gZW50cnkudmFsdWVzXG4gICAgICAgICAgICB0aGlzLnNjYWxlLnpcbiAgICAgICAgICAgICAgICAuZG9tYWluKFstek1heCwgek1heF0pXG4gICAgICAgICAgICAgICAgLnJhbmdlKFt0aGlzLnNjYWxlLnN1YngoZW50cnkubGFiZWwpLCB0aGlzLnNjYWxlLnN1YngoZW50cnkubGFiZWwpICsgdGhpcy5zY2FsZS5zdWJ4LmJhbmR3aWR0aCgpXSk7XG4gICAgICAgICAgICBjb25zdCB6ID0gdGhpcy5zY2FsZS56LmRvbWFpbigpWzFdLzM7XG4gICAgICAgICAgICBsZXQgaml0dGVyID0gcmFuZG9tTm9ybWFsKDAsIHovMik7XG5cbiAgICAgICAgICAgIHZpb2xpbkcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tcG9pbnRzXCIpXG4gICAgICAgICAgICAgICAgLnNlbGVjdEFsbChcImNpcmNsZVwiKVxuICAgICAgICAgICAgICAgIC5kYXRhKGVudHJ5LnZhbHVlcylcbiAgICAgICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImN4XCIsICgpPT50aGlzLnNjYWxlLnooaml0dGVyKCkpKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgKGQpPT50aGlzLnNjYWxlLnkoZCkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJyXCIsIDIpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBfc2FuaXR5Q2hlY2soZGF0YSl7XG4gICAgICAgIGNvbnN0IGF0dHIgPSBbXCJncm91cFwiLCBcImxhYmVsXCIsIFwidmFsdWVzXCJdO1xuXG4gICAgICAgIGRhdGEuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICAgICAgYXR0ci5mb3JFYWNoKChhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRbYV0gPT09IHVuZGVmaW5lZCkgdGhyb3cgXCJHcm91cGVkVmlvbGluOiBpbnB1dCBkYXRhIGVycm9yLlwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGlmICgwID09IGQudmFsdWVzLmxlbmd0aCkgdGhyb3cgXCJWaW9saW46IElucHV0IGRhdGEgZXJyb3JcIjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2FkZEdyb3VwRGl2aWRlcihkb20pe1xuICAgICAgICBjb25zdCBncm91cHMgPSB0aGlzLnNjYWxlLnguZG9tYWluKCk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSBNYXRoLmFicyh0aGlzLnNjYWxlLngodGhpcy5zY2FsZS54LmRvbWFpbigpWzFdKSAtIHRoaXMuc2NhbGUueCh0aGlzLnNjYWxlLnguZG9tYWluKClbMF0pIC0gdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpKTtcblxuICAgICAgICBjb25zdCBnZXRYID0gKGcsIGkpPT4ge1xuICAgICAgICAgICAgaWYgKGkgIT09IGdyb3Vwcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGUueChnKSArICt0aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkgKyAocGFkZGluZy8yKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZG9tLnNlbGVjdEFsbChcIi52bGluZVwiKS5kYXRhKGdyb3VwcylcbiAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgLmNsYXNzZWQoXCJ2bGluZVwiLCB0cnVlKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCBnZXRYKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCBnZXRYKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCB0aGlzLnNjYWxlLnkucmFuZ2UoKVswXSlcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgdGhpcy5zY2FsZS55LnJhbmdlKClbMV0pXG4gICAgICAgICAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgKGcsIGkpPT5pIT1ncm91cHMubGVuZ3RoLTE/MTowKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwicmdiKDg2LDk4LDEwNylcIilcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMC41KVxuXG4gICAgfVxuXG4gICAgX3ZhbGlkVmVydGljZXModmVydGljZXMpIHtcbiAgICAgICAgbGV0IHZhbHMgPSB2ZXJ0aWNlcy5yZWR1Y2UoKGEsIGIpPT5hLmNvbmNhdChiKSwgW10pO1xuICAgICAgICBsZXQgaW52YWxpZFZlcnRpY2VzID0gdmFscy5maWx0ZXIoZD0+aXNOYU4oZCkpO1xuXG4gICAgICAgIHJldHVybiAhKGludmFsaWRWZXJ0aWNlcy5sZW5ndGgpO1xuICAgIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cblxuLypcblRPRE9cbjEuIHJlZmFjdG9yaW5nXG4gKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7Y3JlYXRlU3ZnLCBnZW5lcmF0ZVJhbmRvbU1hdHJpeCwgY2hlY2tEb21JZCwgY3JlYXRlQ2FudmFzfSBmcm9tIFwiLi9tb2R1bGVzL3V0aWxzXCI7XG5pbXBvcnQge3JhbmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7cmFuZG9tTm9ybWFsfSBmcm9tIFwiZDMtcmFuZG9tXCI7XG5pbXBvcnQgSGVhdG1hcCBmcm9tIFwiLi9tb2R1bGVzL0hlYXRtYXBcIjtcbmltcG9ydCBEZW5kcm9IZWF0bWFwQ29uZmlnIGZyb20gXCIuL21vZHVsZXMvRGVuZHJvSGVhdG1hcENvbmZpZ1wiO1xuaW1wb3J0IERlbmRyb0hlYXRtYXAgZnJvbSBcIi4vbW9kdWxlcy9EZW5kcm9IZWF0bWFwXCI7XG5pbXBvcnQgR3JvdXBlZFZpb2xpbiBmcm9tIFwiLi9tb2R1bGVzL0dyb3VwZWRWaW9saW5cIjtcbmltcG9ydCBJc29mb3JtVHJhY2tWaWV3ZXIgZnJvbSBcIi4vbW9kdWxlcy9Jc29mb3JtVHJhY2tWaWV3ZXJcIjtcbmltcG9ydCBCdWJibGVNYXAgZnJvbSBcIi4vbW9kdWxlcy9CdWJibGVNYXBcIjtcbmltcG9ydCBIYWxmTWFwIGZyb20gXCIuL21vZHVsZXMvSGFsZk1hcFwiO1xuXG5leHBvcnQgY29uc3QgZGVtb0RhdGEgPSB7XG4gICAgaGVhdG1hcDpnZW5lcmF0ZVJhbmRvbU1hdHJpeCh7eDo1MCwgeToxMCwgc2NhbGVGYWN0b3I6MTAwMH0pLFxuICAgIGRlbmRyb0hlYXRtYXA6IHtcbiAgICAgICAgcm93VHJlZTogXCIoKChUUDUzOjAuMTcsU0xLOjAuMTcpOjEuMTgsTkRSRzQ6MS4zNCk6MS4zMyxBQ1ROMzoyLjY3KTtcIixcbiAgICAgICAgY29sVHJlZTogXCIoKChBZGlwb3NlIFZpc2NlcmFsIE9tZW50dW06MC4wNixBZGlwb3NlIFN1YmN1dGFuZW91czowLjA2KTowLjAwLEJsYWRkZXI6MC4wNik6MC4xNixBZHJlbmFsIEdsYW5kOjAuMjIpO1wiLFxuICAgICAgICBoZWF0bWFwOiBbXG4gICAge1xuICAgICAgXCJ5XCI6IFwiU0xLXCIsXG4gICAgICBcInZhbHVlXCI6IDM1LjUwNSxcbiAgICAgIFwieFwiOiBcIkFkaXBvc2UgU3ViY3V0YW5lb3VzXCIsXG4gICAgICBcInVuaXRcIjogXCJUUE1cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ5XCI6IFwiU0xLXCIsXG4gICAgICBcInZhbHVlXCI6IDI5LjI4LFxuICAgICAgXCJ4XCI6IFwiQWRpcG9zZSBWaXNjZXJhbCBPbWVudHVtXCIsXG4gICAgICBcInVuaXRcIjogXCJUUE1cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ5XCI6IFwiU0xLXCIsXG4gICAgICBcInZhbHVlXCI6IDE3LjQwNSxcbiAgICAgIFwieFwiOiBcIkFkcmVuYWwgR2xhbmRcIixcbiAgICAgIFwidW5pdFwiOiBcIlRQTVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInlcIjogXCJTTEtcIixcbiAgICAgIFwidmFsdWVcIjogNTMuMjksXG4gICAgICBcInhcIjogXCJCbGFkZGVyXCIsXG4gICAgICBcInVuaXRcIjogXCJUUE1cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ5XCI6IFwiTkRSRzRcIixcbiAgICAgIFwidmFsdWVcIjogMTIuMDM1LFxuICAgICAgXCJ4XCI6IFwiQWRpcG9zZSBTdWJjdXRhbmVvdXNcIixcbiAgICAgIFwidW5pdFwiOiBcIlRQTVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInlcIjogXCJORFJHNFwiLFxuICAgICAgXCJ2YWx1ZVwiOiA2LjUzMTAwMDAwMDAwMDAwMSxcbiAgICAgIFwieFwiOiBcIkFkaXBvc2UgVmlzY2VyYWwgT21lbnR1bVwiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIk5EUkc0XCIsXG4gICAgICBcInZhbHVlXCI6IDEzNC44LFxuICAgICAgXCJ4XCI6IFwiQWRyZW5hbCBHbGFuZFwiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIk5EUkc0XCIsXG4gICAgICBcInZhbHVlXCI6IDcuMTE2MDAwMDAwMDAwMDAwNSxcbiAgICAgIFwieFwiOiBcIkJsYWRkZXJcIixcbiAgICAgIFwidW5pdFwiOiBcIlRQTVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInlcIjogXCJUUDUzXCIsXG4gICAgICBcInZhbHVlXCI6IDI5LjkzNSxcbiAgICAgIFwieFwiOiBcIkFkaXBvc2UgU3ViY3V0YW5lb3VzXCIsXG4gICAgICBcInVuaXRcIjogXCJUUE1cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ5XCI6IFwiVFA1M1wiLFxuICAgICAgXCJ2YWx1ZVwiOiAyMy41NSxcbiAgICAgIFwieFwiOiBcIkFkaXBvc2UgVmlzY2VyYWwgT21lbnR1bVwiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIlRQNTNcIixcbiAgICAgIFwidmFsdWVcIjogMTguNTE1LFxuICAgICAgXCJ4XCI6IFwiQWRyZW5hbCBHbGFuZFwiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIlRQNTNcIixcbiAgICAgIFwidmFsdWVcIjogNDAuNTEsXG4gICAgICBcInhcIjogXCJCbGFkZGVyXCIsXG4gICAgICBcInVuaXRcIjogXCJUUE1cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ5XCI6IFwiQUNUTjNcIixcbiAgICAgIFwidmFsdWVcIjogMC4zMzE0NSxcbiAgICAgIFwieFwiOiBcIkFkaXBvc2UgU3ViY3V0YW5lb3VzXCIsXG4gICAgICBcInVuaXRcIjogXCJUUE1cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ5XCI6IFwiQUNUTjNcIixcbiAgICAgIFwidmFsdWVcIjogMC4zMzE3LFxuICAgICAgXCJ4XCI6IFwiQWRpcG9zZSBWaXNjZXJhbCBPbWVudHVtXCIsXG4gICAgICBcInVuaXRcIjogXCJUUE1cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ5XCI6IFwiQUNUTjNcIixcbiAgICAgIFwidmFsdWVcIjogMC4xMDAwMDUsXG4gICAgICBcInhcIjogXCJBZHJlbmFsIEdsYW5kXCIsXG4gICAgICBcInVuaXRcIjogXCJUUE1cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ5XCI6IFwiQUNUTjNcIixcbiAgICAgIFwidmFsdWVcIjogMC40ODEwMDAwMDAwMDAwMDAwNCxcbiAgICAgIFwieFwiOiBcIkJsYWRkZXJcIixcbiAgICAgIFwidW5pdFwiOiBcIlRQTVwiXG4gICAgfVxuICBdXG4gICAgfSxcbiAgICBncm91cGVkVmlvbGluUGxvdDogW1xuICAgICAgICB7XG4gICAgICAgICAgIGdyb3VwOiBcIkdyb3VwIDFcIixcbiAgICAgICAgICAgbGFiZWw6IFwiR2VuZSAxXCIsXG4gICAgICAgICAgIHZhbHVlczogcmFuZ2UoMCwgMjAwMCkubWFwKHJhbmRvbU5vcm1hbCgyLCAxKSlcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZ3JvdXA6IFwiR3JvdXAgMVwiLFxuICAgICAgICAgICAgbGFiZWw6IFwiR2VuZSAyXCIsXG4gICAgICAgICAgICB2YWx1ZXM6IHJhbmdlKDAsIDIwMDApLm1hcChyYW5kb21Ob3JtYWwoNSwgMSkpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdyb3VwOiBcIkdyb3VwIDFcIixcbiAgICAgICAgICAgIGxhYmVsOiBcIkdlbmUgM1wiLFxuICAgICAgICAgICAgdmFsdWVzOiByYW5nZSgwLCAyMDAwKS5tYXAocmFuZG9tTm9ybWFsKDEwLCAxKSlcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICBncm91cDogXCJHcm91cCAyXCIsXG4gICAgICAgICAgIGxhYmVsOiBcIkdlbmUgMVwiLFxuICAgICAgICAgICB2YWx1ZXM6IHJhbmdlKDAsIDIwMDApLm1hcChyYW5kb21Ob3JtYWwoNSwgMSkpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdyb3VwOiBcIkdyb3VwIDJcIixcbiAgICAgICAgICAgIGxhYmVsOiBcIkdlbmUgMlwiLFxuICAgICAgICAgICAgdmFsdWVzOiByYW5nZSgwLCAyMDAwKS5tYXAocmFuZG9tTm9ybWFsKDMsIDEpKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBncm91cDogXCJHcm91cCAyXCIsXG4gICAgICAgICAgICBsYWJlbDogXCJHZW5lIDNcIixcbiAgICAgICAgICAgIHZhbHVlczogcmFuZ2UoMCwgMjAwMCkubWFwKHJhbmRvbU5vcm1hbCgxLCAxKSlcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICBncm91cDogXCJHcm91cCAzXCIsXG4gICAgICAgICAgIGxhYmVsOiBcIkdlbmUgMVwiLFxuICAgICAgICAgICB2YWx1ZXM6IHJhbmdlKDAsIDIwMDApLm1hcChyYW5kb21Ob3JtYWwoMiwgMSkpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdyb3VwOiBcIkdyb3VwIDNcIixcbiAgICAgICAgICAgIGxhYmVsOiBcIkdlbmUgMlwiLFxuICAgICAgICAgICAgdmFsdWVzOiByYW5nZSgwLCAyMDAwKS5tYXAocmFuZG9tTm9ybWFsKDMsIDEpKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBncm91cDogXCJHcm91cCAzXCIsXG4gICAgICAgICAgICBsYWJlbDogXCJHZW5lIDNcIixcbiAgICAgICAgICAgIHZhbHVlczogcmFuZ2UoMCwgMjAwMCkubWFwKHJhbmRvbU5vcm1hbCg1LCAxKSlcbiAgICAgICAgfVxuICAgIF0sXG4gICAgdHJhbnNjcmlwdFRyYWNrczoge1xuICAgICAgICBcImV4b25zXCI6IHtcbiAgICAgICAgICAgIFwiRU5TVDAwMDAwMzExNTk1LjlcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbVwiOiBcIjE3XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21FbmRcIjogNzcwNzExNzIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhvbklkXCI6IFwiRU5TRTAwMDAyNzEzOTMzLjFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleG9uTnVtYmVyXCI6IFwiMVwiLFxuICAgICAgICAgICAgICAgICAgICBcImNocm9tU3RhcnRcIjogNzcwNzExNTEsXG4gICAgICAgICAgICAgICAgICAgIFwic3RyYW5kXCI6IFwiK1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21cIjogXCIxN1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNocm9tRW5kXCI6IDc3MDczNTc5LFxuICAgICAgICAgICAgICAgICAgICBcImV4b25JZFwiOiBcIkVOU0UwMDAwMzY3MjYyOC4xXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhvbk51bWJlclwiOiBcIjJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbVN0YXJ0XCI6IDc3MDczNTEyLFxuICAgICAgICAgICAgICAgICAgICBcInN0cmFuZFwiOiBcIitcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImNocm9tXCI6IFwiMTdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbUVuZFwiOiA3NzA3Mzk0NixcbiAgICAgICAgICAgICAgICAgICAgXCJleG9uSWRcIjogXCJFTlNFMDAwMDM0NzUyODEuMVwiLFxuICAgICAgICAgICAgICAgICAgICBcImV4b25OdW1iZXJcIjogXCIzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21TdGFydFwiOiA3NzA3Mzc0NSxcbiAgICAgICAgICAgICAgICAgICAgXCJzdHJhbmRcIjogXCIrXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbVwiOiBcIjE3XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21FbmRcIjogNzcwNzU3MTksXG4gICAgICAgICAgICAgICAgICAgIFwiZXhvbklkXCI6IFwiRU5TRTAwMDAxMTExNzEzLjFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleG9uTnVtYmVyXCI6IFwiNFwiLFxuICAgICAgICAgICAgICAgICAgICBcImNocm9tU3RhcnRcIjogNzcwNzU1NzEsXG4gICAgICAgICAgICAgICAgICAgIFwic3RyYW5kXCI6IFwiK1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21cIjogXCIxN1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNocm9tRW5kXCI6IDc3MDc2NDQ2LFxuICAgICAgICAgICAgICAgICAgICBcImV4b25JZFwiOiBcIkVOU0UwMDAwMzY1MTI1MC4xXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhvbk51bWJlclwiOiBcIjVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbVN0YXJ0XCI6IDc3MDc2Mjg5LFxuICAgICAgICAgICAgICAgICAgICBcInN0cmFuZFwiOiBcIitcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImNocm9tXCI6IFwiMTdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbUVuZFwiOiA3NzA3NzE1NSxcbiAgICAgICAgICAgICAgICAgICAgXCJleG9uSWRcIjogXCJFTlNFMDAwMDM2MDc3NzMuMVwiLFxuICAgICAgICAgICAgICAgICAgICBcImV4b25OdW1iZXJcIjogXCI2XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21TdGFydFwiOiA3NzA3NzAwNyxcbiAgICAgICAgICAgICAgICAgICAgXCJzdHJhbmRcIjogXCIrXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbVwiOiBcIjE3XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21FbmRcIjogNzcwNzg2MTIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhvbklkXCI6IFwiRU5TRTAwMDAyNzIwOTI0LjFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleG9uTnVtYmVyXCI6IFwiN1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNocm9tU3RhcnRcIjogNzcwNzc5ODAsXG4gICAgICAgICAgICAgICAgICAgIFwic3RyYW5kXCI6IFwiK1wiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcInRyYW5zY3JpcHRzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImNocm9tb3NvbWVcIjogXCIxN1wiLFxuICAgICAgICAgICAgICAgIFwiZW5kXCI6IDc3MDc4NjEyLFxuICAgICAgICAgICAgICAgIFwiZ2VuY29kZUlkXCI6IFwiRU5TRzAwMDAwMTY3MjgwLjEyXCIsXG4gICAgICAgICAgICAgICAgXCJnZW5lU3ltYm9sXCI6IFwiRU5HQVNFXCIsXG4gICAgICAgICAgICAgICAgXCJzdGFydFwiOiA3NzA3MTE1MSxcbiAgICAgICAgICAgICAgICBcInN0cmFuZFwiOiBcIitcIixcbiAgICAgICAgICAgICAgICBcInRyYW5zY3JpcHRJZFwiOiBcIkVOU1QwMDAwMDMxMTU5NS45XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAgYnViYmxlTWFwOmdlbmVyYXRlUmFuZG9tTWF0cml4KHt4OjUwLCB5OjEwLCBzY2FsZUZhY3RvcjogMSwgZGl2ZXJnaW5nOiB0cnVlLCBidWJibGU6IHRydWV9KSxcbiAgICBsZFBsb3Q6IGdlbmVyYXRlUmFuZG9tTWF0cml4KHt4OjIsIHk6Miwgc2NhbGVGYWN0b3I6IDF9KVxufTtcblxuY29uc3QgbGRQbG90RGVtb0NvbmZpZyA9IHtcbiAgICBpZDogJ2d0ZXhWaXpMZFBsb3QnLFxuICAgIGRhdGE6IGRlbW9EYXRhLmxkUGxvdCxcbiAgICBjdXRvZmY6IDAuMCxcbiAgICB3aWR0aDogMTAwMCwgLy8gb3V0ZXIgd2lkdGhcbiAgICBtYXJnaW5MZWZ0OiAxMDAsXG4gICAgbWFyZ2luUmlnaHQ6IDIwMCxcbiAgICBtYXJnaW5Ub3A6IDIwLFxuICAgIG1hcmdpbkJvdHRvbTogMTAwLFxuICAgIGNvbG9yU2NoZW1lOiBcIkdyZXlzXCIsXG4gICAgbGFiZWxIZWlnaHQ6IDIwLFxuICAgIHNob3dMYWJlbHM6IHRydWUsXG4gICAgbGFiZWxBbmdsZTogMzAsXG4gICAgbGVnZW5kU3BhY2U6IDUwLFxuICAgIHVzZUxvZzogZmFsc2UsXG4gICAgbG9nQmFzZTogdW5kZWZpbmVkXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGxkUGxvdChwYXI9bGRQbG90RGVtb0NvbmZpZyl7XG4gICAgbGV0IG1hcmdpbiA9IHtcbiAgICAgICAgbGVmdDogcGFyLm1hcmdpbkxlZnQsXG4gICAgICAgIHRvcDogcGFyLnNob3dMYWJlbHM/cGFyLm1hcmdpblRvcCtwYXIubGFiZWxIZWlnaHQ6cGFyLm1hcmdpblRvcCxcbiAgICAgICAgcmlnaHQ6IHBhci5tYXJnaW5SaWdodCxcbiAgICAgICAgYm90dG9tOiBwYXIubWFyZ2luQm90dG9tXG4gICAgfTtcbiAgICBsZXQgaW5XaWR0aCA9IHBhci53aWR0aCAtIChwYXIubWFyZ2luTGVmdCArIHBhci5tYXJnaW5SaWdodCk7XG4gICAgbGV0IGluSGVpZ2h0ID0gcGFyLndpZHRoIC0gKHBhci5tYXJnaW5Ub3AgKyBwYXIubWFyZ2luQm90dG9tKTtcbiAgICBpbldpZHRoID0gaW5XaWR0aD5pbkhlaWdodD9pbkhlaWdodDppbldpZHRoOyAvLyBhZGp1c3QgdGhlIGRpbWVuc2lvbnMgYmFzZWQgb24gdGhlIG1pbmltdW0gcmVxdWlyZWQgc3BhY2VcbiAgICBsZXQgbGRDYW52YXMgPSBuZXcgSGFsZk1hcChwYXIuZGF0YSwgcGFyLmN1dG9mZiwgcGFyLnVzZUxvZywgcGFyLmxvZ0Jhc2UsIHBhci5jb2xvclNjaGVtZSk7XG4gICAgbGRDYW52YXMuYWRkVG9vbHRpcChwYXIuaWQpO1xuICAgIGxldCBjYW52YXMgPSBjcmVhdGVDYW52YXMocGFyLmlkLCBwYXIud2lkdGgsIHBhci53aWR0aCwgbWFyZ2luKTtcbiAgICBsZXQgc3ZnID0gY3JlYXRlU3ZnKHBhci5pZCwgcGFyLndpZHRoLCBwYXIud2lkdGgsIG1hcmdpbiwgdW5kZWZpbmVkLCBcImFic29sdXRlXCIpO1xuICAgIGxkQ2FudmFzLmRyYXcoY2FudmFzLCBzdmcsIHt3OmluV2lkdGgsIHRvcDogbWFyZ2luLnRvcCwgbGVmdDogbWFyZ2luLmxlZnR9LCBbMCwgMV0sIHBhci5zaG93TGFiZWxzLCBwYXIubGFiZWxBbmdsZSk7XG4gICAgbGRDYW52YXMuZHJhd0NvbG9yTGVnZW5kKHN2Zywge3g6IDAsIHk6IDEwMH0sIDEwLCBcIlZhbHVlXCIpO1xufVxuXG5jb25zdCB0cmFuc2NyaXB0VHJhY2tzQ29uZmlnID0ge1xuICAgIGlkOiAnZ3RleFRyYW5zY3JpcHRUcmFja3MnLFxuICAgIGRhdGE6IGRlbW9EYXRhLnRyYW5zY3JpcHRUcmFja3MsXG4gICAgd2lkdGg6IDEyMDAsXG4gICAgaGVpZ2h0OiA4MCxcbiAgICBtYXJnaW5MZWZ0OiAxMDAsXG4gICAgbWFyZ2luUmlnaHQ6IDIwLFxuICAgIG1hcmdpblRvcDogMCxcbiAgICBtYXJnaW5Cb3R0b206IDIwLFxuICAgIGxhYmVsUG9zOiAnbGVmdCdcbn07XG5leHBvcnQgZnVuY3Rpb24gdHJhbnNjcmlwdFRyYWNrcyhwYXI9dHJhbnNjcmlwdFRyYWNrc0NvbmZpZyl7XG4gICAgbGV0IG1hcmdpbiA9IHtcbiAgICAgICAgdG9wOiBwYXIubWFyZ2luVG9wLFxuICAgICAgICByaWdodDogcGFyLm1hcmdpblJpZ2h0LFxuICAgICAgICBib3R0b206IHBhci5tYXJnaW5Cb3R0b20sXG4gICAgICAgIGxlZnQ6IHBhci5tYXJnaW5MZWZ0XG4gICAgfTtcbiAgICBsZXQgaW5XaWR0aCA9IHBhci53aWR0aCAtIChwYXIubWFyZ2luTGVmdCArIHBhci5tYXJnaW5SaWdodCk7XG4gICAgbGV0IGluSGVpZ2h0ID0gcGFyLmhlaWdodCAtIChwYXIubWFyZ2luVG9wICsgcGFyLm1hcmdpbkJvdHRvbSk7XG5cbiAgICAvLyB0ZXN0IGlucHV0IHBhcmFtc1xuICAgIGNoZWNrRG9tSWQocGFyLmlkKTtcblxuICAgIC8vIGNyZWF0ZSB0aGUgU1ZHXG4gICAgICAgIGxldCBzdmcgPSBjcmVhdGVTdmcocGFyLmlkLCBwYXIud2lkdGgsIHBhci5oZWlnaHQsIG1hcmdpbik7XG5cbiAgICAvLyByZW5kZXIgdGhlIHRyYW5zY3JpcHRzXG4gICAgbGV0IHRvb2x0aXBJZCA9IGAke3Bhci5pZH1Ub29sdGlwYDtcbiAgICBsZXQgY29uZmlnID0ge1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwLFxuICAgICAgICB3OiBpbldpZHRoLFxuICAgICAgICBoOiBpbkhlaWdodCxcbiAgICAgICAgbGFiZWxPbjogcGFyLmxhYmVsUG9zXG4gICAgfTtcbiAgICBsZXQgdmlld2VyID0gbmV3IElzb2Zvcm1UcmFja1ZpZXdlcihwYXIuZGF0YS50cmFuc2NyaXB0cywgcGFyLmRhdGEuZXhvbnMsIHVuZGVmaW5lZCwgY29uZmlnKTtcbiAgICB2aWV3ZXIucmVuZGVyKGZhbHNlLCBzdmcsIHBhci5sYWJlbFBvcyk7XG5cbn1cblxuY29uc3QgYnViYmxlbWFwRGVtb0NvbmZpZyA9IHtcbiAgICBpZDogJ2d0ZXhWaXpCdWJibGVtYXAnLFxuICAgIGRhdGE6IGRlbW9EYXRhLmJ1YmJsZU1hcCxcbiAgICB3aWR0aDogMTIwMCwgLy93aW5kb3cuaW5uZXJXaWR0aCowLjksXG4gICAgaGVpZ2h0OiA0MDAsIC8vIFRPRE86IHVzZSBhIGR5bmFtaWMgd2lkdGggYmFzZWQgb24gdGhlIG1hdHJpeCBzaXplXG4gICAgbWFyZ2luVG9wOiAxMDAsXG4gICAgbWFyZ2luUmlnaHQ6IDEwMCxcbiAgICBtYXJnaW5Cb3R0b206IDMwLFxuICAgIG1hcmdpbkxlZnQ6IDMwLFxuICAgIGxhYmVsczoge1xuICAgICAgICBjb2x1bW46IHtcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCxcbiAgICAgICAgICAgIGFuZ2xlOiA5MCxcbiAgICAgICAgICAgIGFkanVzdDogMTAsXG4gICAgICAgICAgICBsb2NhdGlvbjogJ2JvdHRvbScsXG4gICAgICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0J1xuICAgICAgICB9LFxuICAgICAgICByb3c6IHtcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICB3aWR0aDogMTUwLFxuICAgICAgICAgICAgYW5nbGU6IDAsXG4gICAgICAgICAgICBhZGp1c3Q6IDAsXG4gICAgICAgICAgICBsb2NhdGlvbjogJ2xlZnQnLFxuICAgICAgICAgICAgdGV4dEFsaWduOiAncmlnaHQnXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHVzZUxvZzogZmFsc2UsXG4gICAgbG9nQmFzZTogMTAsXG4gICAgY29sb3JTY2hlbWU6IFwiUmRCdVwiLCAvLyBhIGRpdmVyZ2luZyBjb2xvciBzY2hlbWVcbiAgICBjb2xvclNjYWxlRG9tYWluOiBbLTAuNzUsIDAuNzVdLFxuICAgIHVzZUNhbnZhczogZmFsc2Vcbn07XG5leHBvcnQgZnVuY3Rpb24gYnViYmxlbWFwKHBhcj1idWJibGVtYXBEZW1vQ29uZmlnKXtcbiAgICBsZXQgbWFyZ2luID0ge1xuICAgICAgICBsZWZ0OiBwYXIuc2hvd0xhYmVscz9wYXIubWFyZ2luTGVmdCArIHBhci5yb3dMYWJlbFdpZHRoOiBwYXIubWFyZ2luTGVmdCxcbiAgICAgICAgdG9wOiBwYXIubWFyZ2luVG9wLFxuICAgICAgICByaWdodDogcGFyLm1hcmdpblJpZ2h0LFxuICAgICAgICBib3R0b206IHBhci5zaG93TGFiZWxzP3Bhci5tYXJnaW5Cb3R0b20gKyBwYXIuY29sdW1uTGFiZWxIZWlnaHQ6cGFyLm1hcmdpbkJvdHRvbVxuICAgIH07XG4gICAgbGV0IGluV2lkdGggPSBwYXIud2lkdGggLSAocGFyLmxhYmVscy5yb3cud2lkdGggKyBwYXIubWFyZ2luTGVmdCArIHBhci5tYXJnaW5SaWdodCk7XG4gICAgbGV0IGluSGVpZ2h0ID0gcGFyLmhlaWdodCAtIChwYXIubGFiZWxzLmNvbHVtbi5oZWlnaHQgKyBwYXIubWFyZ2luVG9wICsgcGFyLm1hcmdpbkJvdHRvbSk7XG4gICAgaWYocGFyLnVzZUNhbnZhcykge1xuICAgICAgICBsZXQgYm1hcENhbnZhcyA9IG5ldyBCdWJibGVNYXAocGFyLmRhdGEsIHBhci51c2VMb2csIHBhci5sb2dCYXNlLCBwYXIuY29sb3JTY2hlbWUpO1xuICAgICAgICBibWFwQ2FudmFzLmFkZFRvb2x0aXAoY2FudmFzSWQpO1xuICAgICAgICBsZXQgY2FudmFzID0gY3JlYXRlQ2FudmFzKHBhci5pZCwgcGFyLndpZHRoLCBwYXIuaGVpZ2h0LCBtYXJnaW4pO1xuICAgICAgICBibWFwQ2FudmFzLmRyYXdDYW52YXMoXG4gICAgICAgICAgICBjYW52YXMsXG4gICAgICAgICAgICB7dzppbldpZHRoLCBoOmluSGVpZ2h0LCB0b3A6IG1hcmdpbi50b3AsIGxlZnQ6IG1hcmdpbi5sZWZ0fSxcbiAgICAgICAgICAgIHBhci5jb2xvclNjYWxlRG9tYWluLFxuICAgICAgICAgICAgcGFyLmxhYmVsc1xuICAgICAgICApXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgYm1hcCA9IG5ldyBCdWJibGVNYXAocGFyLmRhdGEsIHBhci51c2VMb2csIHBhci5sb2dCYXNlLCBwYXIuY29sb3JTY2hlbWUpO1xuICAgICAgICBibWFwLmFkZFRvb2x0aXAocGFyLmlkKTtcbiAgICAgICAgbGV0IHN2ZyA9IGNyZWF0ZVN2ZyhwYXIuaWQsIHBhci53aWR0aCwgcGFyLmhlaWdodCwgbWFyZ2luKTtcbiAgICAgICAgYm1hcC5kcmF3U3ZnKHN2Zywge3c6aW5XaWR0aCwgaDppbkhlaWdodCwgdG9wOjAsIGxlZnQ6MH0sIHBhci5jb2xvclNjYWxlRG9tYWluLCAwLCBwYXIubGFiZWxzKTtcbiAgICAgICAgYm1hcC5kcmF3Q29sb3JMZWdlbmQoc3ZnLCB7eDogMCwgeTogLTQwfSwgMywgXCJORVNcIik7XG4gICAgICAgIGJtYXAuZHJhd0J1YmJsZUxlZ2VuZChzdmcsIHt4OiA1MDAsIHk6LTQwLCB0aXRsZTogXCItbG9nMTAocC12YWx1ZSlcIn0sIDUsIFwiLWxvZzEwKHAtdmFsdWUpXCIpO1xuICAgIH1cbn1cblxuY29uc3QgaGVhdG1hcERlbW9Db25maWcgPSB7XG4gICAgaWQ6ICdndGV4Vml6SGVhdG1hcCcsXG4gICAgZGF0YTogZGVtb0RhdGEuaGVhdG1hcCxcbiAgICB3aWR0aDogMTIwMCwgLy8gb3V0ZXIgd2lkdGhcbiAgICBoZWlnaHQ6IDMwMCwgLy8gb3V0ZXIgaGVpZ2h0XG4gICAgbWFyZ2luTGVmdDogMjAsXG4gICAgbWFyZ2luUmlnaHQ6IDQwLFxuICAgIG1hcmdpblRvcDogNTAsXG4gICAgbWFyZ2luQm90dG9tOiA1MCxcbiAgICBjb2xvclNjaGVtZTogXCJZbEduQnVcIixcbiAgICBjb3JuZXJSYWRpdXM6IDIsXG4gICAgY29sdW1uTGFiZWxIZWlnaHQ6IDIwLFxuICAgIGNvbHVtbkxhYmVsQW5nbGU6IDYwLFxuICAgIGNvbHVtbkxhYmVsUG9zQWRqdXN0OiAxMCxcbiAgICByb3dMYWJlbFdpZHRoOiAxMDAsXG4gICAgbGVnZW5kU3BhY2U6IDUwLFxuICAgIHVzZUxvZzogdHJ1ZSxcbiAgICBsb2dCYXNlOiAxMFxufTtcbi8qKlxuICogUmVuZGVyIGEgMkQgSGVhdG1hcFxuICogQHBhcmFtIHBhcmFtc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaGVhdG1hcChwYXI9aGVhdG1hcERlbW9Db25maWcpe1xuICAgIGxldCBtYXJnaW4gPSB7XG4gICAgICAgIHRvcDogcGFyLm1hcmdpblRvcCxcbiAgICAgICAgcmlnaHQ6IHBhci5tYXJnaW5SaWdodCxcbiAgICAgICAgYm90dG9tOiBwYXIubWFyZ2luQm90dG9tLFxuICAgICAgICBsZWZ0OiBwYXIubWFyZ2luTGVmdFxuICAgIH07XG4gICAgbGV0IGluV2lkdGggPSBwYXIud2lkdGggLSAocGFyLm1hcmdpbkxlZnQgKyBwYXIubWFyZ2luUmlnaHQgKyBwYXIucm93TGFiZWxXaWR0aCk7XG4gICAgbGV0IGluSGVpZ2h0ID0gcGFyLmhlaWdodCAtIChwYXIubWFyZ2luVG9wICsgcGFyLm1hcmdpbkJvdHRvbSArIHBhci5jb2x1bW5MYWJlbEhlaWdodCk7XG5cbiAgICAvLyB0ZXN0IGlucHV0IHBhcmFtc1xuICAgIGNoZWNrRG9tSWQocGFyLmlkKTtcblxuICAgIC8vIGNyZWF0ZSB0aGUgU1ZHXG4gICAgbGV0IHN2ZyA9IGNyZWF0ZVN2ZyhwYXIuaWQsIHBhci53aWR0aCwgcGFyLmhlaWdodCwgbWFyZ2luKTtcblxuICAgIC8vIHJlbmRlciB0aGUgaGVhdG1hcFxuICAgIGxldCB0b29sdGlwSWQgPSBgJHtwYXIuaWR9VG9vbHRpcGA7XG4gICAgbGV0IGggPSBuZXcgSGVhdG1hcChwYXIuZGF0YSwgcGFyLnVzZUxvZywgcGFyLmxvZ0Jhc2UsIHBhci5jb2xvclNjaGVtZSwgcGFyLmNvcm5lclJhZGl1cywgdG9vbHRpcElkKTtcbiAgICBoLmRyYXcoc3ZnLCB7dzppbldpZHRoLCBoOmluSGVpZ2h0fSwgcGFyLmNvbHVtbkxhYmVsQW5nbGUsIGZhbHNlLCBwYXIuY29sdW1uTGFiZWxQb3NBZGp1c3QpO1xuICAgIGguZHJhd0NvbG9yTGVnZW5kKHN2Zywge3g6MjAsIHk6IC0yMH0sIDEwKTtcbn1cblxuY29uc3QgZGVuZHJvSGVhdG1hcERlbW9Db25maWcgPSB7XG4gICAgaWQ6ICdndGV4Vml6RGVuZHJvSGVhdG1hcCcsXG4gICAgZGF0YTogZGVtb0RhdGEuZGVuZHJvSGVhdG1hcCxcbiAgICB1c2VMb2c6IHRydWUsXG4gICAgbG9nQmFzZTogMTAsXG4gICAgd2lkdGg6IDYwMCwgLy8gb3V0ZXIgd2lkdGhcbiAgICBoZWlnaHQ6IDMwMCwgLy8gb3V0ZXIgaGVpZ2h0XG4gICAgbWFyZ2luTGVmdDogMjAsXG4gICAgbWFyZ2luUmlnaHQ6IDQwLFxuICAgIG1hcmdpblRvcDogNTAsXG4gICAgbWFyZ2luQm90dG9tOiA1MCxcbiAgICByb3dUcmVlUGFuZWxXaWR0aDogMTAwLFxuICAgIGNvbFRyZWVQYW5lbEhlaWdodDogMTAwLFxuICAgIGNvbG9yU2NoZW1lOiBcIkJsdWVzXCIsXG4gICAgY29ybmVyUmFkaXVzOiAyLFxuICAgIGNvbHVtbkxhYmVsSGVpZ2h0OiAyMDAsXG4gICAgY29sdW1uTGFiZWxBbmdsZTogNjAsXG4gICAgY29sdW1uTGFiZWxQb3NBZGp1c3Q6IDEwLFxuICAgIHJvd0xhYmVsV2lkdGg6IDIwMCxcbiAgICBsZWdlbmRTcGFjZTogNTBcbn07XG4vKipcbiAqIFJlbmRlciBhIERlbmRyb0hlYXRtYXBcbiAqIEBwYXJhbSBwYXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbmRyb0hlYXRtYXAocGFyPWRlbmRyb0hlYXRtYXBEZW1vQ29uZmlnKXtcbiAgICBsZXQgbWFyZ2luID0ge1xuICAgICAgICB0b3A6IHBhci5tYXJnaW5Ub3AsXG4gICAgICAgIHJpZ2h0OiBwYXIubWFyZ2luUmlnaHQgKyBwYXIucm93TGFiZWxXaWR0aCxcbiAgICAgICAgYm90dG9tOiBwYXIubWFyZ2luQm90dG9tICsgcGFyLmNvbHVtbkxhYmVsSGVpZ2h0LFxuICAgICAgICBsZWZ0OiBwYXIubWFyZ2luTGVmdFxuICAgIH07XG5cbiAgICAvLyB0ZXN0IGlucHV0IHBhcmFtc1xuICAgIGNoZWNrRG9tSWQocGFyLmlkKTtcblxuICAgIGxldCBpbldpZHRoID0gcGFyLndpZHRoIC0gKHBhci5tYXJnaW5MZWZ0ICsgcGFyLm1hcmdpblJpZ2h0ICsgcGFyLnJvd0xhYmVsV2lkdGgpO1xuICAgIGxldCBpbkhlaWdodCA9IHBhci5oZWlnaHQgLSAocGFyLm1hcmdpblRvcCArIHBhci5tYXJnaW5Cb3R0b20gKyBwYXIuY29sdW1uTGFiZWxIZWlnaHQpO1xuXG4gICAgbGV0IHN2Z0lkID0gYCR7cGFyLmlkfVN2Z2A7XG4gICAgbGV0IHRvb2x0aXBJZCA9IGAke3Bhci5pZH1Ub29sdGlwYDtcbiAgICBsZXQgZG1hcENvbmZpZyA9IG5ldyBEZW5kcm9IZWF0bWFwQ29uZmlnKHBhci53aWR0aCwgcGFyLnJvd1RyZWVQYW5lbFdpZHRoLCBwYXIuY29sVHJlZVBhbmVsSGVpZ2h0LCBtYXJnaW4pO1xuICAgIGxldCBkbWFwID0gbmV3IERlbmRyb0hlYXRtYXAocGFyLmRhdGEuY29sVHJlZSwgcGFyLmRhdGEucm93VHJlZSwgcGFyLmRhdGEuaGVhdG1hcCwgcGFyLmNvbG9yU2NoZW1lLCBwYXIuY29ybmVyUmFkaXVzLCBkbWFwQ29uZmlnLCB0b29sdGlwSWQsIHBhci51c2VMb2csIHBhci5sb2dCYXNlKVxuICAgIGxldCBzaG93Q29sVHJlZSA9IHBhci5kYXRhLmNvbFRyZWUgIT09IHVuZGVmaW5lZDtcbiAgICBsZXQgc2hvd1Jvd1RyZWUgPSBwYXIuZGF0YS5yb3dUcmVlICE9PSB1bmRlZmluZWQ7XG4gICAgZG1hcC5yZW5kZXIocGFyLmlkLCBzdmdJZCwgc2hvd0NvbFRyZWUsIHNob3dSb3dUcmVlLCBcInRvcFwiLCA4KTtcbn1cblxuY29uc3QgdmlvbGluRGVtb0NvbmZpZyA9IHtcbiAgICBpZDogJ2d0ZXhHcm91cGVkVmlvbGluUGxvdCcsXG4gICAgZGF0YTogZGVtb0RhdGEuZ3JvdXBlZFZpb2xpblBsb3QsXG4gICAgd2lkdGg6IDUwMCxcbiAgICBoZWlnaHQ6IDMwMCxcbiAgICBtYXJnaW5MZWZ0OiAxMDAsXG4gICAgbWFyZ2luUmlnaHQ6IDIwLFxuICAgIG1hcmdpblRvcDogNTAsXG4gICAgbWFyZ2luQm90dG9tOiAxMDAsXG4gICAgc2hvd0RpdmlkZXI6IHRydWUsXG4gICAgeFBhZGRpbmc6IDAuMyxcbiAgICB5TGFiZWw6IFwiUmFuZG9tIFZhbHVlXCIsXG4gICAgc2hvd1N1Ylg6IHRydWUsXG4gICAgc2hvd1g6IHRydWUsXG4gICAgeEFuZ2xlOiAwLFxuICAgIHN1YlhBbmdsZTogMCxcbiAgICBzaG93V2hpc2tlcjogZmFsc2UsXG4gICAgc2hvd0xlZ2VuZDogZmFsc2UsXG4gICAgc2hvd1NhbXBsZVNpemU6IHRydWVcbn07XG5leHBvcnQgZnVuY3Rpb24gZ3JvdXBlZFZpb2xpblBsb3QocGFyPXZpb2xpbkRlbW9Db25maWcpe1xuICAgIGNvbnNvbGUubG9nKHBhci5kYXRhKTtcbiAgICBsZXQgbWFyZ2luID0ge1xuICAgICAgICB0b3A6IHBhci5tYXJnaW5Ub3AsXG4gICAgICAgIHJpZ2h0OiBwYXIubWFyZ2luUmlnaHQsXG4gICAgICAgIGJvdHRvbTogcGFyLm1hcmdpbkJvdHRvbSxcbiAgICAgICAgbGVmdDogcGFyLm1hcmdpbkxlZnRcbiAgICB9O1xuICAgIC8vIHRlc3QgaW5wdXQgcGFyYW1zXG4gICAgY2hlY2tEb21JZChwYXIuaWQpO1xuXG4gICAgbGV0IGluV2lkdGggPSBwYXIud2lkdGggLSAocGFyLm1hcmdpbkxlZnQgKyBwYXIubWFyZ2luUmlnaHQpO1xuICAgIGxldCBpbkhlaWdodCA9IHBhci5oZWlnaHQgLSAocGFyLm1hcmdpblRvcCArIHBhci5tYXJnaW5Cb3R0b20pO1xuXG4gICAgbGV0IHN2Z0lkID0gYCR7cGFyLmlkfVN2Z2A7XG4gICAgbGV0IHRvb2x0aXBJZCA9IGAke3Bhci5pZH1Ub29sdGlwYDtcblxuICAgIC8vIGNyZWF0ZSB0aGUgU1ZHXG4gICAgbGV0IHN2ZyA9IGNyZWF0ZVN2ZyhwYXIuaWQsIHBhci53aWR0aCwgcGFyLmhlaWdodCwgbWFyZ2luKTtcblxuICAgIGNvbnN0IGdWaW9saW4gPSBuZXcgR3JvdXBlZFZpb2xpbihwYXIuZGF0YSk7XG4gICAgZ1Zpb2xpbi5yZW5kZXIoXG4gICAgICAgIHN2ZyxcbiAgICAgICAgaW5XaWR0aCxcbiAgICAgICAgaW5IZWlnaHQsXG4gICAgICAgIHBhci54UGFkZGluZyxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICBbXSxcbiAgICAgICAgcGFyLnlMYWJlbCxcbiAgICAgICAgcGFyLnNob3dYLFxuICAgICAgICBwYXIueEFuZ2xlLFxuICAgICAgICBwYXIuc2hvd1N1YlgsXG4gICAgICAgIHBhci5zdWJYQW5nbGUsXG4gICAgICAgIHBhci5zaG93V2hpc2tlcixcbiAgICAgICAgcGFyLnNob3dEaXZpZGVyLFxuICAgICAgICBwYXIuc2hvd0xlZ2VuZCxcbiAgICAgICAgcGFyLnNob3dTYW1wbGVTaXplLFxuICAgICAgICBwYXIuc29ydFN1YlgsXG4gICAgICAgIHBhci5zaG93T3V0bGllcnMsXG4gICAgICAgIHBhci5udW1Qb2ludHMpO1xuICAgIHN2Zy5zZWxlY3RBbGwoXCIudmlvbGluLXNpemUtYXhpc1wiKS5jbGFzc2VkKFwidmlvbGluLXNpemUtYXhpcy1oaWRlXCIsIHRydWUpLmNsYXNzZWQoXCJ2aW9saW4tc2l6ZS1heGlzXCIsIGZhbHNlKTtcblxuICAgIGdWaW9saW4uY3JlYXRlVG9vbHRpcCh0b29sdGlwSWQpO1xuICAgIHJldHVybiBzdmc7XG5cbn1cblxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7anNvbn0gZnJvbSBcImQzLWZldGNoXCI7XG5pbXBvcnQge2NoZWNrRG9tSWR9IGZyb20gXCIuL21vZHVsZXMvdXRpbHNcIjtcbmltcG9ydCB7XG4gICAgZ2V0R3RleFVybHMsXG4gICAgcGFyc2VEeW5FcXRsXG59IGZyb20gXCIuL21vZHVsZXMvZ3RleERhdGFQYXJzZXJcIjtcbmltcG9ydCB7Z3JvdXBlZFZpb2xpblBsb3R9IGZyb20gXCIuL0dURXhWaXpcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihwYXIsIGdlbmNvZGVJZCwgdmFyaWFudElkLCB0aXNzdWVJZCwgZ3JvdXBOYW1lPXVuZGVmaW5lZCwgdXJscz1nZXRHdGV4VXJscygpKXtcbiAgICBqc29uKHVybHNbJ2R5bmVxdGwnXSArIGA/dmFyaWFudElkPSR7dmFyaWFudElkfSZnZW5jb2RlSWQ9JHtnZW5jb2RlSWR9JnRpc3N1ZVNpdGVEZXRhaWxJZD0ke3Rpc3N1ZUlkfWApXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGpzb24pe1xuICAgICAgICAgICAgbGV0IGRhdGEgPSBwYXJzZUR5bkVxdGwoanNvbik7XG4gICAgICAgICAgICAvLyBjb25zdHJ1Y3QgdGhlIGR5bkVxdGwgZGF0YSBmb3IgdGhlIHRocmVlIGdlbm90eXBlczogcmVmLCBoZXQsIGFsdFxuICAgICAgICAgICAgcGFyLmRhdGEgPSBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBncm91cDogZ3JvdXBOYW1lfHxkYXRhLnRpc3N1ZVNpdGVEZXRhaWxJZCxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGRhdGEucmVmLmxlbmd0aD4yP1wicmVmXCI6ZGF0YS5yZWYsXG4gICAgICAgICAgICAgICAgICAgIHNpemU6IGRhdGEuaG9tb1JlZkV4cC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogZGF0YS5ob21vUmVmRXhwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwOiBncm91cE5hbWV8fGRhdGEudGlzc3VlU2l0ZURldGFpbElkLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogZGF0YS5oZXQubGVuZ3RoPjI/XCJoZXRcIjpkYXRhLmhldCxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogZGF0YS5oZXRlcm9FeHAubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IGRhdGEuaGV0ZXJvRXhwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwOiBncm91cE5hbWV8fGRhdGEudGlzc3VlU2l0ZURldGFpbElkLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogZGF0YS5hbHQubGVuZ3RoPjI/XCJhbHRcIjpkYXRhLmFsdCxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogZGF0YS5ob21vQWx0RXhwLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBkYXRhLmhvbW9BbHRFeHBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgcGFyLm51bVBvaW50cyA9IDEwO1xuICAgICAgICAgICAgZ3JvdXBlZFZpb2xpblBsb3QocGFyKTtcbiAgICAgICAgfSlcblxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuLy8gVE9ETzogY29uc2lkZXIgY3JlYXRpbmcgYSBHRVYgY2xhc3MgdGhhdCBzdG9yZXMgYm1hcCBhbmQgTEQgb2JqZWN0cy4uLlxuXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQge2pzb259IGZyb20gXCJkMy1mZXRjaFwiO1xuaW1wb3J0IHticnVzaFh9IGZyb20gXCJkMy1icnVzaFwiO1xuaW1wb3J0IHtzZWxlY3QsIHNlbGVjdEFsbCwgZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7ZXh0ZW50LCBtYXgsIG1pbn0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge25lc3R9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge3NjYWxlVGhyZXNob2xkfSBmcm9tIFwiZDMtc2NhbGVcIjtcblxuaW1wb3J0IHtjaGVja0RvbUlkfSBmcm9tIFwiLi9tb2R1bGVzL3V0aWxzXCI7XG5pbXBvcnQge1xuICAgIGdldEd0ZXhVcmxzLFxuICAgIHBhcnNlR2VuZXMsXG4gICAgcGFyc2VTaW5nbGVUaXNzdWVFcXRscyxcbiAgICBwYXJzZUxELFxuICAgIHBhcnNlRXhvbnNUb0xpc3QsXG4gICAgcGFyc2VUaXNzdWVTYW1wbGVDb3VudHMsXG4gICAgcGFyc2VUaXNzdWVEaWN0LFxuICAgIHBhcnNlRHluRXF0bFxufSBmcm9tIFwiLi9tb2R1bGVzL2d0ZXhEYXRhUGFyc2VyXCI7XG5pbXBvcnQgQnViYmxlTWFwIGZyb20gXCIuL21vZHVsZXMvQnViYmxlTWFwXCI7XG5pbXBvcnQgSGFsZk1hcCBmcm9tIFwiLi9tb2R1bGVzL0hhbGZNYXBcIjtcbmltcG9ydCB7cmVuZGVyIGFzIGVxdGxWaW9saW5QbG90UmVuZGVyfSBmcm9tIFwiLi9FcXRsVmlvbGluUGxvdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyKHBhciwgZ2VuZUlkLCB1cmxzID0gZ2V0R3RleFVybHMoKSl7XG4gICAgJChgIyR7cGFyLmRpdlNwaW5uZXJ9YCkuc2hvdygpO1xuXG4gICAganNvbih1cmxzLmdlbmVJZCArIGdlbmVJZCkgLy8gcXVlcnkgdGhlIGdlbmUgYnkgZ2VuZUlkIHdoaWNoIGNvdWxkIGJlIGdlbmUgbmFtZSBvciBnZW5jb2RlIElEIHdpdGggb3Igd2l0aG91ciB2ZXJzaW9uaW5nXG4gICAgICAgIC50aGVuKChkYXRhKT0+IHtcbiAgICAgICAgICAgIGxldCBnZW5lID0gcGFyc2VHZW5lcyhkYXRhLCB0cnVlLCBnZW5lSWQpO1xuICAgICAgICAgICAgLy8gcmVwb3J0IHRoZSBnZW5lIGluZm9cbiAgICAgICAgICAgICQoXCI8c3Bhbi8+XCIpXG4gICAgICAgICAgICAgICAgLmh0bWwoYDxzcGFuPiR7Z2VuZS5nZW5lU3ltYm9sfSAoJHtnZW5lLmdlbmNvZGVJZH0pLCBDaHIke2dlbmUuY2hyb21vc29tZX06JHtnZW5lLnN0YXJ0fSAtICR7Z2VuZS5lbmR9ICgke2dlbmUuc3RyYW5kfSksICR7Z2VuZS5kZXNjcmlwdGlvbn1gKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbygkKGAjJHtwYXIuZGl2R2VuZUluZm99YCkpO1xuXG4gICAgICAgICAgICBsZXQgcHJvbWlzZXMgPSBbXG4gICAgICAgICAgICAgICAganNvbih1cmxzLnRpc3N1ZVN1bW1hcnkpLFxuICAgICAgICAgICAgICAgIGpzb24odXJscy50aXNzdWVTaXRlcyksXG4gICAgICAgICAgICAgICAganNvbih1cmxzLmV4b24gKyBnZW5lLmdlbmNvZGVJZCksXG4gICAgICAgICAgICAgICAganNvbih1cmxzLnNpbmdsZVRpc3N1ZUVxdGwgKyBnZW5lLmdlbmNvZGVJZClcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXN1bHRzKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRpc3N1ZXMgPSBwYXJzZVRpc3N1ZVNhbXBsZUNvdW50cyhyZXN1bHRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRpc3N1ZVNpdGVUYWJsZSA9IHBhcnNlVGlzc3VlRGljdChyZXN1bHRzWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGV4b25zID0gcGFyc2VFeG9uc1RvTGlzdChyZXN1bHRzWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVxdGxzID0gcGFyc2VTaW5nbGVUaXNzdWVFcXRscyhyZXN1bHRzWzNdLCB0aXNzdWVTaXRlVGFibGUpO1xuICAgICAgICAgICAgICAgICAgICBwYXIuZGF0YSA9IGVxdGxzO1xuICAgICAgICAgICAgICAgICAgICBwYXIgPSBzZXREaW1lbnNpb25zKHBhcik7XG4gICAgICAgICAgICAgICAgICAgIGxldCBibWFwID0gcmVuZGVyQnViYmxlTWFwKHBhciwgZ2VuZSwgdGlzc3VlcywgZXhvbnMsIHRpc3N1ZVNpdGVUYWJsZSwgdXJscyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZldGNoIExEIGRhdGEsIHRoaXMgcXVlcnkgaXMgc2xvdywgc28gaXQncyBub3QgaW5jbHVkZWQgaW4gdGhlIHByb21pc2VzLlxuICAgICAgICAgICAgICAgICAgICBqc29uKHVybHMubGQgKyBnZW5lLmdlbmNvZGVJZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChsZEpzb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGQgPSBwYXJzZUxEKGxkSnNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyLmxkRGF0YSA9IGxkLmZpbHRlcigoZCk9PmQudmFsdWU+PXBhci5sZEN1dG9mZik7IC8vIGZpbHRlciB1bnVzZWQgZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckxkTWFwKHBhciwgYm1hcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChgIyR7cGFyLmRpdlNwaW5uZXJ9YCkuaGlkZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmaW5lIHRoZSB0aXNzdWUgZmlsdGVyaW5nIGV2ZW50IG9uIHRpc3N1ZSBtZW51IHdpbmRvdyBjbG9zZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IHRoZSB0aXNzdWUgbWVudSBjb250ZW50IGluIHRoZSBtb2RhbCBpcyBidWlsdCBieSByZW5kZXJCbWFwRmlsdGVycygpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JpWSA9IGJtYXAueVNjYWxlLmRvbWFpbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9yaVggPSBibWFwLnhTY2FsZS5kb21haW4oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4ZWN1dGUgdGhlIHRpc3N1ZSBmaWx0ZXJpbmcgd2hlbiB0aGUgbW9kYWwgd2luZG93IGNsb3Nlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoYCMke3Bhci5kaXZNb2RhbH1gKS5vbignaGlkZGVuLmJzLm1vZGFsJywgKGUpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGVja2VkID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoYCMke3Bhci5kaXZNb2RhbH1gKS5maW5kKFwiOmlucHV0XCIpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCQodGhpcykucHJvcChcImNoZWNrZWRcIikpIGNoZWNrZWQucHVzaCgkKHRoaXMpLnZhbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIChjaGVja2VkLmxlbmd0aCA9PSBvcmlZLmxlbmd0aCkgcmV0dXJuOyAvLyBubyBjaGFuZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmlsdGVyIGVRVEwgZGF0YSBiYXNlZCBvbiBzZWxlY3RlZCB0aXNzdWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhci5kYXRhID0gZXF0bHMuZmlsdGVyKChkKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrZWQuaW5kZXhPZihkLnkpID49IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3WCA9IG5lc3QoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmtleSgoZCkgPT4gZC54KSAvLyBncm91cCB0aGlzLmRhdGEgYnkgZC54XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cmllcyhwYXIuZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKGQpID0+IGQua2V5KSAvLyB0aGVuIHJldHVybiB0aGUgdW5pcXVlIGxpc3Qgb2YgZC54XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc29ydCgoYSwgYikgPT4ge3JldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjt9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZS1yZW5kZXJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm1hcCA9IHJlbmRlckJ1YmJsZU1hcChwYXIsIGdlbmUsIHRpc3N1ZXMsIGV4b25zLCB0aXNzdWVTaXRlVGFibGUsIHVybHMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJMZE1hcChwYXIsIGJtYXApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgZGltZW5zaW9ucyBvZiB0aGUgcGFuZWxzXG4gKiBAcGFyYW0gcGFyXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gc2V0RGltZW5zaW9ucyhwYXIpe1xuICAgICBwYXIubWFyZ2luID0ge1xuICAgICAgICBsZWZ0OiBwYXIubWFyZ2luTGVmdCArIHBhci5mb2N1c1BhbmVsTGFiZWxzLnJvdy53aWR0aCArIHBhci5mb2N1c1BhbmVsTGFiZWxzLnJvdy5hZGp1c3QsXG4gICAgICAgIHRvcDogcGFyLm1hcmdpblRvcCxcbiAgICAgICAgcmlnaHQ6IHBhci5tYXJnaW5SaWdodCxcbiAgICAgICAgYm90dG9tOiBwYXIubWFyZ2luQm90dG9tICsgcGFyLmZvY3VzUGFuZWxMYWJlbHMuY29sdW1uLmhlaWdodFxuICAgIH07XG5cbiAgICAgLy8gYXV0by1hZGp1c3QgdGhlIGhlaWdodCB3aGVuIHRoZXJlIGlzIG5vdCBlbm91Z2ggc3BhY2UgdG8gcmVuZGVyIHRoZSBlUVRMIHRpc3N1ZXMgb3Igd2hlbiB0aGVyZSdzIHRvbyBtdWNoIHNwYWNlXG5cbiAgICBsZXQgeUxpc3QgPSBuZXN0KClcbiAgICAgICAgICAgIC5rZXkoKGQpID0+IGQueSkgLy8gZ3JvdXAgdGhpcy5kYXRhIGJ5IGQueFxuICAgICAgICAgICAgLmVudHJpZXMocGFyLmRhdGEpXG4gICAgICAgICAgICAubWFwKChkKSA9PiBkLmtleSkgLy8gdGhlbiByZXR1cm4gdGhlIHVuaXF1ZSBsaXN0IG9mIGQueFxuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IHtyZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47fSk7XG4gICAgbGV0IGggPSAocGFyLmhlaWdodC0ocGFyLm1hcmdpbi50b3AgKyBwYXIubWFyZ2luLmJvdHRvbSArIHBhci5taW5pUGFuZWxIZWlnaHQgKyBwYXIubGVnZW5kSGVpZ2h0KSkveUxpc3QubGVuZ3RoO1xuICAgIGxldCBoTWF4ID0gMTg7XG4gICAgbGV0IGhNaW4gPSAxMDtcbiAgICBpZiAoaCA8IGhNaW4pIHBhci5oZWlnaHQgPSBoTWluKnlMaXN0Lmxlbmd0aCArIHBhci5tYXJnaW4udG9wICsgcGFyLm1hcmdpbi5ib3R0b20gKyBwYXIubWluaVBhbmVsSGVpZ2h0ICsgcGFyLmxlZ2VuZEhlaWdodDtcbiAgICBlbHNlIGlmIChoID4gaE1heCkgcGFyLmhlaWdodCA9IGhNYXgqeUxpc3QubGVuZ3RoICsgcGFyLm1hcmdpbi50b3AgKyBwYXIubWFyZ2luLmJvdHRvbSArIHBhci5taW5pUGFuZWxIZWlnaHQgKyBwYXIubGVnZW5kSGVpZ2h0O1xuICAgIGNvbnNvbGUubG9nKHBhci5oZWlnaHQpXG4gICAgcGFyLmluV2lkdGggPSBwYXIud2lkdGggLSAocGFyLm1hcmdpbi5sZWZ0ICsgcGFyLm1hcmdpbi5yaWdodCk7XG4gICAgcGFyLmluSGVpZ2h0ID0gcGFyLmhlaWdodCAtIChwYXIubWFyZ2luLnRvcCArIHBhci5tYXJnaW4uYm90dG9tKTtcblxuICAgIHBhci5mb2N1c1BhbmVsSGVpZ2h0ID0gcGFyLmluSGVpZ2h0IC0gKHBhci5sZWdlbmRIZWlnaHQgKyBwYXIubWluaVBhbmVsSGVpZ2h0KTtcbiAgICBpZiAocGFyLmZvY3VzUGFuZWxIZWlnaHQgPCAwKSB0aHJvdyBcIkNvbmZpZyBlcnJvcjogZm9jdXMgcGFuZWwgaGVpZ2h0IGlzIG5lZ2F0aXZlLlwiO1xuICAgIHBhci5mb2N1c1BhbmVsTWFyZ2luID0ge1xuICAgICAgICBsZWZ0OiBwYXIubWFyZ2luLmxlZnQsXG4gICAgICAgIHRvcDogcGFyLm1hcmdpbi50b3AgKyBwYXIubWluaVBhbmVsSGVpZ2h0ICsgcGFyLmxlZ2VuZEhlaWdodFxuICAgIH07XG4gICAgcGFyLmxkUGFuZWxNYXJnaW4gPSB7XG4gICAgICAgIGxlZnQ6IHBhci5tYXJnaW4ubGVmdCxcbiAgICAgICAgdG9wOiAwXG4gICAgfTtcbiAgICByZXR1cm4gcGFyO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBTVkdcbiAqIEBwYXJhbSByb290SWQge1N0cmluZ30gYSBESVYgZG9tIElEXG4gKiBAcGFyYW0gd2lkdGgge0ludGVnZXJ9XG4gKiBAcGFyYW0gaGVpZ2h0IHtJbnRlZ2VyfVxuICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9IHNwZWNpZnkgdGhlIHN2ZyBJRCAob3B0aW9uYWwpXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3ZnKHJvb3RJZCwgd2lkdGgsIGhlaWdodCwgc3ZnSWQ9dW5kZWZpbmVkKXtcbiAgICBjaGVja0RvbUlkKHJvb3RJZCk7XG4gICAgaWYgKHN2Z0lkPT09dW5kZWZpbmVkKSBzdmdJZD1gJHtyb290SWR9LXN2Z2A7XG5cbiAgICBzZWxlY3QoYCMke3N2Z0lkfWApLnJlbW92ZSgpOyAvLyByZW1vdmUgcHJldmlvdXNseSByZW5kZXJlZCBzdmcgaWYgZm91bmRcblxuICAgIGxldCBzdmcgPSBzZWxlY3QoXCIjXCIrcm9vdElkKS5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgICAgICAuYXR0cihcImlkXCIsIHN2Z0lkKTtcblxuICAgIHN2Zy5hcHBlbmQoXCJkZWZzXCIpLmFwcGVuZChcImNsaXBQYXRoXCIpXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJjbGlwXCIpXG4gICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGgpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCk7XG5cbiAgICByZXR1cm4gc3ZnO1xufVxuXG4vKipcbiAqIFJlbmRlciB0aGUgTEQgaGVhdCBtYXBcbiAqIEBwYXJhbSBwYXIge09iamVjdH0gdGhlIG1hcCdzIGNvbmZpZyBvYmplY3RcbiAqIEBwYXJhbSBibWFwIHtCdWJibGVNYXB9IG9iamVjdCBvZiB0aGUgYnViYmxlIG1hcCBiZWNhdXNlIHRoZSBMRCByZW5kZXJpbmcgZG9tYWluIGlzIGJhc2VkIG9uIHRoZSBidWJibGUgbWFwJ3MgZm9jdXMgZG9tYWluLlxuICovXG5mdW5jdGlvbiByZW5kZXJMZE1hcChwYXIsIGJtYXApe1xuICAgIGxldCBsZE1hcCA9IG5ldyBIYWxmTWFwKHBhci5sZERhdGEsIHBhci5sZEN1dG9mZiwgZmFsc2UsIHVuZGVmaW5lZCwgcGFyLmxkQ29sb3JTY2hlbWUsIFswLDFdKTtcbiAgICAkKGAjJHtwYXIubGRJZH1gKS5lbXB0eSgpOyAvLyBqUXVlcnkgc3ludGF4Li4uXG4gICAgbGRNYXAuYWRkVG9vbHRpcChwYXIubGRJZCk7XG4gICAgbGV0IGxkQ2FudmFzID0gc2VsZWN0KGAjJHtwYXIubGRJZH1gKS5hcHBlbmQoXCJjYW52YXNcIilcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBwYXIubGRJZCArIFwiLWxkLWNhbnZhc1wiKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHBhci53aWR0aClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgcGFyLndpZHRoKVxuICAgICAgICAuc3R5bGUoXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpO1xuICAgIGxldCBsZFN2ZyA9IGNyZWF0ZVN2ZyhwYXIubGRJZCwgcGFyLndpZHRoLCBwYXIud2lkdGgsIHVuZGVmaW5lZCk7XG4gICAgbGV0IGxkRyA9IGxkU3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxkXCIpXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJsZEdcIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke3Bhci5sZFBhbmVsTWFyZ2luLmxlZnR9LCAke3Bhci5sZFBhbmVsTWFyZ2luLnRvcH0pYCk7XG4gICAgbGRNYXAuZHJhd0NvbG9yTGVnZW5kKGxkU3ZnLCB7eDogcGFyLmxkUGFuZWxNYXJnaW4ubGVmdCwgeTogMTAwfSwgMTAsIFwiTERcIik7XG4gICAgbGRHLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7IC8vIGNsZWFyIGFsbCBjaGlsZCBub2RlcyBpbiBsZEcgYmVmb3JlIHJlbmRlcmluZ1xuICAgIGxldCBsZENvbmZpZyA9IHt3OnBhci5pbldpZHRoLCB0b3A6cGFyLmxkUGFuZWxNYXJnaW4udG9wLCBsZWZ0OnBhci5sZFBhbmVsTWFyZ2luLmxlZnR9O1xuICAgIGxkTWFwLmRyYXcobGRDYW52YXMsIGxkRywgbGRDb25maWcsIFswLDFdLCBmYWxzZSwgdW5kZWZpbmVkLCBibWFwLnhTY2FsZS5kb21haW4oKSwgYm1hcC54U2NhbGUuZG9tYWluKCkpO1xuXG4gICAgLy8gdXBkYXRlIHRoZSBicnVzaCBldmVudCBvbiB0aGUgbWluaSBidWJibGUgbWFwIGFmdGVyIExEIG1hcCBpcyByZW5kZXJlZFxuICAgIC8vIHRoZSBicnVzaCBuZWVkcyB0byBjb250cm9sIG9mIHRoZSBMRCBtYXAgdmlldyByYW5nZSBhcyB3ZWxsLlxuICAgIGJtYXAuYnJ1c2gub24oXCJicnVzaFwiLCAoKT0+e1xuICAgICAgICBibWFwLmJydXNoRXZlbnQoKTtcbiAgICAgICAgbGRHLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7IC8vIGNsZWFyIGFsbCBjaGlsZCBub2RlcyBpbiBsZEcgYmVmb3JlIHJlbmRlcmluZ1xuICAgICAgICBsZE1hcC5kcmF3KGxkQ2FudmFzLCBsZEcsIGxkQ29uZmlnLCBbMCwxXSwgZmFsc2UsIHVuZGVmaW5lZCwgYm1hcC54U2NhbGUuZG9tYWluKCksIGJtYXAueFNjYWxlLmRvbWFpbigpKTtcbiAgICB9KTtcblxuICAgIC8vIExEIGZpbHRlcnNcbiAgICByZW5kZXJMREZpbHRlcnMocGFyLmRpdkRhc2hib2FyZCwgbGRNYXAsIGxkQ2FudmFzLCBsZEcsIGxkQ29uZmlnKTtcbn1cblxuLyoqXG4gKiBSZW5kZXIgdGhlIGJ1YmJsZSBoZWF0bWFwXG4gKiBAcGFyYW0gcGFyIHtPYmplY3R9IGNvbmZpZ3VyZSB0aGUgdmlzdWFsaXphdGlvbnNcbiAqIFRPRE86IGNoZWNrIHJlcXVpcmVkIGF0dHJpYnV0ZXMgaW4gcGFyXG4gKiBAcGFyYW0gZ2VuZSB7T2JqZWN0fSBjb250YWluaW5nIGF0dHI6IGdlbmNvZGVJZFxuICogQHBhcmFtIHRpc3N1ZXMgW0xpc3RdIG9mIHRpc3NzdWVzIHdpdGggc2FtcGxlIGNvdW50cywgZ2VuZXJhdGVkIGJ5IHBhcnNlVGlzc3VlU2FtcGxlQ291bnRzKClcbiAqIEBwYXJhbSBleG9ucyB7TGlzdH0gb2YgZXhvbnMgZnJvbSBwYXJzZUV4b25zVG9MaXN0KClcbiAqIEBwYXJhbSB0aXNzdWVTaXRlVGFibGUge0RpY3Rpb25hcnl9IG9mIHRpc3N1ZSBvYmplY3RzIGluZGV4ZWQgYnkgdGlzc3VlU2l0ZURldGFpbElkXG4gKiBAcGFyYW0gdXJscyB7RGljdGlvbmFyeX0gb2YgdGhlIEdURXggd2ViIHNlcnZpY2UgVVJMcyBmcm9tIGdldEd0ZXhVcmxzKCksIG11c3QgaGF2ZSB0aGUgYXR0cmlidXRlIGR5bmVxdGxcbiAqIEByZXR1cm5zIHtCdWJibGVNYXB9XG4gKi9cbmZ1bmN0aW9uIHJlbmRlckJ1YmJsZU1hcChwYXIsIGdlbmUsIHRpc3N1ZXMsIGV4b25zLCB0aXNzdWVTaXRlVGFibGUsIHVybHMsIHVwZGF0ZT1mYWxzZSl7XG4gICAgbGV0IGJtYXAgPSBuZXcgQnViYmxlTWFwKHBhci5kYXRhLCBwYXIudXNlTG9nLCBwYXIubG9nQmFzZSwgcGFyLmNvbG9yU2NoZW1lKTtcbiAgICBibWFwLmFkZFRvb2x0aXAocGFyLmlkKTtcblxuICAgIC8vLy8vLyBDdXN0b20gYXR0cmlidXRlcyBhZGRlZCB0byBibWFwIC8vLy8vL1xuICAgIGJtYXAudXJscyA9IHVybHM7IC8vIFRPRE86IGZpbmQgYSBiZXR0ZXIgd2F5IHRvIHN0b3JlIGFkZGl0aW9uYWwgYXR0cmlidXRlc1xuICAgIGJtYXAudmFyaWFudHNJbkV4b25zID0ge307XG4gICAgYm1hcC5yc0xvb2tVcCA9IHt9O1xuICAgIGJtYXAudmFyTG9va1VwID0ge307XG5cbiAgICBsZXQgYm1hcFN2ZyA9IGNyZWF0ZVN2ZyhwYXIuaWQsIHBhci53aWR0aCwgcGFyLmhlaWdodCwgdW5kZWZpbmVkKTtcblxuICAgIGxldCBtaW5pRyA9IGJtYXBTdmcuYXBwZW5kKFwiZ1wiKSAvLyBnbG9iYWwgYnViYmxlIG1hcCA8Zz5cbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNvbnRleHRcIilcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcIm1pbmlHXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtwYXIubWFyZ2luLmxlZnR9LCAke3Bhci5tYXJnaW4udG9wfSlgKTtcblxuICAgIGxldCBmb2N1c0cgPSBibWFwU3ZnLmFwcGVuZChcImdcIikgLy8gem9vbWVkIGJ1YmJsZSBtYXAgPGc+XG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJmb2N1c0dcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImZvY3VzXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtwYXIuZm9jdXNQYW5lbE1hcmdpbi5sZWZ0fSwgJHtwYXIuZm9jdXNQYW5lbE1hcmdpbi50b3B9KWApO1xuXG4gICAgYm1hcC5kcmF3Q29tYm8oXG4gICAgICAgIG1pbmlHLFxuICAgICAgICBmb2N1c0csXG4gICAgICAgIHt3OnBhci5pbldpZHRoLCBoOnBhci5taW5pUGFuZWxIZWlnaHQsIHRvcDo1LCBsZWZ0OjAsIGgyOiBwYXIuZm9jdXNQYW5lbEhlaWdodH0sXG4gICAgICAgIHBhci5jb2xvclNjYWxlRG9tYWluLFxuICAgICAgICBmYWxzZSwgLy8gZG8gbm90IHVzZSB0aGUgZGVmYXVsdCBicnVzaCwgdXNlIGEgY3VzdG9tIGJydXNoIGRlZmluZWQgYmVsb3dcbiAgICAgICAgcGFyLmZvY3VzUGFuZWxMYWJlbHNcbiAgICApO1xuXG4gICAgJChgIyR7cGFyLmRpdkluZm99YCkudGV4dCgnVG90YWwgZVFUTCBjb3VudHM6ICcgKyBwYXIuZGF0YS5sZW5ndGgpXG5cblxuICAgIC8vLy8vIEJlbG93IGFyZSBjdXN0b20gZmVhdHVyZXMgYW5kIGZ1bmN0aW9uYWxpdHlcblxuICAgIC8vLS0gb3ZlcnJpZGUgYnViYmxlIG1vdXNlb3ZlciB0b29sdGlwXG4gICAgZm9jdXNHLnNlbGVjdEFsbChcIi5idWJibGUtbWFwLWNlbGxcIilcbiAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBsZXQgc2VsZWN0ZWQgPSBzZWxlY3QodGhpcyk7XG4gICAgICAgICAgICAgICAgbGV0IHJvd0NsYXNzID0gc2VsZWN0ZWQuYXR0cihcInJvd1wiKTtcbiAgICAgICAgICAgICAgICBsZXQgY29sQ2xhc3MgPSBzZWxlY3RlZC5hdHRyKFwiY29sXCIpO1xuICAgICAgICAgICAgICAgIGZvY3VzRy5zZWxlY3RBbGwoXCIuYnViYmxlLW1hcC14bGFiZWxcIikuZmlsdGVyKGAuJHtyb3dDbGFzc31gKVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBmb2N1c0cuc2VsZWN0QWxsKFwiLmJ1YmJsZS1tYXAteWxhYmVsXCIpLmZpbHRlcihgLiR7Y29sQ2xhc3N9YClcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBsZXQgZGlzcGxheVZhbHVlID0gZC5kaXNwbGF5VmFsdWUgPT09IHVuZGVmaW5lZD9wYXJzZUZsb2F0KGQudmFsdWUudG9FeHBvbmVudGlhbCgpKS50b1ByZWNpc2lvbig0KTpkLmRpc3BsYXlWYWx1ZTtcbiAgICAgICAgICAgICAgICBsZXQgZGlzcGxheVNpemUgPSBkLnJEaXNwbGF5VmFsdWUgPT09IHVuZGVmaW5lZD8gZC5yLnRvUHJlY2lzaW9uKDQpOmQuckRpc3BsYXlWYWx1ZTtcbiAgICAgICAgICAgICAgICBsZXQgZGlzcGxheVggPSBkLmRpc3BsYXlYID09PSB1bmRlZmluZWQ/IGQueDpkLmRpc3BsYXlYO1xuICAgICAgICAgICAgICAgIGxldCBkaXNwbGF5WSA9IGQuZGlzcGxheVkgPT09IHVuZGVmaW5lZD8gZC55OmQuZGlzcGxheVk7XG4gICAgICAgICAgICAgICAgYm1hcC50b29sdGlwLnNob3coYENvbHVtbjogJHtkaXNwbGF5WH0gPGJyLz4gUm93OiAke2Rpc3BsYXlZfTxici8+IE5FUzogJHtkaXNwbGF5VmFsdWV9PGJyLz4gcC12YWx1ZTogJHtkaXNwbGF5U2l6ZX1gKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgLy8tLSBmaWx0ZXJzIGZvciBwLXZhbHVlLCBuZXNcbiAgICByZW5kZXJCbWFwRmlsdGVycyhwYXIuZGl2RGFzaGJvYXJkLCBwYXIuZGl2SW5mbywgcGFyLmRpdk1vZGFsLCBibWFwLCBibWFwU3ZnLCB0aXNzdWVTaXRlVGFibGUpO1xuXG4gICAgLy8gdmFyaWFudCByZWxhdGVkIGRhdGEgcGFyc2luZ1xuICAgIC8vIFZhcmlhbnQgbG9jYXRvclxuICAgIGJ1aWxkVmFyaWFudExvb2t1cFRhYmxlcyhibWFwKTtcblxuICAgIC8vLS0gaWRlbnRpZnkgdmFyaWFudHMgdGhhdCBhcmUgaW4gdGhlIGV4b24gcmVnaW9uc1xuICAgIGJtYXAudmFyaWFudHNJbkV4b25zID0gZmluZFZhcmlhbnRzSW5FeG9uUmVnaW9ucyhibWFwLnhTY2FsZS5kb21haW4oKSwgZXhvbnMpO1xuXG4gICAgLy8tLSB0aXNzdWUgYmFkZ2VzLCB3aGljaCByZXBvcnQgdGhlIHRpc3N1ZSBzYW1wbGUgY291bnRzIG5leHQgdG8gdGhlIHRpc3N1ZSByb3cgbGFiZWxzXG4gICAgcmVuZGVyVGlzc3VlQmFkZ2VzKHRpc3N1ZXMsIGJtYXAsIGJtYXBTdmcpO1xuXG4gICAgIC8vLS0gVFNTIGFuZCBURVMgbWFya2Vyc1xuICAgIGZpbmRWYXJpYW50c05lYXJHZW5lU3RhcnRFbmQoZ2VuZSwgYm1hcCk7XG4gICAgcmVuZGVyR2VuZVN0YXJ0RW5kTWFya2VycyhibWFwLCBibWFwU3ZnLCB0cnVlKTsgLy8gcmVuZGVyIHRoZSBtYXJrZXJzIG9uIHRoZSBtaW5pIG1hcFxuXG4gICAgLy8tLSBUU1MgZGlzdGFuY2UgdHJhY2tcbiAgICAvLy0tIEl0J3MgYSAxRCBoZWF0bWFwIHNob3dpbmcgdGhlIGRpc3RhbmNlIG9mIGVhY2ggdmFyaWFudCB0byB0aGUgVFNTIHNpdGUuXG4gICAgcmVuZGVyVHNzRGlzdGFuY2VUcmFjayhnZW5lLCBibWFwLCBibWFwU3ZnKTtcblxuICAgIC8vLS0gQWRkIHRoZSBjbGljayBldmVudCBmb3IgdGhlIGJ1YmJsZXM6IHBvcCBhIGRpYWxvZyB3aW5kb3cgYW5kIHJlbmRlciB0aGUgZVFUTCB2aW9saW4gcGxvdFxuICAgIGFkZEJ1YmJsZUNsaWNrRXZlbnQoYm1hcCwgYm1hcFN2ZywgcGFyKTtcblxuICAgIC8vLS0gYWRkIHRoZSBmb2N1cyB2aWV3IGJydXNoIGFuZCBkZWZpbnQgdGhlIGJydXNoIGV2ZW50XG4gICAgYm1hcC5icnVzaEV2ZW50ID0gKCk9PntcbiAgICAgICAgLy8gdXBkYXRlIGFsbCB0aGUgdmFyaWFudCByZWxhdGVkIHZpc3VhbCBmZWF0dXJlc1xuXG4gICAgICAgIC8vIC0tIGZvY3VzIHZpZXcgb2YgdGhlIGhlYXQgbWFwXG4gICAgICAgIGxldCBmb2N1c0RvbWFpbiA9IHVwZGF0ZUZvY3VzVmlldyhwYXIsIGJtYXAsIGJtYXBTdmcpO1xuXG4gICAgICAgIC8vIC0tIGdlbmUgVFNTIGFuZCBURVMgbWFya2Vyc1xuICAgICAgICBpZiggKGJtYXAudHNzICYmIGJtYXAueFNjYWxlKGJtYXAudHNzKSkgfHwgKGJtYXAudGVzICYmIGJtYXAueFNjYWxlKGJtYXAudGVzKSkgKSByZW5kZXJHZW5lU3RhcnRFbmRNYXJrZXJzKGJtYXAsIGJtYXBTdmcsIGZhbHNlKTtcblxuICAgICAgICAvLyAtLSBUU1MgZGlzdGFuY2UgdHJhY2tcbiAgICAgICAgcmVuZGVyVHNzRGlzdGFuY2VUcmFjayhnZW5lLCBibWFwLCBibWFwU3ZnKTtcbiAgICAgICAgcmV0dXJuIGZvY3VzRG9tYWluO1xuICAgIH07XG4gICAgYm1hcC5icnVzaCA9IGJydXNoWCgpXG4gICAgICAgIC5leHRlbnQoW1xuICAgICAgICAgICAgWzAsMF0sXG4gICAgICAgICAgICBbcGFyLmluV2lkdGgsIHBhci5taW5pUGFuZWxIZWlnaHQgKyA1XVxuICAgICAgICBdKVxuICAgICAgICAub24oXCJicnVzaFwiLCBibWFwLmJydXNoRXZlbnQpO1xuXG4gICAgYm1hcC5kcmF3Q29sb3JMZWdlbmQoYm1hcFN2Zywge3g6IHBhci5mb2N1c1BhbmVsTWFyZ2luLmxlZnQsIHk6IHBhci5mb2N1c1BhbmVsTWFyZ2luLnRvcC01MH0sIDQsIFwiTkVTXCIpO1xuXG4gICAgbWluaUcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYnJ1c2hcIilcbiAgICAgICAgLmNhbGwoYm1hcC5icnVzaClcbiAgICAgICAgLmNhbGwoYm1hcC5icnVzaC5tb3ZlLCBbMCwgYm1hcC54U2NhbGVNaW5pLmJhbmR3aWR0aCgpKjgwXSk7IC8vIHNldCB0aGUgYnJ1c2ggc2l6ZSB0byA2MCBjb2x1bW5zXG5cbiAgICAvLyBoaWRlIHRoZSBtaW5pIG1hcCB3aGVuIHRoZSBmb2N1cyBtYXAgaW5jbHVkZXMgYWxsIGVRVExzXG4gICAgaWYgKGJtYXAueFNjYWxlTWluaS5kb21haW4oKS5sZW5ndGggPT0gYm1hcC54U2NhbGUuZG9tYWluKCkubGVuZ3RoKSBtaW5pRy5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpO1xuXG4gICAgcmV0dXJuIGJtYXA7XG59XG5cbi8qKlxuICogVXBkYXRlIHRoZSBmb2N1cyBidWJibGUgbWFwXG4gKiBAcGFyYW0gcGFyIHtPYmplY3R9IG9mIHRoZSBwbG90J3MgY29uZmlndXJhdGlvblxuICogQHBhcmFtIGJtYXAge0J1YmJsZU1hcH1cbiAqIEBwYXJhbSBibWFwU3ZnIHtEM30gdGhlIFNWRyBvZiB0aGUgYnViYmxlIG1hcC5cbiAqIEByZXR1cm5zIHsqfVxuICovXG5mdW5jdGlvbiB1cGRhdGVGb2N1c1ZpZXcocGFyLCBibWFwLCBibWFwU3ZnKXtcbiAgICBsZXQgc2VsZWN0aW9uID0gZXZlbnQuc2VsZWN0aW9uO1xuICAgIGxldCBicnVzaExlZnQgPSBNYXRoLnJvdW5kKHNlbGVjdGlvblswXSAvIGJtYXAueFNjYWxlTWluaS5zdGVwKCkpO1xuICAgIGxldCBicnVzaFJpZ2h0ID0gTWF0aC5yb3VuZChzZWxlY3Rpb25bMV0gLyBibWFwLnhTY2FsZU1pbmkuc3RlcCgpKTtcblxuICAgIC8vIHVwZGF0ZSBzY2FsZXNcbiAgICBsZXQgZm9jdXNEb21haW4gPSBibWFwLnhTY2FsZU1pbmkuZG9tYWluKCkuc2xpY2UoYnJ1c2hMZWZ0LCBicnVzaFJpZ2h0KTtcbiAgICBibWFwLnhTY2FsZS5kb21haW4oZm9jdXNEb21haW4pOyAvLyByZXNldCB0aGUgeFNjYWxlIGRvbWFpblxuICAgIGxldCBidWJibGVNYXggPSBibWFwLl9zZXRCdWJibGVNYXgoKTtcbiAgICBibWFwLmJ1YmJsZVNjYWxlLnJhbmdlKFsyLCBidWJibGVNYXhdKTsgLy8gVE9ETzogY2hhbmdlIGhhcmQtY29kZWQgbWluIHJhZGl1c1xuXG4gICAgYm1hcC5kcmF3QnViYmxlTGVnZW5kKGJtYXBTdmcsIHt4OiBwYXIud2lkdGgvMiwgeTpwYXIuZm9jdXNQYW5lbE1hcmdpbi50b3AtNTAsIHRpdGxlOiBcIi1sb2cxMChwLXZhbHVlKVwifSwgNSwgXCItbG9nMTAocC12YWx1ZSlcIik7XG5cbiAgICAvLyB1cGRhdGUgdGhlIGZvY3VzIGJ1YmJsZXNcbiAgICBibWFwU3ZnLnNlbGVjdChcIiNmb2N1c0dcIikuc2VsZWN0QWxsKFwiLmJ1YmJsZS1tYXAtY2VsbFwiKVxuICAgICAgICAuYXR0cihcImN4XCIsIChkKSA9PiB7XG4gICAgICAgICAgICBsZXQgeCA9IGJtYXAueFNjYWxlKGQueCk7XG4gICAgICAgICAgICByZXR1cm4geCA9PT0gdW5kZWZpbmVkID8gYm1hcC54U2NhbGUuYmFuZHdpZHRoKCkgLyAyIDogeCArIGJtYXAueFNjYWxlLmJhbmR3aWR0aCgpIC8gMjtcblxuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcInJcIiwgKGQpID0+IHtcbiAgICAgICAgICAgIGxldCB4ID0gYm1hcC54U2NhbGUoZC54KTtcbiAgICAgICAgICAgIHJldHVybiB4ID09PSB1bmRlZmluZWQgPyAwIDogYm1hcC5idWJibGVTY2FsZShkLnIpOyAvLyBzZXQgdGhlIHIgdG8gemVybyB3aGVuIHggaXMgbm90IGluIHRoZSB6b29tIHZpZXcuXG4gICAgICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIHRoZSBjb2x1bW4gbGFiZWxzXG4gICAgbGV0IGNsID0gcGFyLmZvY3VzUGFuZWxMYWJlbHMuY29sdW1uO1xuICAgIGJtYXBTdmcuc2VsZWN0KFwiI2ZvY3VzR1wiKS5zZWxlY3RBbGwoXCIuYnViYmxlLW1hcC14bGFiZWxcIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQpID0+IHtcbiAgICAgICAgICAgIGxldCB4ID0gYm1hcC54U2NhbGUoZCkgKyBibWFwLnhTY2FsZS5iYW5kd2lkdGgoKS8zIHx8IDA7IC8vIFRPRE86IHJlbW92ZSBoYXJkLWNvZGVkIHZhbHVlXG4gICAgICAgICAgICBsZXQgeSA9IGJtYXAueVNjYWxlLnJhbmdlKClbMV0gKyBjbC5hZGp1c3Q7XG4gICAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke3h9LCAke3l9KSByb3RhdGUoJHtjbC5hbmdsZX0pYDtcblxuICAgICAgICB9KVxuICAgICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHNpemUgPSBNYXRoLmZsb29yKGJtYXAueFNjYWxlLmJhbmR3aWR0aCgpLyAyKT4xMD8xMDpNYXRoLmZsb29yKGJtYXAueFNjYWxlLmJhbmR3aWR0aCgpLyAyKTtcbiAgICAgICAgICAgIHJldHVybiBgJHtzaXplfXB4YFxuICAgICAgICB9KVxuICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIChkKSA9PiB7XG4gICAgICAgICAgICBsZXQgeCA9IGJtYXAueFNjYWxlKGQpO1xuICAgICAgICAgICAgcmV0dXJuIHggPT09IHVuZGVmaW5lZCA/IFwibm9uZVwiIDogXCJibG9ja1wiO1xuICAgICAgICB9KTtcbiAgICByZXR1cm4gZm9jdXNEb21haW47XG59XG5cbi8qKlxuICogUmVuZGVyIHRpc3N1ZSBiYWRnZXMgdGhhdCByZXBvcnQgdGhlIG51bWJlciBvZiBzYW1wbGVzIHdpdGggZ2Vub3R5cGVcbiAqIEBwYXJhbSB0aXNzdWVzIHtMaXN0fSBvZiB0aXNzdWUgb2JqZWN0c1xuICogQHBhcmFtIGJtYXAge0J1YmJsZU1hcH1cbiAqIEBwYXJhbSBibWFwU3ZnIHtEM30gU1ZHIG9iamVjdCBvZiB0aGUgYnViYmxlIG1hcFxuICovXG5mdW5jdGlvbiByZW5kZXJUaXNzdWVCYWRnZXModGlzc3VlcywgYm1hcCwgYm1hcFN2Zyl7XG4gICAgbGV0IGJhZGdlcyA9IGJtYXBTdmcuc2VsZWN0KCcjZm9jdXNHJykuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoJ2lkJywgJ3Rpc3N1ZUJhZGdlRycpXG4gICAgICAgIC5zZWxlY3RBbGwoJy50aXNzdWUtYmFkZ2UnKVxuICAgICAgICAuZGF0YSh0aXNzdWVzLmZpbHRlcigoZCk9PntcbiAgICAgICAgICAgICAgICByZXR1cm4gYm1hcC55U2NhbGUoZC50aXNzdWVTaXRlRGV0YWlsSWQpICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9KSk7XG5cbiAgICBsZXQgZyA9IGJhZGdlcy5lbnRlcigpLmFwcGVuZChcImdcIikuY2xhc3NlZCgndGlzc3VlLWJhZGdlJywgdHJ1ZSk7XG5cbiAgICBnLmFwcGVuZCgnZWxsaXBzZScpXG4gICAgICAgIC5hdHRyKCdjeCcsIGJtYXAueFNjYWxlLnJhbmdlKClbMF0gLSBibWFwLnhTY2FsZS5iYW5kd2lkdGgoKS8yLTEwKVxuICAgICAgICAuYXR0cignY3knLCAoZCk9PmJtYXAueVNjYWxlKGQudGlzc3VlU2l0ZURldGFpbElkKSArIGJtYXAueVNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgIC5hdHRyKCdyeCcsIDExKSAvLyBXYXJuaW5nOiBoYXJkLWNvZGVkIHZhbHVlXG4gICAgICAgIC5hdHRyKCdyeScsIGJtYXAueVNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgIC5hdHRyKCdmaWxsJywgJyM3NDg3OTcnKTtcblxuICAgIGcuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgLnRleHQoKGQpPT5kLnJuYVNlcUFuZEdlbm90eXBlU2FtcGxlQ291bnQpXG4gICAgICAgIC5hdHRyKCd4JywgYm1hcC54U2NhbGUucmFuZ2UoKVswXSAtIGJtYXAueFNjYWxlLmJhbmR3aWR0aCgpLzIgLSAxNylcbiAgICAgICAgLmF0dHIoJ3knLCAoZCk9PmJtYXAueVNjYWxlKGQudGlzc3VlU2l0ZURldGFpbElkKSArIGJtYXAueVNjYWxlLmJhbmR3aWR0aCgpLzIrMylcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnI2ZmZmZmZicpXG4gICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgXCI4cHhcIilcbiAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ2NlbnRlcicpXG5cbn1cblxuLyoqXG4gKiBGaW5kIHRoZSBjbG9zZXN0IGxlZnQtc2lkZSB2YXJpYW50IG9mIHRoZSBnZW5lIHN0YXJ0IGFuZCBlbmQgc2l0ZXMgKHRzcyBhbmQgdGVzKVxuICogVGhpcyBmdW5jdGlvbiBjcmVhdGVzIHR3byBuZXcgYXR0cmlidXRlcywgdHNzIGFuZCB0ZXMsIGZvciBibWFwXG4gKiBAcGFyYW0gZ2VuZSB7T2JqZWN0fSB0aGF0IGhhcyBhdHRyaWJ1dGVzIHN0YXJ0IGFuZCBlbmRcbiAqIEBwYXJhbSBibWFwIHtCdWJibGVNYXB9XG4gKi9cbmZ1bmN0aW9uIGZpbmRWYXJpYW50c05lYXJHZW5lU3RhcnRFbmQoZ2VuZSwgYm1hcCkge1xuICAgIGxldCB0c3MgPSBnZW5lLnN0cmFuZCA9PSAnKycgPyBnZW5lLnN0YXJ0IDogZ2VuZS5lbmQ7XG4gICAgbGV0IHRlcyA9IGdlbmUuc3RyYW5kID09ICcrJyA/IGdlbmUuZW5kIDogZ2VuZS5zdGFydDtcbiAgICBsZXQgdmFyaWFudHMgPSBibWFwLnhTY2FsZU1pbmkuZG9tYWluKCk7XG4gICAgY29uc3QgZmluZExlZnRTaWRlTmVhcmVzdE5laWdoYm9yVmFyaWFudCA9IChzaXRlKSA9PiB7XG4gICAgICAgIHJldHVybiB2YXJpYW50cy5maWx0ZXIoKGQsIGkpID0+IHtcbiAgICAgICAgICAgIC8vIGlmIHRoZSB2YXJpYW50IHBvc2l0aW9uIGlzIHRoZSBzaXRlIHBvc2l0aW9uXG4gICAgICAgICAgICBsZXQgcG9zID0gcGFyc2VGbG9hdChkLnNwbGl0KCdfJylbMV0pOyAvLyBhc3N1bXB0aW9uOiB0aGUgdmFyaWFudCBJRCBoYXMgdGhlIGdlbm9taWMgbG9jYXRpb25cbiAgICAgICAgICAgIGlmIChwb3MgPT09IHNpdGUpIHJldHVybiB0cnVlO1xuXG4gICAgICAgICAgICAvLyBlbHNlIGZpbmQgd2hlcmUgdGhlIHNpdGUgaXMgbG9jYXRlZFxuICAgICAgICAgICAgLy8gZmlyc3QsIGdldCB0aGUgbmVpZ2hib3IgdmFyaWFudFxuICAgICAgICAgICAgaWYgKHZhcmlhbnRzW2kgKyAxXSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IHBhcnNlRmxvYXQodmFyaWFudHNbaSArIDFdLnNwbGl0KCdfJylbMV0pIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJldHVybiAocG9zIC0gc2l0ZSkgKiAobmV4dCAtIHNpdGUpIDwgMDsgLy8gcmF0aW9uYWxlOiB0aGUgdmFsdWUgd291bGQgYmUgPCAwIHdoZW4gdGhlIHNpdGUgaXMgbG9jYXRlZCBiZXR3ZWVuIHR3byB2YXJpYW50cy5cbiAgICAgICAgfSlcbiAgICB9O1xuXG4gICAgbGV0IHRzc1ZhcmlhbnQgPSBmaW5kTGVmdFNpZGVOZWFyZXN0TmVpZ2hib3JWYXJpYW50KHRzcyk7XG4gICAgbGV0IHRlc1ZhcmlhbnQgPSBmaW5kTGVmdFNpZGVOZWFyZXN0TmVpZ2hib3JWYXJpYW50KHRlcyk7XG4gICAgYm1hcC50c3MgPSB0c3NWYXJpYW50WzBdOyAvLyBibWFwLnRzcyBzdG9yZXMgdGhlIGNsb3Nlc3QgbGVmdC1zaWRlIHZhcmlhbnQgb2YgdGhlIHN0YXJ0IHNpdGVcbiAgICBibWFwLnRlcyA9IHRlc1ZhcmlhbnRbMF07IC8vIGJtYXAudGVzIHN0b3JlcyB0aGUgY2xvc2VzdCBsZWZ0LXNpZGUgdmFyaWFudCBvZiB0aGUgZW5kIHNpdGVcbn1cblxuLyoqXG4gKiBSZW5kZXIgdGhlIFRTUyBhbmQgVEVTIG9mIHRoZSBHZW5lIGlmIGFwcGxpY2FibGVcbiAqIEBwYXJhbSBibWFwIHtCdWJibGVNYXB9XG4gKiBAcGFyYW0gYm1hcFN2ZyB7RDN9IHRoZSBTVkcgb2JqZWN0IG9mIHRoZSBidWJibGUgbWFwXG4gKiBAcGFyYW0gbWluaSB7Qm9vbGVhbn0gcmVuZGVyIHRoZSBtYXJrZXJzIG9uIHRoZSBtaW5pIG1hcD9cbiAqL1xuZnVuY3Rpb24gcmVuZGVyR2VuZVN0YXJ0RW5kTWFya2VycyhibWFwLCBibWFwU3ZnLCBtaW5pPWZhbHNlKXtcbiAgICAvLyByZW5kZXJpbmcgVFNTXG4gICAgaWYgKG1pbmkpe1xuICAgICAgICBsZXQgZyA9IGJtYXBTdmcuc2VsZWN0KCcjbWluaUcnKS5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cignaWQnLCAnbWluaVNpdGVNYXJrZXJzJyk7XG4gICAgICAgIGcuYXBwZW5kKCdsaW5lJylcbiAgICAgICAgLmF0dHIoJ3gxJywgYm1hcC54U2NhbGVNaW5pKGJtYXAudHNzKSArIGJtYXAueFNjYWxlTWluaS5iYW5kd2lkdGgoKSlcbiAgICAgICAgLmF0dHIoJ3gyJywgYm1hcC54U2NhbGVNaW5pKGJtYXAudHNzKSArIGJtYXAueFNjYWxlTWluaS5iYW5kd2lkdGgoKSlcbiAgICAgICAgLmF0dHIoJ3kxJywgMClcbiAgICAgICAgLmF0dHIoJ3kyJywgYm1hcC55U2NhbGVNaW5pLnJhbmdlKClbMV0pXG4gICAgICAgIC5zdHlsZSgnc3Ryb2tlJywgJyM5NGE4YjgnKVxuICAgICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIDIpO1xuXG4gICAgICAgIGcuYXBwZW5kKCdsaW5lJylcbiAgICAgICAgLmF0dHIoJ3gxJywgYm1hcC54U2NhbGVNaW5pKGJtYXAudGVzKSArIGJtYXAueFNjYWxlTWluaS5iYW5kd2lkdGgoKSlcbiAgICAgICAgLmF0dHIoJ3gyJywgYm1hcC54U2NhbGVNaW5pKGJtYXAudGVzKSArIGJtYXAueFNjYWxlTWluaS5iYW5kd2lkdGgoKSlcbiAgICAgICAgLmF0dHIoJ3kxJywgMClcbiAgICAgICAgLmF0dHIoJ3kyJywgYm1hcC55U2NhbGVNaW5pLnJhbmdlKClbMV0pXG4gICAgICAgIC5zdHlsZSgnc3Ryb2tlJywgJyM3NDg3OTcnKVxuICAgICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGJtYXBTdmcuc2VsZWN0KCcjc2l0ZU1hcmtlcnMnKS5yZW1vdmUoKTsgLy8gY2xlYXIgcHJldmlvdXNseSByZW5kZXJlZCBtYXJrZXJzXG4gICAgICAgIGxldCBnID0gYm1hcFN2Zy5zZWxlY3QoJyNmb2N1c0cnKS5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cignaWQnLCAnc2l0ZU1hcmtlcnMnKTtcbiAgICAgICAgaWYgKGJtYXAudHNzICYmIGJtYXAueFNjYWxlKGJtYXAudHNzKSl7XG4gICAgICAgICAgICAgZy5hcHBlbmQoJ2xpbmUnKVxuICAgICAgICAgICAgLmF0dHIoJ3gxJywgYm1hcC54U2NhbGUoYm1hcC50c3MpICsgYm1hcC54U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgICAgICAuYXR0cigneDInLCBibWFwLnhTY2FsZShibWFwLnRzcykgKyBibWFwLnhTY2FsZS5iYW5kd2lkdGgoKSlcbiAgICAgICAgICAgIC5hdHRyKCd5MScsIDApXG4gICAgICAgICAgICAuYXR0cigneTInLCBibWFwLnlTY2FsZS5yYW5nZSgpWzFdKVxuICAgICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCAnIzk0YThiOCcpXG4gICAgICAgICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIDIpO1xuICAgICAgICAgICAgIGcuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAgICAgICAgLnRleHQoJ1RTUycpXG4gICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgYm1hcC54U2NhbGUoYm1hcC50c3MpKVxuICAgICAgICAgICAgICAgICAuYXR0cigneScsIC01KVxuICAgICAgICAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnY2VudGVyJylcbiAgICAgICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCBcIjEycHhcIilcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChibWFwLnRlcyAmJiBibWFwLnhTY2FsZShibWFwLnRlcykpe1xuICAgICAgICAgICAgZy5hcHBlbmQoJ2xpbmUnKVxuICAgICAgICAgICAgLmF0dHIoJ3gxJywgYm1hcC54U2NhbGUoYm1hcC50ZXMpICsgYm1hcC54U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgICAgICAuYXR0cigneDInLCBibWFwLnhTY2FsZShibWFwLnRlcykgKyBibWFwLnhTY2FsZS5iYW5kd2lkdGgoKSlcbiAgICAgICAgICAgIC5hdHRyKCd5MScsIDApXG4gICAgICAgICAgICAuYXR0cigneTInLCBibWFwLnlTY2FsZS5yYW5nZSgpWzFdKVxuICAgICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCAnIzc0ODc5NycpXG4gICAgICAgICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIDIpO1xuICAgICAgICAgICAgZy5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgICAgICAudGV4dCgnVEVTJylcbiAgICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCBibWFwLnhTY2FsZShibWFwLnRlcykpXG4gICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgLTUpXG4gICAgICAgICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdjZW50ZXInKVxuICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIFwiMTJweFwiKVxuICAgICAgICB9XG5cbiAgICB9XG5cbn1cblxuLyoqXG4gKiBCdWlsZCB0d28gbG9va3VwIHRhYmxlc1xuICogcnNMb29rdXAgYSBsb29rdXAgdGFibGUgZm9yIHJldHJpZXZpbmcgcnMgSUQgYnkgdmFyaWFudCBJRFxuICogdmFyTG9va3VwIGlzIGEgbG9va3VwIHRhYmxlIGZvciByZXRyaWV2aW5nIHNob3J0aGFuZCB2YXJpYW50SUQgYnkgdmFyaWFudCBJRFxuICogdGhpcyBmdW5jdGlvbiBjcmVhdGVzIHR3byBuZXcgYXR0cmlidXRlcywgcnNMb29rdXAgYW5kIHZhckxvb2tVcCBmb3IgYm1hcFxuICogQHBhcmFtIGJtYXBcbiAqL1xuZnVuY3Rpb24gYnVpbGRWYXJpYW50TG9va3VwVGFibGVzKGJtYXApe1xuICAgIGJtYXAucnNMb29rVXAgPSB7fTtcbiAgICBibWFwLnZhckxvb2tVcCA9IHt9O1xuICAgIG5lc3QoKVxuICAgICAgICAua2V5KChkKT0+ZC54KVxuICAgICAgICAuZW50cmllcyhibWFwLmRhdGEpXG4gICAgICAgIC5mb3JFYWNoKChkKT0+IHtcbiAgICAgICAgICAgIGxldCB2ID0gZC52YWx1ZXNbMF07XG4gICAgICAgICAgICBpZih2Lmhhc093blByb3BlcnR5KCdzbnBJZCcpID09PSB1bmRlZmluZWQpIHRocm93ICdJbnB1dCBFcnJvcjogUlMgSUQgbG9va3VwIHRhYmxlIGlzIG5vdCBidWlsdC4nO1xuICAgICAgICAgICAgaWYodi5oYXNPd25Qcm9wZXJ0eSgnZGlzcGxheVgnKSA9PT0gdW5kZWZpbmVkKSB0aHJvdyAnSW5wdXQgRXJyb3I6IGRpc3BsYXkgbGFiZWwgbG9va3VwIHRhYmxlIGlzIG5vdCBidWlsdC4nO1xuXG4gICAgICAgICAgICBibWFwLnJzTG9va1VwW2Qua2V5XSA9IGQudmFsdWVzWzBdLnNucElkO1xuICAgICAgICAgICAgYm1hcC52YXJMb29rVXBbZC5rZXldID0gZC52YWx1ZXNbMF0uZGlzcGxheVg7XG4gICAgICAgIH0pO1xufVxuXG4vKipcbiAqIElkZW50aWZ5IHZhcmlhbnRzIHRoYXQgYXJlIGluIHRoZSBleG9uIHJlZ2lvbnNcbiAqIEBwYXJhbSB2YXJpYW50c1xuICogQHBhcmFtIGV4b25zXG4gKlxuICovXG5mdW5jdGlvbiBmaW5kVmFyaWFudHNJbkV4b25SZWdpb25zKHZhcmlhbnRzLCBleG9ucyl7XG4gICAgbGV0IGV4b25WYXJpYW50cyA9IHt9IC8vIGluZGV4ZWQgYnkgdmFyaWFudCBJRFxuICAgIHZhcmlhbnRzLmZvckVhY2goKHYpPT57XG4gICAgICAgIGxldCBwb3MgPSBwYXJzZUZsb2F0KHYuc3BsaXQoJ18nKVsxXSk7XG4gICAgICAgIGxldCBmaWx0ZXJlZCA9IGV4b25zLmZpbHRlcigoZXgpPT57XG4gICAgICAgICAgICByZXR1cm4gZXguc3RhcnQ8PXBvcyAmJiBleC5lbmQ+PXBvcztcbiAgICAgICAgfSk7XG4gICAgICAgIGlmKGZpbHRlcmVkLmxlbmd0aCA+IDApIGV4b25WYXJpYW50c1t2XSA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGV4b25WYXJpYW50cztcbn1cblxuXG4vKipcbiAqIFJlbmRlciB0aGUgdmFyaWFudCBUU1MgZGlzdGFuY2UgdHJhY2tcbiAqIEBwYXJhbSBnZW5lIHtPYmplY3R9IG9mIHRoZSBnZW5lIHdpdGggYXR0ciBzdGFydCwgZW5kIGFuZCBzdHJhbmRcbiAqIEBwYXJhbSBibWFwIHtCdWJibGVNYXB9XG4gKiBAcGFyYW0gYm1hcFN2ZyB7RDN9IHRoZSBTVkcgRDMgb2JqZWN0IG9mIHRoZSBidWJibGUgbWFwXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclRzc0Rpc3RhbmNlVHJhY2soZ2VuZSwgYm1hcCwgYm1hcFN2Zyl7XG4gICAgbGV0IHRzcyA9IGdlbmUuc3RyYW5kID09ICcrJz9nZW5lLnN0YXJ0OmdlbmUuZW5kO1xuXG4gICAgLy8gY29sb3Igc2NhbGUgZm9yIHRoZSBUU1MgRGlzdGFuY2VcbiAgICBsZXQgcmFuZ2UgPSBbJyMwMDAnLCAnIzI1MjUyNScsICcjNTI1MjUyJywgJyM3MzczNzMnLCAnIzk2OTY5NicsICcjZjBmMGYwJywnI2ZmZiddO1xuICAgIGNvbnN0IHVuaXQgPSAxZTU7IC8vIDEwMDAwMCBicFxuICAgIGxldCBkb21haW4gPSBbMC4wMDAwMDEsMC4wMDUsIDAuMDEsMC4xLDAuNSwyLDMsNCw1XS5tYXAoZnVuY3Rpb24oZCl7cmV0dXJuIGQqdW5pdH0pO1xuXG4gICAgLy8gc2NhbGVUaHJlc2hvbGQgbWFwIGFyYml0cmFyeSBzdWJzZXRzICh0aHJlc2hvbGRzKSBvZiB0aGUgZG9tYWluIHRvIGRpc2NyZXRlIHZhbHVlcyBpbiB0aGUgcmFuZ2UuXG4gICAgLy8gdGhlIGlucHV0IGRvbWFpbiBpcyBzdGlsbCBjb250aW51b3VzIGFuZCBkaXZpZGVkIGludG8gc2xpY2VzIGJhc2VkIG9uIHRoZSBzZXQgb2YgdGhyZXNob2xkIHZhbHVlcy5cbiAgICBsZXQgY29sb3JTY2FsZSA9IHNjYWxlVGhyZXNob2xkKClcbiAgICAgICAgLmRvbWFpbihkb21haW4pXG4gICAgICAgIC5yYW5nZShyYW5nZSk7XG5cbiAgICBibWFwU3ZnLnNlbGVjdCgnI3Rzc0Rpc3RHJykucmVtb3ZlKCk7IC8vIGNsZWFyIGFueSBwcmV2aW91c2x5IHJlbmRlcmVkIFNWRyBET00gb2JqZWN0cy5cbiAgICBsZXQgZyA9IGJtYXBTdmcuc2VsZWN0KCcjZm9jdXNHJykuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoJ2lkJywgJ3Rzc0Rpc3RHJyk7XG4gICAgZy5zZWxlY3RBbGwoJy50cmFjaycpXG4gICAgICAgIC5kYXRhKGJtYXAueFNjYWxlLmRvbWFpbigpKVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgLmNsYXNzZWQoJ3RyYWNrJywgdHJ1ZSlcbiAgICAgICAgLmF0dHIoJ3gnLCAoZCk9PmJtYXAueFNjYWxlKGQpKVxuICAgICAgICAuYXR0cigneScsIGJtYXAueVNjYWxlLnJhbmdlKClbMV0pXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIGJtYXAueFNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgYm1hcC55U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgIC5hdHRyKCdmaWxsJywgKGQpPT57XG4gICAgICAgICAgICBsZXQgZGlzdCA9IE1hdGguYWJzKHBhcnNlRmxvYXQoZC5zcGxpdCgnXycpWzFdKSAtIHRzcyk7XG4gICAgICAgICAgICByZXR1cm4gY29sb3JTY2FsZShkaXN0KTtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoJ3N0cm9rZScsIChkKT0+Ym1hcC52YXJpYW50c0luRXhvbnNbZF0/JyMyMzlkYjgnOicjY2FjYWNhJylcbiAgICAgICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsIChkKT0+Ym1hcC52YXJpYW50c0luRXhvbnNbZF0/JzJweCc6JzFweCcpXG4gICAgICAgIC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBsZXQgZGlzdCA9IE1hdGguYWJzKHBhcnNlRmxvYXQoZC5zcGxpdCgnXycpWzFdKSAtIHRzcyk7XG4gICAgICAgICAgICBsZXQgdHRDb250ZW50ID0gYCR7ZH08YnIvPiR7Ym1hcC5yc0xvb2tVcFtkXX08YnIvPlRTUyBEaXN0YW5jZTogJHtkaXN0fSBicDwvYnI+YDtcbiAgICAgICAgICAgIHR0Q29udGVudCA9IGJtYXAudmFyaWFudHNJbkV4b25zW2RdP3R0Q29udGVudCArIFwiRXhvbiBSZWdpb25cIjogdHRDb250ZW50O1xuICAgICAgICAgICAgYm1hcC50b29sdGlwLnNob3codHRDb250ZW50KTtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIHRydWUpO1xuICAgICAgICB9KVxuICAgICAgICAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBibWFwLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgc2VsZWN0QWxsKCcudHJhY2snKS5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIGZhbHNlKTtcbiAgICAgICAgfSk7XG5cbiAgICBnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLnRleHQoXCJUU1MgUHJveGltaXR5XCIpXG4gICAgICAgIC5hdHRyKFwieFwiLCBibWFwLnhTY2FsZS5yYW5nZSgpWzBdKVxuICAgICAgICAuYXR0cihcInlcIiwgYm1hcC55U2NhbGUucmFuZ2UoKVsxXSArIGJtYXAueVNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpXG4gICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjhweFwiKVxuXG59XG5cbi8qKlxuICogUmVuZGVyIGJ1YmJsZSBtYXAgcmVsYXRlZCBmaWx0ZXJzXG4gKiBAcGFyYW0gaWQge1N0cmluZ30gYSA8ZGl2PiBJRCB3aGVyZSB0aGUgZmlsdGVycyBzaG91bGQgYmUgcmVuZGVyZWQuXG4gKiBAcGFyYW0gaW5mb0lkIHtTdHJpbmd9IGEgPGRpdj4gSUQgd2hlcmUgdGhlIGZpbHRlcmluZyBzdGF0dXMgc2hvdWxkIGJlIHJlcG9ydGVkIHRvLlxuICogQHBhcmFtIGJtYXAge0J1YmJsZU1hcH0gb2YgdGhlIGJ1YmJsZSBtYXBcbiAqIEBwYXJhbSBibWFwU3ZnIHtEM30gb2YgdGhlIGJ1YmJsZSBtYXAncyBTVkdcbiAqIEBwYXJhbSB0aXNzdWVTaXRlVGFibGUge0RpY3Rpb25hcnl9IGEgaGFzaCBvZiB0aXNzdWUgb2JqZWN0cyAod2l0aCB0aGUgYXR0ciB0aXNzdWVTaXRlRGV0YWlsKSBpbmRleGVkIGJ5IHRpc3N1ZVNpdGVEZXRhaWxJZCwgdXNlZCB0byBtYXAgdGlzc3VlU2l0ZURldGFpbElEPT50aXNzdWVTaXRlRGV0YWlsXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckJtYXBGaWx0ZXJzKGlkLCBpbmZvSWQsIG1vZGFsSWQsIGJtYXAsIGJtYXBTdmcsIHRpc3N1ZVNpdGVUYWJsZSl7XG4gICAgY2hlY2tEb21JZChpZCk7XG4gICAgJChgIyR7aWR9YCkuZW1wdHkoKTtcbiAgICBsZXQgcGFuZWxzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ3B2YWx1ZVBhbmVsJyxcbiAgICAgICAgICAgIGNsYXNzOiAnY29sLXhzLTEyIGNvbC1zbS02IGNvbC1sZy0yJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTFweCcsXG4gICAgICAgICAgICBzZWFyY2g6IHtcbiAgICAgICAgICAgICAgICBpZDogJ3B2YWx1ZUxpbWl0JyxcbiAgICAgICAgICAgICAgICBzaXplOiAzLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnLWxvZzxzdWI+MTA8L3N1Yj4ocFZhbHVlKT49J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNsaWRlcjoge1xuICAgICAgICAgICAgICAgIGlkOiAncHZhbHVlU2xpZGVyJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAncmFuZ2UnLFxuICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICBtYXg6IDIwLFxuICAgICAgICAgICAgICAgIHN0ZXA6IDEsXG4gICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnbmVzUGFuZWwnLFxuICAgICAgICAgICAgY2xhc3M6ICdjb2wteHMtMTIgY29sLXNtLTYgY29sLWxnLTInLFxuICAgICAgICAgICAgZm9udFNpemU6ICcxMXB4JyxcbiAgICAgICAgICAgIHNlYXJjaDogIHtcbiAgICAgICAgICAgICAgICBpZDogJ25lc0xpbWl0JyxcbiAgICAgICAgICAgICAgICBzaXplOiAzLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnYWJzKE5FUyk+PSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzbGlkZXI6IHtcbiAgICAgICAgICAgICAgICBpZDogJ25lc1NsaWRlcicsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3JhbmdlJyxcbiAgICAgICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICAgICAgbWF4OiAxLFxuICAgICAgICAgICAgICAgIHN0ZXA6IDAuMSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICd2YXJpYW50UGFuZWwnLFxuICAgICAgICAgICAgZm9udFNpemU6ICcxMXB4JyxcbiAgICAgICAgICAgIGNsYXNzOiAnY29sLXhzLTEyIGNvbC1zbS02IGNvbC1sZy0yJyxcbiAgICAgICAgICAgIHNlYXJjaDoge1xuICAgICAgICAgICAgICAgIGlkOiAndmFyTG9jYXRvcicsXG4gICAgICAgICAgICAgICAgc2l6ZTogMjAsXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdWYXJpYW50IGxvY2F0b3InLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnICBWYXJpYW50IG9yIFJTIElELi4uICdcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH1cbiAgICBdO1xuICAgICAvLyBjcmVhdGUgZWFjaCBzZWFyY2ggc2VjdGlvblxuICAgIC8vLy8vLyBBZGQgY3VzdG9tIERPTXMgdGhhdCBhcmUgbm90IGRlZmluZWQgaW4gdGhlIHBhbmVsczpcblxuICAgIC8vIC0tIGFkZCB0aGUgbGluayB0byB0aGUgdGlzc3VlIGZpbHRlciBtZW51IGhlcmVcbiAgICBsZXQgdGlEaXYgPSAkKCc8ZGl2Lz4nKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnY29sLXhzLTEyIGNvbC1zbS02IGNvbC1sZy0xJylcbiAgICAgICAgIC5jc3MoJ3BhZGRpbmctdG9wJywgJzRweCcpXG4gICAgICAgIC5jc3MoJ21hcmdpbicsICcxcHgnKVxuICAgICAgICAuY3NzKCdmb250LXNpemUnLCAnMTJweCcpXG4gICAgICAgIC5hcHBlbmRUbygkKGAjJHtpZH1gKSk7XG5cbiAgICAkKCc8c3Bhbi8+JylcbiAgICAgICAgLmF0dHIoJ2RhdGEtdG9nZ2xlJywgJ21vZGFsJylcbiAgICAgICAgLmF0dHIoJ2RhdGEtdGFyZ2V0JywgYCMke21vZGFsSWR9YCkgLy8gYk1hcC1tb2RhbCBtdXN0IGJlIGRlZmluZWQgb24gdGhlIGh0bWxcbiAgICAgICAgLmNzcygnbWFyZ2luLWxlZnQnLCAnMnB4JylcbiAgICAgICAgLmNzcygncGFkZGluZy10b3AnLCAnMnB4JylcbiAgICAgICAgLmNzcygnY29sb3InLCAnIzA4NjhhYycpXG4gICAgICAgIC5jc3MoJ2N1cnNvcicsICdwb2ludGVyJylcbiAgICAgICAgLmh0bWwoJzxpIGNsYXNzPVwiZmFzIGZhLWZpbHRlclwiPjwvaT5GaWx0ZXIgVGlzc3Vlczxici8+JylcbiAgICAgICAgLmFwcGVuZFRvKHRpRGl2KTtcblxuICAgIC8vLy8vLyBlbmQgYWRkaW5nIGN1c3RvbSBET01zXG5cbiAgICAvLyBidWlsZCB0aGUgdGlzc3VlIG1lbnVcbiAgICBsZXQgbW9kYWxCb2R5ID0gICQoYCMke21vZGFsSWR9YCkuZmluZCgnLm1vZGFsLWJvZHknKTtcbiAgICBpZigkKGAjJHttb2RhbElkfWApLmZpbmQoXCI6aW5wdXRcIikubGVuZ3RoID09IDApe1xuICAgICAgICAvLyBpZiB0aGUgbWVudSBpcyBlbXB0eVxuICAgICAgICBibWFwLnlTY2FsZS5kb21haW4oKS5mb3JFYWNoKCh5KT0+eyAvLyBjcmVhdGUgYSBtZW51IGl0ZW0gZm9yIGVhY2ggdGlzc3VlXG4gICAgICAgICAgICAkKCc8aW5wdXQvPicpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3ZhbHVlJywgeSlcbiAgICAgICAgICAgICAgICAuYXR0cigndHlwZScsICdjaGVja2JveCcpXG4gICAgICAgICAgICAgICAgLnByb3AoJ2NoZWNrZWQnLCB0cnVlKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhtb2RhbEJvZHkpO1xuICAgICAgICAgICAgJCgnPGxhYmVsLz4nKVxuICAgICAgICAgICAgICAgIC5jc3MoJ2ZvbnQtc2l6ZScsICcxMnB4JylcbiAgICAgICAgICAgICAgICAuY3NzKCdtYXJnaW4tbGVmdCcsICcycHgnKVxuICAgICAgICAgICAgICAgIC5odG1sKHRpc3N1ZVNpdGVUYWJsZVt5XS50aXNzdWVTaXRlRGV0YWlsKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhtb2RhbEJvZHkpO1xuICAgICAgICAgICAgJCgnPGJyLz4nKS5hcHBlbmRUbyhtb2RhbEJvZHkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8vIEFkZCBhbGwgb3RoZXIgZVFUTCBmaWx0ZXIgcGFuZWxzXG4gICAgcGFuZWxCdWlsZGVyKHBhbmVscywgaWQpO1xuXG4gICAgLy8gLS0gYWRkIHRoZSBSUyBJRCBvcHRpb24gaGVyZVxuICAgIGxldCByc0RpdiA9ICQoJzxkaXYvPicpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdjb2wteHMtMTIgY29sLXNtLTYgY29sLWxnLTEnKVxuICAgICAgICAuY3NzKCdwYWRkaW5nLXRvcCcsICcycHgnKVxuICAgICAgICAuY3NzKCdtYXJnaW4nLCAnMXB4JylcbiAgICAgICAgLmNzcygnZm9udC1zaXplJywgJzEycHgnKVxuICAgICAgICAuYXBwZW5kVG8oJChgIyR7aWR9YCkpO1xuICAgIGxldCByYWRpb0J1dHRvbiA9ICQoJzxpbnB1dC8+JylcbiAgICAgICAgLmF0dHIoJ2lkJywgJ3JzU3dpdGNoJylcbiAgICAgICAgLmF0dHIoJ3R5cGUnLCAnY2hlY2tib3gnKVxuICAgICAgICAuY3NzKCdtYXJnaW4tbGVmdCcsICcxMHB4JylcbiAgICAgICAgLmFwcGVuZFRvKHJzRGl2KTtcbiAgICAkKCc8bGFiZWwvPicpXG4gICAgICAgIC5jc3MoJ21hcmdpbi1sZWZ0JywgJzJweCcpXG4gICAgICAgIC5jc3MoJ3BhZGRpbmctdG9wJywgJzJweCcpXG4gICAgICAgIC5jc3MoJ2ZvbnQtc2l6ZScsICcxMXB4JylcbiAgICAgICAgLmh0bWwoJ1VzZSBSUyBJRCcpXG4gICAgICAgIC5hcHBlbmRUbyhyc0Rpdik7XG5cbiAgICAvLy8vLy8gZGVmaW5lIHRoZSBmaWx0ZXIgZXZlbnRzXG4gICAgbGV0IG1pblAgPSAwO1xuICAgIGxldCBtaW5OZXMgPSAwO1xuICAgIGxldCBtaW5MZCA9IDA7XG4gICAgbGV0IGZvY3VzRyA9IGJtYXBTdmcuc2VsZWN0KFwiI2ZvY3VzR1wiKTtcbiAgICBsZXQgbWluaUcgPSBibWFwU3ZnLnNlbGVjdChcIiNtaW5pR1wiKTtcbiAgICBjb25zdCB1cGRhdGVCdWJibGVzID0gKCk9PntcbiAgICAgICAgZm9jdXNHLnNlbGVjdEFsbCgnLmJ1YmJsZS1tYXAtY2VsbCcpXG4gICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAoZCk9PntcbiAgICAgICAgICAgICAgICBpZiAoZC5yIDwgbWluUCkgcmV0dXJuIFwiI2ZmZlwiO1xuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhkLnZhbHVlKSA8IG1pbk5lcykgcmV0dXJuIFwiI2ZmZlwiO1xuICAgICAgICAgICAgICAgIHJldHVybiBibWFwLmNvbG9yU2NhbGUoZC52YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgbGV0IGNvdW50cyA9IDA7XG4gICAgICAgIG1pbmlHLnNlbGVjdEFsbCgnLm1pbmktbWFwLWNlbGwnKVxuICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgKGQpPT57XG4gICAgICAgICAgICAgICAgaWYgKGQuciA8IG1pblApIHJldHVybiBcIiNmZmZcIjtcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoZC52YWx1ZSkgPCBtaW5OZXMpIHJldHVybiBcIiNmZmZcIjtcbiAgICAgICAgICAgICAgICBjb3VudHMgKz0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYm1hcC5jb2xvclNjYWxlKGQudmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICQoYCMke2luZm9JZH1gKS50ZXh0KGBUb3RhbCBlUVRMIGNvdW50czogJHtjb3VudHN9YClcbiAgICB9O1xuXG4gICAgLy8tLS0tIHAtdmFsdWUgZmlsdGVyIGV2ZW50c1xuICAgICQoJyNwdmFsdWVMaW1pdCcpLmtleWRvd24oKGUpPT57XG4gICAgICAgIGlmKGUua2V5Q29kZSA9PSAxMyl7XG4gICAgICAgICAgICBtaW5QID0gcGFyc2VGbG9hdCgkKCcjcHZhbHVlTGltaXQnKS52YWwoKSk7XG4gICAgICAgICAgICB1cGRhdGVCdWJibGVzKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICQoJyNwdmFsdWVTbGlkZXInKS5vbignY2hhbmdlIG1vdXNlbW92ZScsICgpPT57XG4gICAgICAgIGxldCB2ID0gJCgnI3B2YWx1ZVNsaWRlcicpLnZhbCgpO1xuICAgICAgICAkKCcjcHZhbHVlTGltaXQnKS52YWwodik7XG4gICAgICAgIG1pblAgPSB2O1xuICAgICAgICB1cGRhdGVCdWJibGVzKCk7XG4gICAgfSk7XG5cbiAgICAvLy0tLS0gbmVzIGZpbHRlciBldmVudHNcbiAgICAkKCcjbmVzTGltaXQnKS5rZXlkb3duKChlKT0+e1xuICAgICAgICBpZihlLmtleUNvZGUgPT0gMTMpe1xuICAgICAgICAgICAgbWluTmVzID0gcGFyc2VGbG9hdCgkKCcjbmVzTGltaXQnKS52YWwoKSk7XG4gICAgICAgICAgICB1cGRhdGVCdWJibGVzKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICQoJyNuZXNTbGlkZXInKS5vbignY2hhbmdlIG1vdXNlbW92ZScsICgpPT57XG4gICAgICAgIGxldCB2ID0gJCgnI25lc1NsaWRlcicpLnZhbCgpO1xuICAgICAgICAkKCcjbmVzTGltaXQnKS52YWwodik7XG4gICAgICAgIG1pbk5lcyA9IHY7XG4gICAgICAgIHVwZGF0ZUJ1YmJsZXMoKTtcbiAgICB9KTtcblxuICAgIG1pbmlHLnNlbGVjdEFsbCgnLm1pbmktbWFya2VyJylcbiAgICAgICAgLmRhdGEoYm1hcC54U2NhbGVNaW5pLmRvbWFpbigpKVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgLmNsYXNzZWQoJ21pbmktbWFya2VyJywgdHJ1ZSlcbiAgICAgICAgLmF0dHIoJ3gnLCAoZCk9PmJtYXAueFNjYWxlTWluaShkKSlcbiAgICAgICAgLmF0dHIoJ3knLCBibWFwLnlTY2FsZU1pbmkucmFuZ2UoKVsxXSlcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgYm1hcC54U2NhbGVNaW5pLmJhbmR3aWR0aCgpKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgYm1hcC55U2NhbGVNaW5pLmJhbmR3aWR0aCgpKTtcblxuICAgICQoJyN2YXJMb2NhdG9yJykua2V5dXAoKGUpPT57XG4gICAgICAgIGxldCB2ID0gJCgnI3ZhckxvY2F0b3InKS52YWwoKTtcbiAgICAgICAgaWYgKHYubGVuZ3RoID4zKXtcbiAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCh2KTtcbiAgICAgICAgICAgIGZvY3VzRy5zZWxlY3RBbGwoJy5idWJibGUtbWFwLXhsYWJlbCcpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoJ3F1ZXJ5JywgKGQpPT57XG4gICAgICAgICAgICAgICAgICAgIHZhciBib29sID0gcmVnZXgudGVzdChkKXx8cmVnZXgudGVzdChibWFwLnJzTG9va1VwW2RdKXx8cmVnZXgudGVzdChibWFwLnZhckxvb2tVcFtkXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBib29sO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBtaW5pRy5zZWxlY3RBbGwoJy5taW5pLW1hcmtlcicpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgKGQpPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdleC50ZXN0KGQpfHxyZWdleC50ZXN0KGJtYXAucnNMb29rVXBbZF0pfHxyZWdleC50ZXN0KGJtYXAudmFyTG9va1VwW2RdKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9jdXNHLnNlbGVjdEFsbCgnLmJ1YmJsZS1tYXAteGxhYmVsJylcbiAgICAgICAgICAgICAgICAuY2xhc3NlZCgncXVlcnknLCBmYWxzZSk7XG4gICAgICAgICAgICBtaW5pRy5zZWxlY3RBbGwoJy5taW5pLW1hcmtlcicpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICB9KTtcblxuICAgIC8vIHJzSWRcbiAgICAkKCcjcnNTd2l0Y2gnKS5jaGFuZ2UoKCk9PntcbiAgICAgICAgaWYgKCAkKCcjcnNTd2l0Y2gnKS5pcygnOmNoZWNrZWQnKSApIHtcbiAgICAgICAgICAgIGZvY3VzRy5zZWxlY3RBbGwoJy5idWJibGUtbWFwLXhsYWJlbCcpXG4gICAgICAgICAgICAgICAgLnRleHQoKGQpPT5ibWFwLnJzTG9va1VwW2RdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvY3VzRy5zZWxlY3RBbGwoJy5idWJibGUtbWFwLXhsYWJlbCcpXG4gICAgICAgICAgICAgICAgLnRleHQoKGQpPT5ibWFwLnZhckxvb2tVcFtkXSk7XG4gICAgICAgIH1cblxuICAgIH0pO1xufVxuXG4vKipcbiAqIFJlbmRlciB0aGUgTEQgcmVsYXRlZCBmaWx0ZXJzXG4gKiBAcGFyYW0gaWQge1N0cmluZ30gdGhlIDxkaXY+IElEIGZvciByZW5kZXJpbmcgdGhlIGZpbHRlcnNcbiAqIEBwYXJhbSBsZE1hcCB7SGFsZk1hcH0gb2YgdGhlIExEXG4gKiBAcGFyYW0gbGRDYW52YXMge0QzfSBjYW52YXMgb2JqZWN0IG9mIHRoZSBMRFxuICogQHBhcmFtIGxkRyB7RDN9IHRoZSA8Zz4gb2YgdGhlIExEXG4gKiBAcGFyYW0gbGRDb25maWcge09iamVjdH0gb2YgdGhlIGxkIGNvbmZpZ1xuICovXG5mdW5jdGlvbiByZW5kZXJMREZpbHRlcnMoaWQsIGxkTWFwLCBsZENhbnZhcywgbGRHLCBsZENvbmZpZyl7XG4gICAgY2hlY2tEb21JZChpZCk7XG4gICAgbGV0IHBhbmVscyA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdsZFBhbmVsJyxcbiAgICAgICAgICAgIGNsYXNzOiAnY29sLXhzLTEyIGNvbC1zbS02IGNvbC1sZy0yJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTFweCcsXG4gICAgICAgICAgICBzZWFyY2g6ICB7XG4gICAgICAgICAgICAgICAgaWQ6ICdsZExpbWl0JyxcbiAgICAgICAgICAgICAgICBzaXplOiAzLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnTEQgY3V0b2ZmIFI8c3VwPjI8L3N1cD4+PSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzbGlkZXI6IHtcbiAgICAgICAgICAgICAgICBpZDogJ2xkU2xpZGVyJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAncmFuZ2UnLFxuICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICBtYXg6IDEsXG4gICAgICAgICAgICAgICAgc3RlcDogMC4xLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgXTtcbiAgICBwYW5lbEJ1aWxkZXIocGFuZWxzLCBpZCk7XG5cbiAgICAvLyBkZWZpbmUgdGhlIGZpbHRlciBldmVudHM6XG4gICAgbGV0IG1pbkxkID0gMDtcblxuICAgIGNvbnN0IHVwZGF0ZUxEID0gKCk9PntcbiAgICAgICAgbGRNYXAuZmlsdGVyZWREYXRhID0gbGRNYXAuX2ZpbHRlcihsZE1hcC5kYXRhLCBtaW5MZCk7XG4gICAgICAgIGxkRy5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgICAgICBsZE1hcC5kcmF3KGxkQ2FudmFzLCBsZEcsIGxkQ29uZmlnLCBbMCwxXSwgZmFsc2UsIHVuZGVmaW5lZClcbiAgICB9O1xuICAgICAvLy0tLS0gTEQgZmlsdGVyIGV2ZW50c1xuICAgICQoJyNsZExpbWl0Jykua2V5ZG93bigoZSk9PntcbiAgICAgICAgaWYoZS5rZXlDb2RlID09IDEzKSB7XG4gICAgICAgICAgICBsZXQgdiA9IHBhcnNlRmxvYXQoJCgnI2xkTGltaXQnKS52YWwoKSk7XG4gICAgICAgICAgICBtaW5MZCA9IHY7XG4gICAgICAgICAgICB1cGRhdGVMRCgpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkKCcjbGRTbGlkZXInKS5vbignY2hhbmdlIG1vdXNlbW92ZScsICgpPT57XG4gICAgICAgIGxldCB2ID0gJCgnI2xkU2xpZGVyJykudmFsKCk7XG4gICAgICAgICQoJyNsZExpbWl0JykudmFsKHYpO1xuICAgICAgICBtaW5MZCA9IHY7XG4gICAgICAgIHVwZGF0ZUxEKCk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogQnVpbGQgdGhlIGh0bWwgZmlsdGVyIHBhbmVsc1xuICogQHBhcmFtIHBhbmVscyB7TGlzdH0gb2YgcGFuZWxzXG4gKiBAcGFyYW0gaWQge1N0cmluZ30gb2YgdGhlIDxkaXY+IHRvIHJlbmRlciB0aGUgcGFuZWxzXG4gKi9cbmZ1bmN0aW9uIHBhbmVsQnVpbGRlcihwYW5lbHMsIGlkKXtcblxuICAgIHBhbmVscy5mb3JFYWNoKChwLCBpKT0+e1xuICAgICAgICBpZiAoJChgIyR7cC5pZH1gKS5sZW5ndGggPT0gMCkgeyAvLyBpZiBpdCBkb2Vzbid0IGFscmVhZHkgZXhpc3QgaW4gSFRNTCBkb2N1bWVudCwgdGhlbiBjcmVhdGUgaXRcbiAgICAgICAgICAgIGxldCBkaXYgPSAkKCc8ZGl2Lz4nKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsIHAuaWQpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgcC5jbGFzcylcbiAgICAgICAgICAgICAgICAuY3NzKCdmb250LXNpemUnLCBwLmZvbnRTaXplKVxuICAgICAgICAgICAgICAgIC5jc3MoJ21hcmdpbicsICcxcHgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ3BhZGRpbmctdG9wJywgJzJweCcpXG4gICAgICAgICAgICAgICAgLy8gLmNzcyhcIndoaXRlLXNwYWNlXCIsIFwibm93cmFwXCIpXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKCQoYCMke2lkfWApKTtcbiAgICAgICAgICAgIGRpdi5hZGRDbGFzcyhwLmNsYXNzKTtcblxuICAgICAgICAgICAgLy8gYWRkIHRoZSBzZWFyY2ggYm94XG4gICAgICAgICAgICAkKCc8bGFiZWwvPicpXG4gICAgICAgICAgICAgICAgLmNzcygnZm9udC13ZWlnaHQnLCAnbm9ybWFsJylcbiAgICAgICAgICAgICAgICAuaHRtbChwLnNlYXJjaC5sYWJlbClcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oZGl2KTtcblxuICAgICAgICAgICAgbGV0IGlucHV0ID0gJCgnPGlucHV0Lz4nKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsIHAuc2VhcmNoLmlkKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd2YWx1ZScsIHAuc2VhcmNoLnZhbHVlKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdzaXplJywgcC5zZWFyY2guc2l6ZSlcbiAgICAgICAgICAgICAgICAuYXR0cigncGxhY2Vob2xkZXInLCBwLnNlYXJjaC5wbGFjZWhvbGRlcilcbiAgICAgICAgICAgICAgICAuY3NzKCdtYXJnaW4tbGVmdCcsICcycHgnKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhkaXYpO1xuXG4gICAgICAgICAgICAvLyBhZGQgdGhlIHNsaWRlciBpZiBkZWZpbmVkXG4gICAgICAgICAgICBpZiAocC5zbGlkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICQoJzxpbnB1dC8+JylcbiAgICAgICAgICAgICAgICAuYXR0cignaWQnLCBwLnNsaWRlci5pZClcbiAgICAgICAgICAgICAgICAuYXR0cigndmFsdWUnLCBwLnNsaWRlci52YWx1ZSlcbiAgICAgICAgICAgICAgICAuYXR0cigndHlwZScsIHAuc2xpZGVyLnR5cGUpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ21pbicsIHAuc2xpZGVyLm1pbilcbiAgICAgICAgICAgICAgICAuYXR0cignbWF4JywgcC5zbGlkZXIubWF4KVxuICAgICAgICAgICAgICAgIC5hdHRyKCdzdGVwJywgcC5zbGlkZXIuc3RlcClcbiAgICAgICAgICAgICAgICAuY3NzKCdtYXJnaW4tbGVmdCcsICcwcHgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ3dpZHRoJywgJzEwMHB4JylcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oZGl2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBhZGQgdGhlIG5ldyBlbGVtZW50IHRvIHRoZSBkYXNoYm9hcmRcbiAgICB9KTtcbn1cblxuIC8vIHRvZG8gcmVwb3J0IHAtdmFsdWVcbmZ1bmN0aW9uIGFkZEJ1YmJsZUNsaWNrRXZlbnQoYm1hcCwgYm1hcFN2ZywgcGFyKSB7XG4gICAgbGV0IGRpYWxvZ0RpdklkID0gcGFyLmlkICsgXCJ2aW9saW4tZGlhbG9nXCI7XG4gICAgY3JlYXRlRGlhbG9nKHBhci5kaXZEYXNoYm9hcmQsIHBhci5pZCArIFwidmlvbGluLWRpYWxvZ1wiLCBcImVRVEwgVmlvbGluIFBsb3QgRGlhbG9nXCIpO1xuICAgIGJtYXBTdmcuc2VsZWN0QWxsKCcuYnViYmxlLW1hcC1jZWxsJylcbiAgICAgICAgLm9uKFwiY2xpY2tcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICQoYCMke2RpYWxvZ0RpdklkfWApLmRpYWxvZygnb3BlbicpO1xuICAgICAgICAgICAgbGV0IHBsb3QgPSAkKCc8ZGl2Lz4nKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdiTWFwLWRpYWxvZycpXG4gICAgICAgICAgICAgICAgLmNzcygnZmxvYXQnLCAnbGVmdCcpXG4gICAgICAgICAgICAgICAgLmNzcygnbWFyZ2luJywgJzIwcHgnKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbygkKGAjYk1hcC1jb250ZW50YCkpO1xuXG4gICAgICAgICAgICAvLyBhZGQgYSBoZWFkZXIgc2VjdGlvblxuICAgICAgICAgICAgbGV0IGhlYWQgPSAkKCc8ZGl2Lz4nKS5hcHBlbmRUbyhwbG90KTtcbiAgICAgICAgICAgIC8vIGFkZCBhIHdpbmRvdy1jbG9zZSBpY29uXG4gICAgICAgICAgICAkKCc8aS8+JykuYXR0cignY2xhc3MnLCAnZmEgZmEtd2luZG93LWNsb3NlJylcbiAgICAgICAgICAgICAgICAuY3NzKCdtYXJnaW4tcmlnaHQnLCAnMnB4JylcbiAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBwbG90LnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oaGVhZCk7XG5cbiAgICAgICAgICAgICQoJzxzcGFuLz4nKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd0aXRsZScpXG4gICAgICAgICAgICAgICAgLmh0bWwoYCR7ZC5kaXNwbGF5WH08YnIvPiR7ZC5kaXNwbGF5WX1gKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhoZWFkKTtcblxuICAgICAgICAgICAgLy8gYWRkIHRoZSB2aW9saW4gcGxvdFxuICAgICAgICAgICAgbGV0IGlkID0gXCJkRXF0bFwiICsgRGF0ZS5ub3coKS50b1N0cmluZygpOyAvLyByYW5kb20gSUQgZ2VuZXJhdG9yXG4gICAgICAgICAgICAkKCc8ZGl2Lz4nKS5hdHRyKCdpZCcsIGlkKS5hcHBlbmRUbyhwbG90KTtcblxuICAgICAgICAgICAgbGV0IHZDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIGRhdGE6IHVuZGVmaW5lZCwgLy8gdGhpcyB3b3VsZCBiZSBhc3NpZ25lZCBieSB0aGUgZXF0bCB2aW9saW4gZnVuY3Rpb25cbiAgICAgICAgICAgICAgICB3aWR0aDogMjUwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjAwLFxuICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDUwLFxuICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAyMCxcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IDIwLFxuICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogNTAsXG4gICAgICAgICAgICAgICAgc2hvd0RpdmlkZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHhQYWRkaW5nOiAwLjMsXG4gICAgICAgICAgICAgICAgeUxhYmVsOiBcIk5vcm0uIEV4cHJlc3Npb25cIixcbiAgICAgICAgICAgICAgICBzaG93U3ViWDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93WDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc3ViWEFuZ2xlOiAwLFxuICAgICAgICAgICAgICAgIHhBbmdsZTogMCxcbiAgICAgICAgICAgICAgICBzaG93V2hpc2tlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0xlZ2VuZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd1NhbXBsZVNpemU6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBlcXRsVmlvbGluUGxvdFJlbmRlcih2Q29uZmlnLCBkLmdlbmNvZGVJZCwgZC52YXJpYW50SWQsIGQudGlzc3VlU2l0ZURldGFpbElkLCBkLmRpc3BsYXlZLCBibWFwLnVybHMpXG5cbiAgICAgICAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGlhbG9nIHBvcHVwIHdpbmRvdyBmb3IgdGhlIGVRVEwgdmlvbGluIHBsb3RzXG4gKiBAcGFyYW0gcGFyZW50RGl2SWQge1N0cmluZ30gd2hlcmUgdG8gY3JlYXRlIHRoZSBkaWFsb2dcbiAqIEBwYXJhbSBkaWFsb2dEaXZJZCB7U3RyaW5nfVxuICogQHBhcmFtIHRpdGxlIHtTdHJpbmd9IHRoZSB0aXRsZSBvZiB0aGUgZGlhbG9nIHdpbmRvd1xuICovXG5mdW5jdGlvbiAgY3JlYXRlRGlhbG9nKHBhcmVudERpdklkLCBkaWFsb2dEaXZJZCwgdGl0bGUpe1xuICAgICAvLyBqcXVlcnkgVUkgZGlhbG9nXG4gICAgY2hlY2tEb21JZChwYXJlbnREaXZJZCk7XG4gICAgbGV0IHBhcmVudCA9ICQoYCMke3BhcmVudERpdklkfWApO1xuICAgIGxldCBkaWFsb2cgPSAkKCc8ZGl2Lz4nKVxuICAgICAgICAuYXR0cignaWQnLCBkaWFsb2dEaXZJZClcbiAgICAgICAgLmF0dHIoJ3RpdGxlJywgdGl0bGUpXG4gICAgICAgIC5hcHBlbmRUbyhwYXJlbnQpO1xuICAgIGxldCBjbGVhckRpdiA9ICQoJzxkaXYvPicpXG4gICAgICAgIC8vIC5hdHRyKCdjbGFzcycsICdiTWFwLWNsZWFyJylcbiAgICAgICAgLmh0bWwoXCJDbGVhciBBbGxcIilcbiAgICAgICAgLmFwcGVuZFRvKGRpYWxvZyk7XG4gICAgbGV0IGNvbnRlbnREaXYgPSAkKCc8ZGl2Lz4nKVxuICAgICAgICAuYXR0cignaWQnLCAnYk1hcC1jb250ZW50JylcbiAgICAgICAgLy8gLmF0dHIoJ2NsYXNzJywgJ2JNYXAtY29udGVudCcpXG4gICAgICAgIC5hcHBlbmRUbyhkaWFsb2cpO1xuICAgIGRpYWxvZy5kaWFsb2coe1xuICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgIGF1dG9PcGVuOiBmYWxzZVxuICAgIH0pO1xuICAgIGNsZWFyRGl2LmNsaWNrKGZ1bmN0aW9uKCl7XG4gICAgICAgIGNvbnRlbnREaXYuZW1wdHkoKTtcbiAgICB9KTtcbn1cblxuXG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aHJlc2hvbGQoKSB7XG4gIHZhciBkb21haW4gPSBbMC41XSxcbiAgICAgIHJhbmdlID0gWzAsIDFdLFxuICAgICAgbiA9IDE7XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIGlmICh4IDw9IHgpIHJldHVybiByYW5nZVtiaXNlY3QoZG9tYWluLCB4LCAwLCBuKV07XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gc2xpY2UuY2FsbChfKSwgbiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCAtIDEpLCBzY2FsZSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGggLSAxKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgdmFyIGkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgIHJldHVybiBbZG9tYWluW2kgLSAxXSwgZG9tYWluW2ldXTtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRocmVzaG9sZCgpXG4gICAgICAgIC5kb21haW4oZG9tYWluKVxuICAgICAgICAucmFuZ2UocmFuZ2UpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgOiBuZXcgU2VsZWN0aW9uKFtzZWxlY3RvciA9PSBudWxsID8gW10gOiBzZWxlY3Rvcl0sIHJvb3QpO1xufVxuIl0sIm5hbWVzIjpbIkVPTCIsIkVPRiIsIlFVT1RFIiwiTkVXTElORSIsIlJFVFVSTiIsIm9iamVjdENvbnZlcnRlciIsImNvbHVtbnMiLCJGdW5jdGlvbiIsIm1hcCIsIm5hbWUiLCJpIiwiSlNPTiIsInN0cmluZ2lmeSIsImpvaW4iLCJkZWxpbWl0ZXIiLCJyZUZvcm1hdCIsIlJlZ0V4cCIsIkRFTElNSVRFUiIsImNoYXJDb2RlQXQiLCJwYXJzZVJvd3MiLCJ0ZXh0IiwiZiIsInQiLCJyb3dzIiwiTiIsImxlbmd0aCIsIkkiLCJuIiwiZW9mIiwiZW9sIiwidG9rZW4iLCJjIiwiaiIsInNsaWNlIiwicmVwbGFjZSIsInJvdyIsInB1c2giLCJmb3JtYXRSb3ciLCJmb3JtYXRWYWx1ZSIsInRlc3QiLCJwYXJzZSIsImNvbnZlcnQiLCJvYmplY3QiLCJjdXN0b21Db252ZXJ0ZXIiLCJmb3JtYXQiLCJjb2x1bW5TZXQiLCJPYmplY3QiLCJjcmVhdGUiLCJmb3JFYWNoIiwiY29sdW1uIiwiaW5mZXJDb2x1bW5zIiwiY29uY2F0IiwiZm9ybWF0Um93cyIsImRzdiIsInJlc3BvbnNlSnNvbiIsInJlc3BvbnNlIiwib2siLCJFcnJvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJqc29uIiwiaW5wdXQiLCJpbml0IiwiZmV0Y2giLCJ0aGVuIiwibm9vcCIsInZhbHVlIiwiZGlzcGF0Y2giLCJhcmd1bWVudHMiLCJfIiwiRGlzcGF0Y2giLCJ0aGlzIiwiZ2V0IiwidHlwZSIsInNldCIsImNhbGxiYWNrIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJvbiIsInR5cGVuYW1lIiwidHlwZXMiLCJUIiwidHJpbSIsInNwbGl0IiwiaW5kZXhPZiIsImhhc093blByb3BlcnR5IiwiY29weSIsImNhbGwiLCJ0aGF0IiwiYXJncyIsIkFycmF5IiwiYXBwbHkiLCJ4aHRtbCIsInN2ZyIsInhsaW5rIiwieG1sIiwieG1sbnMiLCJwcmVmaXgiLCJuYW1lc3BhY2VzIiwic3BhY2UiLCJsb2NhbCIsImZ1bGxuYW1lIiwibmFtZXNwYWNlIiwib3duZXJEb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImRvY3VtZW50IiwidXJpIiwibmFtZXNwYWNlVVJJIiwiZG9jdW1lbnRFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsIm5vbmUiLCJzZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3IiLCJlbXB0eSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXRjaGVyIiwibWF0Y2hlcyIsImVsZW1lbnQiLCJ2ZW5kb3JNYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwidXBkYXRlIiwiRW50ZXJOb2RlIiwicGFyZW50IiwiZGF0dW0iLCJfbmV4dCIsIl9wYXJlbnQiLCJfX2RhdGFfXyIsImFwcGVuZENoaWxkIiwiY2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJuZXh0Iiwia2V5UHJlZml4IiwiYmluZEluZGV4IiwiZ3JvdXAiLCJlbnRlciIsImV4aXQiLCJkYXRhIiwibm9kZSIsImdyb3VwTGVuZ3RoIiwiZGF0YUxlbmd0aCIsImJpbmRLZXkiLCJrZXkiLCJrZXlWYWx1ZSIsIm5vZGVCeUtleVZhbHVlIiwia2V5VmFsdWVzIiwiYXNjZW5kaW5nIiwiYSIsImIiLCJOYU4iLCJkZWZhdWx0VmlldyIsInN0eWxlVmFsdWUiLCJzdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJnZXRDb21wdXRlZFN0eWxlIiwiY2xhc3NBcnJheSIsInN0cmluZyIsImNsYXNzTGlzdCIsIkNsYXNzTGlzdCIsIl9ub2RlIiwiX25hbWVzIiwiZ2V0QXR0cmlidXRlIiwiY2xhc3NlZEFkZCIsIm5hbWVzIiwibGlzdCIsImFkZCIsImNsYXNzZWRSZW1vdmUiLCJyZW1vdmUiLCJ0ZXh0UmVtb3ZlIiwidGV4dENvbnRlbnQiLCJodG1sUmVtb3ZlIiwiaW5uZXJIVE1MIiwicmFpc2UiLCJuZXh0U2libGluZyIsInBhcmVudE5vZGUiLCJsb3dlciIsInByZXZpb3VzU2libGluZyIsImZpcnN0Q2hpbGQiLCJjb25zdGFudE51bGwiLCJyZW1vdmVDaGlsZCIsInNlbGVjdGlvbl9jbG9uZVNoYWxsb3ciLCJjbG9uZU5vZGUiLCJzZWxlY3Rpb25fY2xvbmVEZWVwIiwic2V0QXR0cmlidXRlIiwic3BsaWNlIiwiY29udGFpbnMiLCJmaWx0ZXJFdmVudHMiLCJldmVudCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwiZmlsdGVyQ29udGV4dExpc3RlbmVyIiwibGlzdGVuZXIiLCJpbmRleCIsImNvbnRleHRMaXN0ZW5lciIsInJlbGF0ZWQiLCJyZWxhdGVkVGFyZ2V0IiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJldmVudDEiLCJldmVudDAiLCJvblJlbW92ZSIsIl9fb24iLCJvIiwibSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYXB0dXJlIiwib25BZGQiLCJ3cmFwIiwiZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50IiwicGFyYW1zIiwid2luZG93IiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwicm9vdCIsIlNlbGVjdGlvbiIsImdyb3VwcyIsInBhcmVudHMiLCJfZ3JvdXBzIiwiX3BhcmVudHMiLCJzZWxlY3Rpb24iLCJzb3VyY2UiLCJjdXJyZW50Iiwic291cmNlRXZlbnQiLCJjaGFuZ2VkVG91Y2hlcyIsIm93bmVyU1ZHRWxlbWVudCIsImNyZWF0ZVNWR1BvaW50IiwicG9pbnQiLCJ4IiwiY2xpZW50WCIsInkiLCJjbGllbnRZIiwibWF0cml4VHJhbnNmb3JtIiwiZ2V0U2NyZWVuQ1RNIiwiaW52ZXJzZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwiY2xpZW50TGVmdCIsInRvcCIsImNsaWVudFRvcCIsInByZXZlbnREZWZhdWx0Iiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiZmFjdG9yeSIsImV4dGVuZCIsImRlZmluaXRpb24iLCJDb2xvciIsInNlbGVjdCIsInN1Ymdyb3VwcyIsInN1Ym5vZGUiLCJzdWJncm91cCIsInNlbGVjdEFsbCIsInNlbGVjdG9yQWxsIiwiZmlsdGVyIiwibWF0Y2giLCJzaXplIiwiZWFjaCIsImJpbmQiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJwcmV2aW91cyIsImkwIiwiaTEiLCJfZW50ZXIiLCJfZXhpdCIsInNwYXJzZSIsIm1lcmdlIiwiZ3JvdXBzMCIsImdyb3VwczEiLCJtMCIsIm0xIiwiTWF0aCIsIm1pbiIsIm1lcmdlcyIsImdyb3VwMCIsImdyb3VwMSIsIm9yZGVyIiwic29ydCIsImNvbXBhcmUiLCJjb21wYXJlTm9kZSIsInNvcnRncm91cHMiLCJzb3J0Z3JvdXAiLCJub2RlcyIsImF0dHIiLCJnZXRBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlIiwidiIsInNldEF0dHJpYnV0ZU5TIiwicHJpb3JpdHkiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFByb3BlcnR5IiwicHJvcGVydHkiLCJjbGFzc2VkIiwiaHRtbCIsImFwcGVuZCIsImNyZWF0b3IiLCJpbnNlcnQiLCJiZWZvcmUiLCJjbG9uZSIsImRlZXAiLCJ0eXBlbmFtZXMiLCJwYXJzZVR5cGVuYW1lcyIsInJlSSIsInJlTiIsInJlUCIsInJlSGV4MyIsInJlSGV4NiIsInJlUmdiSW50ZWdlciIsInJlUmdiUGVyY2VudCIsInJlUmdiYUludGVnZXIiLCJyZVJnYmFQZXJjZW50IiwicmVIc2xQZXJjZW50IiwicmVIc2xhUGVyY2VudCIsIm5hbWVkIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJjb2xvciIsInRvTG93ZXJDYXNlIiwiZXhlYyIsIlJnYiIsInBhcnNlSW50IiwicmdibiIsInJnYmEiLCJoc2xhIiwiciIsImciLCJyZ2JDb252ZXJ0IiwicmdiIiwib3BhY2l0eSIsImhleCIsIm1heCIsInJvdW5kIiwidG9TdHJpbmciLCJoIiwicyIsImwiLCJIc2wiLCJoc2wycmdiIiwibTIiLCJkZWZpbmUiLCJkaXNwbGF5YWJsZSIsImJyaWdodGVyIiwiayIsInBvdyIsImRhcmtlciIsImlzTmFOIiwiaHNsQ29udmVydCIsImRlZzJyYWQiLCJQSSIsInJhZDJkZWciLCJYbiIsIlluIiwiWm4iLCJ0MCIsInQxIiwidDIiLCJ0MyIsImxhYkNvbnZlcnQiLCJMYWIiLCJIY2wiLCJjb3MiLCJzaW4iLCJ6IiwicmdiMmxyZ2IiLCJ4eXoybGFiIiwibGFiMnh5eiIsImxyZ2IycmdiIiwiYXRhbjIiLCJzcXJ0IiwiaGNsQ29udmVydCIsIkEiLCJCIiwiQyIsIkQiLCJFIiwiRUQiLCJFQiIsIkJDX0RBIiwiY3ViZWhlbGl4IiwiQ3ViZWhlbGl4IiwiYmwiLCJjdWJlaGVsaXhDb252ZXJ0IiwibGluZWFyIiwiZ2FtbWEiLCJub2dhbW1hIiwiZXhwb25lbnRpYWwiLCJjb25zdGFudCIsImNvc2giLCJzaW5oIiwicmdiR2FtbWEiLCJzdGFydCIsImVuZCIsImNvbG9yUmdiIiwic3BsaW5lIiwicmdiQmFzaXMiLCJ2YWx1ZXMiLCJmbG9vciIsInYxIiwidjIiLCJ2MCIsInYzIiwiYmFzaXMiLCJjb2xvcnMiLCJyZUEiLCJyZUIiLCJhbSIsImJtIiwiYnMiLCJiaSIsImxhc3RJbmRleCIsInEiLCJudW1iZXIiLCJvbmUiLCJ6ZXJvIiwiRGF0ZSIsInNldFRpbWUiLCJpc0FycmF5IiwibmIiLCJuYSIsInZhbHVlT2YiLCJjc3NOb2RlIiwiY3NzUm9vdCIsImNzc1ZpZXciLCJzdmdOb2RlIiwiZGVncmVlcyIsImlkZW50aXR5IiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJyb3RhdGUiLCJza2V3WCIsInNjYWxlWCIsInNjYWxlWSIsImUiLCJhdGFuIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm0iLCJweENvbW1hIiwicHhQYXJlbiIsImRlZ1BhcmVuIiwicG9wIiwieGEiLCJ5YSIsInhiIiwieWIiLCJ0cmFuc2xhdGUiLCJzY2FsZSIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwidHJhbnNmb3JtIiwiZGVjb21wb3NlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmciLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJtYXRyaXgiLCJTUVJUMiIsImh1ZSIsImN1YmVoZWxpeEdhbW1hIiwiY29sb3JDdWJlaGVsaXgiLCJ0YXNrSGVhZCIsInRhc2tUYWlsIiwiY3ViZWhlbGl4TG9uZyIsImZyYW1lIiwidGltZW91dCIsImludGVydmFsIiwicG9rZURlbGF5IiwiY2xvY2tMYXN0IiwiY2xvY2tOb3ciLCJjbG9ja1NrZXciLCJjbG9jayIsInBlcmZvcm1hbmNlIiwibm93Iiwic2V0RnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwiY2xlYXJOb3ciLCJUaW1lciIsIl9jYWxsIiwiX3RpbWUiLCJ0aW1lciIsImRlbGF5IiwidGltZSIsInJlc3RhcnQiLCJ3YWtlIiwidGltZXJGbHVzaCIsIkluZmluaXR5Iiwic2xlZXAiLCJuYXAiLCJwb2tlIiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiZWxhcHNlZCIsInN0b3AiLCJUeXBlRXJyb3IiLCJlbXB0eU9uIiwiZW1wdHlUd2VlbiIsIkNSRUFURUQiLCJTQ0hFRFVMRUQiLCJTVEFSVElORyIsIlNUQVJURUQiLCJSVU5OSU5HIiwiRU5ESU5HIiwiRU5ERUQiLCJpZCIsInRpbWluZyIsInNjaGVkdWxlcyIsIl9fdHJhbnNpdGlvbiIsInNlbGYiLCJ0d2VlbiIsInN0YXRlIiwidGljayIsImR1cmF0aW9uIiwiZWFzZSIsInNjaGVkdWxlIiwiYWN0aXZlIiwidHdlZW5WYWx1ZSIsInRyYW5zaXRpb24iLCJfaWQiLCJpbnRlcnBvbGF0ZU51bWJlciIsImludGVycG9sYXRlUmdiIiwiaW50ZXJwb2xhdGVTdHJpbmciLCJUcmFuc2l0aW9uIiwiX25hbWUiLCJuZXdJZCIsInNlbGVjdGlvbl9wcm90b3R5cGUiLCJjaGlsZHJlbiIsImluaGVyaXQiLCJpZDAiLCJpZDEiLCJvbjAiLCJvbjEiLCJzaXQiLCJldmVyeSIsIm9uRnVuY3Rpb24iLCJpbnRlcnBvbGF0ZSIsImF0dHJUd2VlbiIsInZhbHVlMDAiLCJ2YWx1ZTEwIiwiaW50ZXJwb2xhdGUwIiwidmFsdWUwIiwidmFsdWUxIiwiX3ZhbHVlIiwic3R5bGVUd2VlbiIsInN0eWxlUmVtb3ZlIiwic3R5bGVSZW1vdmVFbmQiLCJzdHlsZUZ1bmN0aW9uIiwic3R5bGVDb25zdGFudCIsInRleHRGdW5jdGlvbiIsInRleHRDb25zdGFudCIsInR3ZWVuMCIsInR3ZWVuMSIsImVhc2VDb25zdGFudCIsImRlZmF1bHRUaW1pbmciLCJub3Byb3BhZ2F0aW9uIiwiaW50ZXJydXB0IiwiTU9ERV9EUkFHIiwiTU9ERV9TUEFDRSIsIk1PREVfSEFORExFIiwiTU9ERV9DRU5URVIiLCJYIiwiaGFuZGxlcyIsIm91dHB1dCIsInh5IiwiWSIsIlhZIiwiY3Vyc29ycyIsIm92ZXJsYXkiLCJ3IiwibnciLCJuZSIsInNlIiwic3ciLCJmbGlwWCIsImZsaXBZIiwic2lnbnNYIiwic2lnbnNZIiwiZGVmYXVsdEZpbHRlciIsImJ1dHRvbiIsImRlZmF1bHRFeHRlbnQiLCJ3aWR0aCIsImhlaWdodCIsIl9fYnJ1c2giLCJleHRlbnQiLCJicnVzaFgiLCJicnVzaCIsImRpbSIsInRvdWNoZW5kaW5nIiwibGlzdGVuZXJzIiwiaGFuZGxlU2l6ZSIsImluaXRpYWxpemUiLCJoYW5kbGUiLCJyZWRyYXciLCJzdGFydGVkIiwiZW1pdHRlciIsIkVtaXR0ZXIiLCJ0b3VjaGVzIiwibm9ldmVudCIsIncwIiwidzEiLCJuMCIsIm4xIiwiZTAiLCJlMSIsInMwIiwiczEiLCJkeCIsImR5IiwibW92aW5nIiwibG9ja1giLCJsb2NrWSIsInRhcmdldCIsIm1vZGUiLCJtZXRhS2V5IiwiYWx0S2V5Iiwic2lnblgiLCJzaWduWSIsIlciLCJTIiwic2hpZnRpbmciLCJzaGlmdEtleSIsInBvaW50MCIsIm1vdXNlIiwiZW1pdCIsImJlZm9yZXN0YXJ0IiwibW92ZWQiLCJlbmRlZCIsInZpZXciLCJrZXlDb2RlIiwibW92ZSIsIl9fbm9zZWxlY3QiLCJNb3pVc2VyU2VsZWN0IiwiZHJhZ0Rpc2FibGUiLCJwb2ludDEiLCJhYnMiLCJub2NsaWNrIiwiZHJhZ0VuYWJsZSIsInNlbGVjdGlvbjAiLCJzZWxlY3Rpb24xIiwic3RhcnRpbmciLCJjdXN0b21FdmVudCIsImJpc2VjdFJpZ2h0IiwibG8iLCJoaSIsIm1pZCIsInJpZ2h0IiwiYXJyYXkiLCJ2YWx1ZW9mIiwiZGVsdGEiLCJtZWFuIiwic3VtIiwidmFyaWFuY2UiLCJzdGVwIiwiY2VpbCIsInJhbmdlIiwiZTEwIiwiZTUiLCJlMiIsInRpY2tJbmNyZW1lbnQiLCJjb3VudCIsInBvd2VyIiwibG9nIiwiTE4xMCIsImVycm9yIiwicCIsIm51bWJlcnMiLCJxdWFudGlsZSIsIk1hcCIsInNvcnRWYWx1ZXMiLCJyb2xsdXAiLCJuZXN0Iiwia2V5cyIsInNvcnRLZXlzIiwiZGVwdGgiLCJjcmVhdGVSZXN1bHQiLCJzZXRSZXN1bHQiLCJ2YWx1ZXNCeUtleSIsInJlc3VsdCIsImNyZWF0ZU9iamVjdCIsInNldE9iamVjdCIsImNyZWF0ZU1hcCIsInNldE1hcCIsImVudHJpZXMiLCJzb3J0S2V5IiwiU2V0IiwiaGFzIiwiY2xlYXIiLCJwcm90byIsImltcGxpY2l0IiwiYmFuZCIsImJhbmR3aWR0aCIsIm9yZGluYWwiLCJkb21haW4iLCJ1bmtub3duIiwidW5kZWZpbmVkIiwib3JkaW5hbFJhbmdlIiwicGFkZGluZ0lubmVyIiwicGFkZGluZ091dGVyIiwiYWxpZ24iLCJyZXNjYWxlIiwicmV2ZXJzZSIsInNlcXVlbmNlIiwicmFuZ2VSb3VuZCIsInBhZGRpbmciLCJ1bml0IiwiZGVpbnRlcnBvbGF0ZUxpbmVhciIsImJpbWFwIiwiZGVpbnRlcnBvbGF0ZSIsInJlaW50ZXJwb2xhdGUiLCJkMCIsImQxIiwicjAiLCJyMSIsInBvbHltYXAiLCJiaXNlY3QiLCJjbGFtcCIsImNvbnRpbnVvdXMiLCJwaWVjZXdpc2UiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZGVpbnRlcnBvbGF0ZUNsYW1wIiwiaW52ZXJ0IiwicmVpbnRlcnBvbGF0ZUNsYW1wIiwiaW50ZXJwb2xhdGVSb3VuZCIsInRvRXhwb25lbnRpYWwiLCJjb2VmZmljaWVudCIsImZvcm1hdERlY2ltYWwiLCJwcmVmaXhFeHBvbmVudCIsInJlIiwiZm9ybWF0U3BlY2lmaWVyIiwic3BlY2lmaWVyIiwiRm9ybWF0U3BlY2lmaWVyIiwiZmlsbCIsInNpZ24iLCJzeW1ib2wiLCJjb21tYSIsInByZWNpc2lvbiIsImV4cG9uZW50IiwiJSIsInRvRml4ZWQiLCJ0b1ByZWNpc2lvbiIsImZvcm1hdFJvdW5kZWQiLCJ0b1VwcGVyQ2FzZSIsImxvY2FsZSIsImZvcm1hdFByZWZpeCIsInByZWZpeGVzIiwiZ3JvdXBpbmciLCJ0aG91c2FuZHMiLCJzdWJzdHJpbmciLCJjdXJyZW5jeSIsImRlY2ltYWwiLCJudW1lcmFscyIsImZvcm1hdE51bWVyYWxzIiwicGVyY2VudCIsIm5ld0Zvcm1hdCIsImZvcm1hdFR5cGVzIiwic3VmZml4IiwiZm9ybWF0VHlwZSIsIm1heWJlU3VmZml4IiwidmFsdWVQcmVmaXgiLCJ2YWx1ZVN1ZmZpeCIsInZhbHVlTmVnYXRpdmUiLCJvdXQiLCJmb3JtYXRUcmltIiwic3RlcDAiLCJzdGVwMSIsInRpY2tTdGVwIiwicHJlY2lzaW9uUHJlZml4IiwicHJlY2lzaW9uUm91bmQiLCJwcmVjaXNpb25GaXhlZCIsImxpbmVhcmlzaCIsInRpY2tzIiwiaXNGaW5pdGUiLCJ0aWNrRm9ybWF0IiwibmljZSIsImZvcm1hdExvY2FsZSIsIm5ld0ludGVydmFsIiwiZmxvb3JpIiwib2Zmc2V0aSIsImZpZWxkIiwiZGF0ZSIsIm9mZnNldCIsIm1pbGxpc2Vjb25kIiwiZHVyYXRpb25NaW51dGUiLCJkdXJhdGlvbldlZWsiLCJkYXkiLCJnZXRVVENTZWNvbmRzIiwiZ2V0TWludXRlcyIsImdldFRpbWV6b25lT2Zmc2V0IiwiZ2V0SG91cnMiLCJzZXRIb3VycyIsInNldERhdGUiLCJnZXREYXRlIiwid2Vla2RheSIsImdldERheSIsInN1bmRheSIsIm1vbmRheSIsInRodXJzZGF5IiwieWVhciIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsInNldEZ1bGxZZWFyIiwic2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbnV0ZXMiLCJzZXRVVENNaW51dGVzIiwiZ2V0VVRDSG91cnMiLCJ1dGNEYXkiLCJzZXRVVENIb3VycyIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwidXRjV2Vla2RheSIsImdldFVUQ0RheSIsInV0Y1N1bmRheSIsInV0Y01vbmRheSIsInV0Y1RodXJzZGF5IiwidXRjWWVhciIsInNldFVUQ01vbnRoIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENGdWxsWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwibG9jYWxEYXRlIiwiSCIsIk0iLCJMIiwidXRjRGF0ZSIsIlVUQyIsIm5ld1llYXIiLCJ1dGNGb3JtYXQiLCJ1dGNQYXJzZSIsInBhZHMiLCItIiwiMCIsIm51bWJlclJlIiwicGVyY2VudFJlIiwicmVxdW90ZVJlIiwicGFkIiwicmVxdW90ZSIsImZvcm1hdFJlIiwiZm9ybWF0TG9va3VwIiwicGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5IiwicGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5IiwidSIsInBhcnNlV2Vla051bWJlclN1bmRheSIsIlUiLCJwYXJzZVdlZWtOdW1iZXJJU08iLCJWIiwicGFyc2VXZWVrTnVtYmVyTW9uZGF5IiwicGFyc2VGdWxsWWVhciIsInBhcnNlWWVhciIsInBhcnNlWm9uZSIsIloiLCJwYXJzZU1vbnRoTnVtYmVyIiwicGFyc2VEYXlPZk1vbnRoIiwicGFyc2VEYXlPZlllYXIiLCJwYXJzZUhvdXIyNCIsInBhcnNlTWludXRlcyIsInBhcnNlU2Vjb25kcyIsInBhcnNlTWlsbGlzZWNvbmRzIiwicGFyc2VNaWNyb3NlY29uZHMiLCJwYXJzZUxpdGVyYWxQZXJjZW50IiwicGFyc2VVbml4VGltZXN0YW1wIiwiUSIsInBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMiLCJmb3JtYXREYXlPZk1vbnRoIiwiZm9ybWF0SG91cjI0IiwiZm9ybWF0SG91cjEyIiwiZm9ybWF0RGF5T2ZZZWFyIiwidGltZURheSIsInRpbWVZZWFyIiwiZm9ybWF0TWlsbGlzZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZm9ybWF0TWljcm9zZWNvbmRzIiwiZm9ybWF0TW9udGhOdW1iZXIiLCJmb3JtYXRNaW51dGVzIiwiZm9ybWF0U2Vjb25kcyIsImdldFNlY29uZHMiLCJmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5IiwiZm9ybWF0V2Vla051bWJlclN1bmRheSIsInRpbWVTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVySVNPIiwidGltZVRodXJzZGF5IiwiZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFdlZWtOdW1iZXJNb25kYXkiLCJ0aW1lTW9uZGF5IiwiZm9ybWF0WWVhciIsImZvcm1hdEZ1bGxZZWFyIiwiZm9ybWF0Wm9uZSIsImZvcm1hdFVUQ0RheU9mTW9udGgiLCJmb3JtYXRVVENIb3VyMjQiLCJmb3JtYXRVVENIb3VyMTIiLCJmb3JtYXRVVENEYXlPZlllYXIiLCJmb3JtYXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJmb3JtYXRVVENNaWNyb3NlY29uZHMiLCJmb3JtYXRVVENNb250aE51bWJlciIsImZvcm1hdFVUQ01pbnV0ZXMiLCJmb3JtYXRVVENTZWNvbmRzIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSIsImRvdyIsImZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVySVNPIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRVVENZZWFyIiwiZm9ybWF0VVRDRnVsbFllYXIiLCJmb3JtYXRVVENab25lIiwiZm9ybWF0TGl0ZXJhbFBlcmNlbnQiLCJmb3JtYXRVbml4VGltZXN0YW1wIiwiZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMiLCJsb2NhbGVfZGF0ZVRpbWUiLCJkYXRlVGltZSIsImxvY2FsZV9kYXRlIiwibG9jYWxlX3RpbWUiLCJsb2NhbGVfcGVyaW9kcyIsInBlcmlvZHMiLCJsb2NhbGVfd2Vla2RheXMiLCJkYXlzIiwibG9jYWxlX3Nob3J0V2Vla2RheXMiLCJzaG9ydERheXMiLCJsb2NhbGVfbW9udGhzIiwibW9udGhzIiwibG9jYWxlX3Nob3J0TW9udGhzIiwic2hvcnRNb250aHMiLCJwZXJpb2RSZSIsInBlcmlvZExvb2t1cCIsIndlZWtkYXlSZSIsIndlZWtkYXlMb29rdXAiLCJzaG9ydFdlZWtkYXlSZSIsInNob3J0V2Vla2RheUxvb2t1cCIsIm1vbnRoUmUiLCJtb250aExvb2t1cCIsInNob3J0TW9udGhSZSIsInNob3J0TW9udGhMb29rdXAiLCJmb3JtYXRzIiwidXRjRm9ybWF0cyIsInBhcnNlcyIsInBhcnNlU3BlY2lmaWVyIiwiY2hhckF0IiwibmV3UGFyc2UiLCJuZXdEYXRlIiwid2VlayIsInRvSVNPU3RyaW5nIiwiY2hlY2tEb21JZCIsIiQiLCJhbGVydCIsImdlbmVyYXRlUmFuZG9tTWF0cml4IiwicGFyIiwic2NhbGVGYWN0b3IiLCJkaXZlcmdpbmciLCJidWJibGUiLCJyYW5kb20iLCJkaXNwbGF5VmFsdWUiLCJwYXJzZUZsb2F0IiwiZ2V0R3RleFVybHMiLCJob3N0Iiwic2luZ2xlVGlzc3VlRXF0bCIsImxkIiwidGlzc3VlU3VtbWFyeSIsImR5bmVxdGwiLCJzbnAiLCJ2YXJpYW50SWQiLCJleG9uRXhwIiwidHJhbnNjcmlwdEV4cCIsImp1bmN0aW9uRXhwIiwidHJhbnNjcmlwdCIsImV4b24iLCJnZW5lTW9kZWwiLCJnZW5lTW9kZWxVbmZpbHRlcmVkIiwiZ2VuZUV4cCIsIm1lZEdlbmVFeHAiLCJnZW5lRXhwQm94cGxvdCIsInRvcEluVGlzc3VlRmlsdGVyZWQiLCJ0b3BJblRpc3N1ZSIsImdlbmVJZCIsInRpc3N1ZSIsInRpc3N1ZVNpdGVzIiwic2FtcGxlIiwicm5hc2VxQ3JhbSIsIndnc0NyYW0iLCJmY0JpbGxpbmciLCJmY1dvcmtTcGFjZSIsImZjUG9ydGFsV29ya1NwYWNlIiwiZ2VuZXJhdGVTaG9ydFZhcmlhbnRJZCIsInRlbXAiLCJUb29sdGlwIiwiW29iamVjdCBPYmplY3RdIiwidmVyYm9zZSIsIm9mZnNldFgiLCJvZmZzZXRZIiwiaW5mbyIsImNvbnNvbGUiLCJlZGl0IiwicGFnZVgiLCJwYWdlWSIsInNjaGVtZSIsImludGVycG9sYXRlUmdiQmFzaXMiLCJyYW1wIiwiaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nIiwic2V0Q29sb3JTY2FsZSIsImRtaW4iLCJkbWF4Iiwic2VxdWVudGlhbCIsImludGVycG9sYXRvciIsIngwIiwieDEiLCJrMTAiLCJzY2FsZVNlcXVlbnRpYWwiLCJpbnRlcnBvbGF0b3JzIiwiQnVHbiIsImQzQ2hyb21hdGljLmludGVycG9sYXRlQnVHbiIsIk9yUmQiLCJkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZU9yUmQiLCJQdUJ1IiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVQdUJ1IiwiWWxHbkJ1IiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVZbEduQnUiLCJCbHVlcyIsImQzQ2hyb21hdGljLmludGVycG9sYXRlQmx1ZXMiLCJPcmFuZ2VzIiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVPcmFuZ2VzIiwiR3JlZW5zIiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVHcmVlbnMiLCJQdXJwbGVzIiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVQdXJwbGVzIiwiUmVkcyIsImQzQ2hyb21hdGljLmludGVycG9sYXRlUmVkcyIsIkdyZXlzIiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVHcmV5cyIsIkdyYXlzIiwiUmRCdSIsImQzQ2hyb21hdGljLmludGVycG9sYXRlUmRCdSIsIlJkR3kiLCJkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVJkR3kiLCJQaVlHIiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVQaVlHIiwiUHVPciIsImQzQ2hyb21hdGljLmludGVycG9sYXRlUHVPciIsIlJkWWxCdSIsImQzQ2hyb21hdGljLmludGVycG9sYXRlUmRZbEJ1IiwiZXJyIiwiZ2V0Q29sb3JJbnRlcnBvbGF0b3IiLCJkcmF3Q29sb3JMZWdlbmQiLCJ0aXRsZSIsImRvbSIsImNvbmZpZyIsInVzZUxvZyIsImJhc2UiLCJjZWxsIiwib3JpZW50YXRpb24iLCJCdWJibGVNYXAiLCJsb2dCYXNlIiwiY29sb3JTY2hlbWUiLCJ4U2NhbGUiLCJ5U2NhbGUiLCJjb2xvclNjYWxlIiwiYnViYmxlU2NhbGUiLCJ0b29sYmFyIiwidG9vbHRpcCIsInBhcmVudElkIiwidG9vbHRpcElkIiwiYXBwZW5kVG8iLCJjYW52YXMiLCJkaW1lbnNpb25zIiwiY29sb3JTY2FsZURvbWFpbiIsImxhYmVsQ29uZmlnIiwic2hvdyIsImFuZ2xlIiwiYWRqdXN0IiwibG9jYXRpb24iLCJ0ZXh0QWxpZ24iLCJfc2V0U2NhbGVzIiwiY29udGV4dCIsImdldENvbnRleHQiLCJmaWxsU3R5bGUiLCJiZWdpblBhdGgiLCJhcmMiLCJjbG9zZVBhdGgiLCJjbCIsInJsIiwic2F2ZSIsImZvbnQiLCJmaWxsVGV4dCIsInJlc3RvcmUiLCJtaW5pRG9tIiwiZm9jdXNEb20iLCJhZGRCcnVzaCIsInN2Z0RpbSIsImgyIiwiZHJhd1N2ZyIsIl9zZXRNaW5pU2NhbGVzIiwieFNjYWxlTWluaSIsInlTY2FsZU1pbmkiLCJidWJibGVTY2FsZU1pbmkiLCJfYnJ1c2hlZCIsImJydXNoU2l6ZSIsInNlbGVjdGVkIiwicm93Q2xhc3MiLCJjb2xDbGFzcyIsImRpc3BsYXlTaXplIiwickRpc3BsYXlWYWx1ZSIsImRpc3BsYXlYIiwiZGlzcGxheVkiLCJoaWRlIiwibG9va3VwIiwibGVnZW5kQ29uZmlnIiwibGVnZW5kRyIsImJydXNoTGVmdCIsImJydXNoUmlnaHQiLCJidWJibGVNYXgiLCJfc2V0QnViYmxlTWF4IiwiX3NldEJ1YmJsZVNjYWxlIiwiY0RvbWFpbiIsIl9zZXRYU2NhbGVNaW5pIiwiX3NldFlTY2FsZU1pbmkiLCJfc2V0Q29sb3JTY2FsZSIsIl9zZXRYU2NhbGUiLCJfc2V0WVNjYWxlIiwieExpc3QiLCJfcGFyc2VYTGlzdCIsInNjYWxlQmFuZCIsInlMaXN0IiwiX3BhcnNlWUxpc3QiLCJfbG9nIiwibWluaSIsImFic01heCIsInJtYXgiLCJzY2FsZVNxcnQiLCJOdW1iZXIiLCJIYWxmTWFwIiwiY3V0b2ZmIiwiX3VuaXF1ZSIsImRhdGFEaWN0IiwiZmlsdGVyZWREYXRhIiwiX2ZpbHRlciIsIl9nZW5lcmF0ZURhdGFEaWN0IiwibGFiZWxTY2FsZSIsInNob3dMYWJlbHMiLCJsYWJlbEFuZ2xlIiwieFNjYWxlRG9tYWluIiwieVNjYWxlRG9tYWluIiwiX2RyYXdDYW52YXMiLCJjbGVhclJlY3QiLCJmaWxsUmVjdCIsImRyYXdDZWxscyIsImNlbGxzIiwiX3NldExhYmVsU2NhbGUiLCJjdXJzb3IiLCJwb3MiLCJyYWRpYW4iLCJ4MiIsInkyIiwiY29sIiwicGFpcnMiLCJwMiIsImRpY3QiLCJzb3VyY2VSYW5kb21Ob3JtYWwiLCJyYW5kb21Ob3JtYWwiLCJtdSIsInNpZ21hIiwiVG9vbGJhciIsImRvbUlkIiwidmVydGljYWwiLCJidG5DbGFzc2VzIiwiYmFyIiwiYWRkQ2xhc3MiLCJidXR0b25zIiwic3ZnSWQiLCJvdXRmaWxlTmFtZSIsImNsb25lSWQiLCJpY29uIiwiY3JlYXRlQnV0dG9uIiwiZG93bmxvYWRTdmciLCIkYnV0dG9uIiwiZmlsZU5hbWUiLCJzdmdPYmoiLCIkc3ZnQ29weSIsInN0eWxlcyIsInVzZWQiLCJzaGVldHMiLCJzdHlsZVNoZWV0cyIsImNzc1J1bGVzIiwicnVsZXMiLCJydWxlIiwiZWxlbXMiLCJzZWxlY3RvclRleHQiLCJmaW5kIiwiY3NzVGV4dCIsInBhcnNlQ3NzU3R5bGVzIiwicHJlcGVuZCIsInN2Z0h0bWwiLCJzdmdCbG9iIiwiQmxvYiIsInNhdmVBcyIsImJvdHRvbSIsImVwc2lsb24iLCJlbnRlcmluZyIsIl9fYXhpcyIsImF4aXMiLCJvcmllbnQiLCJ0aWNrQXJndW1lbnRzIiwidGlja1ZhbHVlcyIsInRpY2tTaXplSW5uZXIiLCJ0aWNrU2l6ZU91dGVyIiwidGlja1BhZGRpbmciLCJzcGFjaW5nIiwicmFuZ2UwIiwicmFuZ2UxIiwicG9zaXRpb24iLCJwYXRoIiwidGlja0V4aXQiLCJ0aWNrRW50ZXIiLCJsaW5lIiwidGlja1NpemUiLCJheGlzQm90dG9tIiwicGkiLCJ0YXUiLCJ0YXVFcHNpbG9uIiwiUGF0aCIsIl94MCIsIl95MCIsIl94MSIsIl95MSIsIm1vdmVUbyIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJ5MSIsImJlemllckN1cnZlVG8iLCJhcmNUbyIsInkwIiwieDIxIiwieTIxIiwieDAxIiwieTAxIiwibDAxXzIiLCJ4MjAiLCJ5MjAiLCJsMjFfMiIsImwyMF8yIiwibDIxIiwibDAxIiwiYWNvcyIsInQwMSIsInQyMSIsImEwIiwiYTEiLCJjY3ciLCJjdyIsImRhIiwiTGluZWFyIiwiX2NvbnRleHQiLCJwb2ludFgiLCJwb2ludFkiLCJkZWZpbmVkIiwiY3VydmUiLCJjdXJ2ZUxpbmVhciIsImFyZWEiLCJidWZmZXIiLCJkZWZpbmVkMCIsIngweiIsInkweiIsImFyZWFTdGFydCIsImxpbmVTdGFydCIsImxpbmVFbmQiLCJhcmVhRW5kIiwiYXJlYWxpbmUiLCJsaW5lWDAiLCJsaW5lWTAiLCJsaW5lWTEiLCJsaW5lWDEiLCJzbG9wZTMiLCJoMCIsImgxIiwic2xvcGUyIiwiTW9ub3RvbmVYIiwiUmVmbGVjdENvbnRleHQiLCJfbGluZSIsIl9wb2ludCIsIl90MCIsImtlcm5lbCIsImVwYW5lY2huaWtvdiIsImdhdXNzaWFuIiwiZXhwIiwia2VybmVsQmFuZHdpZHRoIiwibnJkIiwiZGV2aWF0aW9uIiwia2VybmVsRGVuc2l0eUVzdGltYXRvciIsIkdyb3VwZWRWaW9saW4iLCJncm91cEluZm8iLCJfc2FuaXR5Q2hlY2siLCJ4UGFkZGluZyIsInhEb21haW4iLCJ5RG9tYWluIiwieUxhYmVsIiwic2hvd1giLCJ4QW5nbGUiLCJzaG93U3ViWCIsInN1YlhBbmdsZSIsInNob3dXaGlza2VyIiwic2hvd0RpdmlkZXIiLCJzaG93TGVnZW5kIiwic2hvd1NpemUiLCJzb3J0U3ViWCIsInNob3dPdXRsaWVycyIsIm51bVBvaW50cyIsInJlc2V0IiwicmVuZGVyIiwidXBkYXRlWVNjYWxlIiwidXBkYXRlWFNjYWxlIiwiYWxsViIsInN1YngiLCJzY2FsZUxpbmVhciIsImxhYmVsIiwiZW50cnkiLCJfZHJhd1Zpb2xpbiIsInNpemVTY2FsZSIsInN1YnhHIiwieEF4aXMiLCJ5QXhpcyIsImdldEJCb3giLCJfYWRkR3JvdXBEaXZpZGVyIiwidGhlQnJ1c2giLCJ6b29tIiwiaWRlbFRpbWVvdXQiLCJsb3dCb3VuZCIsInVwcGVyQm91bmQiLCJnZyIsInExIiwicTMiLCJtZWQiLCJtZWRpYW4iLCJnSW5kZXgiLCJrZGUiLCJlRG9tYWluIiwidmVydGljZXMiLCJ2aW9saW5HIiwiX3ZhbGlkVmVydGljZXMiLCJ6TWF4IiwidmlvbGluIiwidlBhdGgiLCJpcXIiLCJ1cHBlciIsImppdHRlciIsIm91dGxpZXJzIiwid2FybiIsImdldFgiLCJyZWR1Y2UiLCJ2aW9saW5EZW1vQ29uZmlnIiwiaGVhdG1hcCIsImRlbmRyb0hlYXRtYXAiLCJyb3dUcmVlIiwiY29sVHJlZSIsImdyb3VwZWRWaW9saW5QbG90IiwidHJhbnNjcmlwdFRyYWNrcyIsImV4b25zIiwiRU5TVDAwMDAwMzExNTk1LjkiLCJjaHJvbSIsImNocm9tRW5kIiwiZXhvbklkIiwiZXhvbk51bWJlciIsImNocm9tU3RhcnQiLCJzdHJhbmQiLCJ0cmFuc2NyaXB0cyIsImNocm9tb3NvbWUiLCJnZW5jb2RlSWQiLCJnZW5lU3ltYm9sIiwidHJhbnNjcmlwdElkIiwiYnViYmxlTWFwIiwibGRQbG90IiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwic2hvd1NhbXBsZVNpemUiLCJtYXJnaW4iLCJpbldpZHRoIiwiaW5IZWlnaHQiLCJjcmVhdGVTdmciLCJnVmlvbGluIiwiY3JlYXRlVG9vbHRpcCIsInRpc3N1ZUlkIiwiZ3JvdXBOYW1lIiwidXJscyIsImV4cHJlc3Npb25fdmFsdWVzIiwiZ2Vub3R5cGVzIiwiaG9tb1JlZkV4cCIsImhvbW9BbHRFeHAiLCJoZXRlcm9FeHAiLCJyZWYiLCJhbHQiLCJoZXQiLCJwYXJzZUR5bkVxdGwiLCJ0aXNzdWVTaXRlRGV0YWlsSWQiLCJyb290SWQiLCJyZW5kZXJMZE1hcCIsImJtYXAiLCJsZE1hcCIsImxkRGF0YSIsImxkQ3V0b2ZmIiwibGRDb2xvclNjaGVtZSIsImxkSWQiLCJhZGRUb29sdGlwIiwibGRDYW52YXMiLCJsZFN2ZyIsImxkRyIsImxkUGFuZWxNYXJnaW4iLCJsZENvbmZpZyIsImRyYXciLCJicnVzaEV2ZW50IiwicGFuZWxCdWlsZGVyIiwiY2xhc3MiLCJmb250U2l6ZSIsInNlYXJjaCIsInNsaWRlciIsIm1pbkxkIiwidXBkYXRlTEQiLCJrZXlkb3duIiwidmFsIiwicmVuZGVyTERGaWx0ZXJzIiwiZGl2RGFzaGJvYXJkIiwicmVuZGVyQnViYmxlTWFwIiwiZ2VuZSIsInRpc3N1ZXMiLCJ0aXNzdWVTaXRlVGFibGUiLCJ2YXJpYW50c0luRXhvbnMiLCJyc0xvb2tVcCIsInZhckxvb2tVcCIsImJtYXBTdmciLCJtaW5pRyIsImZvY3VzRyIsImZvY3VzUGFuZWxNYXJnaW4iLCJkcmF3Q29tYm8iLCJtaW5pUGFuZWxIZWlnaHQiLCJmb2N1c1BhbmVsSGVpZ2h0IiwiZm9jdXNQYW5lbExhYmVscyIsImRpdkluZm8iLCJpbmZvSWQiLCJtb2RhbElkIiwidGlEaXYiLCJjc3MiLCJtb2RhbEJvZHkiLCJwcm9wIiwidGlzc3VlU2l0ZURldGFpbCIsInBsYWNlaG9sZGVyIiwicnNEaXYiLCJtaW5QIiwibWluTmVzIiwidXBkYXRlQnViYmxlcyIsImNvdW50cyIsImtleXVwIiwicmVnZXgiLCJib29sIiwiY2hhbmdlIiwiaXMiLCJyZW5kZXJCbWFwRmlsdGVycyIsImRpdk1vZGFsIiwic25wSWQiLCJidWlsZFZhcmlhbnRMb29rdXBUYWJsZXMiLCJ2YXJpYW50cyIsImV4b25WYXJpYW50cyIsImV4IiwiZmluZFZhcmlhbnRzSW5FeG9uUmVnaW9ucyIsInJuYVNlcUFuZEdlbm90eXBlU2FtcGxlQ291bnQiLCJyZW5kZXJUaXNzdWVCYWRnZXMiLCJ0c3MiLCJ0ZXMiLCJmaW5kTGVmdFNpZGVOZWFyZXN0TmVpZ2hib3JWYXJpYW50Iiwic2l0ZSIsInRzc1ZhcmlhbnQiLCJ0ZXNWYXJpYW50IiwiZmluZFZhcmlhbnRzTmVhckdlbmVTdGFydEVuZCIsInJlbmRlckdlbmVTdGFydEVuZE1hcmtlcnMiLCJyZW5kZXJUc3NEaXN0YW5jZVRyYWNrIiwiZGlhbG9nRGl2SWQiLCJwYXJlbnREaXZJZCIsImRpYWxvZyIsImNsZWFyRGl2IiwiY29udGVudERpdiIsImF1dG9PcGVuIiwiY2xpY2siLCJjcmVhdGVEaWFsb2ciLCJwbG90IiwiaGVhZCIsInZDb25maWciLCJlcXRsVmlvbGluUGxvdFJlbmRlciIsImFkZEJ1YmJsZUNsaWNrRXZlbnQiLCJmb2N1c0RvbWFpbiIsImRyYXdCdWJibGVMZWdlbmQiLCJ1cGRhdGVGb2N1c1ZpZXciLCJ0aHJlc2hvbGQiLCJpbnZlcnRFeHRlbnQiLCJzY2FsZVRocmVzaG9sZCIsImRpc3QiLCJ0dENvbnRlbnQiLCJwYW5lbHMiLCJkaXYiLCJkaXZTcGlubmVyIiwic2luZ2xlIiwiZmlsdGVyZWQiLCJnZW5lU3ltYm9sVXBwZXIiLCJwYXJzZUdlbmVzIiwiZGVzY3JpcHRpb24iLCJkaXZHZW5lSW5mbyIsInByb21pc2VzIiwiUHJvbWlzZSIsImFsbCIsInJlc3VsdHMiLCJwYXJzZVRpc3N1ZVNhbXBsZUNvdW50cyIsImFyciIsInBhcnNlVGlzc3VlRGljdCIsInBhcnNlRXhvbnNUb0xpc3QiLCJlcXRscyIsIm5lcyIsImxvZzEwIiwicFZhbHVlIiwicGFyc2VTaW5nbGVUaXNzdWVFcXRscyIsImxlZ2VuZEhlaWdodCIsInNldERpbWVuc2lvbnMiLCJsZEpzb24iLCJwYXJzZWQiLCJ1bmlxdWUiLCJsYWJlbHMiLCJwYXJzZUxEIiwiY2hlY2tlZCJdLCJtYXBwaW5ncyI6ImdEQUFBLElBQUlBLEtBQ0FDLEtBQ0FDLEVBQVEsR0FDUkMsRUFBVSxHQUNWQyxFQUFTLEdBRWIsU0FBU0MsRUFBZ0JDLEdBQ3ZCLE9BQU8sSUFBSUMsU0FBUyxJQUFLLFdBQWFELEVBQVFFLElBQUksU0FBU0MsRUFBTUMsR0FDL0QsT0FBT0MsS0FBS0MsVUFBVUgsR0FBUSxPQUFTQyxFQUFJLE1BQzFDRyxLQUFLLEtBQU8sS0EwQkYsV0FBU0MsR0FDdEIsSUFBSUMsRUFBVyxJQUFJQyxPQUFPLEtBQVFGLEVBQVksU0FDMUNHLEVBQVlILEVBQVVJLFdBQVcsR0FXckMsU0FBU0MsRUFBVUMsRUFBTUMsR0FDdkIsSUFJSUMsRUFKQUMsS0FDQUMsRUFBSUosRUFBS0ssT0FDVEMsRUFBSSxFQUNKQyxFQUFJLEVBRUpDLEVBQU1KLEdBQUssRUFDWEssR0FBTSxFQU1WLFNBQVNDLElBQ1AsR0FBSUYsRUFBSyxPQUFPM0IsRUFDaEIsR0FBSTRCLEVBQUssT0FBT0EsR0FBTSxFQUFPN0IsRUFHN0IsSUFBSVUsRUFBVXFCLEVBQVBDLEVB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
