var CramFileQuery=function(t){"use strict";var e={},n={},r=34,o=10,i=13;function a(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}var s=function(t){var s=new RegExp('["'+t+"\n\r]"),c=t.charCodeAt(0);function l(t,a){var s,l=[],u=t.length,d=0,p=0,f=u<=0,h=!1;function m(){if(f)return n;if(h)return h=!1,e;var a,s,l=d;if(t.charCodeAt(l)===r){for(;d++<u&&t.charCodeAt(d)!==r||t.charCodeAt(++d)===r;);return(a=d)>=u?f=!0:(s=t.charCodeAt(d++))===o?h=!0:s===i&&(h=!0,t.charCodeAt(d)===o&&++d),t.slice(l+1,a-1).replace(/""/g,'"')}for(;d<u;){if((s=t.charCodeAt(a=d++))===o)h=!0;else if(s===i)h=!0,t.charCodeAt(d)===o&&++d;else if(s!==c)continue;return t.slice(l,a)}return f=!0,t.slice(l,u)}for(t.charCodeAt(u-1)===o&&--u,t.charCodeAt(u-1)===i&&--u;(s=m())!==n;){for(var g=[];s!==e&&s!==n;)g.push(s),s=m();a&&null==(g=a(g,p++))||l.push(g)}return l}function u(e){return e.map(d).join(t)}function d(t){return null==t?"":s.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,r,o=l(t,function(t,o){if(n)return n(t,o-1);r=t,n=e?function(t,e){var n=a(t);return function(r,o){return e(n(r),o,t)}}(t,e):a(t)});return o.columns=r||[],o},parseRows:l,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}(e)),[n.map(d).join(t)].concat(e.map(function(e){return n.map(function(t){return d(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(u).join("\n")}}},c=s(",").parse,l=s("\t").parse;function u(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var d=function(t,e){return fetch(t,e).then(u)};function p(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),d(e,n).then(function(e){return t(e,r)})}}p(c);var f=p(l);function h(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var m=function(t,e){return fetch(t,e).then(h)},g="http://www.w3.org/1999/xhtml",y={svg:"http://www.w3.org/2000/svg",xhtml:g,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},v=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),y.hasOwnProperty(e)?{space:y[e],local:t}:t};var _=function(t){var e=v(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===g&&e.documentElement.namespaceURI===g?e.createElement(t):e.createElementNS(n,t)}})(e)};function w(){}var x=function(t){return null==t?w:function(){return this.querySelector(t)}};function b(){return[]}var S=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var A=document.documentElement;if(!A.matches){var I=A.webkitMatchesSelector||A.msMatchesSelector||A.mozMatchesSelector||A.oMatchesSelector;S=function(t){return function(){return I.call(this,t)}}}}var E=S,k=function(t){return new Array(t.length)};function T(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}T.prototype={constructor:T,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var C="$";function j(t,e,n,r,o,i){for(var a,s=0,c=e.length,l=i.length;s<l;++s)(a=e[s])?(a.__data__=i[s],r[s]=a):n[s]=new T(t,i[s]);for(;s<c;++s)(a=e[s])&&(o[s]=a)}function P(t,e,n,r,o,i,a){var s,c,l,u={},d=e.length,p=i.length,f=new Array(d);for(s=0;s<d;++s)(c=e[s])&&(f[s]=l=C+a.call(c,c.__data__,s,e),l in u?o[s]=c:u[l]=c);for(s=0;s<p;++s)(c=u[l=C+a.call(t,i[s],s,i)])?(r[s]=c,c.__data__=i[s],u[l]=null):n[s]=new T(t,i[s]);for(s=0;s<d;++s)(c=e[s])&&u[f[s]]===c&&(o[s]=c)}function q(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var R=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function O(t){return t.trim().split(/^|\s+/)}function B(t){return t.classList||new N(t)}function N(t){this._node=t,this._names=O(t.getAttribute("class")||"")}function D(t,e){for(var n=B(t),r=-1,o=e.length;++r<o;)n.add(e[r])}function G(t,e){for(var n=B(t),r=-1,o=e.length;++r<o;)n.remove(e[r])}N.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function F(){this.textContent=""}function W(){this.innerHTML=""}function M(){this.nextSibling&&this.parentNode.appendChild(this)}function U(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function z(){return null}function H(){var t=this.parentNode;t&&t.removeChild(this)}function L(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Y(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var V={};"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(V={mouseenter:"mouseover",mouseleave:"mouseout"}));function X(t,e,n){return t=J(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function J(t,e,n){return function(r){try{t.call(this,this.__data__,e,n)}finally{}}}function Q(t){return function(){var e=this.__on;if(e){for(var n,r=0,o=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++o]=n:this.removeEventListener(n.type,n.listener,n.capture);++o?e.length=o:delete this.__on}}}function K(t,e,n){var r=V.hasOwnProperty(t.type)?X:J;return function(o,i,a){var s,c=this.__on,l=r(e,i,a);if(c)for(var u=0,d=c.length;u<d;++u)if((s=c[u]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=l,s.capture=n),void(s.value=e);this.addEventListener(t.type,l,n),s={type:t.type,name:t.name,value:e,listener:l,capture:n},c?c.push(s):this.__on=[s]}}function Z(t,e,n){var r=R(t),o=r.CustomEvent;"function"==typeof o?o=new o(e,n):(o=r.document.createEvent("Event"),n?(o.initEvent(e,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(e,!1,!1)),t.dispatchEvent(o)}var tt=[null];function et(t,e){this._groups=t,this._parents=e}et.prototype=function(){return new et([[document.documentElement]],tt)}.prototype={constructor:et,select:function(t){"function"!=typeof t&&(t=x(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,a,s=e[o],c=s.length,l=r[o]=new Array(c),u=0;u<c;++u)(i=s[u])&&(a=t.call(i,i.__data__,u,s))&&("__data__"in i&&(a.__data__=i.__data__),l[u]=a);return new et(r,this._parents)},selectAll:function(t){var e;"function"!=typeof t&&(t=null==(e=t)?b:function(){return this.querySelectorAll(e)});for(var n=this._groups,r=n.length,o=[],i=[],a=0;a<r;++a)for(var s,c=n[a],l=c.length,u=0;u<l;++u)(s=c[u])&&(o.push(t.call(s,s.__data__,u,c)),i.push(s));return new et(o,i)},filter:function(t){"function"!=typeof t&&(t=E(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,a=e[o],s=a.length,c=r[o]=[],l=0;l<s;++l)(i=a[l])&&t.call(i,i.__data__,l,a)&&c.push(i);return new et(r,this._parents)},data:function(t,e){if(!t)return h=new Array(this.size()),u=-1,this.each(function(t){h[++u]=t}),h;var n,r=e?P:j,o=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var a=i.length,s=new Array(a),c=new Array(a),l=new Array(a),u=0;u<a;++u){var d=o[u],p=i[u],f=p.length,h=t.call(d,d&&d.__data__,u,o),m=h.length,g=c[u]=new Array(m),y=s[u]=new Array(m);r(d,p,g,y,l[u]=new Array(f),h,e);for(var v,_,w=0,x=0;w<m;++w)if(v=g[w]){for(w>=x&&(x=w+1);!(_=y[x])&&++x<m;);v._next=_||null}}return(s=new et(s,o))._enter=c,s._exit=l,s},enter:function(){return new et(this._enter||this._groups.map(k),this._parents)},exit:function(){return new et(this._exit||this._groups.map(k),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,o=n.length,i=Math.min(r,o),a=new Array(r),s=0;s<i;++s)for(var c,l=e[s],u=n[s],d=l.length,p=a[s]=new Array(d),f=0;f<d;++f)(c=l[f]||u[f])&&(p[f]=c);for(;s<r;++s)a[s]=e[s];return new et(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,o=t[e],i=o.length-1,a=o[i];--i>=0;)(r=o[i])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=q);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var a,s=n[i],c=s.length,l=o[i]=new Array(c),u=0;u<c;++u)(a=s[u])&&(l[u]=a);l.sort(e)}return new et(o,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],o=0,i=r.length;o<i;++o){var a=r[o];if(a)return a}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var o,i=e[n],a=0,s=i.length;a<s;++a)(o=i[a])&&t.call(o,o.__data__,a,i);return this},attr:function(t,e){var n=v(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):function(t,e){return t.style.getPropertyValue(e)||R(t).getComputedStyle(t,null).getPropertyValue(e)}(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=O(t+"");if(arguments.length<2){for(var r=B(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?D:G)(this,t)}}:e?function(t){return function(){D(this,t)}}:function(t){return function(){G(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?F:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?W:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(M)},lower:function(){return this.each(U)},append:function(t){var e="function"==typeof t?t:_(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:_(t),r=null==e?z:"function"==typeof e?e:x(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(H)},clone:function(t){return this.select(t?Y:L)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,o,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),a=i.length;if(!(arguments.length<2)){for(s=e?K:Q,null==n&&(n=!1),r=0;r<a;++r)this.each(s(i[r],e,n));return this}var s=this.node().__on;if(s)for(var c,l=0,u=s.length;l<u;++l)for(r=0,c=s[l];r<a;++r)if((o=i[r]).type===c.type&&o.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return Z(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return Z(this,t,e)}})(t,e))}};var nt=function(t){return"string"==typeof t?new et([[document.querySelector(t)]],[document.documentElement]):new et([[t]],tt)};class rt{constructor(t,e,n=!1){$(`#${t}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,r,o="fa-download"){this.createButton(t,o);nt(`#${t}`).on("click",()=>{this.downloadSvg(e,n,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);nt(`#${t}`).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download"){const n=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${e}`).appendTo(n),this.buttons[t]=n,n}attachTooltip(t){this.tooltip=t}downloadSvg(t,e,n){let r=$($($(`${"#"+t}`))[0]),o=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),i=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var o=n[r].cssRules,i=0;i<o.length;i++){var a=o[i];if(void 0!==a.style){var s,c=void 0===a.selectorText?a.selectorText:a.selectorText.replace(`#${t[0].id} `,"");try{s=$(t).find(c)}catch(t){s=[]}s.length>0&&(e+=a.selectorText+" { "+a.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var l=document.createElement("style");return l.setAttribute("type","text/css"),l.innerHTML="<![CDATA[\n"+e+"\n]]>",l}(r.get());o.prepend(i),$("#"+n).html("").hide();let a=$(`#${n}`).append(o).html(),s=new Blob([a],{type:"image/svg+xml"});saveAs(s,e),$(`#${n}`).html("").hide()}}function ot(){return{checkSignedIn:lt,getUser:ut,signInButton:it,signOut:st,grantScopes:dt}}function it(){gapi.signin2.render("my-signin2",{scope:"profile email",width:130,height:30,longtitle:!1,theme:"dark",onsuccess:at,onfailure:ct})}function at(t){$("#g-signout").show()}function st(){gapi.auth2.getAuthInstance().signOut().then(function(){console.log("User signed out")}),$("#g-signout").hide()}function ct(t){console.error(t)}function lt(){return!!gapi.auth2&&ut().isSignedIn()}function ut(){return gapi.auth2.getAuthInstance().currentUser.get()}function dt(t){this.getUser().grant({scope:t}).then(function(t){console.log(JSON.stringify({message:"success",value:t}))},function(t){console.error(JSON>stringify({message:"fail",value:t}))})}function pt(t,e,n){const r=function(t){const n="tissueSiteDetailId";return e.filter(e=>{if(!e.hasOwnProperty("dataType"))throw console.error(e),"Parse Error: required attribute is missing: _type or dataType";return"RNA-Seq-WGS"==t?e._type==t:e.dataType==t}).reduce((t,e)=>{if(!e.hasOwnProperty(n))throw console.error(e),"Parse Error: required attribute is missing:"+n;return void 0===t[e[n]]&&(t[e[n]]=[]),t[e[n]].push(e),t},{})},o=[{label:"RNA-Seq",id:"RNA-Seq",data:r("RNA-Seq")},{label:"RNA-Seq With WGS",id:"RNA-Seq-WGS",data:r("RNA-Seq-WGS")},{label:"WES",id:"WES",data:r("WES")},{label:"WGS",id:"WGS",data:r("WGS")}];return{datasetId:t,X:n.map(t=>(["tissueSiteDetailId","tissueSiteDetail"].forEach(e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Tissue parsing error: required attribute is missing: "+e}),t.id=t.tissueSiteDetailId,t.label=t.tissueSiteDetail,o.forEach(e=>{t[e.id]=e.data[t.id]||void 0}),t)),Y:o,data:e}}function ft(t,e,n,r){const o={gtex_v7:{label:"GTEX V7",bgcolor:"#2a718b"}},i=nt(`#${t}`);i.select("thead").selectAll("th").data([{label:"",id:""}].concat(e.Y)).enter().append("th").attr("scope","col").attr("class",(t,e)=>""==t.id?"":`y${e-1}`).text(t=>t.label),i.select(".table-label").selectAll("*").remove(),i.select(".table-label").append("th").attr("colspan",e.Y.length+1).text(o[e.datasetId].label).style("background-color",o[e.datasetId].bgcolor),function(t,e){t.selectAll(".data-row").remove();const n=t.selectAll(".data-row").data(e.X).enter().append("tr").classed("data-row",!0);n.append("th").attr("scope","row").attr("class",(t,e)=>`x${e}`).text(t=>t.label),e.Y.forEach((t,e)=>{n.append("td").attr("class",(n,r)=>void 0===n[t.id]?"":`x${r} y${e}`).text(e=>{let n=e[t.id]?e[t.id].length:"";return n})})}(i.select("tbody"),e),function(t){const e=nt(`#${t}`).select("tbody").selectAll("td");nt(`#${t}`).select("thead").selectAll("th").style("cursor","pointer").on("click",function(){const t=nt(this).attr("class");"col"==nt(this).attr("scope")?(nt(this).attr("scope","selected"),e.filter(`.${t}`).classed("selected",!0)):(nt(this).attr("scope","col"),e.filter(`.${t}`).classed("selected",!1))}),nt(`#${t}`).select("tbody").selectAll("th").style("cursor","pointer").on("click",function(){const t=nt(this).attr("class");"row"==nt(this).attr("scope")?(nt(this).attr("scope","selected"),e.filter(`.${t}`).classed("selected",!0)):(nt(this).attr("scope","row"),e.filter(`.${t}`).classed("selected",!1))}),e.style("cursor","pointer").on("click",function(){nt(this).classed("selected",!nt(this).classed("selected"))})}(t),function(t,e,n,r){const o=nt(`#${t}`).select("tbody").selectAll("td");nt("#matrix-table-toolbar").selectAll("*").remove();const i=new rt("matrix-table-toolbar",void 0,!0);i.createButton("sample-download"),i.createButton("send-to-firecloud","fa-cloud-upload-alt"),nt("#sample-download").style("cursor","pointer").on("click",function(){let t=o.filter(".selected");if(t.empty())alert("You have not selected any samples to download.");else{let n=["Sample ID","Tissue Name","Data Type","CRAM File GCP","CRAM File AWS","CRAM File MD5","CRAM File Size","CRAM Index GCP","CRAM Index AWS"].join("\t")+"\n";t.each(function(t){const r=nt(this).attr("class").split(" ").filter(t=>"selected"!=t),o=e.X[parseInt(r[0].replace("x",""))],i=e.Y[parseInt(r[1].replace("y",""))],a=i.data[o.id].map(t=>{let e=["cram_file","cram_file_aws","cram_file_md5","cram_file_size","cram_index","cram_index_aws"].map(e=>t.cramFile[e]);["cramFile","tissueSiteDetail","dataType"].forEach(e=>{if(!t.hasOwnProperty(e))throw"Parse Error: required attribute is missing: "+e});let n=[t.cramFile.sample_id,t.tissueSiteDetail,t.dataType].concat(e);return n.join("\t")});n+=a.join("\n")});let r=new Blob([n],{type:"text/plain;charset=utf-8"});saveAs(r,"GTEx.cram.txt",!0)}}),nt("#send-to-firecloud").style("cursor","pointer").on("click",function(){$("#fire-cloud-status").empty(),n.checkSignedIn()||alert("You need to sign in first");n.grantScopes("profile email https://www.googleapis.com/auth/devstorage.full_control https://www.googleapis.com/auth/plus.me"),function(t,e="billing-project-list"){let n=t.getAuthResponse(!0).access_token;$.ajax({url:"https://api.firecloud.org/api/profile/billing",type:"GET",xhrFields:{withCredentials:!1},beforeSend:function(t){t.setRequestHeader("Authorization","Bearer "+n)},contentType:"application/json; charset=utf-8",success:function(t){$(`#${e}`).empty(),t.forEach(t=>{$("<label>"+`<input type="radio" name="billing-project" value="${t.projectName}"> `+t.projectName+"</label><br/>").appendTo($(`#${e}`))})}})}(n.getUser());let t=o.filter(".selected");t.empty()?alert("You have not selected any samples to submit."):nt("#fire-cloud-form").style("display","block")});const a=function(){const t=$('input[name="workspace"]').val();let i=1;!function(t,e){let n=t.getAuthResponse(!0).access_token;$.ajax({url:"https://api.firecloud.org/api/workspaces",type:"GET",xhrFields:{withCredentials:!1},beforeSend:function(t){t.setRequestHeader("Authorization","Bearer "+n)},success:function(t){const n=t.filter(t=>!t.public);e(n)},error:function(t){console.error(t)}})}(n.getUser(),function(a){if(a.forEach(e=>{e.workspace.name==t&&(console.error("Input Error: Workspace already exists. "+t),$("#fire-cloud-status").html("Workspace "+t+" already exists. <br/> Please name a new one."),i=0)}),1==i){$("#fire-cloud-status").empty();let t=o.filter(".selected"),i=[];t.each(function(t){const n=nt(this).attr("class").split(" ").filter(t=>"selected"!=t),r=e.X[parseInt(n[0].replace("x",""))],o=e.Y[parseInt(n[1].replace("y",""))],a=o.data[r.id].map(t=>{let e=t.sampleId.split("-");return t.donorId=e[0]+"-"+e[1],t});i=i.concat(a)}),function(t,e,n){const r=t.getUser().getAuthResponse(!0).access_token,o=$('input[name="billing-project"]').val(),i=$('input[name="workspace"]').val();if(void 0===o)throw alert("You must provide a billin project"),"billing project is not provided";if(void 0===i||""==i)throw alert("You must provide a new workspace name"),"workspace name is not provided";$("#spinner").show(),$.ajax({url:n.fcWorkSpace,type:"POST",xhrFields:{withCredentials:!1},beforeSend:function(t){t.setRequestHeader("Authorization","Bearer "+r)},contentType:"application/json; charset=utf-8",data:JSON.stringify({namespace:o,name:i,attributes:{},authorizationDomain:[]}),success:function(t){console.log("finished creating workspace...");const a=e.map(t=>{if(!t.hasOwnProperty("donorId"))throw"Sample does not contain attr donorId.";return t.donorId}).filter((t,e,n)=>n.indexOf(t)===e),s=`entities=entity:participant_id\n${a.join("\n")}\n`,c=encodeURI(s);$.ajax({url:`${n.fcWorkSpace}/${o}/${i}/importEntities`,type:"POST",xhrFields:{withCredentials:!1},beforeSend:function(t){t.setRequestHeader("Authorization","Bearer "+r)},contentType:"application/x-www-form-urlencoded",dataType:"text",data:c,success:function(t){$("#spinner").hide(),console.log("finished importing participant IDs...");let a=[["entity:sample_id","participant_id","sample_type","bam_file","bam_index"].join("\t")];const s=`entities=${(a=a.concat(e.map(t=>{if(void 0===t.cramFile)throw"Data Error: "+t;if(!t.cramFile.hasOwnProperty("cram_file"))throw"Data Error: "+t;return[t.cramFile.sample_id,t.donorId,t.dataType,t.cramFile.cram_file,t.cramFile.cram_index].join("\t")}))).join("\n")}\n`,c=encodeURI(s);$.ajax({url:`${n.fcWorkSpace}/${o}/${i}/importEntities`,type:"POST",xhrFields:{withCredentials:!1},beforeSend:function(t){t.setRequestHeader("Authorization","Bearer "+r)},contentType:"application/x-www-form-urlencoded",dataType:"text",data:c,success:function(t){console.log("finished importing samples...");const e=`${n.fcPortalWorkSpace}/${o}/${i}/data`;window.open(e,"_blank"),$("#fire-cloud-status").html(`Submitted! <br/> Go to your <br/> <a target="_blank" href="${e}">FireCloud workspace</a>`)},error:function(t){console.error(t)}})},error:function(t){console.error(t)}})},error:function(t){console.error(t)}})}(n,i,r),nt("#fire-cloud-form").style("display","none")}})};$('input[name="workspace"]').keypress(function(t){if(13==t.keyCode)return a(),!1}),nt("#submit-to-firecloud-btn").on("click",a),nt("#cancel-firecloud-btn").on("click",function(){nt("#fire-cloud-form").style("display","none"),alert("Submission Canceled!"),$("#fire-cloud-status").empty()})}(t,e,n,r)}return t.renderSignInButton=function(t=ot().signInButton){t()},t.signOut=function(t=ot().signOut){t()},t.launch=function(t,e="gtex_v7",n=ot(),r=function(){const t="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:t+"association/singleTissueEqtl?format=json&datasetId=gtex_v7&gencodeId=",ld:t+"dataset/ld?format=json&datasetId=gtex_v7&gencodeId=",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v7&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v7&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?datasetId=gtex_v7&boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v7&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v7&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v19&genomeBuild=GRCh37%2Fhg19&geneId=",tissue:t+"dataset/tissueInfo?format=json&datasetId=gtex_v7",sample:"/tmpSummaryData/gtex.Sample.csv",rnaseqCram:"/tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"/tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}()){const o=[m(r.tissue),f(r.rnaseqCram),f(r.wgsCram),f(r.sample)];Promise.all(o).then(function(o){let i=function(t){const e="tissueInfo";if(!t.hasOwnProperty(e))throw"Parsing Error: required json attr is missing: "+e;const n=t[e];return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach(t=>{if(!n[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t}),n}(o[0]);const a={rnaseq:o[1].reduce((t,e)=>(t[e.sample_id.toUpperCase()]=e,t),{}),wgs:o[2].reduce((t,e)=>(t[e.sample_id.toUpperCase()]=e,t),{})};let s=o[3].filter(t=>t.datasetId==e).map(t=>{switch(t.dataType){case"WGS":if(!a.wgs.hasOwnProperty(t.sampleId))throw t.sampleId+" has no cram files";t.cramFile=a.wgs[t.sampleId];break;case"RNASEQ":if(!a.rnaseq.hasOwnProperty(t.sampleId))throw t.sampleId+" has no cram files";t.cramFile=a.rnaseq[t.sampleId],t.dataType="RNA-Seq"}return t});s=function(t){const e=t.filter(t=>{if(!t.hasOwnProperty("dataType"))throw console.error(t),"Parse Error: required attribute is missing: dataType";return"WGS"==t.dataType}).reduce((t,e)=>{if(!e.hasOwnProperty("subjectId"))throw"Parse Error: required attribute is missing.";return t[e.subjectId]=1,t},{});return t.map(t=>{if(!t.hasOwnProperty("dataType")||!t.hasOwnProperty("subjectId"))throw"Parse Error: required attribute is missing.";return"RNA-Seq"==t.dataType&&e.hasOwnProperty(t.subjectId)&&(t._type="RNA-Seq-WGS"),t})}(s);const c=pt(e,s,i);ft(t,c,n,r),function(t,e,n,r,o,i){const a=()=>{let a=$('input[name="sex"]:checked').val(),s=[];if($(".ageBox").each(function(){$(this).is(":checked")&&s.push($(this).val()),s.length<6&&$('input[name="allAges"]').prop("checked",!1),6==s.length&&$('input[name="allAges"][value="all"]').prop("checked",!0)}),"both"==a&&6==s.length)ft(t,pt(e.datasetId,n,r),o,i);else{let c=void 0;c="both"==a?pt(e.datasetId,n.filter(t=>s.indexOf(t.ageBracket)>=0),r):6==s.length?pt(e.datasetId,n.filter(t=>t.sex==a),r):pt(e.datasetId,n.filter(t=>t.sex==a&&s.indexOf(t.ageBracket)>=0),r),ft(t,c,o,i)}};$('input[name="sex"]').change(a),$(".ageBox").each(function(){$(this).change(a)}),$('input[name="allAges"]').change(function(){let t=$(this).val();switch(t){case"all":$(".ageBox").prop("checked",!0),a();break;case"reset":$(".ageBox").prop("checked",!1)}})}(t,c,s,i,n,r)}).catch(function(t){console.error(t)})},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
