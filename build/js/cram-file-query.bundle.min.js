var CramFileQuery=function(t){"use strict";var e={},n={},r=34,i=10,o=13;function s(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}var a=function(t){var a=new RegExp('["'+t+"\n\r]"),c=t.charCodeAt(0);function u(t,s){var a,u=[],l=t.length,h=0,f=0,d=l<=0,p=!1;function g(){if(d)return n;if(p)return p=!1,e;var s,a,u=h;if(t.charCodeAt(u)===r){for(;h++<l&&t.charCodeAt(h)!==r||t.charCodeAt(++h)===r;);return(s=h)>=l?d=!0:(a=t.charCodeAt(h++))===i?p=!0:a===o&&(p=!0,t.charCodeAt(h)===i&&++h),t.slice(u+1,s-1).replace(/""/g,'"')}for(;h<l;){if((a=t.charCodeAt(s=h++))===i)p=!0;else if(a===o)p=!0,t.charCodeAt(h)===i&&++h;else if(a!==c)continue;return t.slice(u,s)}return d=!0,t.slice(u,l)}for(t.charCodeAt(l-1)===i&&--l,t.charCodeAt(l-1)===o&&--l;(a=g())!==n;){for(var m=[];a!==e&&a!==n;)m.push(a),a=g();s&&null==(m=s(m,f++))||u.push(m)}return u}function l(e){return e.map(h).join(t)}function h(t){return null==t?"":a.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,r,i=u(t,function(t,i){if(n)return n(t,i-1);r=t,n=e?function(t,e){var n=s(t);return function(r,i){return e(n(r),i,t)}}(t,e):s(t)});return i.columns=r||[],i},parseRows:u,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}(e)),[n.map(h).join(t)].concat(e.map(function(e){return n.map(function(t){return h(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(l).join("\n")}}},c=a(",").parse,u=a("\t").parse;function l(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var h=function(t,e){return fetch(t,e).then(l)};function f(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),h(e,n).then(function(e){return t(e,r)})}}f(c);var d=f(u);function p(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var g=function(t,e){return fetch(t,e).then(p)},m="http://www.w3.org/1999/xhtml",v={svg:"http://www.w3.org/2000/svg",xhtml:m,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},y=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),v.hasOwnProperty(e)?{space:v[e],local:t}:t};var _=function(t){var e=y(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===m&&e.documentElement.namespaceURI===m?e.createElement(t):e.createElementNS(n,t)}})(e)};function w(){}var x=function(t){return null==t?w:function(){return this.querySelector(t)}};function S(){return[]}var A=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var b=document.documentElement;if(!b.matches){var I=b.webkitMatchesSelector||b.msMatchesSelector||b.mozMatchesSelector||b.oMatchesSelector;A=function(t){return function(){return I.call(this,t)}}}}var E=A,C=function(t){return new Array(t.length)};function T(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}T.prototype={constructor:T,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var q="$";function P(t,e,n,r,i,o){for(var s,a=0,c=e.length,u=o.length;a<u;++a)(s=e[a])?(s.__data__=o[a],r[a]=s):n[a]=new T(t,o[a]);for(;a<c;++a)(s=e[a])&&(i[a]=s)}function k(t,e,n,r,i,o,s){var a,c,u,l={},h=e.length,f=o.length,d=new Array(h);for(a=0;a<h;++a)(c=e[a])&&(d[a]=u=q+s.call(c,c.__data__,a,e),u in l?i[a]=c:l[u]=c);for(a=0;a<f;++a)(c=l[u=q+s.call(t,o[a],a,o)])?(r[a]=c,c.__data__=o[a],l[u]=null):n[a]=new T(t,o[a]);for(a=0;a<h;++a)(c=e[a])&&l[d[a]]===c&&(i[a]=c)}function N(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var D=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function O(t){return t.trim().split(/^|\s+/)}function R(t){return t.classList||new B(t)}function B(t){this._node=t,this._names=O(t.getAttribute("class")||"")}function G(t,e){for(var n=R(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function j(t,e){for(var n=R(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}B.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function M(){this.textContent=""}function W(){this.innerHTML=""}function F(){this.nextSibling&&this.parentNode.appendChild(this)}function L(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function U(){return null}function z(){var t=this.parentNode;t&&t.removeChild(this)}function H(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function V(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Y={};"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Y={mouseenter:"mouseover",mouseleave:"mouseout"}));function X(t,e,n){return t=J(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function J(t,e,n){return function(r){try{t.call(this,this.__data__,e,n)}finally{}}}function Q(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function K(t,e,n){var r=Y.hasOwnProperty(t.type)?X:J;return function(i,o,s){var a,c=this.__on,u=r(e,o,s);if(c)for(var l=0,h=c.length;l<h;++l)if((a=c[l]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=u,a.capture=n),void(a.value=e);this.addEventListener(t.type,u,n),a={type:t.type,name:t.name,value:e,listener:u,capture:n},c?c.push(a):this.__on=[a]}}function Z(t,e,n){var r=D(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}var tt=[null];function et(t,e){this._groups=t,this._parents=e}et.prototype=function(){return new et([[document.documentElement]],tt)}.prototype={constructor:et,select:function(t){"function"!=typeof t&&(t=x(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,s,a=e[i],c=a.length,u=r[i]=new Array(c),l=0;l<c;++l)(o=a[l])&&(s=t.call(o,o.__data__,l,a))&&("__data__"in o&&(s.__data__=o.__data__),u[l]=s);return new et(r,this._parents)},selectAll:function(t){var e;"function"!=typeof t&&(t=null==(e=t)?S:function(){return this.querySelectorAll(e)});for(var n=this._groups,r=n.length,i=[],o=[],s=0;s<r;++s)for(var a,c=n[s],u=c.length,l=0;l<u;++l)(a=c[l])&&(i.push(t.call(a,a.__data__,l,c)),o.push(a));return new et(i,o)},filter:function(t){"function"!=typeof t&&(t=E(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,s=e[i],a=s.length,c=r[i]=[],u=0;u<a;++u)(o=s[u])&&t.call(o,o.__data__,u,s)&&c.push(o);return new et(r,this._parents)},data:function(t,e){if(!t)return p=new Array(this.size()),l=-1,this.each(function(t){p[++l]=t}),p;var n,r=e?k:P,i=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var s=o.length,a=new Array(s),c=new Array(s),u=new Array(s),l=0;l<s;++l){var h=i[l],f=o[l],d=f.length,p=t.call(h,h&&h.__data__,l,i),g=p.length,m=c[l]=new Array(g),v=a[l]=new Array(g);r(h,f,m,v,u[l]=new Array(d),p,e);for(var y,_,w=0,x=0;w<g;++w)if(y=m[w]){for(w>=x&&(x=w+1);!(_=v[x])&&++x<g;);y._next=_||null}}return(a=new et(a,i))._enter=c,a._exit=u,a},enter:function(){return new et(this._enter||this._groups.map(C),this._parents)},exit:function(){return new et(this._exit||this._groups.map(C),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),s=new Array(r),a=0;a<o;++a)for(var c,u=e[a],l=n[a],h=u.length,f=s[a]=new Array(h),d=0;d<h;++d)(c=u[d]||l[d])&&(f[d]=c);for(;a<r;++a)s[a]=e[a];return new et(s,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,s=i[o];--o>=0;)(r=i[o])&&(s&&s!==r.nextSibling&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=N);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var s,a=n[o],c=a.length,u=i[o]=new Array(c),l=0;l<c;++l)(s=a[l])&&(u[l]=s);u.sort(e)}return new et(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var s=r[i];if(s)return s}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],s=0,a=o.length;s<a;++s)(i=o[s])&&t.call(i,i.__data__,s,o);return this},attr:function(t,e){var n=y(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):function(t,e){return t.style.getPropertyValue(e)||D(t).getComputedStyle(t,null).getPropertyValue(e)}(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=O(t+"");if(arguments.length<2){for(var r=R(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?G:j)(this,t)}}:e?function(t){return function(){G(this,t)}}:function(t){return function(){j(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?M:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?W:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(F)},lower:function(){return this.each(L)},append:function(t){var e="function"==typeof t?t:_(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:_(t),r=null==e?U:"function"==typeof e?e:x(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(z)},clone:function(t){return this.select(t?V:H)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),s=o.length;if(!(arguments.length<2)){for(a=e?K:Q,null==n&&(n=!1),r=0;r<s;++r)this.each(a(o[r],e,n));return this}var a=this.node().__on;if(a)for(var c,u=0,l=a.length;u<l;++u)for(r=0,c=a[u];r<s;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return Z(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return Z(this,t,e)}})(t,e))}};var nt=function(t){return"string"==typeof t?new et([[document.querySelector(t)]],[document.documentElement]):new et([[t]],tt)};class rt{constructor(t,e,n=!1){$(`#${t}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,r,i="fa-download"){this.createButton(t,i);nt(`#${t}`).on("click",()=>{this.downloadSvg(e,n,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);nt(`#${t}`).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download"){const n=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${e}`).appendTo(n),this.buttons[t]=n,n}attachTooltip(t){this.tooltip=t}downloadSvg(t,e,n){let r=$($($(`${"#"+t}`))[0]),i=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),o=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var i=n[r].cssRules,o=0;o<i.length;o++){var s=i[o];if(void 0!==s.style){var a,c=void 0===s.selectorText?s.selectorText:s.selectorText.replace(`#${t[0].id} `,"");try{a=$(t).find(c)}catch(t){a=[]}a.length>0&&(e+=s.selectorText+" { "+s.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var u=document.createElement("style");return u.setAttribute("type","text/css"),u.innerHTML="<![CDATA[\n"+e+"\n]]>",u}(r.get());i.prepend(o),$("#"+n).html("").hide();let s=$(`#${n}`).append(i).html(),a=new Blob([s],{type:"image/svg+xml"});saveAs(a,e),$(`#${n}`).html("").hide()}}function it(){return{checkSignedIn:ut,getUser:lt,signInButton:ot,signOut:at,grantScopes:ht}}function ot(){gapi.signin2.render("my-signin2",{scope:"profile email",width:130,height:30,longtitle:!1,theme:"dark",onsuccess:st,onfailure:ct})}function st(t){$("#g-signout").show()}function at(){gapi.auth2.getAuthInstance().signOut().then(function(){console.log("User signed out")}),$("#g-signout").hide()}function ct(t){console.error(t)}function ut(){return!!gapi.auth2&&lt().isSignedIn()}function lt(){return gapi.auth2.getAuthInstance().currentUser.get()}function ht(t){this.getUser().grant({scope:t}).then(function(t){console.log(JSON.stringify({message:"success",value:t}))},function(t){console.error(JSON>stringify({message:"fail",value:t}))})}function ft(t,e,n){const r=function(t){const n="tissueSiteDetailId";return e.filter(e=>{if(!e.hasOwnProperty("dataType"))throw console.error(e),"Parse Error: required attribute is missing: _type or dataType";return"RNA-Seq-WGS"==t?e._type==t:e.dataType==t}).reduce((t,e)=>{if(!e.hasOwnProperty(n))throw console.error(e),"Parse Error: required attribute is missing:"+n;return void 0===t[e[n]]&&(t[e[n]]=[]),t[e[n]].push(e),t},{})},i=[{label:"RNA-Seq",id:"RNA-Seq",data:r("RNA-Seq")},{label:"RNA-Seq With WGS",id:"RNA-Seq-WGS",data:r("RNA-Seq-WGS")},{label:"WES",id:"WES",data:r("WES")},{label:"WGS",id:"WGS",data:r("WGS")}];return{datasetId:t,X:n.map(t=>(["tissueSiteDetailId","tissueSiteDetail"].forEach(e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Tissue parsing error: required attribute is missing: "+e}),t.id=t.tissueSiteDetailId,t.label=t.tissueSiteDetail,i.forEach(e=>{t[e.id]=e.data[t.id]||void 0}),t)),Y:i,data:e}}function dt(t,e,n,r,i){const o={gtex_v7:{label:"GTEX V7",bgcolor:"#2a718b"}},s=nt(`#${t}`);s.select("thead").selectAll("th").data([{label:"",id:""}].concat(e.Y)).enter().append("th").attr("scope","col").attr("class",(t,e)=>""==t.id?"":`y${e-1}`).text(t=>t.label),s.select(".table-label").selectAll("*").remove(),s.select(".table-label").append("th").attr("colspan",e.Y.length+1).text(o[e.datasetId].label).style("background-color",o[e.datasetId].bgcolor),function(t,e,n){t.selectAll(".data-row").remove();const r=t.selectAll(".data-row").data(e.X).enter().append("tr").classed("data-row",!0);r.append("th").attr("scope","row").attr("class",(t,e)=>`x${e}`).text(t=>t.label).style("text-decoration",t=>{if(console.log(t),n&&!t.hasEGenes)return"line-through"}),e.Y.forEach((t,e)=>{r.append("td").attr("class",(n,r)=>void 0===n[t.id]?"":`x${r} y${e}`).text(e=>{let n=e[t.id]?e[t.id].length:"";return n})})}(s.select("tbody"),e,n),function(t){const e=nt(`#${t}`).select("tbody").selectAll("td");nt(`#${t}`).select("thead").selectAll("th").style("cursor","pointer").on("click",function(){const t=nt(this).attr("class");"col"==nt(this).attr("scope")?(nt(this).attr("scope","selected"),e.filter(`.${t}`).classed("selected",!0)):(nt(this).attr("scope","col"),e.filter(`.${t}`).classed("selected",!1))}),nt(`#${t}`).select("tbody").selectAll("th").style("cursor","pointer").on("click",function(){const t=nt(this).attr("class");"row"==nt(this).attr("scope")?(nt(this).attr("scope","selected"),e.filter(`.${t}`).classed("selected",!0)):(nt(this).attr("scope","row"),e.filter(`.${t}`).classed("selected",!1))}),e.style("cursor","pointer").on("click",function(){nt(this).classed("selected",!nt(this).classed("selected"))})}(t),function(t,e,n,r){nt("#matrix-table-toolbar").selectAll("*").remove(),new rt("matrix-table-toolbar",void 0,!0).createButton("sample-download"),function(t,e){const n=nt(`#${t}`).select("tbody").selectAll("td");nt("#sample-download").style("cursor","pointer").on("click",function(){let t=n.filter(".selected");if(t.empty())alert("You have not selected any samples to download.");else{let n=["Sample ID","Tissue Name","Data Type","CRAM File GCP","CRAM File AWS","CRAM File MD5","CRAM File Size","CRAM Index GCP","CRAM Index AWS"].join("\t")+"\n";t.each(function(t){const r=nt(this).attr("class").split(" ").filter(t=>"selected"!=t),i=e.X[parseInt(r[0].replace("x",""))],o=e.Y[parseInt(r[1].replace("y",""))],s=o.data[i.id].map(t=>{let e=["cram_file","cram_file_aws","cram_file_md5","cram_file_size","cram_index","cram_index_aws"].map(e=>t.cramFile[e]);["cramFile","tissueSiteDetail","dataType"].forEach(e=>{if(!t.hasOwnProperty(e))throw"Parse Error: required attribute is missing: "+e});let n=[t.cramFile.sample_id,t.tissueSiteDetail,t.dataType].concat(e);return n.join("\t")});n+=s.join("\n")});let r=new Blob([n],{type:"text/plain;charset=utf-8"});saveAs(r,"GTEx.cram.txt",!0)}})}(t,e)}(t,e)}return t.renderSignInButton=function(t=it().signInButton){t()},t.signOut=function(t=it().signOut){t()},t.launch=function(t,e="gtex_v7",n=it(),r=function(){const t="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:t+"association/singleTissueEqtl?format=json&datasetId=gtex_v7&gencodeId=",ld:t+"dataset/ld?format=json&datasetId=gtex_v7&gencodeId=",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v7&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v7&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?datasetId=gtex_v7&boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v7&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v7&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v19&genomeBuild=GRCh37%2Fhg19&geneId=",tissue:t+"dataset/tissueInfo?format=json&datasetId=gtex_v7",sample:"/tmpSummaryData/gtex.Sample.csv",rnaseqCram:"/tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"/tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}()){const i=[g(r.tissue),d(r.rnaseqCram),d(r.wgsCram),d(r.sample)];Promise.all(i).then(function(n){let r=function(t){const e="tissueInfo";if(!t.hasOwnProperty(e))throw"Parsing Error: required json attr is missing: "+e;const n=t[e];return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach(t=>{if(!n[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t}),n}(n[0]);const i={rnaseq:n[1].reduce((t,e)=>(t[e.sample_id.toUpperCase()]=e,t),{}),wgs:n[2].reduce((t,e)=>(t[e.sample_id.toUpperCase()]=e,t),{})};let o=n[3].filter(t=>t.datasetId==e).map(t=>{switch(t.dataType){case"WGS":if(!i.wgs.hasOwnProperty(t.sampleId))throw t.sampleId+" has no cram files";t.cramFile=i.wgs[t.sampleId];break;case"RNASEQ":if(!i.rnaseq.hasOwnProperty(t.sampleId))throw t.sampleId+" has no cram files";t.cramFile=i.rnaseq[t.sampleId],t.dataType="RNA-Seq"}return t});o=function(t){const e=t.filter(t=>{if(!t.hasOwnProperty("dataType"))throw console.error(t),"Parse Error: required attribute is missing: dataType";return"WGS"==t.dataType}).reduce((t,e)=>{if(!e.hasOwnProperty("subjectId"))throw"Parse Error: required attribute is missing.";return t[e.subjectId]=1,t},{});return t.map(t=>{if(!t.hasOwnProperty("dataType")||!t.hasOwnProperty("subjectId"))throw"Parse Error: required attribute is missing.";return"RNA-Seq"==t.dataType&&e.hasOwnProperty(t.subjectId)&&(t._type="RNA-Seq-WGS"),t})}(o);const s=ft(e,o,r);dt(t,s,!1),function(t,e,n,r,i,o){const s=r.filter(t=>!t.hasEGenes).map(t=>t.tissueSiteDetailId),a=()=>{let i=$('input[name="sex"]:checked').val(),o=$('input[name="tissueType"]:checked').val(),a=[],c=[],u="all"!=o;$(".ageBox").each(function(){$(this).is(":checked")&&a.push($(this).val()),a.length<6&&$('input[name="allAges"]').prop("checked",!1),6==a.length&&$('input[name="allAges"][value="all"]').prop("checked",!0)}),$(".hardyScale").each(function(){$(this).is(":checked")&&c.push($(this).val()),c.length<5&&$('input[name="allHardyScales"]').prop("checked",!1),5==c.length&&$('input[name="allHardyScales"][value="all"]').prop("checked",!0)});let l="all"==o?n.slice():n.filter((t,e)=>s.indexOf(t.tissueSiteDetailId)<0&&"RNA-Seq-WGS"==t._type);l="both"==i?l:l.filter(t=>t.sex==i),l=6==a.length?l:l.filter(t=>a.indexOf(t.ageBracket)>=0),l=5==c.length?l:l.filter(t=>c.indexOf(t.hardyScale)>=0),dt(t,ft(e.datasetId,l,r),u)};$('input[name="sex"]').change(a),$(".ageBox").each(function(){$(this).change(a)}),$('input[name="allAges"]').change(function(){let t=$(this).val();switch(t){case"all":$(".ageBox").prop("checked",!0),a();break;case"reset":$(".ageBox").prop("checked",!1)}}),$('input[name="tissueType"]').change(a),$(".hardyScale").each(function(){$(this).change(a)}),$('input[name="allHardyScale"]').change(function(){let t=$(this).val();switch(t){case"all":$(".hardyScale").prop("checked",!0),a();break;case"reset":$(".hardyScale").prop("checked",!1)}})}(t,s,o,r)}).catch(function(t){console.error(t)})},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
