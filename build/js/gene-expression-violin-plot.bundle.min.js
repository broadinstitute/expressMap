var GeneExpressionViolinPlot=function(t){"use strict";var n={},e={},r=34,i=10,o=13;function a(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function s(t){var s=new RegExp('["'+t+"\n\r]"),u=t.charCodeAt(0);function l(t,a){var s,l=[],c=t.length,h=0,f=0,p=c<=0,d=!1;function g(){if(p)return e;if(d)return d=!1,n;var a,s,l=h;if(t.charCodeAt(l)===r){for(;h++<c&&t.charCodeAt(h)!==r||t.charCodeAt(++h)===r;);return(a=h)>=c?p=!0:(s=t.charCodeAt(h++))===i?d=!0:s===o&&(d=!0,t.charCodeAt(h)===i&&++h),t.slice(l+1,a-1).replace(/""/g,'"')}for(;h<c;){if((s=t.charCodeAt(a=h++))===i)d=!0;else if(s===o)d=!0,t.charCodeAt(h)===i&&++h;else if(s!==u)continue;return t.slice(l,a)}return p=!0,t.slice(l,c)}for(t.charCodeAt(c-1)===i&&--c,t.charCodeAt(c-1)===o&&--c;(s=g())!==e;){for(var v=[];s!==n&&s!==e;)v.push(s),s=g();a&&null==(v=a(v,f++))||l.push(v)}return l}function c(n){return n.map(h).join(t)}function h(t){return null==t?"":s.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,r,i=l(t,function(t,i){if(e)return e(t,i-1);r=t,e=n?function(t,n){var e=a(t);return function(r,i){return n(e(r),i,t)}}(t,n):a(t)});return i.columns=r||[],i},parseRows:l,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}(n)),[e.map(h).join(t)].concat(n.map(function(n){return e.map(function(t){return h(n[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(c).join("\n")}}}s(","),s("\t");function u(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function l(t,n){return fetch(t,n).then(u)}function c(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var h,f,p=(1===(h=c).length&&(f=h,h=function(t,n){return c(f(t),n)}),{left:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;h(t[i],n)<0?e=i+1:r=i}return e},right:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;h(t[i],n)>0?r=i:e=i+1}return e}}).right;function d(t){return null===t?NaN:+t}function g(t,n){var e=function(t,n){var e,r,i=t.length,o=0,a=-1,s=0,u=0;if(null==n)for(;++a<i;)isNaN(e=d(t[a]))||(u+=(r=e-s)*(e-(s+=r/++o)));else for(;++a<i;)isNaN(e=d(n(t[a],a,t)))||(u+=(r=e-s)*(e-(s+=r/++o)));if(o>1)return u/(o-1)}(t,n);return e?Math.sqrt(e):e}function v(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e>=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}function m(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}var y=Math.sqrt(50),b=Math.sqrt(10),w=Math.sqrt(2);function x(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=y?10:o>=b?5:o>=w?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=y?10:o>=b?5:o>=w?2:1)}function _(t,n,e){if(null==e&&(e=d),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(i-o)}}function M(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r}function T(t,n){var e,r=t.length,i=-1,o=[];if(null==n)for(;++i<r;)isNaN(e=d(t[i]))||o.push(e);else for(;++i<r;)isNaN(e=d(n(t[i],i,t)))||o.push(e);return _(o.sort(c),.5)}function S(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r}var k="http://www.w3.org/1999/xhtml",A={svg:"http://www.w3.org/2000/svg",xhtml:k,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function C(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),A.hasOwnProperty(n)?{space:A[n],local:t}:t}function D(t){var n=C(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===k&&n.documentElement.namespaceURI===k?n.createElement(t):n.createElementNS(e,t)}})(n)}function E(){}function N(t){return null==t?E:function(){return this.querySelector(t)}}function O(){return[]}function I(t){return null==t?O:function(){return this.querySelectorAll(t)}}var U=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var P=document.documentElement;if(!P.matches){var z=P.webkitMatchesSelector||P.msMatchesSelector||P.mozMatchesSelector||P.oMatchesSelector;U=function(t){return function(){return z.call(this,t)}}}}var G=U;function F(t){return new Array(t.length)}function Y(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}Y.prototype={constructor:Y,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var j="$";function H(t,n,e,r,i,o){for(var a,s=0,u=n.length,l=o.length;s<l;++s)(a=n[s])?(a.__data__=o[s],r[s]=a):e[s]=new Y(t,o[s]);for(;s<u;++s)(a=n[s])&&(i[s]=a)}function L(t,n,e,r,i,o,a){var s,u,l,c={},h=n.length,f=o.length,p=new Array(h);for(s=0;s<h;++s)(u=n[s])&&(p[s]=l=j+a.call(u,u.__data__,s,n),l in c?i[s]=u:c[l]=u);for(s=0;s<f;++s)(u=c[l=j+a.call(t,o[s],s,o)])?(r[s]=u,u.__data__=o[s],c[l]=null):e[s]=new Y(t,o[s]);for(s=0;s<h;++s)(u=n[s])&&c[p[s]]===u&&(i[s]=u)}function q(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function V(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function X(t,n){return t.style.getPropertyValue(n)||V(t).getComputedStyle(t,null).getPropertyValue(n)}function B(t){return t.trim().split(/^|\s+/)}function R(t){return t.classList||new W(t)}function W(t){this._node=t,this._names=B(t.getAttribute("class")||"")}function Z(t,n){for(var e=R(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function J(t,n){for(var e=R(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function Q(){this.textContent=""}function K(){this.innerHTML=""}function tt(){this.nextSibling&&this.parentNode.appendChild(this)}function nt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function et(){return null}function rt(){var t=this.parentNode;t&&t.removeChild(this)}function it(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function ot(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}W.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var at={},st=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(at={mouseenter:"mouseover",mouseleave:"mouseout"}));function ut(t,n,e){return t=lt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function lt(t,n,e){return function(r){var i=st;st=r;try{t.call(this,this.__data__,n,e)}finally{st=i}}}function ct(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function ht(t,n,e){var r=at.hasOwnProperty(t.type)?ut:lt;return function(i,o,a){var s,u=this.__on,l=r(n,o,a);if(u)for(var c=0,h=u.length;c<h;++c)if((s=u[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=l,s.capture=e),void(s.value=n);this.addEventListener(t.type,l,e),s={type:t.type,name:t.name,value:n,listener:l,capture:e},u?u.push(s):this.__on=[s]}}function ft(t,n,e){var r=V(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var pt=[null];function dt(t,n){this._groups=t,this._parents=n}function gt(){return new dt([[document.documentElement]],pt)}function vt(t){return"string"==typeof t?new dt([[document.querySelector(t)]],[document.documentElement]):new dt([[t]],pt)}function mt(){for(var t,n=st;t=n.sourceEvent;)n=t;return n}function yt(t){var n=mt();return n.changedTouches&&(n=n.changedTouches[0]),function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}(t,n)}function bt(t){return"string"==typeof t?new dt([document.querySelectorAll(t)],[document.documentElement]):new dt([null==t?[]:t],pt)}dt.prototype=gt.prototype={constructor:dt,select:function(t){"function"!=typeof t&&(t=N(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,s=n[i],u=s.length,l=r[i]=new Array(u),c=0;c<u;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new dt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=I(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,s=n[o],u=s.length,l=0;l<u;++l)(a=s[l])&&(r.push(t.call(a,a.__data__,l,s)),i.push(a));return new dt(r,i)},filter:function(t){"function"!=typeof t&&(t=G(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new dt(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),c=-1,this.each(function(t){d[++c]=t}),d;var e,r=n?L:H,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,s=new Array(a),u=new Array(a),l=new Array(a),c=0;c<a;++c){var h=i[c],f=o[c],p=f.length,d=t.call(h,h&&h.__data__,c,i),g=d.length,v=u[c]=new Array(g),m=s[c]=new Array(g);r(h,f,v,m,l[c]=new Array(p),d,n);for(var y,b,w=0,x=0;w<g;++w)if(y=v[w]){for(w>=x&&(x=w+1);!(b=m[x])&&++x<g;);y._next=b||null}}return(s=new dt(s,i))._enter=u,s._exit=l,s},enter:function(){return new dt(this._enter||this._groups.map(F),this._parents)},exit:function(){return new dt(this._exit||this._groups.map(F),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=n[s],c=e[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=n[s];return new dt(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=q);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,s=e[o],u=s.length,l=i[o]=new Array(u),c=0;c<u;++c)(a=s[c])&&(l[c]=a);l.sort(n)}return new dt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=C(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):X(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=B(t+"");if(arguments.length<2){for(var r=R(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?Z:J)(this,t)}}:n?function(t){return function(){Z(this,t)}}:function(t){return function(){J(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?Q:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?K:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(tt)},lower:function(){return this.each(nt)},append:function(t){var n="function"==typeof t?t:D(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:D(t),r=null==n?et:"function"==typeof n?n:N(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(rt)},clone:function(t){return this.select(t?ot:it)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),a=o.length;if(!(arguments.length<2)){for(s=n?ht:ct,null==e&&(e=!1),r=0;r<a;++r)this.each(s(o[r],n,e));return this}var s=this.node().__on;if(s)for(var u,l=0,c=s.length;l<c;++l)for(r=0,u=s[l];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return ft(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return ft(this,t,n)}})(t,n))}};function wt(){}function xt(t,n){var e=new wt;if(t instanceof wt)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}function _t(){var t,n,e,r=[],i=[];function o(e,i,a,s){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var u,l,c,h=-1,f=e.length,p=r[i++],d=xt(),g=a();++h<f;)(c=d.get(u=p(l=e[h])+""))?c.push(l):d.set(u,[l]);return d.each(function(t,n){s(g,n,o(t,i,a,s))}),g}return e={object:function(t){return o(t,0,Mt,$t)},map:function(t){return o(t,0,Tt,St)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var a,s=i[o-1];return null!=n&&o>=r.length?a=e.entries():(a=[],e.each(function(n,e){a.push({key:e,values:t(n,o)})})),null!=s?a.sort(function(t,n){return s(t.key,n.key)}):a}(o(t,0,Tt,St),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}}function Mt(){return{}}function $t(t,n,e){t[n]=e}function Tt(){return xt()}function St(t,n,e){t.set(n,e)}function kt(){}wt.prototype=xt.prototype={constructor:wt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var At=xt.prototype;kt.prototype=function(t,n){var e=new kt;if(t instanceof kt)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}.prototype={constructor:kt,has:At.has,add:function(t){return this["$"+(t+="")]=t,this},remove:At.remove,clear:At.clear,values:At.keys,size:At.size,empty:At.empty,each:At.each};var Ct=Array.prototype,Dt=Ct.map,Et=Ct.slice,Nt={name:"implicit"};function Ot(){var t,n,e=function t(n){var e=xt(),r=[],i=Nt;function o(t){var o=t+"",a=e.get(o);if(!a){if(i!==Nt)return i;e.set(o,a=r.push(t))}return n[(a-1)%n.length]}return n=null==n?[]:Et.call(n),o.domain=function(t){if(!arguments.length)return r.slice();r=[],e=xt();for(var n,i,a=-1,s=t.length;++a<s;)e.has(i=(n=t[a])+"")||e.set(i,r.push(n));return o},o.range=function(t){return arguments.length?(n=Et.call(t),o):n.slice()},o.unknown=function(t){return arguments.length?(i=t,o):i},o.copy=function(){return t().domain(r).range(n).unknown(i)},o}().unknown(void 0),r=e.domain,i=e.range,o=[0,1],a=!1,s=0,u=0,l=.5;function c(){var e=r().length,c=o[1]<o[0],h=o[c-0],f=o[1-c];t=(f-h)/Math.max(1,e-s+2*u),a&&(t=Math.floor(t)),h+=(f-h-t*(e-s))*l,n=t*(1-s),a&&(h=Math.round(h),n=Math.round(n));var p=m(e).map(function(n){return h+t*n});return i(c?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),c()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],c()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,c()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(a=!!t,c()):a},e.padding=function(t){return arguments.length?(s=u=Math.max(0,Math.min(1,t)),c()):s},e.paddingInner=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),c()):s},e.paddingOuter=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),c()):u},e.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),c()):l},e.copy=function(){return Ot().domain(r()).range(o).round(a).paddingInner(s).paddingOuter(u).align(l)},c()}function It(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function Ut(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Pt(){}var zt="\\s*([+-]?\\d+)\\s*",Gt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ft="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Yt=/^#([0-9a-f]{3})$/,jt=/^#([0-9a-f]{6})$/,Ht=new RegExp("^rgb\\("+[zt,zt,zt]+"\\)$"),Lt=new RegExp("^rgb\\("+[Ft,Ft,Ft]+"\\)$"),qt=new RegExp("^rgba\\("+[zt,zt,zt,Gt]+"\\)$"),Vt=new RegExp("^rgba\\("+[Ft,Ft,Ft,Gt]+"\\)$"),Xt=new RegExp("^hsl\\("+[Gt,Ft,Ft]+"\\)$"),Bt=new RegExp("^hsla\\("+[Gt,Ft,Ft,Gt]+"\\)$"),Rt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Wt(t){var n;return t=(t+"").trim().toLowerCase(),(n=Yt.exec(t))?new tn((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=jt.exec(t))?Zt(parseInt(n[1],16)):(n=Ht.exec(t))?new tn(n[1],n[2],n[3],1):(n=Lt.exec(t))?new tn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=qt.exec(t))?Jt(n[1],n[2],n[3],n[4]):(n=Vt.exec(t))?Jt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Xt.exec(t))?en(n[1],n[2]/100,n[3]/100,1):(n=Bt.exec(t))?en(n[1],n[2]/100,n[3]/100,n[4]):Rt.hasOwnProperty(t)?Zt(Rt[t]):"transparent"===t?new tn(NaN,NaN,NaN,0):null}function Zt(t){return new tn(t>>16&255,t>>8&255,255&t,1)}function Jt(t,n,e,r){return r<=0&&(t=n=e=NaN),new tn(t,n,e,r)}function Qt(t){return t instanceof Pt||(t=Wt(t)),t?new tn((t=t.rgb()).r,t.g,t.b,t.opacity):new tn}function Kt(t,n,e,r){return 1===arguments.length?Qt(t):new tn(t,n,e,null==r?1:r)}function tn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function nn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function en(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new rn(t,n,e,r)}function rn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function on(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}It(Pt,Wt,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),It(tn,Kt,Ut(Pt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new tn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new tn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+nn(this.r)+nn(this.g)+nn(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),It(rn,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof rn)return new rn(t.h,t.s,t.l,t.opacity);if(t instanceof Pt||(t=Wt(t)),!t)return new rn;if(t instanceof rn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=n===o?(e-r)/s+6*(e<r):e===o?(r-n)/s+2:(n-e)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new rn(a,s,u,t.opacity)}(t):new rn(t,n,e,null==r?1:r)},Ut(Pt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new rn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new rn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new tn(on(t>=240?t-240:t+120,i,r),on(t,i,r),on(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var an=Math.PI/180,sn=180/Math.PI,un=.96422,ln=1,cn=.82521,hn=4/29,fn=6/29,pn=3*fn*fn,dn=fn*fn*fn;function gn(t){if(t instanceof vn)return new vn(t.l,t.a,t.b,t.opacity);if(t instanceof xn){if(isNaN(t.h))return new vn(t.l,0,0,t.opacity);var n=t.h*an;return new vn(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof tn||(t=Qt(t));var e,r,i=wn(t.r),o=wn(t.g),a=wn(t.b),s=mn((.2225045*i+.7168786*o+.0606169*a)/ln);return i===o&&o===a?e=r=s:(e=mn((.4360747*i+.3850649*o+.1430804*a)/un),r=mn((.0139322*i+.0971045*o+.7141733*a)/cn)),new vn(116*s-16,500*(e-s),200*(s-r),t.opacity)}function vn(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function mn(t){return t>dn?Math.pow(t,1/3):t/pn+hn}function yn(t){return t>fn?t*t*t:pn*(t-hn)}function bn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function wn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function xn(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}It(vn,function(t,n,e,r){return 1===arguments.length?gn(t):new vn(t,n,e,null==r?1:r)},Ut(Pt,{brighter:function(t){return new vn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new vn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new tn(bn(3.1338561*(n=un*yn(n))-1.6168667*(t=ln*yn(t))-.4906146*(e=cn*yn(e))),bn(-.9787684*n+1.9161415*t+.033454*e),bn(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),It(xn,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof xn)return new xn(t.h,t.c,t.l,t.opacity);if(t instanceof vn||(t=gn(t)),0===t.a&&0===t.b)return new xn(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*sn;return new xn(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new xn(t,n,e,null==r?1:r)},Ut(Pt,{brighter:function(t){return new xn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new xn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return gn(this).rgb()}}));var _n=-.14861,Mn=1.78277,$n=-.29227,Tn=-.90649,Sn=1.97294,kn=Sn*Tn,An=Sn*Mn,Cn=Mn*$n-Tn*_n;function Dn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function En(t){return function(){return t}}function Nn(t){return 1==(t=+t)?On:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):En(isNaN(n)?e:n)}}function On(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):En(isNaN(t)?n:t)}It(Dn,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof Dn)return new Dn(t.h,t.s,t.l,t.opacity);t instanceof tn||(t=Qt(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Cn*r+kn*n-An*e)/(Cn+kn-An),o=r-i,a=(Sn*(e-i)-$n*o)/Tn,s=Math.sqrt(a*a+o*o)/(Sn*i*(1-i)),u=s?Math.atan2(a,o)*sn-120:NaN;return new Dn(u<0?u+360:u,s,i,t.opacity)}(t):new Dn(t,n,e,null==r?1:r)},Ut(Pt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Dn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Dn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*an,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new tn(255*(n+e*(_n*r+Mn*i)),255*(n+e*($n*r+Tn*i)),255*(n+e*(Sn*r)),this.opacity)}}));var In=function t(n){var e=Nn(n);function r(t,n){var r=e((t=Kt(t)).r,(n=Kt(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=On(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function Un(t,n){return n-=t=+t,function(e){return t+n*e}}var Pn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,zn=new RegExp(Pn.source,"g");function Gn(t,n){var e,r,i,o=Pn.lastIndex=zn.lastIndex=0,a=-1,s=[],u=[];for(t+="",n+="";(e=Pn.exec(t))&&(r=zn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(e=e[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:Un(e,r)})),o=zn.lastIndex;return o<n.length&&(i=n.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(n){return t(n)+""}}(u[0].x):function(t){return function(){return t}}(n):(n=u.length,function(t){for(var e,r=0;r<n;++r)s[(e=u[r]).i]=e.x(t);return s.join("")})}function Fn(t,n){var e,r=typeof n;return null==n||"boolean"===r?En(n):("number"===r?Un:"string"===r?(e=Wt(n))?(n=e,In):Gn:n instanceof Wt?In:n instanceof Date?function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}:Array.isArray(n)?function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=Fn(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Fn(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}:Un)(t,n)}function Yn(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}}var jn,Hn,Ln,qn,Vn=180/Math.PI,Xn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Bn(t,n,e,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(u=t*e+n*r)&&(e-=t*u,r-=n*u),(s=Math.sqrt(e*e+r*r))&&(e/=s,r/=s,u/=s),t*r<n*e&&(t=-t,n=-n,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Vn,skewX:Math.atan(u)*Vn,scaleX:a,scaleY:s}}function Rn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,n,null,e);s.push({i:u-4,x:Un(t,i)},{i:u-2,x:Un(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Un(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,s,u),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Un(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,s,u),function(t,n,e,r,o,a){if(t!==e||n!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:Un(t,e)},{i:s-2,x:Un(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var n,e=-1,r=u.length;++e<r;)s[(n=u[e]).i]=n.x(t);return s.join("")}}}var Wn=Rn(function(t){return"none"===t?Xn:(jn||(jn=document.createElement("DIV"),Hn=document.documentElement,Ln=document.defaultView),jn.style.transform=t,t=Ln.getComputedStyle(Hn.appendChild(jn),null).getPropertyValue("transform"),Hn.removeChild(jn),Bn(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Zn=Rn(function(t){return null==t?Xn:(qn||(qn=document.createElementNS("http://www.w3.org/2000/svg","g")),qn.setAttribute("transform",t),(t=qn.transform.baseVal.consolidate())?Bn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Xn)},", ",")",")");Math.SQRT2;function Jn(t){return+t}var Qn=[0,1];function Kn(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=n,function(){return e});var e}function te(t,n,e,r){var i=t[0],o=t[1],a=n[0],s=n[1];return o<i?(i=e(o,i),a=r(s,a)):(i=e(i,o),a=r(a,s)),function(t){return a(i(t))}}function ne(t,n,e,r){var i=Math.min(t.length,n.length)-1,o=new Array(i),a=new Array(i),s=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++s<i;)o[s]=e(t[s],t[s+1]),a[s]=r(n[s],n[s+1]);return function(n){var e=p(t,n,1,i)-1;return a[e](o[e](n))}}function ee(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function re(t){return(t=ee(Math.abs(t)))?t[1]:NaN}var ie,oe=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ae(t){return new se(t)}function se(t){if(!(n=oe.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}function ue(t,n){var e=ee(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}ae.prototype=se.prototype,se.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var le={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return ue(100*t,n)},r:ue,s:function(t,n){var e=ee(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(ie=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+ee(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function ce(t){return t}var he,fe,pe,de=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function ge(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],a=0,s=n[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=n[a=(a+1)%n.length];return o.reverse().join(e)}):ce,i=t.currency,o=t.decimal,a=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):ce,s=t.percent||"%";function u(t){var n=(t=ae(t)).fill,e=t.align,u=t.sign,l=t.symbol,c=t.zero,h=t.width,f=t.comma,p=t.precision,d=t.trim,g=t.type;"n"===g?(f=!0,g="g"):le[g]||(null==p&&(p=12),d=!0,g="g"),(c||"0"===n&&"="===e)&&(c=!0,n="0",e="=");var v="$"===l?i[0]:"#"===l&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",m="$"===l?i[1]:/[%p]/.test(g)?s:"",y=le[g],b=/[defgprs%]/.test(g);function w(t){var i,s,l,w=v,x=m;if("c"===g)x=y(t)+x,t="";else{var _=(t=+t)<0;if(t=y(Math.abs(t),p),d&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),_&&0==+t&&(_=!1),w=(_?"("===u?u:"-":"-"===u||"("===u?"":u)+w,x=("s"===g?de[8+ie/3]:"")+x+(_&&"("===u?")":""),b)for(i=-1,s=t.length;++i<s;)if(48>(l=t.charCodeAt(i))||l>57){x=(46===l?o+t.slice(i+1):t.slice(i))+x,t=t.slice(0,i);break}}f&&!c&&(t=r(t,1/0));var M=w.length+t.length+x.length,$=M<h?new Array(h-M+1).join(n):"";switch(f&&c&&(t=r($+t,$.length?h-x.length:1/0),$=""),e){case"<":t=w+t+x+$;break;case"=":t=w+$+t+x;break;case"^":t=$.slice(0,M=$.length>>1)+w+t+x+$.slice(M);break;default:t=$+w+t+x}return a(t)}return p=null==p?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),w.toString=function(){return t+""},w}return{format:u,formatPrefix:function(t,n){var e=u(((t=ae(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(re(n)/3))),i=Math.pow(10,-r),o=de[8+r/3];return function(t){return e(i*t)+o}}}}function ve(t,n,e){var r,i=t[0],o=t[t.length-1],a=function(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=y?i*=10:o>=b?i*=5:o>=w&&(i*=2),n<t?-i:i}(i,o,null==n?10:n);switch((e=ae(null==e?",f":e)).type){case"s":var s=Math.max(Math.abs(i),Math.abs(o));return null!=e.precision||isNaN(r=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(re(n)/3)))-re(Math.abs(t)))}(a,s))||(e.precision=r),pe(e,s);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(r=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,re(n)-re(t))+1}(a,Math.max(Math.abs(i),Math.abs(o))))||(e.precision=r-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(r=function(t){return Math.max(0,-re(Math.abs(t)))}(a))||(e.precision=r-2*("%"===e.type))}return fe(e)}function me(t){var n=t.domain;return t.ticks=function(t){var e=n();return function(t,n,e){var r,i,o,a,s=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=x(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o}(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return ve(n(),t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,a=i.length-1,s=i[o],u=i[a];return u<s&&(r=s,s=u,u=r,r=o,o=a,a=r),(r=x(s,u,e))>0?r=x(s=Math.floor(s/r)*r,u=Math.ceil(u/r)*r,e):r<0&&(r=x(s=Math.ceil(s*r)/r,u=Math.floor(u*r)/r,e)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(u/r)*r,n(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(u*r)/r,n(i)),t},t}function ye(){var t=function(t,n){var e,r,i,o=Qn,a=Qn,s=Fn,u=!1;function l(){return e=Math.min(o.length,a.length)>2?ne:te,r=i=null,c}function c(n){return(r||(r=e(o,a,u?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,s)))(+n)}return c.invert=function(t){return(i||(i=e(a,o,Kn,u?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},c.domain=function(t){return arguments.length?(o=Dt.call(t,Jn),l()):o.slice()},c.range=function(t){return arguments.length?(a=Et.call(t),l()):a.slice()},c.rangeRound=function(t){return a=Et.call(t),s=Yn,l()},c.clamp=function(t){return arguments.length?(u=!!t,l()):u},c.interpolate=function(t){return arguments.length?(s=t,l()):s},l()}(Kn,Un);return t.copy=function(){return n=t,ye().domain(n.domain()).range(n.range()).interpolate(n.interpolate()).clamp(n.clamp());var n},me(t)}he=ge({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),fe=he.format,pe=he.formatPrefix;var be=new Date,we=new Date;function xe(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,s=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return s;do{s.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return s},i.filter=function(e){return xe(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return be.setTime(+n),we.setTime(+r),t(be),t(we),Math.floor(e(be,we))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var _e=xe(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});_e.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?xe(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):_e:null};var Me=6e4,$e=6048e5,Te=(xe(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),xe(function(t){t.setTime(Math.floor(t/Me)*Me)},function(t,n){t.setTime(+t+n*Me)},function(t,n){return(n-t)/Me},function(t){return t.getMinutes()}),xe(function(t){var n=t.getTimezoneOffset()*Me%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()}),xe(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Me)/864e5},function(t){return t.getDate()-1}));function Se(t){return xe(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Me)/$e})}var ke=Se(0),Ae=Se(1),Ce=(Se(2),Se(3),Se(4)),De=(Se(5),Se(6),xe(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),xe(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));De.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xe(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};xe(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*Me)},function(t,n){return(n-t)/Me},function(t){return t.getUTCMinutes()}),xe(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()});var Ee=xe(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1});function Ne(t){return xe(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/$e})}var Oe=Ne(0),Ie=Ne(1),Ue=(Ne(2),Ne(3),Ne(4)),Pe=(Ne(5),Ne(6),xe(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),xe(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function ze(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Ge(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Fe(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}Pe.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xe(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var Ye,je,He,Le={"-":"",_:" ",0:"0"},qe=/^\s*\d+/,Ve=/^%/,Xe=/[\\^$*+?|[\]().{}]/g;function Be(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Re(t){return t.replace(Xe,"\\$&")}function We(t){return new RegExp("^(?:"+t.map(Re).join("|")+")","i")}function Ze(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Je(t,n,e){var r=qe.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Qe(t,n,e){var r=qe.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Ke(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function tr(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function nr(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function er(t,n,e){var r=qe.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function rr(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function ir(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function or(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function ar(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function sr(t,n,e){var r=qe.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function ur(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function lr(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function cr(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function hr(t,n,e){var r=qe.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function fr(t,n,e){var r=qe.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function pr(t,n,e){var r=Ve.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function dr(t,n,e){var r=qe.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function gr(t,n,e){var r=qe.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function vr(t,n){return Be(t.getDate(),n,2)}function mr(t,n){return Be(t.getHours(),n,2)}function yr(t,n){return Be(t.getHours()%12||12,n,2)}function br(t,n){return Be(1+Te.count(De(t),t),n,3)}function wr(t,n){return Be(t.getMilliseconds(),n,3)}function xr(t,n){return wr(t,n)+"000"}function _r(t,n){return Be(t.getMonth()+1,n,2)}function Mr(t,n){return Be(t.getMinutes(),n,2)}function $r(t,n){return Be(t.getSeconds(),n,2)}function Tr(t){var n=t.getDay();return 0===n?7:n}function Sr(t,n){return Be(ke.count(De(t),t),n,2)}function kr(t,n){var e=t.getDay();return t=e>=4||0===e?Ce(t):Ce.ceil(t),Be(Ce.count(De(t),t)+(4===De(t).getDay()),n,2)}function Ar(t){return t.getDay()}function Cr(t,n){return Be(Ae.count(De(t),t),n,2)}function Dr(t,n){return Be(t.getFullYear()%100,n,2)}function Er(t,n){return Be(t.getFullYear()%1e4,n,4)}function Nr(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Be(n/60|0,"0",2)+Be(n%60,"0",2)}function Or(t,n){return Be(t.getUTCDate(),n,2)}function Ir(t,n){return Be(t.getUTCHours(),n,2)}function Ur(t,n){return Be(t.getUTCHours()%12||12,n,2)}function Pr(t,n){return Be(1+Ee.count(Pe(t),t),n,3)}function zr(t,n){return Be(t.getUTCMilliseconds(),n,3)}function Gr(t,n){return zr(t,n)+"000"}function Fr(t,n){return Be(t.getUTCMonth()+1,n,2)}function Yr(t,n){return Be(t.getUTCMinutes(),n,2)}function jr(t,n){return Be(t.getUTCSeconds(),n,2)}function Hr(t){var n=t.getUTCDay();return 0===n?7:n}function Lr(t,n){return Be(Oe.count(Pe(t),t),n,2)}function qr(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Ue(t):Ue.ceil(t),Be(Ue.count(Pe(t),t)+(4===Pe(t).getUTCDay()),n,2)}function Vr(t){return t.getUTCDay()}function Xr(t,n){return Be(Ie.count(Pe(t),t),n,2)}function Br(t,n){return Be(t.getUTCFullYear()%100,n,2)}function Rr(t,n){return Be(t.getUTCFullYear()%1e4,n,4)}function Wr(){return"+0000"}function Zr(){return"%"}function Jr(t){return+t}function Qr(t){return Math.floor(+t/1e3)}!function(t){Ye=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,s=t.months,u=t.shortMonths,l=We(i),c=Ze(i),h=We(o),f=Ze(o),p=We(a),d=Ze(a),g=We(s),v=Ze(s),m=We(u),y=Ze(u),b={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:vr,e:vr,f:xr,H:mr,I:yr,j:br,L:wr,m:_r,M:Mr,p:function(t){return i[+(t.getHours()>=12)]},Q:Jr,s:Qr,S:$r,u:Tr,U:Sr,V:kr,w:Ar,W:Cr,x:null,X:null,y:Dr,Y:Er,Z:Nr,"%":Zr},w={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:Or,e:Or,f:Gr,H:Ir,I:Ur,j:Pr,L:zr,m:Fr,M:Yr,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:Jr,s:Qr,S:jr,u:Hr,U:Lr,V:qr,w:Vr,W:Xr,x:null,X:null,y:Br,Y:Rr,Z:Wr,"%":Zr},x={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=h.exec(n.slice(e));return r?(t.w=f[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=m.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=v[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return $(t,n,e,r)},d:ar,e:ar,f:fr,H:ur,I:ur,j:sr,L:hr,m:or,M:lr,p:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.p=c[r[0].toLowerCase()],e+r[0].length):-1},Q:dr,s:gr,S:cr,u:Qe,U:Ke,V:tr,w:Je,W:nr,x:function(t,n,r){return $(t,e,n,r)},X:function(t,n,e){return $(t,r,n,e)},y:rr,Y:er,Z:ir,"%":pr};function _(t,n){return function(e){var r,i,o,a=[],s=-1,u=0,l=t.length;for(e instanceof Date||(e=new Date(+e));++s<l;)37===t.charCodeAt(s)&&(a.push(t.slice(u,s)),null!=(i=Le[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),u=s+1);return a.push(t.slice(u,s)),a.join("")}}function M(t,n){return function(e){var r,i,o=Fe(1900);if($(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(r=(i=(r=Ge(Fe(o.y))).getUTCDay())>4||0===i?Ie.ceil(r):Ie(r),r=Ee.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(r=(i=(r=n(Fe(o.y))).getDay())>4||0===i?Ae.ceil(r):Ae(r),r=Te.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Ge(Fe(o.y)).getUTCDay():n(Fe(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Ge(o)):n(o)}}function $(t,n,e,r){for(var i,o,a=0,s=n.length,u=e.length;a<s;){if(r>=u)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=x[i in Le?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return b.x=_(e,b),b.X=_(r,b),b.c=_(n,b),w.x=_(e,w),w.X=_(r,w),w.c=_(n,w),{format:function(t){var n=_(t+="",b);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",ze);return n.toString=function(){return t},n},utcFormat:function(t){var n=_(t+="",w);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,Ge);return n.toString=function(){return t},n}}}(t),Ye.format,Ye.parse,je=Ye.utcFormat,He=Ye.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||je("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||He("%Y-%m-%dT%H:%M:%S.%LZ");var Kr=Math.PI,ti=2*Kr,ni=ti-1e-6;function ei(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ri(){return new ei}function ii(t){return function(){return t}}ei.prototype=ri.prototype={constructor:ei,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,s=e-t,u=r-n,l=o-t,c=a-n,h=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(c*s-u*l)>1e-6&&i){var f=e-o,p=r-a,d=s*s+u*u,g=f*f+p*p,v=Math.sqrt(d),m=Math.sqrt(h),y=i*Math.tan((Kr-Math.acos((d+h-g)/(2*v*m)))/2),b=y/m,w=y/v;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*l)+","+(n+b*c)),this._+="A"+i+","+i+",0,0,"+ +(c*f>l*p)+","+(this._x1=t+w*s)+","+(this._y1=n+w*u)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n;var a=(e=+e)*Math.cos(r),s=e*Math.sin(r),u=t+a,l=n+s,c=1^o,h=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+u+","+l:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+u+","+l),e&&(h<0&&(h=h%ti+ti),h>ni?this._+="A"+e+","+e+",0,1,"+c+","+(t-a)+","+(n-s)+"A"+e+","+e+",0,1,"+c+","+(this._x1=u)+","+(this._y1=l):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=Kr)+","+c+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};Math.PI;function oi(t){this._context=t}function ai(t){return new oi(t)}function si(t){return t[0]}function ui(t){return t[1]}function li(){var t=si,n=null,e=ii(0),r=ui,i=ii(!0),o=null,a=ai,s=null;function u(u){var l,c,h,f,p,d=u.length,g=!1,v=new Array(d),m=new Array(d);for(null==o&&(s=a(p=ri())),l=0;l<=d;++l){if(!(l<d&&i(f=u[l],l,u))===g)if(g=!g)c=l,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),h=l-1;h>=c;--h)s.point(v[h],m[h]);s.lineEnd(),s.areaEnd()}g&&(v[l]=+t(f,l,u),m[l]=+e(f,l,u),s.point(n?+n(f,l,u):v[l],r?+r(f,l,u):m[l]))}if(p)return s=null,p+""||null}function l(){return function(){var t=si,n=ui,e=ii(!0),r=null,i=ai,o=null;function a(a){var s,u,l,c=a.length,h=!1;for(null==r&&(o=i(l=ri())),s=0;s<=c;++s)!(s<c&&e(u=a[s],s,a))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+t(u,s,a),+n(u,s,a));if(l)return o=null,l+""||null}return a.x=function(n){return arguments.length?(t="function"==typeof n?n:ii(+n),a):t},a.y=function(t){return arguments.length?(n="function"==typeof t?t:ii(+t),a):n},a.defined=function(t){return arguments.length?(e="function"==typeof t?t:ii(!!t),a):e},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}().defined(i).curve(a).context(o)}return u.x=function(e){return arguments.length?(t="function"==typeof e?e:ii(+e),n=null,u):t},u.x0=function(n){return arguments.length?(t="function"==typeof n?n:ii(+n),u):t},u.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:ii(+t),u):n},u.y=function(t){return arguments.length?(e="function"==typeof t?t:ii(+t),r=null,u):e},u.y0=function(t){return arguments.length?(e="function"==typeof t?t:ii(+t),u):e},u.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:ii(+t),u):r},u.lineX0=u.lineY0=function(){return l().x(t).y(e)},u.lineY1=function(){return l().x(t).y(r)},u.lineX1=function(){return l().x(n).y(e)},u.defined=function(t){return arguments.length?(i="function"==typeof t?t:ii(!!t),u):i},u.curve=function(t){return arguments.length?(a=t,null!=o&&(s=a(o)),u):a},u.context=function(t){return arguments.length?(null==t?o=s=null:s=a(o=t),u):o},u}function ci(t){return t<0?-1:1}function hi(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(e-t._y1)/(i||r<0&&-0),s=(o*i+a*r)/(r+i);return(ci(o)+ci(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(s))||0}function fi(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function pi(t,n,e){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,s=(o-r)/3;t._context.bezierCurveTo(r+s,i+s*n,o-s,a-s*e,o,a)}function di(t){this._context=t}function gi(t){this._context=t}oi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}},di.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:pi(this,this._t0,fi(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,pi(this,fi(this,e=hi(this,t,n)),e);break;default:pi(this,this._t0,e=hi(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(function(t){this._context=new gi(t)}.prototype=Object.create(di.prototype)).point=function(t,n){di.prototype.point.call(this,n,t)},gi.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}};var vi=Array.prototype.slice;function mi(t){return t}var yi=1,bi=2,wi=3,xi=4,_i=1e-6;function Mi(t){return"translate("+(t+.5)+",0)"}function $i(t){return"translate(0,"+(t+.5)+")"}function Ti(){return!this.__axis}function Si(t,n){var e=[],r=null,i=null,o=6,a=6,s=3,u=t===yi||t===xi?-1:1,l=t===xi||t===bi?"x":"y",c=t===yi||t===wi?Mi:$i;function h(h){var f=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):mi:i,d=Math.max(o,0)+s,g=n.range(),v=+g[0]+.5,m=+g[g.length-1]+.5,y=(n.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}:function(t){return function(n){return+t(n)}})(n.copy()),b=h.selection?h.selection():h,w=b.selectAll(".domain").data([null]),x=b.selectAll(".tick").data(f,n).order(),_=x.exit(),M=x.enter().append("g").attr("class","tick"),$=x.select("line"),T=x.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),x=x.merge(M),$=$.merge(M.append("line").attr("stroke","#000").attr(l+"2",u*o)),T=T.merge(M.append("text").attr("fill","#000").attr(l,u*d).attr("dy",t===yi?"0em":t===wi?"0.71em":"0.32em")),h!==b&&(w=w.transition(h),x=x.transition(h),$=$.transition(h),T=T.transition(h),_=_.transition(h).attr("opacity",_i).attr("transform",function(t){return isFinite(t=y(t))?c(t):this.getAttribute("transform")}),M.attr("opacity",_i).attr("transform",function(t){var n=this.parentNode.__axis;return c(n&&isFinite(n=n(t))?n:y(t))})),_.remove(),w.attr("d",t===xi||t==bi?"M"+u*a+","+v+"H0.5V"+m+"H"+u*a:"M"+v+","+u*a+"V0.5H"+m+"V"+u*a),x.attr("opacity",1).attr("transform",function(t){return c(y(t))}),$.attr(l+"2",u*o),T.attr(l,u*d).text(p),b.filter(Ti).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===bi?"start":t===xi?"end":"middle"),b.each(function(){this.__axis=y})}return h.scale=function(t){return arguments.length?(n=t,h):n},h.ticks=function(){return e=vi.call(arguments),h},h.tickArguments=function(t){return arguments.length?(e=null==t?[]:vi.call(t),h):e.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:vi.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(o=a=+t,h):o},h.tickSizeInner=function(t){return arguments.length?(o=+t,h):o},h.tickSizeOuter=function(t){return arguments.length?(a=+t,h):a},h.tickPadding=function(t){return arguments.length?(s=+t,h):s},h}function ki(t){return Si(wi,t)}var Ai={value:function(){}};function Ci(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new Di(r)}function Di(t){this._=t}function Ei(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function Ni(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=Ai,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}function Oi(){st.preventDefault(),st.stopImmediatePropagation()}Di.prototype=Ci.prototype={constructor:Di,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),a=-1,s=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<s;)if(e=(t=o[a]).type)i[e]=Ni(i[e],t.name,n);else if(null==n)for(e in i)i[e]=Ni(i[e],t.name,null);return this}for(;++a<s;)if((e=(t=o[a]).type)&&(e=Ei(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new Di(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var Ii,Ui,Pi=0,zi=0,Gi=0,Fi=1e3,Yi=0,ji=0,Hi=0,Li="object"==typeof performance&&performance.now?performance:Date,qi="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Vi(){return ji||(qi(Xi),ji=Li.now()+Hi)}function Xi(){ji=0}function Bi(){this._call=this._time=this._next=null}function Ri(t,n,e){var r=new Bi;return r.restart(t,n,e),r}function Wi(){ji=(Yi=Li.now())+Hi,Pi=zi=0;try{!function(){Vi(),++Pi;for(var t,n=Ii;n;)(t=ji-n._time)>=0&&n._call.call(null,t),n=n._next;--Pi}()}finally{Pi=0,function(){var t,n,e=Ii,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Ii=n);Ui=t,Ji(r)}(),ji=0}}function Zi(){var t=Li.now(),n=t-Yi;n>Fi&&(Hi-=n,Yi=t)}function Ji(t){Pi||(zi&&(zi=clearTimeout(zi)),t-ji>24?(t<1/0&&(zi=setTimeout(Wi,t-Li.now()-Hi)),Gi&&(Gi=clearInterval(Gi))):(Gi||(Yi=Li.now(),Gi=setInterval(Zi,Fi)),Pi=1,qi(Wi)))}function Qi(t,n,e){var r=new Bi;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r}Bi.prototype=Ri.prototype={constructor:Bi,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Vi():+e)+(null==n?0:+n),this._next||Ui===this||(Ui?Ui._next=this:Ii=this,Ui=this),this._call=t,this._time=e,Ji()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ji())}};var Ki=Ci("start","end","interrupt"),to=[],no=0,eo=1,ro=2,io=3,oo=4,ao=5,so=6;function uo(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(u){var l,c,h,f;if(e.state!==eo)return s();for(l in i)if((f=i[l]).name===e.name){if(f.state===io)return Qi(o);f.state===oo?(f.state=so,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<n&&(f.state=so,f.timer.stop(),delete i[l])}if(Qi(function(){e.state===io&&(e.state=oo,e.timer.restart(a,e.delay,e.time),a(u))}),e.state=ro,e.on.call("start",t,t.__data__,e.index,e.group),e.state===ro){for(e.state=io,r=new Array(h=e.tween.length),l=0,c=-1;l<h;++l)(f=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=f);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(s),e.state=ao,1),o=-1,a=r.length;++o<a;)r[o].call(null,i);e.state===ao&&(e.on.call("end",t,t.__data__,e.index,e.group),s())}function s(){for(var r in e.state=so,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Ri(function(t){e.state=eo,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:Ki,tween:to,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:no})}function lo(t,n){var e=ho(t,n);if(e.state>no)throw new Error("too late; already scheduled");return e}function co(t,n){var e=ho(t,n);if(e.state>ro)throw new Error("too late; already started");return e}function ho(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function fo(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>ro&&e.state<ao,e.state=so,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}function po(t,n,e){var r=t._id;return t.each(function(){var t=co(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return ho(t,r).value[n]}}function go(t,n){var e;return("number"==typeof n?Un:n instanceof Wt?In:(e=Wt(n))?(n=e,In):Gn)(t,n)}var vo=gt.prototype.constructor;var mo=0;function yo(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function bo(){return++mo}var wo=gt.prototype;yo.prototype=function(t){return gt().transition(t)}.prototype={constructor:yo,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=N(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,u,l=r[a],c=l.length,h=o[a]=new Array(c),f=0;f<c;++f)(s=l[f])&&(u=t.call(s,s.__data__,f,l))&&("__data__"in s&&(u.__data__=s.__data__),h[f]=u,uo(h[f],n,e,f,h,ho(s,e)));return new yo(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=I(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var u,l=r[s],c=l.length,h=0;h<c;++h)if(u=l[h]){for(var f,p=t.call(u,u.__data__,h,l),d=ho(u,e),g=0,v=p.length;g<v;++g)(f=p[g])&&uo(f,n,e,g,p,d);o.push(p),a.push(u)}return new yo(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=G(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new yo(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=n[s],c=e[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=n[s];return new yo(a,this._parents,this._name,this._id)},selection:function(){return new vo(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=bo(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)if(a=s[l]){var c=ho(a,n);uo(a,t,e,l,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new yo(r,this._parents,t,e)},call:wo.call,nodes:wo.nodes,node:wo.node,size:wo.size,empty:wo.empty,each:wo.each,on:function(t,n){var e=this._id;return arguments.length<2?ho(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?lo:co;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(n,e),a.on=i}}(e,t,n))},attr:function(t,n){var e=C(t),r="transform"===e?Zn:go;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,o;return function(){var a,s=e(this);if(null!=s)return(a=this.getAttributeNS(t.space,t.local))===s?null:a===r&&s===i?o:o=n(r=a,i=s);this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,o;return function(){var a,s=e(this);if(null!=s)return(a=this.getAttribute(t))===s?null:a===r&&s===i?o:o=n(r=a,i=s);this.removeAttribute(t)}})(e,r,po(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===e?null:o===r?i:i=n(r=o,e)}}:function(t,n,e){var r,i;return function(){var o=this.getAttribute(t);return o===e?null:o===r?i:i=n(r=o,e)}})(e,r,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=C(t);return this.tween(e,(r.local?function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}:function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Wn:go;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=X(this,t),a=(this.style.removeProperty(t),X(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var r,i,o;return function(){var a=X(this,t),s=e(this);return null==s&&(this.style.removeProperty(t),s=X(this,t)),a===s?null:a===r&&s===i?o:o=n(r=a,i=s)}}(t,r,po(this,"style."+t,n)):function(t,n,e){var r,i;return function(){var o=X(this,t);return o===e?null:o===r?i:i=n(r=o,e)}}(t,r,n+""),e)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(po(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=ho(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=co(this,t),o=i.tween;if(o!==e)for(var a=0,s=(r=e=o).length;a<s;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=co(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:n,value:e},u=0,l=i.length;u<l;++u)if(i[u].name===n){i[u]=s;break}u===l&&i.push(s)}o.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){lo(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){lo(this,t).delay=n}})(n,t)):ho(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){co(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){co(this,t).duration=n}})(n,t)):ho(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){co(this,t).ease=n}}(n,t)):ho(this.node(),n).ease}};Math.PI,Math.PI;var xo={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function _o(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return xo.time=Vi(),xo;return e}function Mo(t){return function(){return t}}function $o(){st.stopImmediatePropagation()}function To(){st.preventDefault(),st.stopImmediatePropagation()}gt.prototype.interrupt=function(t){return this.each(function(){fo(this,t)})},gt.prototype.transition=function(t){var n,e;t instanceof yo?(n=t._id,t=t._name):(n=bo(),(e=xo).time=Vi(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)(a=s[l])&&uo(a,t,n,l,s,e||_o(a,n));return new yo(r,this._parents,t,n)};var So={name:"drag"},ko={name:"space"},Ao={name:"handle"},Co={name:"center"},Do={name:"x",handles:["e","w"].map(Go),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Eo={name:"y",handles:["n","s"].map(Go),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},No={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Go),input:function(t){return t},output:function(t){return t}},Oo={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Io={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Uo={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Po={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},zo={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Go(t){return{type:t}}function Fo(){return!st.button}function Yo(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function jo(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Ho(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Lo(){return function(t){var n,e=Yo,r=Fo,i=Ci(a,"start","brush","end"),o=6;function a(n){var e=n.property("__brush",h).selectAll(".overlay").data([Go("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Oo.overlay).merge(e).each(function(){var t=jo(this).extent;vt(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),n.selectAll(".selection").data([Go("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Oo.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,function(t){return t.type});r.exit().remove(),r.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Oo[t.type]}),n.each(s).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",c)}function s(){var t=vt(this),n=jo(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?n[1][0]-o/2:n[0][0]-o/2}).attr("y",function(t){return"s"===t.type[0]?n[1][1]-o/2:n[0][1]-o/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+o:o}).attr("height",function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+o:o})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function u(t,n){return t.__brush.emitter||new l(t,n)}function l(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function c(){if(st.touches){if(st.changedTouches.length<st.touches.length)return To()}else if(n)return;if(r.apply(this,arguments)){var e,i,o,a,l,c,h,f,p,d,g,v,m,y=this,b=st.target.__data__.type,w="selection"===(st.metaKey?b="overlay":b)?So:st.altKey?Co:Ao,x=t===Eo?null:Po[b],_=t===Do?null:zo[b],M=jo(y),$=M.extent,T=M.selection,S=$[0][0],k=$[0][1],A=$[1][0],C=$[1][1],D=x&&_&&st.shiftKey,E=yt(y),N=E,O=u(y,arguments).beforestart();"overlay"===b?M.selection=T=[[e=t===Eo?S:E[0],o=t===Do?k:E[1]],[l=t===Eo?A:e,h=t===Do?C:o]]:(e=T[0][0],o=T[0][1],l=T[1][0],h=T[1][1]),i=e,a=o,c=l,f=h;var I=vt(y).attr("pointer-events","none"),U=I.selectAll(".overlay").attr("cursor",Oo[b]);if(st.touches)I.on("touchmove.brush",z,!0).on("touchend.brush touchcancel.brush",F,!0);else{var P=vt(st.view).on("keydown.brush",function(){switch(st.keyCode){case 16:D=x&&_;break;case 18:w===Ao&&(x&&(l=c-p*x,e=i+p*x),_&&(h=f-d*_,o=a+d*_),w=Co,G());break;case 32:w!==Ao&&w!==Co||(x<0?l=c-p:x>0&&(e=i-p),_<0?h=f-d:_>0&&(o=a-d),w=ko,U.attr("cursor",Oo.selection),G());break;default:return}To()},!0).on("keyup.brush",function(){switch(st.keyCode){case 16:D&&(v=m=D=!1,G());break;case 18:w===Co&&(x<0?l=c:x>0&&(e=i),_<0?h=f:_>0&&(o=a),w=Ao,G());break;case 32:w===ko&&(st.altKey?(x&&(l=c-p*x,e=i+p*x),_&&(h=f-d*_,o=a+d*_),w=Co):(x<0?l=c:x>0&&(e=i),_<0?h=f:_>0&&(o=a),w=Ao),U.attr("cursor",Oo[b]),G());break;default:return}To()},!0).on("mousemove.brush",z,!0).on("mouseup.brush",F,!0);!function(t){var n=t.document.documentElement,e=vt(t).on("dragstart.drag",Oi,!0);"onselectstart"in n?e.on("selectstart.drag",Oi,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}(st.view)}$o(),fo(y),s.call(y),O.start()}function z(){var t=yt(y);!D||v||m||(Math.abs(t[0]-N[0])>Math.abs(t[1]-N[1])?m=!0:v=!0),N=t,g=!0,To(),G()}function G(){var t;switch(p=N[0]-E[0],d=N[1]-E[1],w){case ko:case So:x&&(p=Math.max(S-e,Math.min(A-l,p)),i=e+p,c=l+p),_&&(d=Math.max(k-o,Math.min(C-h,d)),a=o+d,f=h+d);break;case Ao:x<0?(p=Math.max(S-e,Math.min(A-e,p)),i=e+p,c=l):x>0&&(p=Math.max(S-l,Math.min(A-l,p)),i=e,c=l+p),_<0?(d=Math.max(k-o,Math.min(C-o,d)),a=o+d,f=h):_>0&&(d=Math.max(k-h,Math.min(C-h,d)),a=o,f=h+d);break;case Co:x&&(i=Math.max(S,Math.min(A,e-p*x)),c=Math.max(S,Math.min(A,l+p*x))),_&&(a=Math.max(k,Math.min(C,o-d*_)),f=Math.max(k,Math.min(C,h+d*_)))}c<i&&(x*=-1,t=e,e=l,l=t,t=i,i=c,c=t,b in Io&&U.attr("cursor",Oo[b=Io[b]])),f<a&&(_*=-1,t=o,o=h,h=t,t=a,a=f,f=t,b in Uo&&U.attr("cursor",Oo[b=Uo[b]])),M.selection&&(T=M.selection),v&&(i=T[0][0],c=T[1][0]),m&&(a=T[0][1],f=T[1][1]),T[0][0]===i&&T[0][1]===a&&T[1][0]===c&&T[1][1]===f||(M.selection=[[i,a],[c,f]],s.call(y),O.brush())}function F(){if($o(),st.touches){if(st.touches.length)return;n&&clearTimeout(n),n=setTimeout(function(){n=null},500),I.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(t,n){var e=t.document.documentElement,r=vt(t).on("dragstart.drag",null);n&&(r.on("click.drag",Oi,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}(st.view,g),P.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);I.attr("pointer-events","all"),U.attr("cursor",Oo.overlay),M.selection&&(T=M.selection),Ho(T)&&(M.selection=null,s.call(y)),O.end()}}function h(){var n=this.__brush||{selection:null};return n.extent=e.apply(this,arguments),n.dim=t,n}return a.move=function(n,e){n.selection?n.on("start.brush",function(){u(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){u(this,arguments).end()}).tween("brush",function(){var n=this,r=n.__brush,i=u(n,arguments),o=r.selection,a=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),l=Fn(o,a);function c(t){r.selection=1===t&&Ho(a)?null:l(t),s.call(n),i.brush()}return o&&a?c:c(1)}):n.each(function(){var n=arguments,r=this.__brush,i=t.input("function"==typeof e?e.apply(this,n):e,r.extent),o=u(this,n).beforestart();fo(this),r.selection=null==i||Ho(i)?null:i,s.call(this),o.start().brush().end()})},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){!function(t,n,e,r){var i=st;t.sourceEvent=st,st=t;try{n.apply(e,r)}finally{st=i}}(new function(t,n,e){this.target=t,this.type=n,this.selection=e}(a,n,t.output(this.state.selection)),i.apply,i,[n,this.that,this.args])}},a.extent=function(t){return arguments.length?(e="function"==typeof t?t:Mo([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),a):e},a.filter=function(t){return arguments.length?(r="function"==typeof t?t:Mo(!!t),a):r},a.handleSize=function(t){return arguments.length?(o=+t,a):o},a.on=function(){var t=i.on.apply(i,arguments);return t===i?a:t},a}(No)}const qo={epanechnikov:function(t){return Math.abs(t)<=1?.75*(1-t*t):0},gaussian:function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)}},Vo={nrd:function(t){let n=(_(t,.75)-_(t,.25))/1.34;return 1.06*Math.min(g(t),n)*Math.pow(t.length,-.2)}};function Xo(t,n,e){return function(r){return n.map(n=>[n,function(t,n){var e,r=t.length,i=r,o=-1,a=0;if(null==n)for(;++o<r;)isNaN(e=d(t[o]))?--i:a+=e;else for(;++o<r;)isNaN(e=d(n(t[o],o,t)))?--i:a+=e;if(i)return a/i}(r,r=>t((n-r)/e))/e])}}class Bo{constructor(t,n=!1,e=30,r=-40,i=100){this.id=t,this.verbose=n,this.offsetX=e,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),vt("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){vt("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=st.pageX,n=st.pageY){this.verbose&&(console.log(t),console.log(n)),t+=this.offsetX,n=n+this.offsetY<0?10:n+this.offsetY;vt("#"+this.id).style("left",`${t}px`).style("top",`${n}px`)}edit(t){vt("#"+this.id).html(t)}}class Ro{constructor(t,n,e=!1){$(`#${t}`).show();const r=e?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=n}createDownloadSvgButton(t,n,e,r,i="fa-download"){this.createButton(t,i);vt(`#${t}`).on("click",()=>{this.downloadSvg(n,e,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,n,e="fa-expand-arrows-alt"){this.createButton(t,e);vt(`#${t}`).on("click",n).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,n="fa-download"){const e=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${n}`).appendTo(e),this.buttons[t]=e,e}attachTooltip(t){this.tooltip=t}downloadSvg(t,n,e){let r=$($($(`${"#"+t}`))[0]),i=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),o=function(t){for(var n="",e=document.styleSheets,r=0;r<e.length;r++)try{if(null==e[r].cssRules)continue;for(var i=e[r].cssRules,o=0;o<i.length;o++){var a=i[o];if(void 0!==a.style){var s,u=void 0===a.selectorText?a.selectorText:a.selectorText.replace(`#${t[0].id} `,"");try{s=$(t).find(u)}catch(t){s=[]}s.length>0&&(n+=a.selectorText+" { "+a.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var l=document.createElement("style");return l.setAttribute("type","text/css"),l.innerHTML="<![CDATA[\n"+n+"\n]]>",l}(r.get());i.prepend(o),$("#"+e).html("").hide();let a=$(`#${e}`).append(i).html(),s=new Blob([a],{type:"image/svg+xml"});saveAs(s,n),$(`#${e}`).html("").hide()}}class Wo{constructor(t,n={}){this._sanityCheck(t),this.data=t,this.groupInfo=n,this.toolbar=void 0,this.tooltip=void 0}render(t,n=500,e=357,r=.05,i,o=[-3,3],a="Y axis",s=!0,u=30,l=!0,h=0,f=!1,p=!1,d=!1,g=!1,m=!1,y=!1){if(this.reset=(()=>{t.selectAll("*").remove(),this.render(t,n,e,r,i,o,a,s,u,l,h,f,p,d,g,m,y)}),this.updateYScale=function(o,a){t.selectAll("*").remove(),void 0===a&&(a=[]),this.render(t,n,e,r,i,[],o,s,u,l,h,f,p,d,g,m,y)},this.updateXScale=function(i){void 0===i&&console.error("updateXScale called without new X domain"),t.selectAll("*").remove(),this.render(t,n,e,r,i,[],a,s,u,l,h,f,p,d,g,m,y)},void 0===o||0==o.length){let t=[];this.data.forEach(n=>t=t.concat(n.values)),o=v(t)}this.groups=_t().key(t=>t.group).entries(this.data),this.scale={x:Ot().rangeRound([0,n]).domain(i||this.groups.map(t=>t.key)).paddingInner(r),subx:Ot(),y:ye().rangeRound([e,0]).domain(o),z:ye()},this.groups.forEach(n=>{let r=n.key,i=n.values,a=this.groupInfo[r];if(n.index=this.scale.x.domain().indexOf(r),void 0!==a){t.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","center").attr("fill",t=>"pvalue"==t&&parseFloat(a[t])<=parseFloat(a.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(t,n)=>{return`translate(${this.scale.x(r)+this.scale.x.bandwidth()/2}, ${this.scale.y(o[0])+50})`}).text(t=>`${t}: ${parseFloat(parseFloat(a[t]).toPrecision(3)).toExponential()}`)}m&&i.sort((t,n)=>t.label<n.label?-1:t.label>n.label?1:0),this.scale.subx.domain(i.map(t=>t.label)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),i.forEach(e=>{0!=e.values.length&&(e.values=e.values.sort(c),this._drawViolin(t,e,f,n.index,y))});var s=15;if(g){const n=Ot().domain(i.map(t=>void 0==t.size?"(0)":`(${t.size||0})`)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]);t.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${e+s})`).call(ki(n))}if(l){s=5;const n=t.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${e+s})`).call(ki(this.scale.subx));h>0&&n.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${h}, 2, 10)`)}});let b=l?55:0;var w;if(this.xAxis=s?ki(this.scale.x):ki(this.scale.x).tickFormat(""),t.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${e+b})`).call(this.xAxis).selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${u}, -10, 10)`),b=5,this.yAxis=(w=this.scale.y,Si(xi,w)).tickValues(this.scale.y.ticks(5)),t.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${b}, 0)`).call(this.yAxis),t.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${2*b+vt(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(a),t.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),p&&this._addGroupDivider(t),d){const n=t.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");n.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const e=n.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),r=10;e.append("rect").attr("x",(t,n)=>5+60*n+this.scale.x.range()[0]).attr("y",-28).attr("width",r).attr("height",r).style("fill",t=>t.color),e.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,n)=>17+60*n+this.scale.x.range()[0]).attr("y",-20)}}addPlotTitle(t,n){let e=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,r=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${e}, ${r})`).text(n)}createTooltip(t){return 0==$(`#${t}`).length&&$("<div/>").attr("id",t).appendTo($("body")),this.tooltip=new Bo(t),vt(`#${t}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,n){return this.toolbar=new Ro(t,n),this.toolbar}addBrush(t){const n=Lo();n.on("end",()=>{this.zoom(t,n)}),t.append("g").attr("class","brush").call(n)}zoom(t,n){let e,r=st.selection;if(void 0===n)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter((t,n)=>{const e=Math.floor(r[0][0]/this.scale.x.bandwidth()),i=Math.floor(r[1][0]/this.scale.x.bandwidth());return n>=e&&n<=i}));const e=Math.floor(this.scale.y.invert(r[1][1])),i=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([e,i]),t.select(".brush").call(n.move,null)}else{if(!e)return e=setTimeout(function(){e=null},350);this.reset()}let i=t.transition().duration(750);t.select(".axis--x").transition(i).call(this.xAxis),t.select(".axis--y").transition(i).call(this.yAxis),this.groups.forEach((n,e)=>{let r=n.key,o=n.values;this.scale.subx.rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),o.forEach(e=>{if(0==e.values.length)return;this.scale.x.domain().indexOf(r);this.scale.z.range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);const o=t.select(`#violin${n.index}-${e.label}`);o.select(".violin").transition(i).attr("d",li().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const a=_(e.values,.25),s=_(e.values,.75);o.select(".violin-ir").transition(i).attr("x",this.scale.z(-.1)).attr("y",this.scale.y(s)).attr("width",Math.abs(this.scale.z(-.1)-this.scale.z(.1))).attr("height",Math.abs(this.scale.y(s)-this.scale.y(a)));const u=T(e.values);o.select(".violin-median").transition(i).attr("x1",this.scale.z(-.1)).attr("x2",this.scale.z(.1)).attr("y1",this.scale.y(u)).attr("y2",this.scale.y(u))})})}_drawViolin(t,n,e,r,i){let o=Xo(qo.gaussian,this.scale.y.ticks(100),Vo.nrd(n.values));const a=v(n.values),s=o(n.values).filter(t=>t[0]>=a[0]&&t[0]<=a[1]);if(s.length&&this._validVertices(s)){let o=M(s,t=>Math.abs(t[1]));this.scale.z.domain([-o,o]).range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const a=t.append("g").attr("id",`violin${r}-${n.label}`).attr("class","violin-g").datum(n);let u=li().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0]));const l=a.append("path").datum(s).attr("d",u).classed("violin",!0).style("fill",()=>void 0!==n.color?n.color:r%2==0?"#90c1c1":"#94a8b8"),c=_(n.values,.25),h=_(n.values,.75),f=this.scale.z.domain()[1]/3;if(e){const e=Math.abs(h-c),r=M(n.values.filter(t=>t<=h+1.5*e)),i=S(n.values.filter(t=>t>=c-1.5*e));t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(i)).style("stroke","#fff")}a.append("rect").attr("x",this.scale.z(-f)).attr("y",this.scale.y(h)).attr("width",Math.abs(this.scale.z(-f)-this.scale.z(f))).attr("height",Math.abs(this.scale.y(h)-this.scale.y(c))).attr("class","violin-ir");const p=T(n.values);if(a.append("line").attr("x1",this.scale.z(-f)).attr("x2",this.scale.z(f)).attr("y1",this.scale.y(p)).attr("y2",this.scale.y(p)).attr("class","violin-median"),i){const t=Math.abs(h-c),e=M(n.values.filter(n=>n<=h+1.5*t)),r=S(n.values.filter(n=>n>=c-1.5*t)),i=n.values.filter(t=>t<r||t>e);a.append("g").attr("class","violin-outliers").selectAll("circle").data(i).enter().append("circle").attr("cx",()=>this.scale.z(0)).attr("cy",t=>this.scale.y(t)).attr("r",2)}a.on("mouseover",()=>{l.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(n.group+"<br/>"+n.label+"<br/>Median: "+p.toPrecision(4)+"<br/>")}),a.on("mouseout",()=>{l.classed("highlighted",!1)})}}_sanityCheck(t){const n=["group","label","values"];t.forEach(t=>{n.forEach(n=>{if(void 0===t[n])throw"GroupedViolin: input data error."})})}_addGroupDivider(t){const n=this.scale.x.domain(),e=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),r=(t,r)=>r!==n.length-1?this.scale.x(t)+ +this.scale.x.bandwidth()+e/2:0;t.selectAll(".vline").data(n).enter().append("line").classed("vline",!0).attr("x1",r).attr("x2",r).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(t,e)=>e!=n.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}_validVertices(t){return!t.reduce((t,n)=>t.concat(n),[]).filter(t=>isNaN(t)).length}}function Zo(t=50,n=50,e=50,r=50){return{top:t,right:n,bottom:e,left:r}}function Jo(t,n=!0){t.forEach(t=>{t.values=n?t.data.map(t=>Math.log10(+t+1)):t.data,t.values.sort(c),t.median=T(t.values)})}function Qo(t,n,e,r=!0){const i="geneExpression";if(!t.hasOwnProperty(i))throw"Parse Error: required json attribute is missing: "+i;return t[i].forEach(t=>{["data","tissueSiteDetailId","geneSymbol","gencodeId"].forEach(n=>{if(!t.hasOwnProperty(n))throw console.error(t),"Parse Error: required json attribute is missing: "+n}),t.group=void 0===n?t.tissueSiteDetailId:n[t.tissueSiteDetailId],t.label=void 0===t.subsetGroup?t.geneSymbol:t.subsetGroup,t.color=void 0===e?"#90c1c1":void 0===t.subsetGroup?`#${e[t.tissueSiteDetailId]}`:e[t.subsetGroup]}),Jo(t[i],r),t[i]}function Ko(t,n){let e=t.data.map(t=>t.group),r=t.sortData.filter(t=>e.includes(t.group));switch(t.gpConfig.sort){case n.plotSorts.ascAlphaSort:r.sort((t,n)=>t.group<n.group?-1:t.group>n.group?1:0);break;case n.plotSorts.descAlphaSort:r.sort((t,n)=>t.group<n.group?1:t.group>n.group?-1:0);break;case n.plotSorts.ascSort:r.sort((t,n)=>t.median-n.median);break;case n.plotSorts.descSort:r.sort((t,n)=>n.median-t.median)}let i=r.map(t=>t.group);t.updateXScale(i),ea(t);let o=vt(`#${n.root} svg g`);t.gpConfig.subset?na(t,o,t.tissueDict,"bottom"):(vt(`#${n.svg} #violinLegend`).remove(),ta(o)),t.showOutliers||(bt(`#${n.svg} path.violin`).classed("outlined",!0),$(`#${n.svg} .violin-outliers`).hide()),void 0!==t.plotTitle&&t.addPlotTitle(o,t.plotTitle)}function ta(t){const n=t.select(".violin-x-axis");n.attr("transform",`${n.attr("transform")} translate(0, 3)`)}function na(t,n,e,r="top"){ta(n);const i=n.selectAll(".violin-x-axis text");i.attr("transform",`translate(0, 8) ${i.attr("transform")}`),n.append("g").selectAll(".tcolor").data(t.scale.x.domain()).enter().append("rect").classed("tcolor",!0).attr("x",n=>t.scale.x(n)).attr("y",n=>"top"==r?t.scale.y.range()[1]:t.scale.y.range()[0]).attr("transform","translate(0, 14)").attr("width",n=>t.scale.x.bandwidth()).attr("height",5).style("stroke-width",0).style("fill",t=>`#${e[t].colorHex}`).style("opacity",.9)}function ea(t){bt(".violin-g").on("mouseover",(n,e,r)=>{let i="log"==t.gpConfig.scale?Math.pow(10,n.median)-1:n.median;vt(r[e]).select("path").classed("highlighted",!0),t.gpConfig.subset?t.tooltip.show(n.group+"<br/>"+n.label+` (n = ${n.values.length})`+"<br/>"+`Median${t.unit}: ${i.toPrecision(4)}`+"<br/>"):t.tooltip.show(n.group+"<br/>"+`n = ${n.values.length}`+"<br/>"+`Median${t.unit}: ${i.toPrecision(4)}`+"<br/>")})}function ra(t,n){bt(`#${n.svg} path.violin`).classed("outlined",!t.gpConfig.showOutliers),$(`#${n.svg} .violin-outliers`).toggle(t.gpConfig.showOutliers)}return t.launch=function(t,n,e,r="Gene Expression Violin Plot",i=function(){const t="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:t+"association/singleTissueEqtl?format=json&datasetId=gtex_v7&gencodeId=",ld:t+"dataset/ld?format=json&datasetId=gtex_v7&gencodeId=",tissueSummary:t+"dataset/tissueSummary?datasetId=gtex_v7",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v7&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v7&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?datasetId=gtex_v7&boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v7&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v7&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v19&genomeBuild=GRCh37%2Fhg19&geneId=",tissue:t+"metadata/tissueSiteDetail?format=json",tissueSites:t+"metadata/tissueSiteDetail?format=json",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}(),o=Zo(50,75,250,60),a={w:.8*window.innerWidth,h:250}){const s=[l(i.tissue),l(i.geneExp+e),l(i.geneExp+e+"&attributeSubset=sex")],u={root:t,spinner:"spinner",svg:`${t}-svg`,tooltip:n,toolbar:`${t}-toolbar`,clone:`${t}-svg-clone`,buttons:{download:`${t}-download`,plotOptions:`${t}-option-modal`,filter:`${t}-filter`,ascAlphaSort:`${t}-asc-alphasort`,descAlphaSort:`${t}-desc-alphasort`,ascSort:`${t}-asc-sort`,descSort:`${t}-desc-sort`,logScale:`${t}-log-scale`,linearScale:`${t}-linear-scale`,noDiff:`${t}-no-diff`,sexDiff:`${t}-sex-diff`,outliersOn:`${t}-outliers-on`,outliersOff:`${t}-outliers-off`},plotOptionGroups:{scale:`${t}-option-scale`,sort:`${t}-option-sort`,differentiation:`${t}-option-differentiation`,outliers:`${t}-option-outlier`},plotSorts:{ascAlphaSort:"asc-alphasort",descAlphaSort:"desc-alphasort",ascSort:"asc-sort",descSort:"desc-sort"},tissueFilter:`${t}-filter-modal`};if(0==$(`#${u.root}`).length)throw"Violin Plot Error: rootId does not exist.";0==$(`#${u.tooltip}`).length&&$("<div/>").attr("id",u.tooltip).appendTo($("body")),0==$(`#${u.toolbar}`).length&&$("<div/>").attr("id",u.toolbar).appendTo($(`#${u.root}`)),0==$(`#${u.root} #${u.spinner}`).length?$('<span><i id="spinner" class="fas fa-sync fa-spin"></i></span>').appendTo($(`#${u.root}`)):$(`#${u.root} #${u.spinner}`).show(),0==$(`#${u.clone}`).length&&$("<div/>").attr("id",u.clone).appendTo($(`#${u.root}`)),Promise.all(s).then(function(t){const n={},i={female:"#e67f7b",male:"#70bcd2"},s={};(function(t){const n="tissueSiteDetail";if(!t.hasOwnProperty(n))throw"Parsing Error: required json attr is missing: "+n;const e=t[n];return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach(t=>{if(!e[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t}),e})(t[0]).forEach(t=>{n[t.tissueSiteDetailId]=t.tissueSiteDetail,s[t.tissueSiteDetail]=t,i[t.tissueSiteDetailId]=t.colorHex});const l=Qo(t[1],n,i);let c=new Wo(l);c.data.sort((t,n)=>t.group<n.group?-1:t.group>n.group?1:0);let h=c.createTooltip(u.tooltip);c.sortData=c.data.map(t=>t),c.allData=c.data.map(t=>t),c.gencodeId=e,c.tIdNameMap=n,c.groupColorDict=i,c.tissueDict=s,c.geneJson={allData:t[1],subsetData:t[2]},c.unit=l.length>0?` ${l[0].unit}`:"",c.gpConfig={subset:!1,scale:"log",sort:u.plotSorts.ascAlphaSort,showOutliers:!1,title:r},function(t,n,e,r){const i=n,o=function(t=1200,n=250,e=Zo()){return{width:t,height:n,outerWidth:t+(e.left+e.right),outerHeight:n+(e.top+e.bottom)}}(e.w,e.h,i),a=vt(`#${r.root}`).append("svg").attr("id",r.svg).attr("width",o.outerWidth).attr("height",o.outerHeight).append("g").attr("transform",`translate(${i.left}, ${i.top})`),s=o.width,u=o.height,l=t.data.map(t=>t.group);t.render(a,s,u,.2,l,[],"log10(TPM+1)",!0,35,!1,0,!1,!1,!0,!1,!0,!0),function(t,n){let e=vt(`#${n.svg} g`);void 0!==t.gpConfig.title&&t.addPlotTitle(e,t.gpConfig.title),ra(t,n),t.gpConfig.subset||(vt(`#${n.svg} #violinLegend`).remove(),ta(e)),ea(t)}(t,r)}(c,o,a,u),function(t,n,e,r){const i=function(t,n=!1){const e=["Bladder","Cervix_Ectocervix","Cervix_Endocervix","Fallopian_Tube","Kidney_Cortex"],r="tissueSiteDetail";if(!t.hasOwnProperty(r))throw"Parsing Error: required json attribute is missing: "+r;let i=t[r];["tissueSite","tissueSiteDetailId","tissueSiteDetail"].forEach(t=>{if(!i[0].hasOwnProperty(t))throw`parseTissueSites attr error. ${t} is not found`});let o=(i=0==n?i:i.filter(t=>!e.includes(t.tissueSiteDetailId))).reduce((t,n)=>{let e=n.tissueSite,r={id:n.tissueSiteDetailId,name:n.tissueSiteDetail};return t.hasOwnProperty(e)||(t[e]=[]),t[e].push(r),t},{});return Object.keys(o).forEach(t=>{if(1==o[t].length){let n=o[t][0];delete o[t],o[n.name]=[n]}}),o}(r);(function(t,n,e=!1,r=!1,i=4){const o="tissue-group-main-level";vt(`#${n}`).selectAll("*").remove();const a=$("<div/>").attr("class","col-xs-12 col-md-12").appendTo($(`#${n}`));e?$(`<label class=${o}>`+'<input type="radio" name="allTissues" value="reset"> Reset </label><br/>').appendTo(a):$(`<label class=${o}>`+'<input type="radio" name="allTissues" value="all"> All </label> '+`<label class=${o}>`+'<input type="radio" name="allTissues" value="reset"> Reset </label><br/>').appendTo(a),$('input[name="allTissues"]').change(function(){switch($(this).val()){case"all":$(".tissueGroup").prop("checked",!0),$(".tissueSubGroup").prop("checked",!0);break;case"reset":$(".tissueGroup").prop("checked",!1),$(".tissueSubGroup").prop("checked",!1)}});let s=Object.keys(t).sort((t,n)=>"Brain"==t?-1:"Brain"==n?1:t<n?-1:t>n?1:void 0),u=Object.keys(t).reduce((n,e)=>t[e].length>1?n+1+t[e].length:n+t[e].length,0),l=Math.floor(u/i),c=u%i,h=Math.floor(12/i);const f=m(0,i).map(t=>$(`<div id="section${t}" class="col-xs-12 col-md-${h}">`).appendTo($(`#${n}`)));let p=0,d=0;s.forEach(n=>{let e=t[n];const r=n.replace(/ /g,"_");let i=t[n].length;i=1==i?i:i+1,0!=p&&i+p>l+c&&(p=0,d+=1),p+=i;let a=f[d];$(`<label class=${o}>`+`<input type="checkbox" id="${r}" class="tissueGroup"> `+`<span>${n}</span>`+"</label><br/>").appendTo(a),e.length>1&&e.sort((t,n)=>t.id>n.id?1:t.id<n.id?-1:0).forEach(function(t,n){let r=$("<label class=tissue-group-sub-level>"+`<input type="checkbox" id="${t.id}" class="tissueSubGroup"> `+`<span>${t.name}</span>`+"</label><br/>").appendTo(a);n==e.length-1&&r.addClass("last-site"),r.click(function(){$('input[name="allTissues"]').prop("checked",!1)})}),$("#"+r).click(function(){$('input[name="allTissues"]').prop("checked",!1),$("#"+r).is(":checked")?e.forEach(function(t){"id"!=t.id&&$("#"+t.id).prop("checked",!0)}):e.forEach(function(t){"id"!=t.id&&$("#"+t.id).prop("checked",!1)})})}),r&&($('input[name="allTissues"][value="all"]').prop("checked",!0),$(".tissueGroup").prop("checked",!0),$(".tissueSubGroup").prop("checked",!0))})(i,`${n}-body`,!1,!0,3),function(t,n,e,r){$(`#${n}`).on("hidden.bs.modal",i=>{let o=function(t,n,e=!1){let r=[];return $(`#${n}`).find(":input").each(function(){if($(this).is(":checked")){const n=$(this).attr("id");if($(this).hasClass("tissueGroup")){let i=n.replace(/_/g," ");1==t[i].length&&(e?r.push(t[i][0].name):r.push(t[i][0].id))}else e?r.push($($(this).siblings()[0]).text()):r.push(n)}}),r.filter(t=>void 0!==t)}(r,`${n}-body`,!0);!function(t,n,e){let r=t.allData.filter(t=>e.includes(t.group));t.data=r,Ko(t,n)}(t,e,o)})}(t,n,e,i)}(c,u.tissueFilter,u,t[0]),function(t,n,e,r){let i=t.createToolbar(e.toolbar,n);i.createDownloadSvgButton(e.buttons.download,e.svg,"gene-exp-plot.svg",e.clone),$(`#${e.toolbar}`).addClass("row"),$(`#${e.toolbar} .btn-group`).addClass("col-xs-12 col-lg-1 text-nowrap").css("display","flex"),$("<div></div>").appendTo(`#${e.toolbar}`).attr("id",`${e.toolbar}-plot-options`).attr("class","col-lg-11 text-nowrap");let o=$(`#${e.toolbar}-plot-options`);$("<div/>").appendTo(o).attr("id",e.plotOptionGroups.differentiation).attr("class","col-lg-2 col-xl-2"),$("<span/>").appendTo(`#${e.plotOptionGroups.differentiation}`).attr("class",`${e.root}-option-label`).html("Subset"),$("<div/>").appendTo(`#${e.plotOptionGroups.differentiation}`).attr("class","btn-group btn-group-sm");let a=$(`#${e.plotOptionGroups.differentiation} .btn-group`);$(`<button class="btn btn-default" id="${e.buttons.noDiff}">None</button>`).appendTo(a),$(`<button class="btn btn-default" id="${e.buttons.sexDiff}">Sex</button>`).appendTo(a),$("<div/>").appendTo(o).attr("id",e.plotOptionGroups.scale).attr("class","col-lg-2 col-xl-2"),$("<span/>").appendTo(`#${e.plotOptionGroups.scale}`).attr("class",`${e.root}-option-label`).html("Scale"),$("<div/>").appendTo(`#${e.plotOptionGroups.scale}`).attr("class","btn-group btn-group-sm");let s=$(`#${e.plotOptionGroups.scale} .btn-group`);$(`<button class="btn btn-default" id="${e.buttons.logScale}">Log</button>`).appendTo(s),$(`<button class="btn btn-default" id="${e.buttons.linearScale}">Linear</button>`).appendTo(s),$("<div/>").appendTo(o).attr("class",`${e.plotOptionGroups.sort} col-lg-2 col-xl-2`).attr("id","vplot-alpha-sorts"),$("<span/>").appendTo(`.${e.plotOptionGroups.sort}#vplot-alpha-sorts`).attr("class",`${e.root}-option-label`).html("Tissue Sort"),$("<div/>").appendTo(`.${e.plotOptionGroups.sort}#vplot-alpha-sorts`).attr("class","btn-group btn-group-sm").attr("id",`${e.plotOptionGroups.sort}-alpha`);let u=$(`#${e.plotOptionGroups.sort}-alpha.btn-group`);$(`<button class="btn btn-default fa fa-sort-alpha-down" id="${e.buttons.ascAlphaSort}"></button>`).appendTo(u),$(`<button class="btn btn-default fa fa-sort-alpha-up" id="${e.buttons.descAlphaSort}"></button>`).appendTo(u),$("<div/>").appendTo(o).attr("class",`${e.plotOptionGroups.sort} col-lg-2 col-xl-2`).attr("id","vplot-num-sorts"),$("<span/>").appendTo(`.${e.plotOptionGroups.sort}#vplot-num-sorts`).attr("class",`${e.root}-option-label`).html("Median Sort"),$("<div/>").appendTo(`.${e.plotOptionGroups.sort}#vplot-num-sorts`).attr("class","btn-group btn-group-sm").attr("id",`${e.plotOptionGroups.sort}-num`);let l=$(`#${e.plotOptionGroups.sort}-num.btn-group`);$(`<button class="btn btn-default fa fa-sort-numeric-down" id="${e.buttons.ascSort}"></button>`).appendTo(l),$(`<button class="btn btn-default fa fa-sort-numeric-up" id="${e.buttons.descSort}"></button>`).appendTo(l),$("<div/>").appendTo(o).attr("id",e.plotOptionGroups.outliers).attr("class","col-lg-2 col-xl-2"),$("<span/>").appendTo(`#${e.plotOptionGroups.outliers}`).attr("class",`${e.root}-option-label`).html("Outliers"),$("<div/>").appendTo(`#${e.plotOptionGroups.outliers}`).attr("class","btn-group btn-group-sm");let c=$(`#${e.plotOptionGroups.outliers} .btn-group`);$(`<button class="btn btn-default" id="${e.buttons.outliersOn}">On</button>`).appendTo(c),$(`<button class="btn btn-default" id="${e.buttons.outliersOff}">Off</button>`).appendTo(c),bt(`#${e.plotOptionsModal} .modal-body button`).classed("active",!1),bt(`#${e.buttons.ascAlphaSort},\n               #${e.buttons.logScale},\n               #${e.buttons.noDiff},\n               #${e.buttons.outliersOff}`).classed("active",!0),i.createButton(e.buttons.filter,"fa-filter");let h=vt(`#${e.buttons.filter}`).on("mouseover",()=>{i.tooltip.show("Filter Tissues")}).on("mouseout",()=>{i.tooltip.hide()});$(`.${e.plotOptionGroups.sort} button`).on("click",function(n){let r=vt(this);r.classed("active")||(t.gpConfig.sort=n.target.id.replace(`${e.root}-`,""),bt(`.${e.plotOptionGroups.sort} button`).classed("active",!1),r.classed("active",!0),Ko(t,e))}),$(`#${e.plotOptionGroups.scale} button`).on("click",function(n){let r=vt(this);if(r.classed("active"))return;bt(`#${e.plotOptionGroups.scale} button`).classed("active",!1),r.classed("active",!0),n.target.id==e.buttons.logScale?(Jo(t.data,!0),Jo(t.allData,!0),t.updateYScale("log10(TPM+1)"),t.gpConfig.scale="log"):(Jo(t.data,!1),Jo(t.allData,!1),t.updateYScale("TPM"),t.gpConfig.scale="linear"),ea(t);let i=vt(`#${e.svg} g`);void 0!==t.plotTitle&&t.addPlotTitle(i,t.plotTitle),t.gpConfig.subset?na(t,i,t.tissueDict,"bottom"):(vt(`#${e.svg} #violinLegend`).remove(),ta(i)),t.showOutliers?bt(`#${e.svg} path.violin`).classed("outlined",!1):($(`#${e.svg} .violin-outliers`).hide(),bt(`#${e.svg} path.violin`).classed("outlined",!0))}),$(`#${e.plotOptionGroups.outliers} button`).on("click",function(n){let r=vt(this);r.classed("active")||(bt(`#${e.plotOptionGroups.outliers} button`).classed("active",!1),r.classed("active",!0),t.gpConfig.showOutliers=n.target.id==e.buttons.outliersOn,ra(t,e))}),$(`#${e.plotOptionGroups.differentiation} button`).on("click",function(n){let r=vt(this);if(r.classed("active"))return;bt(`#${e.plotOptionGroups.differentiation} button`).classed("active",!1),r.classed("active",!0);let i=n.target.id==e.buttons.sexDiff?t.geneJson.subsetData:t.geneJson.allData;const o="log"==t.gpConfig.scale?Qo(i,t.tIdNameMap,t.groupColorDict):Qo(i,t.tIdNameMap,t.groupColorDict,!1),a=t.data.map(t=>t.group);t.allData=o.map(t=>t),t.data=o.filter(t=>-1!=a.indexOf(t.group)),t.reset();let s=vt(`#${e.svg} g`);t.showOutliers||($(`#${e.svg} .violin-outliers`).hide(),bt(`#${e.svg} path.violin`).classed("outlined",!0)),void 0!==t.plotTitle&&t.addPlotTitle(s,t.plotTitle),n.target.id==e.buttons.sexDiff?(t.gpConfig.subset=!0,na(t,s,t.tissueDict,"bottom")):(vt(`#${e.svg} #violinLegend`).remove(),t.gpConfig.subset=!1,ta(s)),ea(t)}),h.on("click",(t,n,e)=>{$("#gene-expr-vplot-filter-modal").modal("show")})}(c,h,u),$(`#${u.root} #${u.spinner}`).hide()})},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZS1leHByZXNzaW9uLXZpb2xpbi1wbG90LmJ1bmRsZS5taW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Rzdi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Nzdi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL3Rzdi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvanNvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXNjZW5kaW5nLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9udW1iZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2RldmlhdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdmFyaWFuY2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2V4dGVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcmFuZ2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9xdWFudGlsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWF4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tZWRpYW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21pbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jcmVhdG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RvckFsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21hdGNoZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3BhcnNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VudGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdGEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc29ydC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3dpbmRvdy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zdHlsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbGFzc2VkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3RleHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaHRtbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yYWlzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9sb3dlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbnNlcnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmVtb3ZlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Nsb25lLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Rpc3BhdGNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc291cmNlRXZlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9tb3VzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3BvaW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0QWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RBbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZmlsdGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZXhpdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9tZXJnZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vcmRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jYWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2l6ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbXB0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lYWNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2F0dHIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcHJvcGVydHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXBwZW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdHVtLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL21hcC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9uZXN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL3NldC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL29yZGluYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2JhbmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2RlZmluZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL21hdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2xhYi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY3ViZWhlbGl4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29sb3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9zdHJpbmcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3ZhbHVlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9kYXRlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvb2JqZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yb3VuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2RlY29tcG9zZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL3BhcnNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3pvb20uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL251bWJlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29udGludW91cy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXREZWNpbWFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZXhwb25lbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRTcGVjaWZpZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRQcmVmaXhBdXRvLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0Um91bmRlZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFR5cGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvaWRlbnRpdHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0R3JvdXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXROdW1lcmFscy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFRyaW0uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RpY2tGb3JtYXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25QcmVmaXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25Sb3VuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvbkZpeGVkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9saW5lYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvaW50ZXJ2YWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWlsbGlzZWNvbmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZHVyYXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZGF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3NlY29uZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9taW51dGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvaG91ci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy93ZWVrLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3llYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbW9udGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjTWludXRlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y0hvdXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjRGF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y1dlZWsuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjWWVhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNNb250aC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9pc29Gb3JtYXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2lzb1BhcnNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXBhdGgvc3JjL3BhdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2NvbnN0YW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9tYXRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9saW5lYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BvaW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcmVhLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9tb25vdG9uZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9pZGVudGl0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9heGlzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9kaXNwYXRjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9ub2V2ZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZW91dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NjaGVkdWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL2ludGVycnVwdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3R3ZWVuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW50ZXJwb2xhdGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdEFsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ZpbHRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL21lcmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL29uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0ci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHJUd2Vlbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGVUd2Vlbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kZWxheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2R1cmF0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9zaW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvZWxhc3RpYy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL25vZXZlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbnRlcnJ1cHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL2JydXNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZHJhZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvZXZlbnQuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9rZGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21lYW4uanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9Ub29sdGlwLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvVG9vbGJhci5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3V0aWxzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvR3JvdXBlZFZpb2xpbi5qcyIsIi4uLy4uL3NyYy9HZW5lRXhwcmVzc2lvblZpb2xpblBsb3QuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9ndGV4RGF0YVBhcnNlci5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2d0ZXhNZW51QnVpbGRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRU9MID0ge30sXG4gICAgRU9GID0ge30sXG4gICAgUVVPVEUgPSAzNCxcbiAgICBORVdMSU5FID0gMTAsXG4gICAgUkVUVVJOID0gMTM7XG5cbmZ1bmN0aW9uIG9iamVjdENvbnZlcnRlcihjb2x1bW5zKSB7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oXCJkXCIsIFwicmV0dXJuIHtcIiArIGNvbHVtbnMubWFwKGZ1bmN0aW9uKG5hbWUsIGkpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobmFtZSkgKyBcIjogZFtcIiArIGkgKyBcIl1cIjtcbiAgfSkuam9pbihcIixcIikgKyBcIn1cIik7XG59XG5cbmZ1bmN0aW9uIGN1c3RvbUNvbnZlcnRlcihjb2x1bW5zLCBmKSB7XG4gIHZhciBvYmplY3QgPSBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucyk7XG4gIHJldHVybiBmdW5jdGlvbihyb3csIGkpIHtcbiAgICByZXR1cm4gZihvYmplY3Qocm93KSwgaSwgY29sdW1ucyk7XG4gIH07XG59XG5cbi8vIENvbXB1dGUgdW5pcXVlIGNvbHVtbnMgaW4gb3JkZXIgb2YgZGlzY292ZXJ5LlxuZnVuY3Rpb24gaW5mZXJDb2x1bW5zKHJvd3MpIHtcbiAgdmFyIGNvbHVtblNldCA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBjb2x1bW5zID0gW107XG5cbiAgcm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xuICAgIGZvciAodmFyIGNvbHVtbiBpbiByb3cpIHtcbiAgICAgIGlmICghKGNvbHVtbiBpbiBjb2x1bW5TZXQpKSB7XG4gICAgICAgIGNvbHVtbnMucHVzaChjb2x1bW5TZXRbY29sdW1uXSA9IGNvbHVtbik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29sdW1ucztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVsaW1pdGVyKSB7XG4gIHZhciByZUZvcm1hdCA9IG5ldyBSZWdFeHAoXCJbXFxcIlwiICsgZGVsaW1pdGVyICsgXCJcXG5cXHJdXCIpLFxuICAgICAgREVMSU1JVEVSID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG5cbiAgZnVuY3Rpb24gcGFyc2UodGV4dCwgZikge1xuICAgIHZhciBjb252ZXJ0LCBjb2x1bW5zLCByb3dzID0gcGFyc2VSb3dzKHRleHQsIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgaWYgKGNvbnZlcnQpIHJldHVybiBjb252ZXJ0KHJvdywgaSAtIDEpO1xuICAgICAgY29sdW1ucyA9IHJvdywgY29udmVydCA9IGYgPyBjdXN0b21Db252ZXJ0ZXIocm93LCBmKSA6IG9iamVjdENvbnZlcnRlcihyb3cpO1xuICAgIH0pO1xuICAgIHJvd3MuY29sdW1ucyA9IGNvbHVtbnMgfHwgW107XG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVJvd3ModGV4dCwgZikge1xuICAgIHZhciByb3dzID0gW10sIC8vIG91dHB1dCByb3dzXG4gICAgICAgIE4gPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgSSA9IDAsIC8vIGN1cnJlbnQgY2hhcmFjdGVyIGluZGV4XG4gICAgICAgIG4gPSAwLCAvLyBjdXJyZW50IGxpbmUgbnVtYmVyXG4gICAgICAgIHQsIC8vIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgZW9mID0gTiA8PSAwLCAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPRj9cbiAgICAgICAgZW9sID0gZmFsc2U7IC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9MP1xuXG4gICAgLy8gU3RyaXAgdGhlIHRyYWlsaW5nIG5ld2xpbmUuXG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IE5FV0xJTkUpIC0tTjtcbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gUkVUVVJOKSAtLU47XG5cbiAgICBmdW5jdGlvbiB0b2tlbigpIHtcbiAgICAgIGlmIChlb2YpIHJldHVybiBFT0Y7XG4gICAgICBpZiAoZW9sKSByZXR1cm4gZW9sID0gZmFsc2UsIEVPTDtcblxuICAgICAgLy8gVW5lc2NhcGUgcXVvdGVzLlxuICAgICAgdmFyIGksIGogPSBJLCBjO1xuICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChqKSA9PT0gUVVPVEUpIHtcbiAgICAgICAgd2hpbGUgKEkrKyA8IE4gJiYgdGV4dC5jaGFyQ29kZUF0KEkpICE9PSBRVU9URSB8fCB0ZXh0LmNoYXJDb2RlQXQoKytJKSA9PT0gUVVPVEUpO1xuICAgICAgICBpZiAoKGkgPSBJKSA+PSBOKSBlb2YgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSAtIDEpLnJlcGxhY2UoL1wiXCIvZywgXCJcXFwiXCIpO1xuICAgICAgfVxuXG4gICAgICAvLyBGaW5kIG5leHQgZGVsaW1pdGVyIG9yIG5ld2xpbmUuXG4gICAgICB3aGlsZSAoSSA8IE4pIHtcbiAgICAgICAgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KGkgPSBJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICBlbHNlIGlmIChjICE9PSBERUxJTUlURVIpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqLCBpKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIGxhc3QgdG9rZW4gYmVmb3JlIEVPRi5cbiAgICAgIHJldHVybiBlb2YgPSB0cnVlLCB0ZXh0LnNsaWNlKGosIE4pO1xuICAgIH1cblxuICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgIHZhciByb3cgPSBbXTtcbiAgICAgIHdoaWxlICh0ICE9PSBFT0wgJiYgdCAhPT0gRU9GKSByb3cucHVzaCh0KSwgdCA9IHRva2VuKCk7XG4gICAgICBpZiAoZiAmJiAocm93ID0gZihyb3csIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXQocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIFtjb2x1bW5zLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpXS5jb25jYXQocm93cy5tYXAoZnVuY3Rpb24ocm93KSB7XG4gICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbY29sdW1uXSk7XG4gICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgfSkpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3dzKHJvd3MpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZm9ybWF0Um93KS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um93KHJvdykge1xuICAgIHJldHVybiByb3cubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQgPT0gbnVsbCA/IFwiXCJcbiAgICAgICAgOiByZUZvcm1hdC50ZXN0KHRleHQgKz0gXCJcIikgPyBcIlxcXCJcIiArIHRleHQucmVwbGFjZSgvXCIvZywgXCJcXFwiXFxcIlwiKSArIFwiXFxcIlwiXG4gICAgICAgIDogdGV4dDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHBhcnNlUm93czogcGFyc2VSb3dzLFxuICAgIGZvcm1hdDogZm9ybWF0LFxuICAgIGZvcm1hdFJvd3M6IGZvcm1hdFJvd3NcbiAgfTtcbn1cbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2XCI7XG5cbnZhciBjc3YgPSBkc3YoXCIsXCIpO1xuXG5leHBvcnQgdmFyIGNzdlBhcnNlID0gY3N2LnBhcnNlO1xuZXhwb3J0IHZhciBjc3ZQYXJzZVJvd3MgPSBjc3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciBjc3ZGb3JtYXQgPSBjc3YuZm9ybWF0O1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRSb3dzID0gY3N2LmZvcm1hdFJvd3M7XG4iLCJpbXBvcnQgZHN2IGZyb20gXCIuL2RzdlwiO1xuXG52YXIgdHN2ID0gZHN2KFwiXFx0XCIpO1xuXG5leHBvcnQgdmFyIHRzdlBhcnNlID0gdHN2LnBhcnNlO1xuZXhwb3J0IHZhciB0c3ZQYXJzZVJvd3MgPSB0c3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciB0c3ZGb3JtYXQgPSB0c3YuZm9ybWF0O1xuZXhwb3J0IHZhciB0c3ZGb3JtYXRSb3dzID0gdHN2LmZvcm1hdFJvd3M7XG4iLCJmdW5jdGlvbiByZXNwb25zZUpzb24ocmVzcG9uc2UpIHtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cyArIFwiIFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBmZXRjaChpbnB1dCwgaW5pdCkudGhlbihyZXNwb25zZUpzb24pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IGJpc2VjdG9yIGZyb20gXCIuL2Jpc2VjdG9yXCI7XG5cbnZhciBhc2NlbmRpbmdCaXNlY3QgPSBiaXNlY3Rvcihhc2NlbmRpbmcpO1xuZXhwb3J0IHZhciBiaXNlY3RSaWdodCA9IGFzY2VuZGluZ0Jpc2VjdC5yaWdodDtcbmV4cG9ydCB2YXIgYmlzZWN0TGVmdCA9IGFzY2VuZGluZ0Jpc2VjdC5sZWZ0O1xuZXhwb3J0IGRlZmF1bHQgYmlzZWN0UmlnaHQ7XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmIChjb21wYXJlLmxlbmd0aCA9PT0gMSkgY29tcGFyZSA9IGFzY2VuZGluZ0NvbXBhcmF0b3IoY29tcGFyZSk7XG4gIHJldHVybiB7XG4gICAgbGVmdDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA8IDApIGxvID0gbWlkICsgMTtcbiAgICAgICAgZWxzZSBoaSA9IG1pZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9LFxuICAgIHJpZ2h0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpID4gMCkgaGkgPSBtaWQ7XG4gICAgICAgIGVsc2UgbG8gPSBtaWQgKyAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nQ29tcGFyYXRvcihmKSB7XG4gIHJldHVybiBmdW5jdGlvbihkLCB4KSB7XG4gICAgcmV0dXJuIGFzY2VuZGluZyhmKGQpLCB4KTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbn1cbiIsImltcG9ydCB2YXJpYW5jZSBmcm9tIFwiLi92YXJpYW5jZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnJheSwgZikge1xuICB2YXIgdiA9IHZhcmlhbmNlKGFycmF5LCBmKTtcbiAgcmV0dXJuIHYgPyBNYXRoLnNxcnQodikgOiB2O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG0gPSAwLFxuICAgICAgaSA9IC0xLFxuICAgICAgbWVhbiA9IDAsXG4gICAgICB2YWx1ZSxcbiAgICAgIGRlbHRhLFxuICAgICAgc3VtID0gMDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVzW2ldKSkpIHtcbiAgICAgICAgZGVsdGEgPSB2YWx1ZSAtIG1lYW47XG4gICAgICAgIG1lYW4gKz0gZGVsdGEgLyArK207XG4gICAgICAgIHN1bSArPSBkZWx0YSAqICh2YWx1ZSAtIG1lYW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSkpIHtcbiAgICAgICAgZGVsdGEgPSB2YWx1ZSAtIG1lYW47XG4gICAgICAgIG1lYW4gKz0gZGVsdGEgLyArK207XG4gICAgICAgIHN1bSArPSBkZWx0YSAqICh2YWx1ZSAtIG1lYW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChtID4gMSkgcmV0dXJuIHN1bSAvIChtIC0gMSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtaW4sXG4gICAgICBtYXg7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gW21pbiwgbWF4XTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gIHN0YXJ0ID0gK3N0YXJ0LCBzdG9wID0gK3N0b3AsIHN0ZXAgPSAobiA9IGFyZ3VtZW50cy5sZW5ndGgpIDwgMiA/IChzdG9wID0gc3RhcnQsIHN0YXJ0ID0gMCwgMSkgOiBuIDwgMyA/IDEgOiArc3RlcDtcblxuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IE1hdGgubWF4KDAsIE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApKSB8IDAsXG4gICAgICByYW5nZSA9IG5ldyBBcnJheShuKTtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIHJhbmdlW2ldID0gc3RhcnQgKyBpICogc3RlcDtcbiAgfVxuXG4gIHJldHVybiByYW5nZTtcbn1cbiIsInZhciBlMTAgPSBNYXRoLnNxcnQoNTApLFxuICAgIGU1ID0gTWF0aC5zcXJ0KDEwKSxcbiAgICBlMiA9IE1hdGguc3FydCgyKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciByZXZlcnNlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbixcbiAgICAgIHRpY2tzLFxuICAgICAgc3RlcDtcblxuICBzdG9wID0gK3N0b3AsIHN0YXJ0ID0gK3N0YXJ0LCBjb3VudCA9ICtjb3VudDtcbiAgaWYgKHN0YXJ0ID09PSBzdG9wICYmIGNvdW50ID4gMCkgcmV0dXJuIFtzdGFydF07XG4gIGlmIChyZXZlcnNlID0gc3RvcCA8IHN0YXJ0KSBuID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IG47XG4gIGlmICgoc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSkgPT09IDAgfHwgIWlzRmluaXRlKHN0ZXApKSByZXR1cm4gW107XG5cbiAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wIC8gc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdG9wIC0gc3RhcnQgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0ICsgaSkgKiBzdGVwO1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAqIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAqIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RhcnQgLSBzdG9wICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCAtIGkpIC8gc3RlcDtcbiAgfVxuXG4gIGlmIChyZXZlcnNlKSB0aWNrcy5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHBvd2VyID0gTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwKSAvIE1hdGguTE4xMCksXG4gICAgICBlcnJvciA9IHN0ZXAgLyBNYXRoLnBvdygxMCwgcG93ZXIpO1xuICByZXR1cm4gcG93ZXIgPj0gMFxuICAgICAgPyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKSAqIE1hdGgucG93KDEwLCBwb3dlcilcbiAgICAgIDogLU1hdGgucG93KDEwLCAtcG93ZXIpIC8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAwID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHN0ZXAxID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcDApIC8gTWF0aC5MTjEwKSksXG4gICAgICBlcnJvciA9IHN0ZXAwIC8gc3RlcDE7XG4gIGlmIChlcnJvciA+PSBlMTApIHN0ZXAxICo9IDEwO1xuICBlbHNlIGlmIChlcnJvciA+PSBlNSkgc3RlcDEgKj0gNTtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTIpIHN0ZXAxICo9IDI7XG4gIHJldHVybiBzdG9wIDwgc3RhcnQgPyAtc3RlcDEgOiBzdGVwMTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgcCwgdmFsdWVvZikge1xuICBpZiAodmFsdWVvZiA9PSBudWxsKSB2YWx1ZW9mID0gbnVtYmVyO1xuICBpZiAoIShuID0gdmFsdWVzLmxlbmd0aCkpIHJldHVybjtcbiAgaWYgKChwID0gK3ApIDw9IDAgfHwgbiA8IDIpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbMF0sIDAsIHZhbHVlcyk7XG4gIGlmIChwID49IDEpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbbiAtIDFdLCBuIC0gMSwgdmFsdWVzKTtcbiAgdmFyIG4sXG4gICAgICBpID0gKG4gLSAxKSAqIHAsXG4gICAgICBpMCA9IE1hdGguZmxvb3IoaSksXG4gICAgICB2YWx1ZTAgPSArdmFsdWVvZih2YWx1ZXNbaTBdLCBpMCwgdmFsdWVzKSxcbiAgICAgIHZhbHVlMSA9ICt2YWx1ZW9mKHZhbHVlc1tpMCArIDFdLCBpMCArIDEsIHZhbHVlcyk7XG4gIHJldHVybiB2YWx1ZTAgKyAodmFsdWUxIC0gdmFsdWUwKSAqIChpIC0gaTApO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWF4O1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1heDtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuaW1wb3J0IHF1YW50aWxlIGZyb20gXCIuL3F1YW50aWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG51bWJlcnMgPSBbXTtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVzW2ldKSkpIHtcbiAgICAgICAgbnVtYmVycy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSB7XG4gICAgICAgIG51bWJlcnMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHF1YW50aWxlKG51bWJlcnMuc29ydChhc2NlbmRpbmcpLCAwLjUpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWluO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIG1pbiA+IHZhbHVlKSB7XG4gICAgICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1pbjtcbn1cbiIsImV4cG9ydCB2YXIgeGh0bWwgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzdmc6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgeGh0bWw6IHhodG1sLFxuICB4bGluazogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIlxufTtcbiIsImltcG9ydCBuYW1lc3BhY2VzIGZyb20gXCIuL25hbWVzcGFjZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgcHJlZml4ID0gbmFtZSArPSBcIlwiLCBpID0gcHJlZml4LmluZGV4T2YoXCI6XCIpO1xuICBpZiAoaSA+PSAwICYmIChwcmVmaXggPSBuYW1lLnNsaWNlKDAsIGkpKSAhPT0gXCJ4bWxuc1wiKSBuYW1lID0gbmFtZS5zbGljZShpICsgMSk7XG4gIHJldHVybiBuYW1lc3BhY2VzLmhhc093blByb3BlcnR5KHByZWZpeCkgPyB7c3BhY2U6IG5hbWVzcGFjZXNbcHJlZml4XSwgbG9jYWw6IG5hbWV9IDogbmFtZTtcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4vbmFtZXNwYWNlXCI7XG5pbXBvcnQge3hodG1sfSBmcm9tIFwiLi9uYW1lc3BhY2VzXCI7XG5cbmZ1bmN0aW9uIGNyZWF0b3JJbmhlcml0KG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkb2N1bWVudCA9IHRoaXMub3duZXJEb2N1bWVudCxcbiAgICAgICAgdXJpID0gdGhpcy5uYW1lc3BhY2VVUkk7XG4gICAgcmV0dXJuIHVyaSA9PT0geGh0bWwgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5hbWVzcGFjZVVSSSA9PT0geGh0bWxcbiAgICAgICAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpXG4gICAgICAgIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHVyaSwgbmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0b3JGaXhlZChmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiAoZnVsbG5hbWUubG9jYWxcbiAgICAgID8gY3JlYXRvckZpeGVkXG4gICAgICA6IGNyZWF0b3JJbmhlcml0KShmdWxsbmFtZSk7XG59XG4iLCJmdW5jdGlvbiBub25lKCkge31cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBub25lIDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJmdW5jdGlvbiBlbXB0eSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IGVtcHR5IDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJ2YXIgbWF0Y2hlciA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn07XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGlmICghZWxlbWVudC5tYXRjaGVzKSB7XG4gICAgdmFyIHZlbmRvck1hdGNoZXMgPSBlbGVtZW50LndlYmtpdE1hdGNoZXNTZWxlY3RvclxuICAgICAgICB8fCBlbGVtZW50Lm1zTWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgIHx8IGVsZW1lbnQubW96TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgIHx8IGVsZW1lbnQub01hdGNoZXNTZWxlY3RvcjtcbiAgICBtYXRjaGVyID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZlbmRvck1hdGNoZXMuY2FsbCh0aGlzLCBzZWxlY3Rvcik7XG4gICAgICB9O1xuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hlcjtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHVwZGF0ZSkge1xuICByZXR1cm4gbmV3IEFycmF5KHVwZGF0ZS5sZW5ndGgpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZW50ZXIgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVudGVyTm9kZShwYXJlbnQsIGRhdHVtKSB7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IHBhcmVudC5vd25lckRvY3VtZW50O1xuICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XG4gIHRoaXMuX25leHQgPSBudWxsO1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcbn1cblxuRW50ZXJOb2RlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEVudGVyTm9kZSxcbiAgYXBwZW5kQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCB0aGlzLl9uZXh0KTsgfSxcbiAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbihjaGlsZCwgbmV4dCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbmV4dCk7IH0sXG4gIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7IH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH1cbn07XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7RW50ZXJOb2RlfSBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudFwiO1xuXG52YXIga2V5UHJlZml4ID0gXCIkXCI7IC8vIFByb3RlY3QgYWdhaW5zdCBrZXlzIGxpa2Ug4oCcX19wcm90b19f4oCdLlxuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IHt9LFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICAgIGlmIChrZXlWYWx1ZSBpbiBub2RlQnlLZXlWYWx1ZSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0pIHtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAobm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVzW2ldXSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICBkYXRhID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaiA9IC0xO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihkKSB7IGRhdGFbKytqXSA9IGQ7IH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gdmFsdWUuY2FsbChwYXJlbnQsIHBhcmVudCAmJiBwYXJlbnQuX19kYXRhX18sIGosIHBhcmVudHMpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICBmdW5jdGlvbiBjb21wYXJlTm9kZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc29ydGdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc29ydGdyb3VwW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGdyb3VwLnNvcnQoY29tcGFyZU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICB8fCAobm9kZS5kb2N1bWVudCAmJiBub2RlKSAvLyBub2RlIGlzIGEgV2luZG93XG4gICAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCkobmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKVxuICAgICAgOiBzdHlsZVZhbHVlKHRoaXMubm9kZSgpLCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICB8fCBkZWZhdWx0Vmlldyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG59XG4iLCJmdW5jdGlvbiBjbGFzc0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnRyaW0oKS5zcGxpdCgvXnxcXHMrLyk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzTGlzdChub2RlKSB7XG4gIHJldHVybiBub2RlLmNsYXNzTGlzdCB8fCBuZXcgQ2xhc3NMaXN0KG5vZGUpO1xufVxuXG5mdW5jdGlvbiBDbGFzc0xpc3Qobm9kZSkge1xuICB0aGlzLl9ub2RlID0gbm9kZTtcbiAgdGhpcy5fbmFtZXMgPSBjbGFzc0FycmF5KG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XG59XG5cbkNsYXNzTGlzdC5wcm90b3R5cGUgPSB7XG4gIGFkZDogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnB1c2gobmFtZSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5zcGxpY2UoaSwgMSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIGNvbnRhaW5zOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSkgPj0gMDtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2xhc3NlZEFkZChub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5hZGQobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkUmVtb3ZlKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LnJlbW92ZShuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRUcnVlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkQWRkKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZhbHNlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkUmVtb3ZlKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZ1bmN0aW9uKG5hbWVzLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgKHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgPyBjbGFzc2VkQWRkIDogY2xhc3NlZFJlbW92ZSkodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgbmFtZXMgPSBjbGFzc0FycmF5KG5hbWUgKyBcIlwiKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbGlzdCA9IGNsYXNzTGlzdCh0aGlzLm5vZGUoKSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFsaXN0LmNvbnRhaW5zKG5hbWVzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gY2xhc3NlZEZ1bmN0aW9uIDogdmFsdWVcbiAgICAgID8gY2xhc3NlZFRydWVcbiAgICAgIDogY2xhc3NlZEZhbHNlKShuYW1lcywgdmFsdWUpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRSZW1vdmUoKSB7XG4gIHRoaXMudGV4dENvbnRlbnQgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gdGV4dFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gdGV4dEZ1bmN0aW9uXG4gICAgICAgICAgOiB0ZXh0Q29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG59XG4iLCJmdW5jdGlvbiBodG1sUmVtb3ZlKCkge1xuICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGh0bWxDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaHRtbEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IGh0bWxSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGh0bWxGdW5jdGlvblxuICAgICAgICAgIDogaHRtbENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLmlubmVySFRNTDtcbn1cbiIsImZ1bmN0aW9uIHJhaXNlKCkge1xuICBpZiAodGhpcy5uZXh0U2libGluZykgdGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyYWlzZSk7XG59XG4iLCJmdW5jdGlvbiBsb3dlcigpIHtcbiAgaWYgKHRoaXMucHJldmlvdXNTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMsIHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gobG93ZXIpO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3JcIjtcblxuZnVuY3Rpb24gY29uc3RhbnROdWxsKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgYmVmb3JlKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSksXG4gICAgICBzZWxlY3QgPSBiZWZvcmUgPT0gbnVsbCA/IGNvbnN0YW50TnVsbCA6IHR5cGVvZiBiZWZvcmUgPT09IFwiZnVuY3Rpb25cIiA/IGJlZm9yZSA6IHNlbGVjdG9yKGJlZm9yZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IG51bGwpO1xuICB9KTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyZW1vdmUpO1xufVxuIiwiZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lU2hhbGxvdygpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jbG9uZU5vZGUoZmFsc2UpLCB0aGlzLm5leHRTaWJsaW5nKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lRGVlcCgpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jbG9uZU5vZGUodHJ1ZSksIHRoaXMubmV4dFNpYmxpbmcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWVwKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChkZWVwID8gc2VsZWN0aW9uX2Nsb25lRGVlcCA6IHNlbGVjdGlvbl9jbG9uZVNoYWxsb3cpO1xufVxuIiwidmFyIGZpbHRlckV2ZW50cyA9IHt9O1xuXG5leHBvcnQgdmFyIGV2ZW50ID0gbnVsbDtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgaWYgKCEoXCJvbm1vdXNlZW50ZXJcIiBpbiBlbGVtZW50KSkge1xuICAgIGZpbHRlckV2ZW50cyA9IHttb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLCBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCJ9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlckNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIGxpc3RlbmVyID0gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApO1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgaWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0aGlzICYmICEocmVsYXRlZC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0aGlzKSAmIDgpKSkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQxKSB7XG4gICAgdmFyIGV2ZW50MCA9IGV2ZW50OyAvLyBFdmVudHMgY2FuIGJlIHJlZW50cmFudCAoZS5nLiwgZm9jdXMpLlxuICAgIGV2ZW50ID0gZXZlbnQxO1xuICAgIHRyeSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIHRoaXMuX19kYXRhX18sIGluZGV4LCBncm91cCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGV2ZW50ID0gZXZlbnQwO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25SZW1vdmUodHlwZW5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbjtcbiAgICBpZiAoIW9uKSByZXR1cm47XG4gICAgZm9yICh2YXIgaiA9IDAsIGkgPSAtMSwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgaWYgKG8gPSBvbltqXSwgKCF0eXBlbmFtZS50eXBlIHx8IG8udHlwZSA9PT0gdHlwZW5hbWUudHlwZSkgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvblsrK2ldID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCsraSkgb24ubGVuZ3RoID0gaTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9fb247XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uQWRkKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgd3JhcCA9IGZpbHRlckV2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0eXBlbmFtZS50eXBlKSA/IGZpbHRlckNvbnRleHRMaXN0ZW5lciA6IGNvbnRleHRMaXN0ZW5lcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIGksIGdyb3VwKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uLCBvLCBsaXN0ZW5lciA9IHdyYXAodmFsdWUsIGksIGdyb3VwKTtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLmNhcHR1cmUgPSBjYXB0dXJlKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgY2FwdHVyZTogY2FwdHVyZX07XG4gICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgIGVsc2Ugb24ucHVzaChvKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gIHZhciB0eXBlbmFtZXMgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgb24gPSB0aGlzLm5vZGUoKS5fX29uO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0eXBlbmFtZXNbaV0pLnR5cGUgPT09IG8udHlwZSAmJiB0Lm5hbWUgPT09IG8ubmFtZSkge1xuICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICBpZiAoY2FwdHVyZSA9PSBudWxsKSBjYXB0dXJlID0gZmFsc2U7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBjYXB0dXJlKSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tRXZlbnQoZXZlbnQxLCBsaXN0ZW5lciwgdGhhdCwgYXJncykge1xuICB2YXIgZXZlbnQwID0gZXZlbnQ7XG4gIGV2ZW50MS5zb3VyY2VFdmVudCA9IGV2ZW50O1xuICBldmVudCA9IGV2ZW50MTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0gZmluYWxseSB7XG4gICAgZXZlbnQgPSBldmVudDA7XG4gIH1cbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgIGV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuXG4gIGlmICh0eXBlb2YgZXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zdGFudCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxuICAgICAgOiBkaXNwYXRjaENvbnN0YW50KSh0eXBlLCBwYXJhbXMpKTtcbn1cbiIsImltcG9ydCBzZWxlY3Rpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0YSBmcm9tIFwiLi9kYXRhXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VudGVyIGZyb20gXCIuL2VudGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2V4aXQgZnJvbSBcIi4vZXhpdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9vcmRlciBmcm9tIFwiLi9vcmRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zb3J0IGZyb20gXCIuL3NvcnRcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2FsbCBmcm9tIFwiLi9jYWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGVzIGZyb20gXCIuL25vZGVzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGUgZnJvbSBcIi4vbm9kZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zaXplIGZyb20gXCIuL3NpemVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW1wdHkgZnJvbSBcIi4vZW1wdHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fZWFjaCBmcm9tIFwiLi9lYWNoXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2F0dHIgZnJvbSBcIi4vYXR0clwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9wcm9wZXJ0eSBmcm9tIFwiLi9wcm9wZXJ0eVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbGFzc2VkIGZyb20gXCIuL2NsYXNzZWRcIjtcbmltcG9ydCBzZWxlY3Rpb25fdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2h0bWwgZnJvbSBcIi4vaHRtbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9yYWlzZSBmcm9tIFwiLi9yYWlzZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9sb3dlciBmcm9tIFwiLi9sb3dlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hcHBlbmQgZnJvbSBcIi4vYXBwZW5kXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2luc2VydCBmcm9tIFwiLi9pbnNlcnRcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbG9uZSBmcm9tIFwiLi9jbG9uZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXR1bSBmcm9tIFwiLi9kYXR1bVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9vbiBmcm9tIFwiLi9vblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kaXNwYXRjaCBmcm9tIFwiLi9kaXNwYXRjaFwiO1xuXG5leHBvcnQgdmFyIHJvb3QgPSBbbnVsbF07XG5cbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3Rpb24oZ3JvdXBzLCBwYXJlbnRzKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdXSwgcm9vdCk7XG59XG5cblNlbGVjdGlvbi5wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2VsZWN0aW9uLFxuICBzZWxlY3Q6IHNlbGVjdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogc2VsZWN0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiBzZWxlY3Rpb25fZmlsdGVyLFxuICBkYXRhOiBzZWxlY3Rpb25fZGF0YSxcbiAgZW50ZXI6IHNlbGVjdGlvbl9lbnRlcixcbiAgZXhpdDogc2VsZWN0aW9uX2V4aXQsXG4gIG1lcmdlOiBzZWxlY3Rpb25fbWVyZ2UsXG4gIG9yZGVyOiBzZWxlY3Rpb25fb3JkZXIsXG4gIHNvcnQ6IHNlbGVjdGlvbl9zb3J0LFxuICBjYWxsOiBzZWxlY3Rpb25fY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX25vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX2VtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fZWFjaCxcbiAgYXR0cjogc2VsZWN0aW9uX2F0dHIsXG4gIHN0eWxlOiBzZWxlY3Rpb25fc3R5bGUsXG4gIHByb3BlcnR5OiBzZWxlY3Rpb25fcHJvcGVydHksXG4gIGNsYXNzZWQ6IHNlbGVjdGlvbl9jbGFzc2VkLFxuICB0ZXh0OiBzZWxlY3Rpb25fdGV4dCxcbiAgaHRtbDogc2VsZWN0aW9uX2h0bWwsXG4gIHJhaXNlOiBzZWxlY3Rpb25fcmFpc2UsXG4gIGxvd2VyOiBzZWxlY3Rpb25fbG93ZXIsXG4gIGFwcGVuZDogc2VsZWN0aW9uX2FwcGVuZCxcbiAgaW5zZXJ0OiBzZWxlY3Rpb25faW5zZXJ0LFxuICByZW1vdmU6IHNlbGVjdGlvbl9yZW1vdmUsXG4gIGNsb25lOiBzZWxlY3Rpb25fY2xvbmUsXG4gIGRhdHVtOiBzZWxlY3Rpb25fZGF0dW0sXG4gIG9uOiBzZWxlY3Rpb25fb24sXG4gIGRpc3BhdGNoOiBzZWxlY3Rpb25fZGlzcGF0Y2hcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNlbGVjdGlvbjtcbiIsImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcildXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW1tzZWxlY3Rvcl1dLCByb290KTtcbn1cbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCIuL3NlbGVjdGlvbi9vblwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGN1cnJlbnQgPSBldmVudCwgc291cmNlO1xuICB3aGlsZSAoc291cmNlID0gY3VycmVudC5zb3VyY2VFdmVudCkgY3VycmVudCA9IHNvdXJjZTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG4iLCJpbXBvcnQgc291cmNlRXZlbnQgZnJvbSBcIi4vc291cmNlRXZlbnRcIjtcbmltcG9ydCBwb2ludCBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlKSB7XG4gIHZhciBldmVudCA9IHNvdXJjZUV2ZW50KCk7XG4gIGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcykgZXZlbnQgPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgcmV0dXJuIHBvaW50KG5vZGUsIGV2ZW50KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIGV2ZW50KSB7XG4gIHZhciBzdmcgPSBub2RlLm93bmVyU1ZHRWxlbWVudCB8fCBub2RlO1xuXG4gIGlmIChzdmcuY3JlYXRlU1ZHUG9pbnQpIHtcbiAgICB2YXIgcG9pbnQgPSBzdmcuY3JlYXRlU1ZHUG9pbnQoKTtcbiAgICBwb2ludC54ID0gZXZlbnQuY2xpZW50WCwgcG9pbnQueSA9IGV2ZW50LmNsaWVudFk7XG4gICAgcG9pbnQgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obm9kZS5nZXRTY3JlZW5DVE0oKS5pbnZlcnNlKCkpO1xuICAgIHJldHVybiBbcG9pbnQueCwgcG9pbnQueV07XG4gIH1cblxuICB2YXIgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiBbZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdCAtIG5vZGUuY2xpZW50TGVmdCwgZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wIC0gbm9kZS5jbGllbnRUb3BdO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW3NlbGVjdG9yID09IG51bGwgPyBbXSA6IHNlbGVjdG9yXSwgcm9vdCk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzZWxlY3RvckFsbCBmcm9tIFwiLi4vc2VsZWN0b3JBbGxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBtYXRjaGVyIGZyb20gXCIuLi9tYXRjaGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZVwiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9leGl0IHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHNlbGVjdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gZ3JvdXAubGVuZ3RoIC0gMSwgbmV4dCA9IGdyb3VwW2ldLCBub2RlOyAtLWkgPj0gMDspIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgaWYgKG5leHQgJiYgbmV4dCAhPT0gbm9kZS5uZXh0U2libGluZykgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgbmV4dCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzBdO1xuICBhcmd1bWVudHNbMF0gPSB0aGlzO1xuICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMgPSBuZXcgQXJyYXkodGhpcy5zaXplKCkpLCBpID0gLTE7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgbm9kZXNbKytpXSA9IHRoaXM7IH0pO1xuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChub2RlKSByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IDA7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgKytzaXplOyB9KTtcbiAgcmV0dXJuIHNpemU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLm5vZGUoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi4vbmFtZXNwYWNlXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdik7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuICAgIHJldHVybiBmdWxsbmFtZS5sb2NhbFxuICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxuICAgICAgICA6IG5vZGUuZ2V0QXR0cmlidXRlKGZ1bGxuYW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KSkpKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiZnVuY3Rpb24gcHJvcGVydHlSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHRoaXNbbmFtZV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Q29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXNbbmFtZV0gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIGVsc2UgdGhpc1tuYW1lXSA9IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHByb3BlcnR5UmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHByb3BlcnR5RnVuY3Rpb25cbiAgICAgICAgICA6IHByb3BlcnR5Q29uc3RhbnQpKG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKClbbmFtZV07XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIsIHZhbHVlKVxuICAgICAgOiB0aGlzLm5vZGUoKS5fX2RhdGFfXztcbn1cbiIsImV4cG9ydCB2YXIgcHJlZml4ID0gXCIkXCI7XG5cbmZ1bmN0aW9uIE1hcCgpIHt9XG5cbk1hcC5wcm90b3R5cGUgPSBtYXAucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTWFwLFxuICBoYXM6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiAocHJlZml4ICsga2V5KSBpbiB0aGlzO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiB0aGlzW3ByZWZpeCArIGtleV07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIHRoaXNbcHJlZml4ICsga2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBwcm9wZXJ0eSA9IHByZWZpeCArIGtleTtcbiAgICByZXR1cm4gcHJvcGVydHkgaW4gdGhpcyAmJiBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBrZXlzLnB1c2gocHJvcGVydHkuc2xpY2UoMSkpO1xuICAgIHJldHVybiBrZXlzO1xuICB9LFxuICB2YWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgdmFsdWVzLnB1c2godGhpc1twcm9wZXJ0eV0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH0sXG4gIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGVudHJpZXMucHVzaCh7a2V5OiBwcm9wZXJ0eS5zbGljZSgxKSwgdmFsdWU6IHRoaXNbcHJvcGVydHldfSk7XG4gICAgcmV0dXJuIGVudHJpZXM7XG4gIH0sXG4gIHNpemU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaXplID0gMDtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgKytzaXplO1xuICAgIHJldHVybiBzaXplO1xuICB9LFxuICBlbXB0eTogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZWFjaDogZnVuY3Rpb24oZikge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBmKHRoaXNbcHJvcGVydHldLCBwcm9wZXJ0eS5zbGljZSgxKSwgdGhpcyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG1hcChvYmplY3QsIGYpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXA7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIE1hcCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkgeyBtYXAuc2V0KGtleSwgdmFsdWUpOyB9KTtcblxuICAvLyBJbmRleCBhcnJheSBieSBudW1lcmljIGluZGV4IG9yIHNwZWNpZmllZCBrZXkgZnVuY3Rpb24uXG4gIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBvYmplY3QubGVuZ3RoLFxuICAgICAgICBvO1xuXG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoaSwgb2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYobyA9IG9iamVjdFtpXSwgaSwgb2JqZWN0KSwgbyk7XG4gIH1cblxuICAvLyBDb252ZXJ0IG9iamVjdCB0byBtYXAuXG4gIGVsc2UgaWYgKG9iamVjdCkgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWFwLnNldChrZXksIG9iamVjdFtrZXldKTtcblxuICByZXR1cm4gbWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXA7XG4iLCJpbXBvcnQgbWFwIGZyb20gXCIuL21hcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGtleXMgPSBbXSxcbiAgICAgIHNvcnRLZXlzID0gW10sXG4gICAgICBzb3J0VmFsdWVzLFxuICAgICAgcm9sbHVwLFxuICAgICAgbmVzdDtcblxuICBmdW5jdGlvbiBhcHBseShhcnJheSwgZGVwdGgsIGNyZWF0ZVJlc3VsdCwgc2V0UmVzdWx0KSB7XG4gICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSB7XG4gICAgICBpZiAoc29ydFZhbHVlcyAhPSBudWxsKSBhcnJheS5zb3J0KHNvcnRWYWx1ZXMpO1xuICAgICAgcmV0dXJuIHJvbGx1cCAhPSBudWxsID8gcm9sbHVwKGFycmF5KSA6IGFycmF5O1xuICAgIH1cblxuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGtleSA9IGtleXNbZGVwdGgrK10sXG4gICAgICAgIGtleVZhbHVlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdmFsdWVzQnlLZXkgPSBtYXAoKSxcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICByZXN1bHQgPSBjcmVhdGVSZXN1bHQoKTtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodmFsdWVzID0gdmFsdWVzQnlLZXkuZ2V0KGtleVZhbHVlID0ga2V5KHZhbHVlID0gYXJyYXlbaV0pICsgXCJcIikpIHtcbiAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVzQnlLZXkuc2V0KGtleVZhbHVlLCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YWx1ZXNCeUtleS5lYWNoKGZ1bmN0aW9uKHZhbHVlcywga2V5KSB7XG4gICAgICBzZXRSZXN1bHQocmVzdWx0LCBrZXksIGFwcGx5KHZhbHVlcywgZGVwdGgsIGNyZWF0ZVJlc3VsdCwgc2V0UmVzdWx0KSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gZW50cmllcyhtYXAsIGRlcHRoKSB7XG4gICAgaWYgKCsrZGVwdGggPiBrZXlzLmxlbmd0aCkgcmV0dXJuIG1hcDtcbiAgICB2YXIgYXJyYXksIHNvcnRLZXkgPSBzb3J0S2V5c1tkZXB0aCAtIDFdO1xuICAgIGlmIChyb2xsdXAgIT0gbnVsbCAmJiBkZXB0aCA+PSBrZXlzLmxlbmd0aCkgYXJyYXkgPSBtYXAuZW50cmllcygpO1xuICAgIGVsc2UgYXJyYXkgPSBbXSwgbWFwLmVhY2goZnVuY3Rpb24odiwgaykgeyBhcnJheS5wdXNoKHtrZXk6IGssIHZhbHVlczogZW50cmllcyh2LCBkZXB0aCl9KTsgfSk7XG4gICAgcmV0dXJuIHNvcnRLZXkgIT0gbnVsbCA/IGFycmF5LnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gc29ydEtleShhLmtleSwgYi5rZXkpOyB9KSA6IGFycmF5O1xuICB9XG5cbiAgcmV0dXJuIG5lc3QgPSB7XG4gICAgb2JqZWN0OiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU9iamVjdCwgc2V0T2JqZWN0KTsgfSxcbiAgICBtYXA6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApOyB9LFxuICAgIGVudHJpZXM6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBlbnRyaWVzKGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCksIDApOyB9LFxuICAgIGtleTogZnVuY3Rpb24oZCkgeyBrZXlzLnB1c2goZCk7IHJldHVybiBuZXN0OyB9LFxuICAgIHNvcnRLZXlzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0S2V5c1trZXlzLmxlbmd0aCAtIDFdID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgIHNvcnRWYWx1ZXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRWYWx1ZXMgPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgcm9sbHVwOiBmdW5jdGlvbihmKSB7IHJvbGx1cCA9IGY7IHJldHVybiBuZXN0OyB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdCgpIHtcbiAgcmV0dXJuIHt9O1xufVxuXG5mdW5jdGlvbiBzZXRPYmplY3Qob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1hcCgpIHtcbiAgcmV0dXJuIG1hcCgpO1xufVxuXG5mdW5jdGlvbiBzZXRNYXAobWFwLCBrZXksIHZhbHVlKSB7XG4gIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG59XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgbWFwLCBwcmVmaXh9IGZyb20gXCIuL21hcFwiO1xuXG5mdW5jdGlvbiBTZXQoKSB7fVxuXG52YXIgcHJvdG8gPSBtYXAucHJvdG90eXBlO1xuXG5TZXQucHJvdG90eXBlID0gc2V0LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNldCxcbiAgaGFzOiBwcm90by5oYXMsXG4gIGFkZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YWx1ZSArPSBcIlwiO1xuICAgIHRoaXNbcHJlZml4ICsgdmFsdWVdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogcHJvdG8ucmVtb3ZlLFxuICBjbGVhcjogcHJvdG8uY2xlYXIsXG4gIHZhbHVlczogcHJvdG8ua2V5cyxcbiAgc2l6ZTogcHJvdG8uc2l6ZSxcbiAgZW1wdHk6IHByb3RvLmVtcHR5LFxuICBlYWNoOiBwcm90by5lYWNoXG59O1xuXG5mdW5jdGlvbiBzZXQob2JqZWN0LCBmKSB7XG4gIHZhciBzZXQgPSBuZXcgU2V0O1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBTZXQpIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IHNldC5hZGQodmFsdWUpOyB9KTtcblxuICAvLyBPdGhlcndpc2UsIGFzc3VtZSBpdOKAmXMgYW4gYXJyYXkuXG4gIGVsc2UgaWYgKG9iamVjdCkge1xuICAgIHZhciBpID0gLTEsIG4gPSBvYmplY3QubGVuZ3RoO1xuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChmKG9iamVjdFtpXSwgaSwgb2JqZWN0KSk7XG4gIH1cblxuICByZXR1cm4gc2V0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZXQ7XG4iLCJ2YXIgYXJyYXkgPSBBcnJheS5wcm90b3R5cGU7XG5cbmV4cG9ydCB2YXIgbWFwID0gYXJyYXkubWFwO1xuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuIiwiaW1wb3J0IHttYXB9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuXG5leHBvcnQgdmFyIGltcGxpY2l0ID0ge25hbWU6IFwiaW1wbGljaXRcIn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9yZGluYWwocmFuZ2UpIHtcbiAgdmFyIGluZGV4ID0gbWFwKCksXG4gICAgICBkb21haW4gPSBbXSxcbiAgICAgIHVua25vd24gPSBpbXBsaWNpdDtcblxuICByYW5nZSA9IHJhbmdlID09IG51bGwgPyBbXSA6IHNsaWNlLmNhbGwocmFuZ2UpO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKGQpIHtcbiAgICB2YXIga2V5ID0gZCArIFwiXCIsIGkgPSBpbmRleC5nZXQoa2V5KTtcbiAgICBpZiAoIWkpIHtcbiAgICAgIGlmICh1bmtub3duICE9PSBpbXBsaWNpdCkgcmV0dXJuIHVua25vd247XG4gICAgICBpbmRleC5zZXQoa2V5LCBpID0gZG9tYWluLnB1c2goZCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmFuZ2VbKGkgLSAxKSAlIHJhbmdlLmxlbmd0aF07XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW10sIGluZGV4ID0gbWFwKCk7XG4gICAgdmFyIGkgPSAtMSwgbiA9IF8ubGVuZ3RoLCBkLCBrZXk7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghaW5kZXguaGFzKGtleSA9IChkID0gX1tpXSkgKyBcIlwiKSkgaW5kZXguc2V0KGtleSwgZG9tYWluLnB1c2goZCkpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9yZGluYWwoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG4iLCJpbXBvcnQge3JhbmdlIGFzIHNlcXVlbmNlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCBvcmRpbmFsIGZyb20gXCIuL29yZGluYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmFuZCgpIHtcbiAgdmFyIHNjYWxlID0gb3JkaW5hbCgpLnVua25vd24odW5kZWZpbmVkKSxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbixcbiAgICAgIG9yZGluYWxSYW5nZSA9IHNjYWxlLnJhbmdlLFxuICAgICAgcmFuZ2UgPSBbMCwgMV0sXG4gICAgICBzdGVwLFxuICAgICAgYmFuZHdpZHRoLFxuICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgIHBhZGRpbmdJbm5lciA9IDAsXG4gICAgICBwYWRkaW5nT3V0ZXIgPSAwLFxuICAgICAgYWxpZ24gPSAwLjU7XG5cbiAgZGVsZXRlIHNjYWxlLnVua25vd247XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgbiA9IGRvbWFpbigpLmxlbmd0aCxcbiAgICAgICAgcmV2ZXJzZSA9IHJhbmdlWzFdIDwgcmFuZ2VbMF0sXG4gICAgICAgIHN0YXJ0ID0gcmFuZ2VbcmV2ZXJzZSAtIDBdLFxuICAgICAgICBzdG9wID0gcmFuZ2VbMSAtIHJldmVyc2VdO1xuICAgIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDEsIG4gLSBwYWRkaW5nSW5uZXIgKyBwYWRkaW5nT3V0ZXIgKiAyKTtcbiAgICBpZiAocm91bmQpIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgIHN0YXJ0ICs9IChzdG9wIC0gc3RhcnQgLSBzdGVwICogKG4gLSBwYWRkaW5nSW5uZXIpKSAqIGFsaWduO1xuICAgIGJhbmR3aWR0aCA9IHN0ZXAgKiAoMSAtIHBhZGRpbmdJbm5lcik7XG4gICAgaWYgKHJvdW5kKSBzdGFydCA9IE1hdGgucm91bmQoc3RhcnQpLCBiYW5kd2lkdGggPSBNYXRoLnJvdW5kKGJhbmR3aWR0aCk7XG4gICAgdmFyIHZhbHVlcyA9IHNlcXVlbmNlKG4pLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBzdGFydCArIHN0ZXAgKiBpOyB9KTtcbiAgICByZXR1cm4gb3JkaW5hbFJhbmdlKHJldmVyc2UgPyB2YWx1ZXMucmV2ZXJzZSgpIDogdmFsdWVzKTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4oXyksIHJlc2NhbGUoKSkgOiBkb21haW4oKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IFsrX1swXSwgK19bMV1dLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IFsrX1swXSwgK19bMV1dLCByb3VuZCA9IHRydWUsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5iYW5kd2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZHdpZHRoO1xuICB9O1xuXG4gIHNjYWxlLnN0ZXAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc3RlcDtcbiAgfTtcblxuICBzY2FsZS5yb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEhXywgcmVzY2FsZSgpKSA6IHJvdW5kO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gcGFkZGluZ091dGVyID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZ091dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdPdXRlciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdPdXRlcjtcbiAgfTtcblxuICBzY2FsZS5hbGlnbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbGlnbiA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IGFsaWduO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZCgpXG4gICAgICAgIC5kb21haW4oZG9tYWluKCkpXG4gICAgICAgIC5yYW5nZShyYW5nZSlcbiAgICAgICAgLnJvdW5kKHJvdW5kKVxuICAgICAgICAucGFkZGluZ0lubmVyKHBhZGRpbmdJbm5lcilcbiAgICAgICAgLnBhZGRpbmdPdXRlcihwYWRkaW5nT3V0ZXIpXG4gICAgICAgIC5hbGlnbihhbGlnbik7XG4gIH07XG5cbiAgcmV0dXJuIHJlc2NhbGUoKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRpc2goc2NhbGUpIHtcbiAgdmFyIGNvcHkgPSBzY2FsZS5jb3B5O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nSW5uZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwb2ludGlzaChjb3B5KCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50KCkge1xuICByZXR1cm4gcG9pbnRpc2goYmFuZCgpLnBhZGRpbmdJbm5lcigxKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25zdHJ1Y3RvciwgZmFjdG9yeSwgcHJvdG90eXBlKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGZhY3RvcnkucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwYXJlbnQsIGRlZmluaXRpb24pIHtcbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XG4gIGZvciAodmFyIGtleSBpbiBkZWZpbml0aW9uKSBwcm90b3R5cGVba2V5XSA9IGRlZmluaXRpb25ba2V5XTtcbiAgcmV0dXJuIHByb3RvdHlwZTtcbn1cbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG5leHBvcnQgdmFyIGRhcmtlciA9IDAuNztcbmV4cG9ydCB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG52YXIgcmVJID0gXCJcXFxccyooWystXT9cXFxcZCspXFxcXHMqXCIsXG4gICAgcmVOID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KSVcXFxccypcIixcbiAgICByZUhleDMgPSAvXiMoWzAtOWEtZl17M30pJC8sXG4gICAgcmVIZXg2ID0gL14jKFswLTlhLWZdezZ9KSQvLFxuICAgIHJlUmdiSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZUksIHJlSSwgcmVJXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlSSwgcmVJLCByZUksIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xcXFxcKFwiICsgW3JlTiwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsYVxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpO1xuXG52YXIgbmFtZWQgPSB7XG4gIGFsaWNlYmx1ZTogMHhmMGY4ZmYsXG4gIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gIGFxdWE6IDB4MDBmZmZmLFxuICBhcXVhbWFyaW5lOiAweDdmZmZkNCxcbiAgYXp1cmU6IDB4ZjBmZmZmLFxuICBiZWlnZTogMHhmNWY1ZGMsXG4gIGJpc3F1ZTogMHhmZmU0YzQsXG4gIGJsYWNrOiAweDAwMDAwMCxcbiAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICBibHVlOiAweDAwMDBmZixcbiAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gIGJyb3duOiAweGE1MmEyYSxcbiAgYnVybHl3b29kOiAweGRlYjg4NyxcbiAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gIGNob2NvbGF0ZTogMHhkMjY5MWUsXG4gIGNvcmFsOiAweGZmN2Y1MCxcbiAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICBjb3Juc2lsazogMHhmZmY4ZGMsXG4gIGNyaW1zb246IDB4ZGMxNDNjLFxuICBjeWFuOiAweDAwZmZmZixcbiAgZGFya2JsdWU6IDB4MDAwMDhiLFxuICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICBkYXJrZ3JheTogMHhhOWE5YTksXG4gIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgZGFya2toYWtpOiAweGJkYjc2YixcbiAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gIGRhcmtvcmFuZ2U6IDB4ZmY4YzAwLFxuICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgZGFya3JlZDogMHg4YjAwMDAsXG4gIGRhcmtzYWxtb246IDB4ZTk5NjdhLFxuICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgZGFya3NsYXRlZ3JheTogMHgyZjRmNGYsXG4gIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgZGFya3Zpb2xldDogMHg5NDAwZDMsXG4gIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICBkaW1ncmF5OiAweDY5Njk2OSxcbiAgZGltZ3JleTogMHg2OTY5NjksXG4gIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICBmaXJlYnJpY2s6IDB4YjIyMjIyLFxuICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgZnVjaHNpYTogMHhmZjAwZmYsXG4gIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICBnb2xkOiAweGZmZDcwMCxcbiAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgZ3JheTogMHg4MDgwODAsXG4gIGdyZWVuOiAweDAwODAwMCxcbiAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICBncmV5OiAweDgwODA4MCxcbiAgaG9uZXlkZXc6IDB4ZjBmZmYwLFxuICBob3RwaW5rOiAweGZmNjliNCxcbiAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgaW5kaWdvOiAweDRiMDA4MixcbiAgaXZvcnk6IDB4ZmZmZmYwLFxuICBraGFraTogMHhmMGU2OGMsXG4gIGxhdmVuZGVyOiAweGU2ZTZmYSxcbiAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gIGxlbW9uY2hpZmZvbjogMHhmZmZhY2QsXG4gIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICBsaWdodGN5YW46IDB4ZTBmZmZmLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gIGxpZ2h0Z3JlZW46IDB4OTBlZTkwLFxuICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICBsaWdodHNhbG1vbjogMHhmZmEwN2EsXG4gIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICBsaWdodHNsYXRlZ3JheTogMHg3Nzg4OTksXG4gIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICBsaWdodHllbGxvdzogMHhmZmZmZTAsXG4gIGxpbWU6IDB4MDBmZjAwLFxuICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICBsaW5lbjogMHhmYWYwZTYsXG4gIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICBtYXJvb246IDB4ODAwMDAwLFxuICBtZWRpdW1hcXVhbWFyaW5lOiAweDY2Y2RhYSxcbiAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gIG1lZGl1bXB1cnBsZTogMHg5MzcwZGIsXG4gIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IDB4MDBmYTlhLFxuICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICBtaWRuaWdodGJsdWU6IDB4MTkxOTcwLFxuICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICBtb2NjYXNpbjogMHhmZmU0YjUsXG4gIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgbmF2eTogMHgwMDAwODAsXG4gIG9sZGxhY2U6IDB4ZmRmNWU2LFxuICBvbGl2ZTogMHg4MDgwMDAsXG4gIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gIG9yYW5nZTogMHhmZmE1MDAsXG4gIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gIG9yY2hpZDogMHhkYTcwZDYsXG4gIHBhbGVnb2xkZW5yb2Q6IDB4ZWVlOGFhLFxuICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgcGFsZXZpb2xldHJlZDogMHhkYjcwOTMsXG4gIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICBwZXJ1OiAweGNkODUzZixcbiAgcGluazogMHhmZmMwY2IsXG4gIHBsdW06IDB4ZGRhMGRkLFxuICBwb3dkZXJibHVlOiAweGIwZTBlNixcbiAgcHVycGxlOiAweDgwMDA4MCxcbiAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gIHJlZDogMHhmZjAwMDAsXG4gIHJvc3licm93bjogMHhiYzhmOGYsXG4gIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gIHNhZGRsZWJyb3duOiAweDhiNDUxMyxcbiAgc2FsbW9uOiAweGZhODA3MixcbiAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gIHNlYWdyZWVuOiAweDJlOGI1NyxcbiAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICBzaWVubmE6IDB4YTA1MjJkLFxuICBzaWx2ZXI6IDB4YzBjMGMwLFxuICBza3libHVlOiAweDg3Y2VlYixcbiAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgc2xhdGVncmF5OiAweDcwODA5MCxcbiAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgc25vdzogMHhmZmZhZmEsXG4gIHNwcmluZ2dyZWVuOiAweDAwZmY3ZixcbiAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgdGFuOiAweGQyYjQ4YyxcbiAgdGVhbDogMHgwMDgwODAsXG4gIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICB0b21hdG86IDB4ZmY2MzQ3LFxuICB0dXJxdW9pc2U6IDB4NDBlMGQwLFxuICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICB3aGVhdDogMHhmNWRlYjMsXG4gIHdoaXRlOiAweGZmZmZmZixcbiAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gIHllbGxvdzogMHhmZmZmMDAsXG4gIHllbGxvd2dyZWVuOiAweDlhY2QzMlxufTtcblxuZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkuZGlzcGxheWFibGUoKTtcbiAgfSxcbiAgaGV4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5oZXgoKTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpICsgXCJcIjtcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICB2YXIgbTtcbiAgZm9ybWF0ID0gKGZvcm1hdCArIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKG0gPSByZUhleDMuZXhlYyhmb3JtYXQpKSA/IChtID0gcGFyc2VJbnQobVsxXSwgMTYpLCBuZXcgUmdiKChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4MGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpLCAxKSkgLy8gI2YwMFxuICAgICAgOiAobSA9IHJlSGV4Ni5leGVjKGZvcm1hdCkpID8gcmdibihwYXJzZUludChtWzFdLCAxNikpIC8vICNmZjAwMDBcbiAgICAgIDogKG0gPSByZVJnYkludGVnZXIuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSwgbVsyXSwgbVszXSwgMSkgLy8gcmdiKDI1NSwgMCwgMClcbiAgICAgIDogKG0gPSByZVJnYlBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgMSkgLy8gcmdiKDEwMCUsIDAlLCAwJSlcbiAgICAgIDogKG0gPSByZVJnYmFJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0sIG1bMl0sIG1bM10sIG1bNF0pIC8vIHJnYmEoMjU1LCAwLCAwLCAxKVxuICAgICAgOiAobSA9IHJlUmdiYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgbVs0XSkgLy8gcmdiKDEwMCUsIDAlLCAwJSwgMSlcbiAgICAgIDogKG0gPSByZUhzbFBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgMSkgLy8gaHNsKDEyMCwgNTAlLCA1MCUpXG4gICAgICA6IChtID0gcmVIc2xhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCBtWzRdKSAvLyBoc2xhKDEyMCwgNTAlLCA1MCUsIDEpXG4gICAgICA6IG5hbWVkLmhhc093blByb3BlcnR5KGZvcm1hdCkgPyByZ2JuKG5hbWVkW2Zvcm1hdF0pXG4gICAgICA6IGZvcm1hdCA9PT0gXCJ0cmFuc3BhcmVudFwiID8gbmV3IFJnYihOYU4sIE5hTiwgTmFOLCAwKVxuICAgICAgOiBudWxsO1xufVxuXG5mdW5jdGlvbiByZ2JuKG4pIHtcbiAgcmV0dXJuIG5ldyBSZ2IobiA+PiAxNiAmIDB4ZmYsIG4gPj4gOCAmIDB4ZmYsIG4gJiAweGZmLCAxKTtcbn1cblxuZnVuY3Rpb24gcmdiYShyLCBnLCBiLCBhKSB7XG4gIGlmIChhIDw9IDApIHIgPSBnID0gYiA9IE5hTjtcbiAgcmV0dXJuIG5ldyBSZ2IociwgZywgYiwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JDb252ZXJ0KG8pIHtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgUmdiO1xuICBvID0gby5yZ2IoKTtcbiAgcmV0dXJuIG5ldyBSZ2Ioby5yLCBvLmcsIG8uYiwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gcmdiQ29udmVydChyKSA6IG5ldyBSZ2IociwgZywgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5yID0gK3I7XG4gIHRoaXMuZyA9ICtnO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShSZ2IsIHJnYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5yICYmIHRoaXMuciA8PSAyNTUpXG4gICAgICAgICYmICgwIDw9IHRoaXMuZyAmJiB0aGlzLmcgPD0gMjU1KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmIgJiYgdGhpcy5iIDw9IDI1NSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgaGV4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCIjXCIgKyBoZXgodGhpcy5yKSArIGhleCh0aGlzLmcpICsgaGV4KHRoaXMuYik7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgICByZXR1cm4gKGEgPT09IDEgPyBcInJnYihcIiA6IFwicmdiYShcIilcbiAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5yKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5nKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5iKSB8fCAwKSlcbiAgICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiBoZXgodmFsdWUpIHtcbiAgdmFsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodmFsdWUpIHx8IDApKTtcbiAgcmV0dXJuICh2YWx1ZSA8IDE2ID8gXCIwXCIgOiBcIlwiKSArIHZhbHVlLnRvU3RyaW5nKDE2KTtcbn1cblxuZnVuY3Rpb24gaHNsYShoLCBzLCBsLCBhKSB7XG4gIGlmIChhIDw9IDApIGggPSBzID0gbCA9IE5hTjtcbiAgZWxzZSBpZiAobCA8PSAwIHx8IGwgPj0gMSkgaCA9IHMgPSBOYU47XG4gIGVsc2UgaWYgKHMgPD0gMCkgaCA9IE5hTjtcbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBuZXcgSHNsKG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IEhzbDtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBvO1xuICBvID0gby5yZ2IoKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICBoID0gTmFOLFxuICAgICAgcyA9IG1heCAtIG1pbixcbiAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGlmIChzKSB7XG4gICAgaWYgKHIgPT09IG1heCkgaCA9IChnIC0gYikgLyBzICsgKGcgPCBiKSAqIDY7XG4gICAgZWxzZSBpZiAoZyA9PT0gbWF4KSBoID0gKGIgLSByKSAvIHMgKyAyO1xuICAgIGVsc2UgaCA9IChyIC0gZykgLyBzICsgNDtcbiAgICBzIC89IGwgPCAwLjUgPyBtYXggKyBtaW4gOiAyIC0gbWF4IC0gbWluO1xuICAgIGggKj0gNjA7XG4gIH0gZWxzZSB7XG4gICAgcyA9IGwgPiAwICYmIGwgPCAxID8gMCA6IGg7XG4gIH1cbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaHNsQ29udmVydChoKSA6IG5ldyBIc2woaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhzbCwgaHNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gdGhpcy5oICUgMzYwICsgKHRoaXMuaCA8IDApICogMzYwLFxuICAgICAgICBzID0gaXNOYU4oaCkgfHwgaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMsXG4gICAgICAgIGwgPSB0aGlzLmwsXG4gICAgICAgIG0yID0gbCArIChsIDwgMC41ID8gbCA6IDEgLSBsKSAqIHMsXG4gICAgICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGhzbDJyZ2IoaCA+PSAyNDAgPyBoIC0gMjQwIDogaCArIDEyMCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCA8IDEyMCA/IGggKyAyNDAgOiBoIC0gMTIwLCBtMSwgbTIpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnMgJiYgdGhpcy5zIDw9IDEgfHwgaXNOYU4odGhpcy5zKSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9XG59KSk7XG5cbi8qIEZyb20gRnZEIDEzLjM3LCBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDMgKi9cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgbTEsIG0yKSB7XG4gIHJldHVybiAoaCA8IDYwID8gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjBcbiAgICAgIDogaCA8IDE4MCA/IG0yXG4gICAgICA6IGggPCAyNDAgPyBtMSArIChtMiAtIG0xKSAqICgyNDAgLSBoKSAvIDYwXG4gICAgICA6IG0xKSAqIDI1NTtcbn1cbiIsImV4cG9ydCB2YXIgZGVnMnJhZCA9IE1hdGguUEkgLyAxODA7XG5leHBvcnQgdmFyIHJhZDJkZWcgPSAxODAgLyBNYXRoLlBJO1xuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lXCI7XG5pbXBvcnQge0NvbG9yLCByZ2JDb252ZXJ0LCBSZ2J9IGZyb20gXCIuL2NvbG9yXCI7XG5pbXBvcnQge2RlZzJyYWQsIHJhZDJkZWd9IGZyb20gXCIuL21hdGhcIjtcblxuLy8gaHR0cHM6Ly9iZXRhLm9ic2VydmFibGVocS5jb20vQG1ib3N0b2NrL2xhYi1hbmQtcmdiXG52YXIgSyA9IDE4LFxuICAgIFhuID0gMC45NjQyMixcbiAgICBZbiA9IDEsXG4gICAgWm4gPSAwLjgyNTIxLFxuICAgIHQwID0gNCAvIDI5LFxuICAgIHQxID0gNiAvIDI5LFxuICAgIHQyID0gMyAqIHQxICogdDEsXG4gICAgdDMgPSB0MSAqIHQxICogdDE7XG5cbmZ1bmN0aW9uIGxhYkNvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIExhYikgcmV0dXJuIG5ldyBMYWIoby5sLCBvLmEsIG8uYiwgby5vcGFjaXR5KTtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHtcbiAgICBpZiAoaXNOYU4oby5oKSkgcmV0dXJuIG5ldyBMYWIoby5sLCAwLCAwLCBvLm9wYWNpdHkpO1xuICAgIHZhciBoID0gby5oICogZGVnMnJhZDtcbiAgICByZXR1cm4gbmV3IExhYihvLmwsIE1hdGguY29zKGgpICogby5jLCBNYXRoLnNpbihoKSAqIG8uYywgby5vcGFjaXR5KTtcbiAgfVxuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciByID0gcmdiMmxyZ2Ioby5yKSxcbiAgICAgIGcgPSByZ2IybHJnYihvLmcpLFxuICAgICAgYiA9IHJnYjJscmdiKG8uYiksXG4gICAgICB5ID0geHl6MmxhYigoMC4yMjI1MDQ1ICogciArIDAuNzE2ODc4NiAqIGcgKyAwLjA2MDYxNjkgKiBiKSAvIFluKSwgeCwgejtcbiAgaWYgKHIgPT09IGcgJiYgZyA9PT0gYikgeCA9IHogPSB5OyBlbHNlIHtcbiAgICB4ID0geHl6MmxhYigoMC40MzYwNzQ3ICogciArIDAuMzg1MDY0OSAqIGcgKyAwLjE0MzA4MDQgKiBiKSAvIFhuKTtcbiAgICB6ID0geHl6MmxhYigoMC4wMTM5MzIyICogciArIDAuMDk3MTA0NSAqIGcgKyAwLjcxNDE3MzMgKiBiKSAvIFpuKTtcbiAgfVxuICByZXR1cm4gbmV3IExhYigxMTYgKiB5IC0gMTYsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geiksIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBncmF5KGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIG5ldyBMYWIobCwgMCwgMCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGxhYkNvbnZlcnQobCkgOiBuZXcgTGFiKGwsIGEsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIExhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLmEgPSArYTtcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoTGFiLCBsYWIsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCArIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sIC0gSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB5ID0gKHRoaXMubCArIDE2KSAvIDExNixcbiAgICAgICAgeCA9IGlzTmFOKHRoaXMuYSkgPyB5IDogeSArIHRoaXMuYSAvIDUwMCxcbiAgICAgICAgeiA9IGlzTmFOKHRoaXMuYikgPyB5IDogeSAtIHRoaXMuYiAvIDIwMDtcbiAgICB4ID0gWG4gKiBsYWIyeHl6KHgpO1xuICAgIHkgPSBZbiAqIGxhYjJ4eXooeSk7XG4gICAgeiA9IFpuICogbGFiMnh5eih6KTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGxyZ2IycmdiKCAzLjEzMzg1NjEgKiB4IC0gMS42MTY4NjY3ICogeSAtIDAuNDkwNjE0NiAqIHopLFxuICAgICAgbHJnYjJyZ2IoLTAuOTc4NzY4NCAqIHggKyAxLjkxNjE0MTUgKiB5ICsgMC4wMzM0NTQwICogeiksXG4gICAgICBscmdiMnJnYiggMC4wNzE5NDUzICogeCAtIDAuMjI4OTkxNCAqIHkgKyAxLjQwNTI0MjcgKiB6KSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24geHl6MmxhYih0KSB7XG4gIHJldHVybiB0ID4gdDMgPyBNYXRoLnBvdyh0LCAxIC8gMykgOiB0IC8gdDIgKyB0MDtcbn1cblxuZnVuY3Rpb24gbGFiMnh5eih0KSB7XG4gIHJldHVybiB0ID4gdDEgPyB0ICogdCAqIHQgOiB0MiAqICh0IC0gdDApO1xufVxuXG5mdW5jdGlvbiBscmdiMnJnYih4KSB7XG4gIHJldHVybiAyNTUgKiAoeCA8PSAwLjAwMzEzMDggPyAxMi45MiAqIHggOiAxLjA1NSAqIE1hdGgucG93KHgsIDEgLyAyLjQpIC0gMC4wNTUpO1xufVxuXG5mdW5jdGlvbiByZ2IybHJnYih4KSB7XG4gIHJldHVybiAoeCAvPSAyNTUpIDw9IDAuMDQwNDUgPyB4IC8gMTIuOTIgOiBNYXRoLnBvdygoeCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xufVxuXG5mdW5jdGlvbiBoY2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHJldHVybiBuZXcgSGNsKG8uaCwgby5jLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBMYWIpKSBvID0gbGFiQ29udmVydChvKTtcbiAgaWYgKG8uYSA9PT0gMCAmJiBvLmIgPT09IDApIHJldHVybiBuZXcgSGNsKE5hTiwgMCwgby5sLCBvLm9wYWNpdHkpO1xuICB2YXIgaCA9IE1hdGguYXRhbjIoby5iLCBvLmEpICogcmFkMmRlZztcbiAgcmV0dXJuIG5ldyBIY2woaCA8IDAgPyBoICsgMzYwIDogaCwgTWF0aC5zcXJ0KG8uYSAqIG8uYSArIG8uYiAqIG8uYiksIG8ubCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxjaChsLCBjLCBoLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChsKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGgpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5jID0gK2M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhjbCwgaGNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbGFiQ29udmVydCh0aGlzKS5yZ2IoKTtcbiAgfVxufSkpO1xuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lXCI7XG5pbXBvcnQge0NvbG9yLCByZ2JDb252ZXJ0LCBSZ2IsIGRhcmtlciwgYnJpZ2h0ZXJ9IGZyb20gXCIuL2NvbG9yXCI7XG5pbXBvcnQge2RlZzJyYWQsIHJhZDJkZWd9IGZyb20gXCIuL21hdGhcIjtcblxudmFyIEEgPSAtMC4xNDg2MSxcbiAgICBCID0gKzEuNzgyNzcsXG4gICAgQyA9IC0wLjI5MjI3LFxuICAgIEQgPSAtMC45MDY0OSxcbiAgICBFID0gKzEuOTcyOTQsXG4gICAgRUQgPSBFICogRCxcbiAgICBFQiA9IEUgKiBCLFxuICAgIEJDX0RBID0gQiAqIEMgLSBEICogQTtcblxuZnVuY3Rpb24gY3ViZWhlbGl4Q29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgQ3ViZWhlbGl4KSByZXR1cm4gbmV3IEN1YmVoZWxpeChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBsID0gKEJDX0RBICogYiArIEVEICogciAtIEVCICogZykgLyAoQkNfREEgKyBFRCAtIEVCKSxcbiAgICAgIGJsID0gYiAtIGwsXG4gICAgICBrID0gKEUgKiAoZyAtIGwpIC0gQyAqIGJsKSAvIEQsXG4gICAgICBzID0gTWF0aC5zcXJ0KGsgKiBrICsgYmwgKiBibCkgLyAoRSAqIGwgKiAoMSAtIGwpKSwgLy8gTmFOIGlmIGw9MCBvciBsPTFcbiAgICAgIGggPSBzID8gTWF0aC5hdGFuMihrLCBibCkgKiByYWQyZGVnIC0gMTIwIDogTmFOO1xuICByZXR1cm4gbmV3IEN1YmVoZWxpeChoIDwgMCA/IGggKyAzNjAgOiBoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGN1YmVoZWxpeENvbnZlcnQoaCkgOiBuZXcgQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoQ3ViZWhlbGl4LCBjdWJlaGVsaXgsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSBpc05hTih0aGlzLmgpID8gMCA6ICh0aGlzLmggKyAxMjApICogZGVnMnJhZCxcbiAgICAgICAgbCA9ICt0aGlzLmwsXG4gICAgICAgIGEgPSBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyAqIGwgKiAoMSAtIGwpLFxuICAgICAgICBjb3NoID0gTWF0aC5jb3MoaCksXG4gICAgICAgIHNpbmggPSBNYXRoLnNpbihoKTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIDI1NSAqIChsICsgYSAqIChBICogY29zaCArIEIgKiBzaW5oKSksXG4gICAgICAyNTUgKiAobCArIGEgKiAoQyAqIGNvc2ggKyBEICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEUgKiBjb3NoKSksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9XG59KSk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuIiwiaW1wb3J0IHtyZ2IgYXMgY29sb3JSZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGJhc2lzIGZyb20gXCIuL2Jhc2lzXCI7XG5pbXBvcnQgYmFzaXNDbG9zZWQgZnJvbSBcIi4vYmFzaXNDbG9zZWRcIjtcbmltcG9ydCBub2dhbW1hLCB7Z2FtbWF9IGZyb20gXCIuL2NvbG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gIHZhciBjb2xvciA9IGdhbW1hKHkpO1xuXG4gIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBjb2xvclJnYihzdGFydCkpLnIsIChlbmQgPSBjb2xvclJnYihlbmQpKS5yKSxcbiAgICAgICAgZyA9IGNvbG9yKHN0YXJ0LmcsIGVuZC5nKSxcbiAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5yID0gcih0KTtcbiAgICAgIHN0YXJ0LmcgPSBnKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIHJnYi5nYW1tYSA9IHJnYkdhbW1hO1xuXG4gIHJldHVybiByZ2I7XG59KSgxKTtcblxuZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgdmFyIG4gPSBjb2xvcnMubGVuZ3RoLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBpLCBjb2xvcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb2xvciA9IGNvbG9yUmdiKGNvbG9yc1tpXSk7XG4gICAgICByW2ldID0gY29sb3IuciB8fCAwO1xuICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgIGJbaV0gPSBjb2xvci5iIHx8IDA7XG4gICAgfVxuICAgIHIgPSBzcGxpbmUocik7XG4gICAgZyA9IHNwbGluZShnKTtcbiAgICBiID0gc3BsaW5lKGIpO1xuICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBjb2xvci5yID0gcih0KTtcbiAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgY29sb3IuYiA9IGIodCk7XG4gICAgICByZXR1cm4gY29sb3IgKyBcIlwiO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgcmdiQmFzaXMgPSByZ2JTcGxpbmUoYmFzaXMpO1xuZXhwb3J0IHZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgYiAqIHQ7XG4gIH07XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG52YXIgcmVBID0gL1stK10/KD86XFxkK1xcLj9cXGQqfFxcLj9cXGQrKSg/OltlRV1bLStdP1xcZCspPy9nLFxuICAgIHJlQiA9IG5ldyBSZWdFeHAocmVBLnNvdXJjZSwgXCJnXCIpO1xuXG5mdW5jdGlvbiB6ZXJvKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbmUoYikge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBiKHQpICsgXCJcIjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYmkgPSByZUEubGFzdEluZGV4ID0gcmVCLmxhc3RJbmRleCA9IDAsIC8vIHNjYW4gaW5kZXggZm9yIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGFtLCAvLyBjdXJyZW50IG1hdGNoIGluIGFcbiAgICAgIGJtLCAvLyBjdXJyZW50IG1hdGNoIGluIGJcbiAgICAgIGJzLCAvLyBzdHJpbmcgcHJlY2VkaW5nIGN1cnJlbnQgbnVtYmVyIGluIGIsIGlmIGFueVxuICAgICAgaSA9IC0xLCAvLyBpbmRleCBpbiBzXG4gICAgICBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuXG4gIC8vIENvZXJjZSBpbnB1dHMgdG8gc3RyaW5ncy5cbiAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XG5cbiAgLy8gSW50ZXJwb2xhdGUgcGFpcnMgb2YgbnVtYmVycyBpbiBhICYgYi5cbiAgd2hpbGUgKChhbSA9IHJlQS5leGVjKGEpKVxuICAgICAgJiYgKGJtID0gcmVCLmV4ZWMoYikpKSB7XG4gICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7IC8vIGEgc3RyaW5nIHByZWNlZGVzIHRoZSBuZXh0IG51bWJlciBpbiBiXG4gICAgICBicyA9IGIuc2xpY2UoYmksIGJzKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG4gICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7IC8vIG51bWJlcnMgaW4gYSAmIGIgbWF0Y2hcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBibTtcbiAgICB9IGVsc2UgeyAvLyBpbnRlcnBvbGF0ZSBub24tbWF0Y2hpbmcgbnVtYmVyc1xuICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgIHEucHVzaCh7aTogaSwgeDogbnVtYmVyKGFtLCBibSl9KTtcbiAgICB9XG4gICAgYmkgPSByZUIubGFzdEluZGV4O1xuICB9XG5cbiAgLy8gQWRkIHJlbWFpbnMgb2YgYi5cbiAgaWYgKGJpIDwgYi5sZW5ndGgpIHtcbiAgICBicyA9IGIuc2xpY2UoYmkpO1xuICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gIH1cblxuICAvLyBTcGVjaWFsIG9wdGltaXphdGlvbiBmb3Igb25seSBhIHNpbmdsZSBtYXRjaC5cbiAgLy8gT3RoZXJ3aXNlLCBpbnRlcnBvbGF0ZSBlYWNoIG9mIHRoZSBudW1iZXJzIGFuZCByZWpvaW4gdGhlIHN0cmluZy5cbiAgcmV0dXJuIHMubGVuZ3RoIDwgMiA/IChxWzBdXG4gICAgICA/IG9uZShxWzBdLngpXG4gICAgICA6IHplcm8oYikpXG4gICAgICA6IChiID0gcS5sZW5ndGgsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgICAgIH0pO1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgcmdiIGZyb20gXCIuL3JnYlwiO1xuaW1wb3J0IGFycmF5IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgZGF0ZSBmcm9tIFwiLi9kYXRlXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuaW1wb3J0IG9iamVjdCBmcm9tIFwiLi9vYmplY3RcIjtcbmltcG9ydCBzdHJpbmcgZnJvbSBcIi4vc3RyaW5nXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgdCA9IHR5cGVvZiBiLCBjO1xuICByZXR1cm4gYiA9PSBudWxsIHx8IHQgPT09IFwiYm9vbGVhblwiID8gY29uc3RhbnQoYilcbiAgICAgIDogKHQgPT09IFwibnVtYmVyXCIgPyBudW1iZXJcbiAgICAgIDogdCA9PT0gXCJzdHJpbmdcIiA/ICgoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgcmdiKSA6IHN0cmluZylcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gcmdiXG4gICAgICA6IGIgaW5zdGFuY2VvZiBEYXRlID8gZGF0ZVxuICAgICAgOiBBcnJheS5pc0FycmF5KGIpID8gYXJyYXlcbiAgICAgIDogdHlwZW9mIGIudmFsdWVPZiAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiLnRvU3RyaW5nICE9PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4oYikgPyBvYmplY3RcbiAgICAgIDogbnVtYmVyKShhLCBiKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZTtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGQuc2V0VGltZShhICsgYiAqIHQpLCBkO1xuICB9O1xufVxuIiwiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIG5iID0gYiA/IGIubGVuZ3RoIDogMCxcbiAgICAgIG5hID0gYSA/IE1hdGgubWluKG5iLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgeCA9IG5ldyBBcnJheShuYSksXG4gICAgICBjID0gbmV3IEFycmF5KG5iKSxcbiAgICAgIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIHhbaV0gPSB2YWx1ZShhW2ldLCBiW2ldKTtcbiAgZm9yICg7IGkgPCBuYjsgKytpKSBjW2ldID0gYltpXTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSBjW2ldID0geFtpXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0ge30sXG4gICAgICBjID0ge30sXG4gICAgICBrO1xuXG4gIGlmIChhID09PSBudWxsIHx8IHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSBhID0ge307XG4gIGlmIChiID09PSBudWxsIHx8IHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSBiID0ge307XG5cbiAgZm9yIChrIGluIGIpIHtcbiAgICBpZiAoayBpbiBhKSB7XG4gICAgICBpW2tdID0gdmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChhICsgYiAqIHQpO1xuICB9O1xufVxuIiwidmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0ge1xuICB0cmFuc2xhdGVYOiAwLFxuICB0cmFuc2xhdGVZOiAwLFxuICByb3RhdGU6IDAsXG4gIHNrZXdYOiAwLFxuICBzY2FsZVg6IDEsXG4gIHNjYWxlWTogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgc2NhbGVYLCBzY2FsZVksIHNrZXdYO1xuICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcbiAgaWYgKHNjYWxlWSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKSkgYyAvPSBzY2FsZVksIGQgLz0gc2NhbGVZLCBza2V3WCAvPSBzY2FsZVk7XG4gIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlWDogZSxcbiAgICB0cmFuc2xhdGVZOiBmLFxuICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXG4gICAgc2tld1g6IE1hdGguYXRhbihza2V3WCkgKiBkZWdyZWVzLFxuICAgIHNjYWxlWDogc2NhbGVYLFxuICAgIHNjYWxlWTogc2NhbGVZXG4gIH07XG59XG4iLCJpbXBvcnQgZGVjb21wb3NlLCB7aWRlbnRpdHl9IGZyb20gXCIuL2RlY29tcG9zZVwiO1xuXG52YXIgY3NzTm9kZSxcbiAgICBjc3NSb290LFxuICAgIGNzc1ZpZXcsXG4gICAgc3ZnTm9kZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gXCJub25lXCIpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFjc3NOb2RlKSBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKSwgY3NzUm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgY3NzVmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBjc3NOb2RlLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlO1xuICB2YWx1ZSA9IGNzc1ZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShjc3NSb290LmFwcGVuZENoaWxkKGNzc05vZGUpLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKFwidHJhbnNmb3JtXCIpO1xuICBjc3NSb290LnJlbW92ZUNoaWxkKGNzc05vZGUpO1xuICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDcsIC0xKS5zcGxpdChcIixcIik7XG4gIHJldHVybiBkZWNvbXBvc2UoK3ZhbHVlWzBdLCArdmFsdWVbMV0sICt2YWx1ZVsyXSwgK3ZhbHVlWzNdLCArdmFsdWVbNF0sICt2YWx1ZVs1XSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN2Zyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIXN2Z05vZGUpIHN2Z05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XG4gIHN2Z05vZGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHZhbHVlKTtcbiAgaWYgKCEodmFsdWUgPSBzdmdOb2RlLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi4vbnVtYmVyXCI7XG5pbXBvcnQge3BhcnNlQ3NzLCBwYXJzZVN2Z30gZnJvbSBcIi4vcGFyc2VcIjtcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2UsIHB4Q29tbWEsIHB4UGFyZW4sIGRlZ1BhcmVuKSB7XG5cbiAgZnVuY3Rpb24gcG9wKHMpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIgXCIgOiBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKFwidHJhbnNsYXRlKFwiLCBudWxsLCBweENvbW1hLCBudWxsLCBweFBhcmVuKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgfHwgeWIpIHtcbiAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHhiICsgcHhDb21tYSArIHliICsgcHhQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRlKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgaWYgKGEgLSBiID4gMTgwKSBiICs9IDM2MDsgZWxzZSBpZiAoYiAtIGEgPiAxODApIGEgKz0gMzYwOyAvLyBzaG9ydGVzdCBwYXRoXG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNrZXdYKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgIT09IDEgfHwgeWIgIT09IDEpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcbiAgICBhID0gcGFyc2UoYSksIGIgPSBwYXJzZShiKTtcbiAgICB0cmFuc2xhdGUoYS50cmFuc2xhdGVYLCBhLnRyYW5zbGF0ZVksIGIudHJhbnNsYXRlWCwgYi50cmFuc2xhdGVZLCBzLCBxKTtcbiAgICByb3RhdGUoYS5yb3RhdGUsIGIucm90YXRlLCBzLCBxKTtcbiAgICBza2V3WChhLnNrZXdYLCBiLnNrZXdYLCBzLCBxKTtcbiAgICBzY2FsZShhLnNjYWxlWCwgYS5zY2FsZVksIGIuc2NhbGVYLCBiLnNjYWxlWSwgcywgcSk7XG4gICAgYSA9IGIgPSBudWxsOyAvLyBnY1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gcS5sZW5ndGgsIG87XG4gICAgICB3aGlsZSAoKytpIDwgbikgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtQ3NzID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VDc3MsIFwicHgsIFwiLCBcInB4KVwiLCBcImRlZylcIik7XG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcbiIsInZhciByaG8gPSBNYXRoLlNRUlQyLFxuICAgIHJobzIgPSAyLFxuICAgIHJobzQgPSA0LFxuICAgIGVwc2lsb24yID0gMWUtMTI7XG5cbmZ1bmN0aW9uIGNvc2goeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpICsgMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gc2luaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgLSAxIC8geCkgLyAyO1xufVxuXG5mdW5jdGlvbiB0YW5oKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKDIgKiB4KSkgLSAxKSAvICh4ICsgMSk7XG59XG5cbi8vIHAwID0gW3V4MCwgdXkwLCB3MF1cbi8vIHAxID0gW3V4MSwgdXkxLCB3MV1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHAwLCBwMSkge1xuICB2YXIgdXgwID0gcDBbMF0sIHV5MCA9IHAwWzFdLCB3MCA9IHAwWzJdLFxuICAgICAgdXgxID0gcDFbMF0sIHV5MSA9IHAxWzFdLCB3MSA9IHAxWzJdLFxuICAgICAgZHggPSB1eDEgLSB1eDAsXG4gICAgICBkeSA9IHV5MSAtIHV5MCxcbiAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICBpLFxuICAgICAgUztcblxuICAvLyBTcGVjaWFsIGNhc2UgZm9yIHUwIOKJhSB1MS5cbiAgaWYgKGQyIDwgZXBzaWxvbjIpIHtcbiAgICBTID0gTWF0aC5sb2codzEgLyB3MCkgLyByaG87XG4gICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHV4MCArIHQgKiBkeCxcbiAgICAgICAgdXkwICsgdCAqIGR5LFxuICAgICAgICB3MCAqIE1hdGguZXhwKHJobyAqIHQgKiBTKVxuICAgICAgXTtcbiAgICB9XG4gIH1cblxuICAvLyBHZW5lcmFsIGNhc2UuXG4gIGVsc2Uge1xuICAgIHZhciBkMSA9IE1hdGguc3FydChkMiksXG4gICAgICAgIGIwID0gKHcxICogdzEgLSB3MCAqIHcwICsgcmhvNCAqIGQyKSAvICgyICogdzAgKiByaG8yICogZDEpLFxuICAgICAgICBiMSA9ICh3MSAqIHcxIC0gdzAgKiB3MCAtIHJobzQgKiBkMikgLyAoMiAqIHcxICogcmhvMiAqIGQxKSxcbiAgICAgICAgcjAgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjAgKiBiMCArIDEpIC0gYjApLFxuICAgICAgICByMSA9IE1hdGgubG9nKE1hdGguc3FydChiMSAqIGIxICsgMSkgLSBiMSk7XG4gICAgUyA9IChyMSAtIHIwKSAvIHJobztcbiAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIHMgPSB0ICogUyxcbiAgICAgICAgICBjb3NocjAgPSBjb3NoKHIwKSxcbiAgICAgICAgICB1ID0gdzAgLyAocmhvMiAqIGQxKSAqIChjb3NocjAgKiB0YW5oKHJobyAqIHMgKyByMCkgLSBzaW5oKHIwKSk7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB1eDAgKyB1ICogZHgsXG4gICAgICAgIHV5MCArIHUgKiBkeSxcbiAgICAgICAgdzAgKiBjb3NocjAgLyBjb3NoKHJobyAqIHMgKyByMClcbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgaS5kdXJhdGlvbiA9IFMgKiAxMDAwO1xuXG4gIHJldHVybiBpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gK3g7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlIGFzIGludGVycG9sYXRlVmFsdWUsIGludGVycG9sYXRlUm91bmR9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHttYXAsIHNsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG52YXIgdW5pdCA9IFswLCAxXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlaW50ZXJwb2xhdGVMaW5lYXIoYSwgYikge1xuICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICh4IC0gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50KGIpO1xufVxuXG5mdW5jdGlvbiBkZWludGVycG9sYXRlQ2xhbXAoZGVpbnRlcnBvbGF0ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBkID0gZGVpbnRlcnBvbGF0ZShhID0gK2EsIGIgPSArYik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggPD0gYSA/IDAgOiB4ID49IGIgPyAxIDogZCh4KTsgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVpbnRlcnBvbGF0ZUNsYW1wKHJlaW50ZXJwb2xhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgciA9IHJlaW50ZXJwb2xhdGUoYSA9ICthLCBiID0gK2IpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7IHJldHVybiB0IDw9IDAgPyBhIDogdCA+PSAxID8gYiA6IHIodCk7IH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbWFwKGRvbWFpbiwgcmFuZ2UsIGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgaWYgKGQxIDwgZDApIGQwID0gZGVpbnRlcnBvbGF0ZShkMSwgZDApLCByMCA9IHJlaW50ZXJwb2xhdGUocjEsIHIwKTtcbiAgZWxzZSBkMCA9IGRlaW50ZXJwb2xhdGUoZDAsIGQxKSwgcjAgPSByZWludGVycG9sYXRlKHIwLCByMSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG59XG5cbmZ1bmN0aW9uIHBvbHltYXAoZG9tYWluLCByYW5nZSwgZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSkge1xuICB2YXIgaiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxLFxuICAgICAgZCA9IG5ldyBBcnJheShqKSxcbiAgICAgIHIgPSBuZXcgQXJyYXkoaiksXG4gICAgICBpID0gLTE7XG5cbiAgLy8gUmV2ZXJzZSBkZXNjZW5kaW5nIGRvbWFpbnMuXG4gIGlmIChkb21haW5bal0gPCBkb21haW5bMF0pIHtcbiAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxuXG4gIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgZFtpXSA9IGRlaW50ZXJwb2xhdGUoZG9tYWluW2ldLCBkb21haW5baSArIDFdKTtcbiAgICByW2ldID0gcmVpbnRlcnBvbGF0ZShyYW5nZVtpXSwgcmFuZ2VbaSArIDFdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgdmFyIGkgPSBiaXNlY3QoZG9tYWluLCB4LCAxLCBqKSAtIDE7XG4gICAgcmV0dXJuIHJbaV0oZFtpXSh4KSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXRcbiAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgLnJhbmdlKHNvdXJjZS5yYW5nZSgpKVxuICAgICAgLmludGVycG9sYXRlKHNvdXJjZS5pbnRlcnBvbGF0ZSgpKVxuICAgICAgLmNsYW1wKHNvdXJjZS5jbGFtcCgpKTtcbn1cblxuLy8gZGVpbnRlcnBvbGF0ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuLy8gcmVpbnRlcnBvbGF0ZShhLCBiKSh0KSB0YWtlcyBhIHBhcmFtZXRlciB0IGluIFswLDFdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGludW91cyhkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSB7XG4gIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgcmFuZ2UgPSB1bml0LFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVZhbHVlLFxuICAgICAgY2xhbXAgPSBmYWxzZSxcbiAgICAgIHBpZWNld2lzZSxcbiAgICAgIG91dHB1dCxcbiAgICAgIGlucHV0O1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgcGllY2V3aXNlID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSA+IDIgPyBwb2x5bWFwIDogYmltYXA7XG4gICAgb3V0cHV0ID0gaW5wdXQgPSBudWxsO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCAob3V0cHV0ID0gcGllY2V3aXNlKGRvbWFpbiwgcmFuZ2UsIGNsYW1wID8gZGVpbnRlcnBvbGF0ZUNsYW1wKGRlaW50ZXJwb2xhdGUpIDogZGVpbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGUpKSkoK3gpO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiAoaW5wdXQgfHwgKGlucHV0ID0gcGllY2V3aXNlKHJhbmdlLCBkb21haW4sIGRlaW50ZXJwb2xhdGVMaW5lYXIsIGNsYW1wID8gcmVpbnRlcnBvbGF0ZUNsYW1wKHJlaW50ZXJwb2xhdGUpIDogcmVpbnRlcnBvbGF0ZSkpKSgreSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IG1hcC5jYWxsKF8sIG51bWJlciksIHJlc2NhbGUoKSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHJhbmdlID0gc2xpY2UuY2FsbChfKSwgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVJvdW5kLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHJlc2NhbGUoKSkgOiBjbGFtcDtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0ZSA9IF8sIHJlc2NhbGUoKSkgOiBpbnRlcnBvbGF0ZTtcbiAgfTtcblxuICByZXR1cm4gcmVzY2FsZSgpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCIvLyBDb21wdXRlcyB0aGUgZGVjaW1hbCBjb2VmZmljaWVudCBhbmQgZXhwb25lbnQgb2YgdGhlIHNwZWNpZmllZCBudW1iZXIgeCB3aXRoXG4vLyBzaWduaWZpY2FudCBkaWdpdHMgcCwgd2hlcmUgeCBpcyBwb3NpdGl2ZSBhbmQgcCBpcyBpbiBbMSwgMjFdIG9yIHVuZGVmaW5lZC5cbi8vIEZvciBleGFtcGxlLCBmb3JtYXREZWNpbWFsKDEuMjMpIHJldHVybnMgW1wiMTIzXCIsIDBdLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgdmFyIGksIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gIHJldHVybiBbXG4gICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAreC5zbGljZShpICsgMSlcbiAgXTtcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geCA9IGZvcm1hdERlY2ltYWwoTWF0aC5hYnMoeCkpLCB4ID8geFsxXSA6IE5hTjtcbn1cbiIsIi8vIFtbZmlsbF1hbGlnbl1bc2lnbl1bc3ltYm9sXVswXVt3aWR0aF1bLF1bLnByZWNpc2lvbl1bfl1bdHlwZV1cbnZhciByZSA9IC9eKD86KC4pPyhbPD49Xl0pKT8oWytcXC1cXCggXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC5cXGQrKT8ofik/KFthLXolXSk/JC9pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIHJldHVybiBuZXcgRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG59XG5cbmZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUgPSBGb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlOyAvLyBpbnN0YW5jZW9mXG5cbmZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgaWYgKCEobWF0Y2ggPSByZS5leGVjKHNwZWNpZmllcikpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZvcm1hdDogXCIgKyBzcGVjaWZpZXIpO1xuICB2YXIgbWF0Y2g7XG4gIHRoaXMuZmlsbCA9IG1hdGNoWzFdIHx8IFwiIFwiO1xuICB0aGlzLmFsaWduID0gbWF0Y2hbMl0gfHwgXCI+XCI7XG4gIHRoaXMuc2lnbiA9IG1hdGNoWzNdIHx8IFwiLVwiO1xuICB0aGlzLnN5bWJvbCA9IG1hdGNoWzRdIHx8IFwiXCI7XG4gIHRoaXMuemVybyA9ICEhbWF0Y2hbNV07XG4gIHRoaXMud2lkdGggPSBtYXRjaFs2XSAmJiArbWF0Y2hbNl07XG4gIHRoaXMuY29tbWEgPSAhIW1hdGNoWzddO1xuICB0aGlzLnByZWNpc2lvbiA9IG1hdGNoWzhdICYmICttYXRjaFs4XS5zbGljZSgxKTtcbiAgdGhpcy50cmltID0gISFtYXRjaFs5XTtcbiAgdGhpcy50eXBlID0gbWF0Y2hbMTBdIHx8IFwiXCI7XG59XG5cbkZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmlsbFxuICAgICAgKyB0aGlzLmFsaWduXG4gICAgICArIHRoaXMuc2lnblxuICAgICAgKyB0aGlzLnN5bWJvbFxuICAgICAgKyAodGhpcy56ZXJvID8gXCIwXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy53aWR0aCA9PSBudWxsID8gXCJcIiA6IE1hdGgubWF4KDEsIHRoaXMud2lkdGggfCAwKSlcbiAgICAgICsgKHRoaXMuY29tbWEgPyBcIixcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLnByZWNpc2lvbiA9PSBudWxsID8gXCJcIiA6IFwiLlwiICsgTWF0aC5tYXgoMCwgdGhpcy5wcmVjaXNpb24gfCAwKSlcbiAgICAgICsgKHRoaXMudHJpbSA/IFwiflwiIDogXCJcIilcbiAgICAgICsgdGhpcy50eXBlO1xufTtcbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWxcIjtcblxuZXhwb3J0IHZhciBwcmVmaXhFeHBvbmVudDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWwoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdLFxuICAgICAgaSA9IGV4cG9uZW50IC0gKHByZWZpeEV4cG9uZW50ID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQgLyAzKSkpICogMykgKyAxLFxuICAgICAgbiA9IGNvZWZmaWNpZW50Lmxlbmd0aDtcbiAgcmV0dXJuIGkgPT09IG4gPyBjb2VmZmljaWVudFxuICAgICAgOiBpID4gbiA/IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGkgLSBuICsgMSkuam9pbihcIjBcIilcbiAgICAgIDogaSA+IDAgPyBjb2VmZmljaWVudC5zbGljZSgwLCBpKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoaSlcbiAgICAgIDogXCIwLlwiICsgbmV3IEFycmF5KDEgLSBpKS5qb2luKFwiMFwiKSArIGZvcm1hdERlY2ltYWwoeCwgTWF0aC5tYXgoMCwgcCArIGkgLSAxKSlbMF07IC8vIGxlc3MgdGhhbiAxeSFcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWwoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdO1xuICByZXR1cm4gZXhwb25lbnQgPCAwID8gXCIwLlwiICsgbmV3IEFycmF5KC1leHBvbmVudCkuam9pbihcIjBcIikgKyBjb2VmZmljaWVudFxuICAgICAgOiBjb2VmZmljaWVudC5sZW5ndGggPiBleHBvbmVudCArIDEgPyBjb2VmZmljaWVudC5zbGljZSgwLCBleHBvbmVudCArIDEpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShleHBvbmVudCArIDEpXG4gICAgICA6IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGV4cG9uZW50IC0gY29lZmZpY2llbnQubGVuZ3RoICsgMikuam9pbihcIjBcIik7XG59XG4iLCJpbXBvcnQgZm9ybWF0UHJlZml4QXV0byBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvXCI7XG5pbXBvcnQgZm9ybWF0Um91bmRlZCBmcm9tIFwiLi9mb3JtYXRSb3VuZGVkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgXCIlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuICh4ICogMTAwKS50b0ZpeGVkKHApOyB9LFxuICBcImJcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygyKTsgfSxcbiAgXCJjXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggKyBcIlwiOyB9LFxuICBcImRcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxMCk7IH0sXG4gIFwiZVwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvRXhwb25lbnRpYWwocCk7IH0sXG4gIFwiZlwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvRml4ZWQocCk7IH0sXG4gIFwiZ1wiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvUHJlY2lzaW9uKHApOyB9LFxuICBcIm9cIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZyg4KTsgfSxcbiAgXCJwXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIGZvcm1hdFJvdW5kZWQoeCAqIDEwMCwgcCk7IH0sXG4gIFwiclwiOiBmb3JtYXRSb3VuZGVkLFxuICBcInNcIjogZm9ybWF0UHJlZml4QXV0byxcbiAgXCJYXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7IH0sXG4gIFwieFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KTsgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnRcIjtcbmltcG9ydCBmb3JtYXRHcm91cCBmcm9tIFwiLi9mb3JtYXRHcm91cFwiO1xuaW1wb3J0IGZvcm1hdE51bWVyYWxzIGZyb20gXCIuL2Zvcm1hdE51bWVyYWxzXCI7XG5pbXBvcnQgZm9ybWF0U3BlY2lmaWVyIGZyb20gXCIuL2Zvcm1hdFNwZWNpZmllclwiO1xuaW1wb3J0IGZvcm1hdFRyaW0gZnJvbSBcIi4vZm9ybWF0VHJpbVwiO1xuaW1wb3J0IGZvcm1hdFR5cGVzIGZyb20gXCIuL2Zvcm1hdFR5cGVzXCI7XG5pbXBvcnQge3ByZWZpeEV4cG9uZW50fSBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcblxudmFyIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiwrVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obG9jYWxlKSB7XG4gIHZhciBncm91cCA9IGxvY2FsZS5ncm91cGluZyAmJiBsb2NhbGUudGhvdXNhbmRzID8gZm9ybWF0R3JvdXAobG9jYWxlLmdyb3VwaW5nLCBsb2NhbGUudGhvdXNhbmRzKSA6IGlkZW50aXR5LFxuICAgICAgY3VycmVuY3kgPSBsb2NhbGUuY3VycmVuY3ksXG4gICAgICBkZWNpbWFsID0gbG9jYWxlLmRlY2ltYWwsXG4gICAgICBudW1lcmFscyA9IGxvY2FsZS5udW1lcmFscyA/IGZvcm1hdE51bWVyYWxzKGxvY2FsZS5udW1lcmFscykgOiBpZGVudGl0eSxcbiAgICAgIHBlcmNlbnQgPSBsb2NhbGUucGVyY2VudCB8fCBcIiVcIjtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICB2YXIgZmlsbCA9IHNwZWNpZmllci5maWxsLFxuICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICBzeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sLFxuICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICBjb21tYSA9IHNwZWNpZmllci5jb21tYSxcbiAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgdHJpbSA9IHNwZWNpZmllci50cmltLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBUaGUgXCJuXCIgdHlwZSBpcyBhbiBhbGlhcyBmb3IgXCIsZ1wiLlxuICAgIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBUaGUgXCJcIiB0eXBlLCBhbmQgYW55IGludmFsaWQgdHlwZSwgaXMgYW4gYWxpYXMgZm9yIFwiLjEyfmdcIi5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHByZWNpc2lvbiA9PSBudWxsICYmIChwcmVjaXNpb24gPSAxMiksIHRyaW0gPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgIHZhciBwcmVmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lbMF0gOiBzeW1ib2wgPT09IFwiI1wiICYmIC9bYm94WF0vLnRlc3QodHlwZSkgPyBcIjBcIiArIHR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCIsXG4gICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVsxXSA6IC9bJXBdLy50ZXN0KHR5cGUpID8gcGVyY2VudCA6IFwiXCI7XG5cbiAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgIC8vIENhbiB0aGlzIHR5cGUgZ2VuZXJhdGUgZXhwb25lbnRpYWwgbm90YXRpb24/XG4gICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgbWF5YmVTdWZmaXggPSAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBwcmVjaXNpb24gaWYgbm90IHNwZWNpZmllZCxcbiAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAvLyBGb3IgZml4ZWQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFswLCAyMF0uXG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyA2XG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFyIHZhbHVlTmVnYXRpdmUgPSB2YWx1ZSA8IDA7XG4gICAgICAgIHZhbHVlID0gZm9ybWF0VHlwZShNYXRoLmFicyh2YWx1ZSksIHByZWNpc2lvbik7XG5cbiAgICAgICAgLy8gVHJpbSBpbnNpZ25pZmljYW50IHplcm9zLlxuICAgICAgICBpZiAodHJpbSkgdmFsdWUgPSBmb3JtYXRUcmltKHZhbHVlKTtcblxuICAgICAgICAvLyBJZiBhIG5lZ2F0aXZlIHZhbHVlIHJvdW5kcyB0byB6ZXJvIGR1cmluZyBmb3JtYXR0aW5nLCB0cmVhdCBhcyBwb3NpdGl2ZS5cbiAgICAgICAgaWYgKHZhbHVlTmVnYXRpdmUgJiYgK3ZhbHVlID09PSAwKSB2YWx1ZU5lZ2F0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgICAgIHZhbHVlUHJlZml4ID0gKHZhbHVlTmVnYXRpdmUgPyAoc2lnbiA9PT0gXCIoXCIgPyBzaWduIDogXCItXCIpIDogc2lnbiA9PT0gXCItXCIgfHwgc2lnbiA9PT0gXCIoXCIgPyBcIlwiIDogc2lnbikgKyB2YWx1ZVByZWZpeDtcbiAgICAgICAgdmFsdWVTdWZmaXggPSAodHlwZSA9PT0gXCJzXCIgPyBwcmVmaXhlc1s4ICsgcHJlZml4RXhwb25lbnQgLyAzXSA6IFwiXCIpICsgdmFsdWVTdWZmaXggKyAodmFsdWVOZWdhdGl2ZSAmJiBzaWduID09PSBcIihcIiA/IFwiKVwiIDogXCJcIik7XG5cbiAgICAgICAgLy8gQnJlYWsgdGhlIGZvcm1hdHRlZCB2YWx1ZSBpbnRvIHRoZSBpbnRlZ2VyIOKAnHZhbHVl4oCdIHBhcnQgdGhhdCBjYW4gYmVcbiAgICAgICAgLy8gZ3JvdXBlZCwgYW5kIGZyYWN0aW9uYWwgb3IgZXhwb25lbnRpYWwg4oCcc3VmZml44oCdIHBhcnQgdGhhdCBpcyBub3QuXG4gICAgICAgIGlmIChtYXliZVN1ZmZpeCkge1xuICAgICAgICAgIGkgPSAtMSwgbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgaWYgKGMgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpLCA0OCA+IGMgfHwgYyA+IDU3KSB7XG4gICAgICAgICAgICAgIHZhbHVlU3VmZml4ID0gKGMgPT09IDQ2ID8gZGVjaW1hbCArIHZhbHVlLnNsaWNlKGkgKyAxKSA6IHZhbHVlLnNsaWNlKGkpKSArIHZhbHVlU3VmZml4O1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIG5vdCBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBiZWZvcmUgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiAhemVybykgdmFsdWUgPSBncm91cCh2YWx1ZSwgSW5maW5pdHkpO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBwYWRkaW5nLlxuICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlUHJlZml4Lmxlbmd0aCArIHZhbHVlLmxlbmd0aCArIHZhbHVlU3VmZml4Lmxlbmd0aCxcbiAgICAgICAgICBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGFmdGVyIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgemVybykgdmFsdWUgPSBncm91cChwYWRkaW5nICsgdmFsdWUsIHBhZGRpbmcubGVuZ3RoID8gd2lkdGggLSB2YWx1ZVN1ZmZpeC5sZW5ndGggOiBJbmZpbml0eSksIHBhZGRpbmcgPSBcIlwiO1xuXG4gICAgICAvLyBSZWNvbnN0cnVjdCB0aGUgZmluYWwgb3V0cHV0IGJhc2VkIG9uIHRoZSBkZXNpcmVkIGFsaWdubWVudC5cbiAgICAgIHN3aXRjaCAoYWxpZ24pIHtcbiAgICAgICAgY2FzZSBcIjxcIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nOyBicmVhaztcbiAgICAgICAgY2FzZSBcIj1cIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHBhZGRpbmcgKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgICAgY2FzZSBcIl5cIjogdmFsdWUgPSBwYWRkaW5nLnNsaWNlKDAsIGxlbmd0aCA9IHBhZGRpbmcubGVuZ3RoID4+IDEpICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZy5zbGljZShsZW5ndGgpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogdmFsdWUgPSBwYWRkaW5nICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bWVyYWxzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmb3JtYXQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzcGVjaWZpZXIgKyBcIlwiO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9ybWF0O1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpIHtcbiAgICB2YXIgZiA9IG5ld0Zvcm1hdCgoc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciksIHNwZWNpZmllci50eXBlID0gXCJmXCIsIHNwZWNpZmllcikpLFxuICAgICAgICBlID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMsXG4gICAgICAgIGsgPSBNYXRoLnBvdygxMCwgLWUpLFxuICAgICAgICBwcmVmaXggPSBwcmVmaXhlc1s4ICsgZSAvIDNdO1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGYoayAqIHZhbHVlKSArIHByZWZpeDtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IG5ld0Zvcm1hdCxcbiAgICBmb3JtYXRQcmVmaXg6IGZvcm1hdFByZWZpeFxuICB9O1xufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGVcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgZm9ybWF0O1xuZXhwb3J0IHZhciBmb3JtYXRQcmVmaXg7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICBkZWNpbWFsOiBcIi5cIixcbiAgdGhvdXNhbmRzOiBcIixcIixcbiAgZ3JvdXBpbmc6IFszXSxcbiAgY3VycmVuY3k6IFtcIiRcIiwgXCJcIl1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICBmb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICBmb3JtYXRQcmVmaXggPSBsb2NhbGUuZm9ybWF0UHJlZml4O1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZ3JvdXBpbmcsIHRob3VzYW5kcykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIHdpZHRoKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgIHQgPSBbXSxcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIGcgPSBncm91cGluZ1swXSxcbiAgICAgICAgbGVuZ3RoID0gMDtcblxuICAgIHdoaWxlIChpID4gMCAmJiBnID4gMCkge1xuICAgICAgaWYgKGxlbmd0aCArIGcgKyAxID4gd2lkdGgpIGcgPSBNYXRoLm1heCgxLCB3aWR0aCAtIGxlbmd0aCk7XG4gICAgICB0LnB1c2godmFsdWUuc3Vic3RyaW5nKGkgLT0gZywgaSArIGcpKTtcbiAgICAgIGlmICgobGVuZ3RoICs9IGcgKyAxKSA+IHdpZHRoKSBicmVhaztcbiAgICAgIGcgPSBncm91cGluZ1tqID0gKGogKyAxKSAlIGdyb3VwaW5nLmxlbmd0aF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHQucmV2ZXJzZSgpLmpvaW4odGhvdXNhbmRzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG51bWVyYWxzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bMC05XS9nLCBmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gbnVtZXJhbHNbK2ldO1xuICAgIH0pO1xuICB9O1xufVxuIiwiLy8gVHJpbXMgaW5zaWduaWZpY2FudCB6ZXJvcywgZS5nLiwgcmVwbGFjZXMgMS4yMDAwayB3aXRoIDEuMmsuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzKSB7XG4gIG91dDogZm9yICh2YXIgbiA9IHMubGVuZ3RoLCBpID0gMSwgaTAgPSAtMSwgaTE7IGkgPCBuOyArK2kpIHtcbiAgICBzd2l0Y2ggKHNbaV0pIHtcbiAgICAgIGNhc2UgXCIuXCI6IGkwID0gaTEgPSBpOyBicmVhaztcbiAgICAgIGNhc2UgXCIwXCI6IGlmIChpMCA9PT0gMCkgaTAgPSBpOyBpMSA9IGk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogaWYgKGkwID4gMCkgeyBpZiAoIStzW2ldKSBicmVhayBvdXQ7IGkwID0gMDsgfSBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cbiIsImltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXQsIGZvcm1hdFByZWZpeCwgZm9ybWF0U3BlY2lmaWVyLCBwcmVjaXNpb25GaXhlZCwgcHJlY2lzaW9uUHJlZml4LCBwcmVjaXNpb25Sb3VuZH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkb21haW4sIGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgdmFyIHN0YXJ0ID0gZG9tYWluWzBdLFxuICAgICAgc3RvcCA9IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV0sXG4gICAgICBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50KSxcbiAgICAgIHByZWNpc2lvbjtcbiAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgc3dpdGNoIChzcGVjaWZpZXIudHlwZSkge1xuICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgICByZXR1cm4gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwiXCI6XG4gICAgY2FzZSBcImVcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcInJcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUm91bmQoc3RlcCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSkpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCJlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmXCI6XG4gICAgY2FzZSBcIiVcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQoc3BlY2lmaWVyKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCB2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIG1heCkge1xuICBzdGVwID0gTWF0aC5hYnMoc3RlcCksIG1heCA9IE1hdGguYWJzKG1heCkgLSBzdGVwO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwb25lbnQobWF4KSAtIGV4cG9uZW50KHN0ZXApKSArIDE7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJpbXBvcnQge3RpY2tzLCB0aWNrSW5jcmVtZW50fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIgYXMgcmVpbnRlcnBvbGF0ZX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge2RlZmF1bHQgYXMgY29udGludW91cywgY29weSwgZGVpbnRlcnBvbGF0ZUxpbmVhciBhcyBkZWludGVycG9sYXRlfSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQgdGlja0Zvcm1hdCBmcm9tIFwiLi90aWNrRm9ybWF0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXJpc2goc2NhbGUpIHtcbiAgdmFyIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCk7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkb21haW4oKSwgY291bnQsIHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG5cbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICBpMCA9IDAsXG4gICAgICAgIGkxID0gZC5sZW5ndGggLSAxLFxuICAgICAgICBzdGFydCA9IGRbaTBdLFxuICAgICAgICBzdG9wID0gZFtpMV0sXG4gICAgICAgIHN0ZXA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG5cbiAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBkW2kxXSA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIGRbaTBdID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBkb21haW4oZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGluZWFyKCkge1xuICB2YXIgc2NhbGUgPSBjb250aW51b3VzKGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwidmFyIHQwID0gbmV3IERhdGUsXG4gICAgdDEgPSBuZXcgRGF0ZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbmV3SW50ZXJ2YWwoZmxvb3JpLCBvZmZzZXRpLCBjb3VudCwgZmllbGQpIHtcblxuICBmdW5jdGlvbiBpbnRlcnZhbChkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoK2RhdGUpKSwgZGF0ZTtcbiAgfVxuXG4gIGludGVydmFsLmZsb29yID0gaW50ZXJ2YWw7XG5cbiAgaW50ZXJ2YWwuY2VpbCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZShkYXRlIC0gMSkpLCBvZmZzZXRpKGRhdGUsIDEpLCBmbG9vcmkoZGF0ZSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucm91bmQgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgdmFyIGQwID0gaW50ZXJ2YWwoZGF0ZSksXG4gICAgICAgIGQxID0gaW50ZXJ2YWwuY2VpbChkYXRlKTtcbiAgICByZXR1cm4gZGF0ZSAtIGQwIDwgZDEgLSBkYXRlID8gZDAgOiBkMTtcbiAgfTtcblxuICBpbnRlcnZhbC5vZmZzZXQgPSBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgcmV0dXJuIG9mZnNldGkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSwgc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICB2YXIgcmFuZ2UgPSBbXSwgcHJldmlvdXM7XG4gICAgc3RhcnQgPSBpbnRlcnZhbC5jZWlsKHN0YXJ0KTtcbiAgICBzdGVwID0gc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgaWYgKCEoc3RhcnQgPCBzdG9wKSB8fCAhKHN0ZXAgPiAwKSkgcmV0dXJuIHJhbmdlOyAvLyBhbHNvIGhhbmRsZXMgSW52YWxpZCBEYXRlXG4gICAgZG8gcmFuZ2UucHVzaChwcmV2aW91cyA9IG5ldyBEYXRlKCtzdGFydCkpLCBvZmZzZXRpKHN0YXJ0LCBzdGVwKSwgZmxvb3JpKHN0YXJ0KTtcbiAgICB3aGlsZSAocHJldmlvdXMgPCBzdGFydCAmJiBzdGFydCA8IHN0b3ApO1xuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICBpbnRlcnZhbC5maWx0ZXIgPSBmdW5jdGlvbih0ZXN0KSB7XG4gICAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHdoaWxlIChmbG9vcmkoZGF0ZSksICF0ZXN0KGRhdGUpKSBkYXRlLnNldFRpbWUoZGF0ZSAtIDEpO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHtcbiAgICAgICAgaWYgKHN0ZXAgPCAwKSB3aGlsZSAoKytzdGVwIDw9IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCAtMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH0gZWxzZSB3aGlsZSAoLS1zdGVwID49IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCArMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBpZiAoY291bnQpIHtcbiAgICBpbnRlcnZhbC5jb3VudCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHQwLnNldFRpbWUoK3N0YXJ0KSwgdDEuc2V0VGltZSgrZW5kKTtcbiAgICAgIGZsb29yaSh0MCksIGZsb29yaSh0MSk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihjb3VudCh0MCwgdDEpKTtcbiAgICB9O1xuXG4gICAgaW50ZXJ2YWwuZXZlcnkgPSBmdW5jdGlvbihzdGVwKSB7XG4gICAgICBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgIHJldHVybiAhaXNGaW5pdGUoc3RlcCkgfHwgIShzdGVwID4gMCkgPyBudWxsXG4gICAgICAgICAgOiAhKHN0ZXAgPiAxKSA/IGludGVydmFsXG4gICAgICAgICAgOiBpbnRlcnZhbC5maWx0ZXIoZmllbGRcbiAgICAgICAgICAgICAgPyBmdW5jdGlvbihkKSB7IHJldHVybiBmaWVsZChkKSAlIHN0ZXAgPT09IDA7IH1cbiAgICAgICAgICAgICAgOiBmdW5jdGlvbihkKSB7IHJldHVybiBpbnRlcnZhbC5jb3VudCgwLCBkKSAlIHN0ZXAgPT09IDA7IH0pO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gaW50ZXJ2YWw7XG59XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIG1pbGxpc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gIC8vIG5vb3Bcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQgLSBzdGFydDtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG5taWxsaXNlY29uZC5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgayA9IE1hdGguZmxvb3Ioayk7XG4gIGlmICghaXNGaW5pdGUoaykgfHwgIShrID4gMCkpIHJldHVybiBudWxsO1xuICBpZiAoIShrID4gMSkpIHJldHVybiBtaWxsaXNlY29uZDtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gaykgKiBrKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBrKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gaztcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaWxsaXNlY29uZDtcbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmQucmFuZ2U7XG4iLCJleHBvcnQgdmFyIGR1cmF0aW9uU2Vjb25kID0gMWUzO1xuZXhwb3J0IHZhciBkdXJhdGlvbk1pbnV0ZSA9IDZlNDtcbmV4cG9ydCB2YXIgZHVyYXRpb25Ib3VyID0gMzZlNTtcbmV4cG9ydCB2YXIgZHVyYXRpb25EYXkgPSA4NjRlNTtcbmV4cG9ydCB2YXIgZHVyYXRpb25XZWVrID0gNjA0OGU1O1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5LCBkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIGRheSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uRGF5O1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXREYXRlKCkgLSAxO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRheTtcbmV4cG9ydCB2YXIgZGF5cyA9IGRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvblNlY29uZH0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHNlY29uZCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGR1cmF0aW9uU2Vjb25kKSAqIGR1cmF0aW9uU2Vjb25kKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uU2Vjb25kKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvblNlY29uZDtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDU2Vjb25kcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHNlY29uZDtcbmV4cG9ydCB2YXIgc2Vjb25kcyA9IHNlY29uZC5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIG1pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGR1cmF0aW9uTWludXRlKSAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1pbnV0ZTtcbmV4cG9ydCB2YXIgbWludXRlcyA9IG1pbnV0ZS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXIsIGR1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgaG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgdmFyIG9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIGR1cmF0aW9uTWludXRlICUgZHVyYXRpb25Ib3VyO1xuICBpZiAob2Zmc2V0IDwgMCkgb2Zmc2V0ICs9IGR1cmF0aW9uSG91cjtcbiAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoKCtkYXRlIC0gb2Zmc2V0KSAvIGR1cmF0aW9uSG91cikgKiBkdXJhdGlvbkhvdXIgKyBvZmZzZXQpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgaG91cjtcbmV4cG9ydCB2YXIgaG91cnMgPSBob3VyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlLCBkdXJhdGlvbldlZWt9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbmZ1bmN0aW9uIHdlZWtkYXkoaSkge1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIChkYXRlLmdldERheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgc3VuZGF5ID0gd2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgbW9uZGF5ID0gd2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdHVlc2RheSA9IHdlZWtkYXkoMik7XG5leHBvcnQgdmFyIHdlZG5lc2RheSA9IHdlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHRodXJzZGF5ID0gd2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgZnJpZGF5ID0gd2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgc2F0dXJkYXkgPSB3ZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHN1bmRheXMgPSBzdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIG1vbmRheXMgPSBtb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHR1ZXNkYXlzID0gdHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5cyA9IHdlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdGh1cnNkYXlzID0gdGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIGZyaWRheXMgPSBmcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHNhdHVyZGF5cyA9IHNhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciB5ZWFyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnllYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB5ZWFyO1xuZXhwb3J0IHZhciB5ZWFycyA9IHllYXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIG1vbnRoID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldERhdGUoMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0TW9udGgoKSAtIHN0YXJ0LmdldE1vbnRoKCkgKyAoZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNb250aCgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vbnRoO1xuZXhwb3J0IHZhciBtb250aHMgPSBtb250aC5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHV0Y01pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENTZWNvbmRzKDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTWludXRlO1xuZXhwb3J0IHZhciB1dGNNaW51dGVzID0gdXRjTWludXRlLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91cn0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHV0Y0hvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTWludXRlcygwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0hvdXI7XG5leHBvcnQgdmFyIHV0Y0hvdXJzID0gdXRjSG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkRheX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHV0Y0RheSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25EYXk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0RhdGUoKSAtIDE7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjRGF5O1xuZXhwb3J0IHZhciB1dGNEYXlzID0gdXRjRGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uV2Vla30gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxuZnVuY3Rpb24gdXRjV2Vla2RheShpKSB7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gKGRhdGUuZ2V0VVRDRGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIHV0Y1N1bmRheSA9IHV0Y1dlZWtkYXkoMCk7XG5leHBvcnQgdmFyIHV0Y01vbmRheSA9IHV0Y1dlZWtkYXkoMSk7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXkgPSB1dGNXZWVrZGF5KDIpO1xuZXhwb3J0IHZhciB1dGNXZWRuZXNkYXkgPSB1dGNXZWVrZGF5KDMpO1xuZXhwb3J0IHZhciB1dGNUaHVyc2RheSA9IHV0Y1dlZWtkYXkoNCk7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheSA9IHV0Y1dlZWtkYXkoNSk7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5ID0gdXRjV2Vla2RheSg2KTtcblxuZXhwb3J0IHZhciB1dGNTdW5kYXlzID0gdXRjU3VuZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNNb25kYXlzID0gdXRjTW9uZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNUdWVzZGF5cyA9IHV0Y1R1ZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheXMgPSB1dGNXZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5cyA9IHV0Y1RodXJzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNGcmlkYXlzID0gdXRjRnJpZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNTYXR1cmRheXMgPSB1dGNTYXR1cmRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgdXRjWWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG51dGNZZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjWWVhcjtcbmV4cG9ydCB2YXIgdXRjWWVhcnMgPSB1dGNZZWFyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciB1dGNNb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENEYXRlKDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ01vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldFVUQ01vbnRoKCkgLSBzdGFydC5nZXRVVENNb250aCgpICsgKGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNNb250aDtcbmV4cG9ydCB2YXIgdXRjTW9udGhzID0gdXRjTW9udGgucmFuZ2U7XG4iLCJpbXBvcnQge1xuICB0aW1lRGF5LFxuICB0aW1lU3VuZGF5LFxuICB0aW1lTW9uZGF5LFxuICB0aW1lVGh1cnNkYXksXG4gIHRpbWVZZWFyLFxuICB1dGNEYXksXG4gIHV0Y1N1bmRheSxcbiAgdXRjTW9uZGF5LFxuICB1dGNUaHVyc2RheSxcbiAgdXRjWWVhclxufSBmcm9tIFwiZDMtdGltZVwiO1xuXG5mdW5jdGlvbiBsb2NhbERhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkLnkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZShkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xufVxuXG5mdW5jdGlvbiB1dGNEYXRlKGQpIHtcbiAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xufVxuXG5mdW5jdGlvbiBuZXdZZWFyKHkpIHtcbiAgcmV0dXJuIHt5OiB5LCBtOiAwLCBkOiAxLCBIOiAwLCBNOiAwLCBTOiAwLCBMOiAwfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TG9jYWxlKGxvY2FsZSkge1xuICB2YXIgbG9jYWxlX2RhdGVUaW1lID0gbG9jYWxlLmRhdGVUaW1lLFxuICAgICAgbG9jYWxlX2RhdGUgPSBsb2NhbGUuZGF0ZSxcbiAgICAgIGxvY2FsZV90aW1lID0gbG9jYWxlLnRpbWUsXG4gICAgICBsb2NhbGVfcGVyaW9kcyA9IGxvY2FsZS5wZXJpb2RzLFxuICAgICAgbG9jYWxlX3dlZWtkYXlzID0gbG9jYWxlLmRheXMsXG4gICAgICBsb2NhbGVfc2hvcnRXZWVrZGF5cyA9IGxvY2FsZS5zaG9ydERheXMsXG4gICAgICBsb2NhbGVfbW9udGhzID0gbG9jYWxlLm1vbnRocyxcbiAgICAgIGxvY2FsZV9zaG9ydE1vbnRocyA9IGxvY2FsZS5zaG9ydE1vbnRocztcblxuICB2YXIgcGVyaW9kUmUgPSBmb3JtYXRSZShsb2NhbGVfcGVyaW9kcyksXG4gICAgICBwZXJpb2RMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgd2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHNob3J0V2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydFdlZWtkYXlzKSxcbiAgICAgIG1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfbW9udGhzKSxcbiAgICAgIG1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9tb250aHMpLFxuICAgICAgc2hvcnRNb250aFJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0TW9udGhzKSxcbiAgICAgIHNob3J0TW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0TW9udGhzKTtcblxuICB2YXIgZm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0U2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0TWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBmb3JtYXRIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdEhvdXIxMixcbiAgICBcImpcIjogZm9ybWF0RGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdE1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRQZXJpb2QsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0Wm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgdXRjRm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0VVRDU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRVVENXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRVVENTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRVVENNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0VVRDTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBmb3JtYXRVVENIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdFVUQ0hvdXIxMixcbiAgICBcImpcIjogZm9ybWF0VVRDRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRVVENNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdFVUQ01vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRVVENNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRVVENQZXJpb2QsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRVVENTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRVVENXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRVVENZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRVVENGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0VVRDWm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgcGFyc2VzID0ge1xuICAgIFwiYVwiOiBwYXJzZVNob3J0V2Vla2RheSxcbiAgICBcIkFcIjogcGFyc2VXZWVrZGF5LFxuICAgIFwiYlwiOiBwYXJzZVNob3J0TW9udGgsXG4gICAgXCJCXCI6IHBhcnNlTW9udGgsXG4gICAgXCJjXCI6IHBhcnNlTG9jYWxlRGF0ZVRpbWUsXG4gICAgXCJkXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImVcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBwYXJzZU1pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJJXCI6IHBhcnNlSG91cjI0LFxuICAgIFwialwiOiBwYXJzZURheU9mWWVhcixcbiAgICBcIkxcIjogcGFyc2VNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IHBhcnNlTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IHBhcnNlTWludXRlcyxcbiAgICBcInBcIjogcGFyc2VQZXJpb2QsXG4gICAgXCJRXCI6IHBhcnNlVW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogcGFyc2VTZWNvbmRzLFxuICAgIFwidVwiOiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IHBhcnNlV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogcGFyc2VXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IHBhcnNlV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogcGFyc2VMb2NhbGVEYXRlLFxuICAgIFwiWFwiOiBwYXJzZUxvY2FsZVRpbWUsXG4gICAgXCJ5XCI6IHBhcnNlWWVhcixcbiAgICBcIllcIjogcGFyc2VGdWxsWWVhcixcbiAgICBcIlpcIjogcGFyc2Vab25lLFxuICAgIFwiJVwiOiBwYXJzZUxpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgLy8gVGhlc2UgcmVjdXJzaXZlIGRpcmVjdGl2ZSBkZWZpbml0aW9ucyBtdXN0IGJlIGRlZmVycmVkLlxuICBmb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCBmb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgdXRjRm9ybWF0cyk7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllciwgZm9ybWF0cykge1xuICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICB2YXIgc3RyaW5nID0gW10sXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIGogPSAwLFxuICAgICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICAgIGMsXG4gICAgICAgICAgcGFkLFxuICAgICAgICAgIGZvcm1hdDtcblxuICAgICAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSBkYXRlID0gbmV3IERhdGUoK2RhdGUpO1xuXG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSkgPT09IDM3KSB7XG4gICAgICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgICAgICBpZiAoKHBhZCA9IHBhZHNbYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKV0pICE9IG51bGwpIGMgPSBzcGVjaWZpZXIuY2hhckF0KCsraSk7XG4gICAgICAgICAgZWxzZSBwYWQgPSBjID09PSBcImVcIiA/IFwiIFwiIDogXCIwXCI7XG4gICAgICAgICAgaWYgKGZvcm1hdCA9IGZvcm1hdHNbY10pIGMgPSBmb3JtYXQoZGF0ZSwgcGFkKTtcbiAgICAgICAgICBzdHJpbmcucHVzaChjKTtcbiAgICAgICAgICBqID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgIHJldHVybiBzdHJpbmcuam9pbihcIlwiKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3UGFyc2Uoc3BlY2lmaWVyLCBuZXdEYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIGQgPSBuZXdZZWFyKDE5MDApLFxuICAgICAgICAgIGkgPSBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZyArPSBcIlwiLCAwKSxcbiAgICAgICAgICB3ZWVrLCBkYXk7XG4gICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICAgICAgLy8gSWYgYSBVTklYIHRpbWVzdGFtcCBpcyBzcGVjaWZpZWQsIHJldHVybiBpdC5cbiAgICAgIGlmIChcIlFcIiBpbiBkKSByZXR1cm4gbmV3IERhdGUoZC5RKTtcblxuICAgICAgLy8gVGhlIGFtLXBtIGZsYWcgaXMgMCBmb3IgQU0sIGFuZCAxIGZvciBQTS5cbiAgICAgIGlmIChcInBcIiBpbiBkKSBkLkggPSBkLkggJSAxMiArIGQucCAqIDEyO1xuXG4gICAgICAvLyBDb252ZXJ0IGRheS1vZi13ZWVrIGFuZCB3ZWVrLW9mLXllYXIgdG8gZGF5LW9mLXllYXIuXG4gICAgICBpZiAoXCJWXCIgaW4gZCkge1xuICAgICAgICBpZiAoZC5WIDwgMSB8fCBkLlYgPiA1MykgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSAxO1xuICAgICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXRlKG5ld1llYXIoZC55KSksIGRheSA9IHdlZWsuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdXRjTW9uZGF5LmNlaWwod2VlaykgOiB1dGNNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHV0Y0RheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldFVUQ0RhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2VlayA9IG5ld0RhdGUobmV3WWVhcihkLnkpKSwgZGF5ID0gd2Vlay5nZXREYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB0aW1lTW9uZGF5LmNlaWwod2VlaykgOiB0aW1lTW9uZGF5KHdlZWspO1xuICAgICAgICAgIHdlZWsgPSB0aW1lRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0RGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcIldcIiBpbiBkIHx8IFwiVVwiIGluIGQpIHtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IFwidVwiIGluIGQgPyBkLnUgJSA3IDogXCJXXCIgaW4gZCA/IDEgOiAwO1xuICAgICAgICBkYXkgPSBcIlpcIiBpbiBkID8gdXRjRGF0ZShuZXdZZWFyKGQueSkpLmdldFVUQ0RheSgpIDogbmV3RGF0ZShuZXdZZWFyKGQueSkpLmdldERheSgpO1xuICAgICAgICBkLm0gPSAwO1xuICAgICAgICBkLmQgPSBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF5ICsgNSkgJSA3IDogZC53ICsgZC5VICogNyAtIChkYXkgKyA2KSAlIDc7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGEgdGltZSB6b25lIGlzIHNwZWNpZmllZCwgYWxsIGZpZWxkcyBhcmUgaW50ZXJwcmV0ZWQgYXMgVVRDIGFuZCB0aGVuXG4gICAgICAvLyBvZmZzZXQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgdGltZSB6b25lLlxuICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgZC5IICs9IGQuWiAvIDEwMCB8IDA7XG4gICAgICAgIGQuTSArPSBkLlogJSAxMDA7XG4gICAgICAgIHJldHVybiB1dGNEYXRlKGQpO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UsIGFsbCBmaWVsZHMgYXJlIGluIGxvY2FsIHRpbWUuXG4gICAgICByZXR1cm4gbmV3RGF0ZShkKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcsIGopIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICBtID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgYyxcbiAgICAgICAgcGFyc2U7XG5cbiAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckNvZGVBdChpKyspO1xuICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckF0KGkrKyk7XG4gICAgICAgIHBhcnNlID0gcGFyc2VzW2MgaW4gcGFkcyA/IHNwZWNpZmllci5jaGFyQXQoaSsrKSA6IGNdO1xuICAgICAgICBpZiAoIXBhcnNlIHx8ICgoaiA9IHBhcnNlKGQsIHN0cmluZywgaikpIDwgMCkpIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gajtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUGVyaW9kKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gcGVyaW9kUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQucCA9IHBlcmlvZExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNob3J0V2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0V2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSBzaG9ydFdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gd2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSB3ZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0TW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gc2hvcnRNb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gbW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGVUaW1lLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX3RpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXREYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0TW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFBlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgZm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHBhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIGxvY2FsRGF0ZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9LFxuICAgIHV0Y0Zvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgdXRjRm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyLCB1dGNEYXRlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHBhZHMgPSB7XCItXCI6IFwiXCIsIFwiX1wiOiBcIiBcIiwgXCIwXCI6IFwiMFwifSxcbiAgICBudW1iZXJSZSA9IC9eXFxzKlxcZCsvLCAvLyBub3RlOiBpZ25vcmVzIG5leHQgZGlyZWN0aXZlXG4gICAgcGVyY2VudFJlID0gL14lLyxcbiAgICByZXF1b3RlUmUgPSAvW1xcXFxeJCorP3xbXFxdKCkue31dL2c7XG5cbmZ1bmN0aW9uIHBhZCh2YWx1ZSwgZmlsbCwgd2lkdGgpIHtcbiAgdmFyIHNpZ24gPSB2YWx1ZSA8IDAgPyBcIi1cIiA6IFwiXCIsXG4gICAgICBzdHJpbmcgPSAoc2lnbiA/IC12YWx1ZSA6IHZhbHVlKSArIFwiXCIsXG4gICAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICByZXR1cm4gc2lnbiArIChsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgKyBzdHJpbmcgOiBzdHJpbmcpO1xufVxuXG5mdW5jdGlvbiByZXF1b3RlKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZShyZXF1b3RlUmUsIFwiXFxcXCQmXCIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRSZShuYW1lcykge1xuICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oPzpcIiArIG5hbWVzLm1hcChyZXF1b3RlKS5qb2luKFwifFwiKSArIFwiKVwiLCBcImlcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExvb2t1cChuYW1lcykge1xuICB2YXIgbWFwID0ge30sIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIG1hcFtuYW1lc1tpXS50b0xvd2VyQ2FzZSgpXSA9IGk7XG4gIHJldHVybiBtYXA7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlclN1bmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLncgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC51ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuVSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlcklTTyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlYgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5XID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VGdWxsWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNCkpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0gKyAoK25bMF0gPiA2OCA/IDE5MDAgOiAyMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVpvbmUoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gL14oWil8KFsrLV1cXGRcXGQpKD86Oj8oXFxkXFxkKSk/Ly5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLlogPSBuWzFdID8gMCA6IC0oblsyXSArIChuWzNdIHx8IFwiMDBcIikpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9udGhOdW1iZXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZk1vbnRoKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQubSA9IDAsIGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSG91cjI0KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuSCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWludXRlcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLk0gPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5TID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaWxsaXNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5MID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaWNyb3NlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDYpKTtcbiAgcmV0dXJuIG4gPyAoZC5MID0gTWF0aC5mbG9vcihuWzBdIC8gMTAwMCksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VMaXRlcmFsUGVyY2VudChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBwZXJjZW50UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyBpICsgblswXS5sZW5ndGggOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VVbml4VGltZXN0YW1wKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5RID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQuUSA9ICgrblswXSkgKiAxMDAwLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdGltZURheS5jb3VudCh0aW1lWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0U2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkYXkgPSBkLmdldERheSgpO1xuICByZXR1cm4gZGF5ID09PSAwID8gNyA6IGRheTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodGltZVN1bmRheS5jb3VudCh0aW1lWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHRpbWVUaHVyc2RheShkKSA6IHRpbWVUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKHRpbWVUaHVyc2RheS5jb3VudCh0aW1lWWVhcihkKSwgZCkgKyAodGltZVllYXIoZCkuZ2V0RGF5KCkgPT09IDQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla2RheU51bWJlclN1bmRheShkKSB7XG4gIHJldHVybiBkLmdldERheSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh0aW1lTW9uZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFpvbmUoZCkge1xuICB2YXIgeiA9IGQuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgcmV0dXJuICh6ID4gMCA/IFwiLVwiIDogKHogKj0gLTEsIFwiK1wiKSlcbiAgICAgICsgcGFkKHogLyA2MCB8IDAsIFwiMFwiLCAyKVxuICAgICAgKyBwYWQoeiAlIDYwLCBcIjBcIiwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDSG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdXRjRGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ1NlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZG93ID0gZC5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIGRvdyA9PT0gMCA/IDcgOiBkb3c7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y1N1bmRheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXRVVENEYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdXRjVGh1cnNkYXkoZCkgOiB1dGNUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKHV0Y1RodXJzZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpICsgKHV0Y1llYXIoZCkuZ2V0VVRDRGF5KCkgPT09IDQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheShkKSB7XG4gIHJldHVybiBkLmdldFVUQ0RheSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh1dGNNb25kYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENGdWxsWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENab25lKCkge1xuICByZXR1cm4gXCIrMDAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRMaXRlcmFsUGVyY2VudCgpIHtcbiAgcmV0dXJuIFwiJVwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbml4VGltZXN0YW1wKGQpIHtcbiAgcmV0dXJuICtkO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyhkKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKCtkIC8gMTAwMCk7XG59XG4iLCJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZVwiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciB0aW1lRm9ybWF0O1xuZXhwb3J0IHZhciB0aW1lUGFyc2U7XG5leHBvcnQgdmFyIHV0Y0Zvcm1hdDtcbmV4cG9ydCB2YXIgdXRjUGFyc2U7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICBkYXRlVGltZTogXCIleCwgJVhcIixcbiAgZGF0ZTogXCIlLW0vJS1kLyVZXCIsXG4gIHRpbWU6IFwiJS1JOiVNOiVTICVwXCIsXG4gIHBlcmlvZHM6IFtcIkFNXCIsIFwiUE1cIl0sXG4gIGRheXM6IFtcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCJdLFxuICBzaG9ydERheXM6IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXSxcbiAgbW9udGhzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSxcbiAgc2hvcnRNb250aHM6IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gIHRpbWVGb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICB0aW1lUGFyc2UgPSBsb2NhbGUucGFyc2U7XG4gIHV0Y0Zvcm1hdCA9IGxvY2FsZS51dGNGb3JtYXQ7XG4gIHV0Y1BhcnNlID0gbG9jYWxlLnV0Y1BhcnNlO1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiaW1wb3J0IHt1dGNGb3JtYXR9IGZyb20gXCIuL2RlZmF1bHRMb2NhbGVcIjtcblxuZXhwb3J0IHZhciBpc29TcGVjaWZpZXIgPSBcIiVZLSVtLSVkVCVIOiVNOiVTLiVMWlwiO1xuXG5mdW5jdGlvbiBmb3JtYXRJc29OYXRpdmUoZGF0ZSkge1xuICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpO1xufVxuXG52YXIgZm9ybWF0SXNvID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmdcbiAgICA/IGZvcm1hdElzb05hdGl2ZVxuICAgIDogdXRjRm9ybWF0KGlzb1NwZWNpZmllcik7XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdElzbztcbiIsImltcG9ydCB7aXNvU3BlY2lmaWVyfSBmcm9tIFwiLi9pc29Gb3JtYXRcIjtcbmltcG9ydCB7dXRjUGFyc2V9IGZyb20gXCIuL2RlZmF1bHRMb2NhbGVcIjtcblxuZnVuY3Rpb24gcGFyc2VJc29OYXRpdmUoc3RyaW5nKSB7XG4gIHZhciBkYXRlID0gbmV3IERhdGUoc3RyaW5nKTtcbiAgcmV0dXJuIGlzTmFOKGRhdGUpID8gbnVsbCA6IGRhdGU7XG59XG5cbnZhciBwYXJzZUlzbyA9ICtuZXcgRGF0ZShcIjIwMDAtMDEtMDFUMDA6MDA6MDAuMDAwWlwiKVxuICAgID8gcGFyc2VJc29OYXRpdmVcbiAgICA6IHV0Y1BhcnNlKGlzb1NwZWNpZmllcik7XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlSXNvO1xuIiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICB0YXUgPSAyICogcGksXG4gICAgZXBzaWxvbiA9IDFlLTYsXG4gICAgdGF1RXBzaWxvbiA9IHRhdSAtIGVwc2lsb247XG5cbmZ1bmN0aW9uIFBhdGgoKSB7XG4gIHRoaXMuX3gwID0gdGhpcy5feTAgPSAvLyBzdGFydCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5feDEgPSB0aGlzLl95MSA9IG51bGw7IC8vIGVuZCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5fID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gcGF0aCgpIHtcbiAgcmV0dXJuIG5ldyBQYXRoO1xufVxuXG5QYXRoLnByb3RvdHlwZSA9IHBhdGgucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGF0aCxcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl94MSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5feDEgPSB0aGlzLl94MCwgdGhpcy5feTEgPSB0aGlzLl95MDtcbiAgICAgIHRoaXMuXyArPSBcIlpcIjtcbiAgICB9XG4gIH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJRXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkNcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKCt4MikgKyBcIixcIiArICgreTIpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYXJjVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCByKSB7XG4gICAgeDEgPSAreDEsIHkxID0gK3kxLCB4MiA9ICt4MiwgeTIgPSAreTIsIHIgPSArcjtcbiAgICB2YXIgeDAgPSB0aGlzLl94MSxcbiAgICAgICAgeTAgPSB0aGlzLl95MSxcbiAgICAgICAgeDIxID0geDIgLSB4MSxcbiAgICAgICAgeTIxID0geTIgLSB5MSxcbiAgICAgICAgeDAxID0geDAgLSB4MSxcbiAgICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgICAgbDAxXzIgPSB4MDEgKiB4MDEgKyB5MDEgKiB5MDE7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDEseTEpLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4MCx5MCk/IERvIG5vdGhpbmcuXG4gICAgZWxzZSBpZiAoIShsMDFfMiA+IGVwc2lsb24pKSB7fVxuXG4gICAgLy8gT3IsIGFyZSAoeDAseTApLCAoeDEseTEpIGFuZCAoeDIseTIpIGNvbGxpbmVhcj9cbiAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgLy8gT3IsIGlzIHRoZSByYWRpdXMgemVybz8gTGluZSB0byAoeDEseTEpLlxuICAgIGVsc2UgaWYgKCEoTWF0aC5hYnMoeTAxICogeDIxIC0geTIxICogeDAxKSA+IGVwc2lsb24pIHx8ICFyKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHgyMCA9IHgyIC0geDAsXG4gICAgICAgICAgeTIwID0geTIgLSB5MCxcbiAgICAgICAgICBsMjFfMiA9IHgyMSAqIHgyMSArIHkyMSAqIHkyMSxcbiAgICAgICAgICBsMjBfMiA9IHgyMCAqIHgyMCArIHkyMCAqIHkyMCxcbiAgICAgICAgICBsMjEgPSBNYXRoLnNxcnQobDIxXzIpLFxuICAgICAgICAgIGwwMSA9IE1hdGguc3FydChsMDFfMiksXG4gICAgICAgICAgbCA9IHIgKiBNYXRoLnRhbigocGkgLSBNYXRoLmFjb3MoKGwyMV8yICsgbDAxXzIgLSBsMjBfMikgLyAoMiAqIGwyMSAqIGwwMSkpKSAvIDIpLFxuICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgdDIxID0gbCAvIGwyMTtcblxuICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxuICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbikge1xuICAgICAgICB0aGlzLl8gKz0gXCJMXCIgKyAoeDEgKyB0MDEgKiB4MDEpICsgXCIsXCIgKyAoeTEgKyB0MDEgKiB5MDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwwLFwiICsgKCsoeTAxICogeDIwID4geDAxICogeTIwKSkgKyBcIixcIiArICh0aGlzLl94MSA9IHgxICsgdDIxICogeDIxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEgKyB0MjEgKiB5MjEpO1xuICAgIH1cbiAgfSxcbiAgYXJjOiBmdW5jdGlvbih4LCB5LCByLCBhMCwgYTEsIGNjdykge1xuICAgIHggPSAreCwgeSA9ICt5LCByID0gK3I7XG4gICAgdmFyIGR4ID0gciAqIE1hdGguY29zKGEwKSxcbiAgICAgICAgZHkgPSByICogTWF0aC5zaW4oYTApLFxuICAgICAgICB4MCA9IHggKyBkeCxcbiAgICAgICAgeTAgPSB5ICsgZHksXG4gICAgICAgIGN3ID0gMSBeIGNjdyxcbiAgICAgICAgZGEgPSBjY3cgPyBhMCAtIGExIDogYTEgLSBhMDtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MCx5MCkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MCx5MCkgbm90IGNvaW5jaWRlbnQgd2l0aCB0aGUgcHJldmlvdXMgcG9pbnQ/IExpbmUgdG8gKHgwLHkwKS5cbiAgICBlbHNlIGlmIChNYXRoLmFicyh0aGlzLl94MSAtIHgwKSA+IGVwc2lsb24gfHwgTWF0aC5hYnModGhpcy5feTEgLSB5MCkgPiBlcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgZW1wdHk/IFdl4oCZcmUgZG9uZS5cbiAgICBpZiAoIXIpIHJldHVybjtcblxuICAgIC8vIERvZXMgdGhlIGFuZ2xlIGdvIHRoZSB3cm9uZyB3YXk/IEZsaXAgdGhlIGRpcmVjdGlvbi5cbiAgICBpZiAoZGEgPCAwKSBkYSA9IGRhICUgdGF1ICsgdGF1O1xuXG4gICAgLy8gSXMgdGhpcyBhIGNvbXBsZXRlIGNpcmNsZT8gRHJhdyB0d28gYXJjcyB0byBjb21wbGV0ZSB0aGUgY2lyY2xlLlxuICAgIGlmIChkYSA+IHRhdUVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHggLSBkeCkgKyBcIixcIiArICh5IC0gZHkpICsgXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHgwKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTApO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIG5vbi1lbXB0eT8gRHJhdyBhbiBhcmMhXG4gICAgZWxzZSBpZiAoZGEgPiBlcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCxcIiArICgrKGRhID49IHBpKSkgKyBcIixcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4ICsgciAqIE1hdGguY29zKGExKSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkgKyByICogTWF0aC5zaW4oYTEpKTtcbiAgICB9XG4gIH0sXG4gIHJlY3Q6IGZ1bmN0aW9uKHgsIHksIHcsIGgpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSkgKyBcImhcIiArICgrdykgKyBcInZcIiArICgraCkgKyBcImhcIiArICgtdykgKyBcIlpcIjtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl87XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBhdGg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb25zdGFudCgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnM7XG5leHBvcnQgdmFyIGF0YW4yID0gTWF0aC5hdGFuMjtcbmV4cG9ydCB2YXIgY29zID0gTWF0aC5jb3M7XG5leHBvcnQgdmFyIG1heCA9IE1hdGgubWF4O1xuZXhwb3J0IHZhciBtaW4gPSBNYXRoLm1pbjtcbmV4cG9ydCB2YXIgc2luID0gTWF0aC5zaW47XG5leHBvcnQgdmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG5cbmV4cG9ydCB2YXIgZXBzaWxvbiA9IDFlLTEyO1xuZXhwb3J0IHZhciBwaSA9IE1hdGguUEk7XG5leHBvcnQgdmFyIGhhbGZQaSA9IHBpIC8gMjtcbmV4cG9ydCB2YXIgdGF1ID0gMiAqIHBpO1xuXG5leHBvcnQgZnVuY3Rpb24gYWNvcyh4KSB7XG4gIHJldHVybiB4ID4gMSA/IDAgOiB4IDwgLTEgPyBwaSA6IE1hdGguYWNvcyh4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzaW4oeCkge1xuICByZXR1cm4geCA+PSAxID8gaGFsZlBpIDogeCA8PSAtMSA/IC1oYWxmUGkgOiBNYXRoLmFzaW4oeCk7XG59XG4iLCJmdW5jdGlvbiBMaW5lYXIoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTGluZWFyKGNvbnRleHQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHgocCkge1xuICByZXR1cm4gcFswXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkocCkge1xuICByZXR1cm4gcFsxXTtcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGN1cnZlTGluZWFyIGZyb20gXCIuL2N1cnZlL2xpbmVhclwiO1xuaW1wb3J0IGxpbmUgZnJvbSBcIi4vbGluZVwiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuL3BvaW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgeDAgPSBwb2ludFgsXG4gICAgICB4MSA9IG51bGwsXG4gICAgICB5MCA9IGNvbnN0YW50KDApLFxuICAgICAgeTEgPSBwb2ludFksXG4gICAgICBkZWZpbmVkID0gY29uc3RhbnQodHJ1ZSksXG4gICAgICBjb250ZXh0ID0gbnVsbCxcbiAgICAgIGN1cnZlID0gY3VydmVMaW5lYXIsXG4gICAgICBvdXRwdXQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGFyZWEoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBqLFxuICAgICAgICBrLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGQsXG4gICAgICAgIGRlZmluZWQwID0gZmFsc2UsXG4gICAgICAgIGJ1ZmZlcixcbiAgICAgICAgeDB6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICB5MHogPSBuZXcgQXJyYXkobik7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSB7XG4gICAgICAgICAgaiA9IGk7XG4gICAgICAgICAgb3V0cHV0LmFyZWFTdGFydCgpO1xuICAgICAgICAgIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgICAgIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgICBmb3IgKGsgPSBpIC0gMTsgayA+PSBqOyAtLWspIHtcbiAgICAgICAgICAgIG91dHB1dC5wb2ludCh4MHpba10sIHkweltrXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICAgICAgb3V0cHV0LmFyZWFFbmQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRlZmluZWQwKSB7XG4gICAgICAgIHgweltpXSA9ICt4MChkLCBpLCBkYXRhKSwgeTB6W2ldID0gK3kwKGQsIGksIGRhdGEpO1xuICAgICAgICBvdXRwdXQucG9pbnQoeDEgPyAreDEoZCwgaSwgZGF0YSkgOiB4MHpbaV0sIHkxID8gK3kxKGQsIGksIGRhdGEpIDogeTB6W2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gb3V0cHV0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJlYWxpbmUoKSB7XG4gICAgcmV0dXJuIGxpbmUoKS5kZWZpbmVkKGRlZmluZWQpLmN1cnZlKGN1cnZlKS5jb250ZXh0KGNvbnRleHQpO1xuICB9XG5cbiAgYXJlYS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHgxID0gbnVsbCwgYXJlYSkgOiB4MDtcbiAgfTtcblxuICBhcmVhLngwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeDA7XG4gIH07XG5cbiAgYXJlYS54MSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MSA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB4MTtcbiAgfTtcblxuICBhcmVhLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgeTEgPSBudWxsLCBhcmVhKSA6IHkwO1xuICB9O1xuXG4gIGFyZWEueTAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB5MDtcbiAgfTtcblxuICBhcmVhLnkxID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkxID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHkxO1xuICB9O1xuXG4gIGFyZWEubGluZVgwID1cbiAgYXJlYS5saW5lWTAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgwKS55KHkwKTtcbiAgfTtcblxuICBhcmVhLmxpbmVZMSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTEpO1xuICB9O1xuXG4gIGFyZWEubGluZVgxID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MSkueSh5MCk7XG4gIH07XG5cbiAgYXJlYS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGFyZWEpIDogZGVmaW5lZDtcbiAgfTtcblxuICBhcmVhLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGFyZWEpIDogY3VydmU7XG4gIH07XG5cbiAgYXJlYS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBhcmVhKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGFyZWE7XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9jdXJ2ZS9saW5lYXJcIjtcbmltcG9ydCB7eCBhcyBwb2ludFgsIHkgYXMgcG9pbnRZfSBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSBwb2ludFgsXG4gICAgICB5ID0gcG9pbnRZLFxuICAgICAgZGVmaW5lZCA9IGNvbnN0YW50KHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBsaW5lKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXI7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIGVsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkgb3V0cHV0LnBvaW50KCt4KGQsIGksIGRhdGEpLCAreShkLCBpLCBkYXRhKSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmUpIDogeDtcbiAgfTtcblxuICBsaW5lLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHk7XG4gIH07XG5cbiAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGxpbmUpIDogZGVmaW5lZDtcbiAgfTtcblxuICBsaW5lLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGxpbmUpIDogY3VydmU7XG4gIH07XG5cbiAgbGluZS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBsaW5lKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmU7XG59XG4iLCJmdW5jdGlvbiBzaWduKHgpIHtcbiAgcmV0dXJuIHggPCAwID8gLTEgOiAxO1xufVxuXG4vLyBDYWxjdWxhdGUgdGhlIHNsb3BlcyBvZiB0aGUgdGFuZ2VudHMgKEhlcm1pdGUtdHlwZSBpbnRlcnBvbGF0aW9uKSBiYXNlZCBvblxuLy8gdGhlIGZvbGxvd2luZyBwYXBlcjogU3RlZmZlbiwgTS4gMTk5MC4gQSBTaW1wbGUgTWV0aG9kIGZvciBNb25vdG9uaWNcbi8vIEludGVycG9sYXRpb24gaW4gT25lIERpbWVuc2lvbi4gQXN0cm9ub215IGFuZCBBc3Ryb3BoeXNpY3MsIFZvbC4gMjM5LCBOTy5cbi8vIE5PVihJSSksIFAuIDQ0MywgMTk5MC5cbmZ1bmN0aW9uIHNsb3BlMyh0aGF0LCB4MiwgeTIpIHtcbiAgdmFyIGgwID0gdGhhdC5feDEgLSB0aGF0Ll94MCxcbiAgICAgIGgxID0geDIgLSB0aGF0Ll94MSxcbiAgICAgIHMwID0gKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gKGgwIHx8IGgxIDwgMCAmJiAtMCksXG4gICAgICBzMSA9ICh5MiAtIHRoYXQuX3kxKSAvIChoMSB8fCBoMCA8IDAgJiYgLTApLFxuICAgICAgcCA9IChzMCAqIGgxICsgczEgKiBoMCkgLyAoaDAgKyBoMSk7XG4gIHJldHVybiAoc2lnbihzMCkgKyBzaWduKHMxKSkgKiBNYXRoLm1pbihNYXRoLmFicyhzMCksIE1hdGguYWJzKHMxKSwgMC41ICogTWF0aC5hYnMocCkpIHx8IDA7XG59XG5cbi8vIENhbGN1bGF0ZSBhIG9uZS1zaWRlZCBzbG9wZS5cbmZ1bmN0aW9uIHNsb3BlMih0aGF0LCB0KSB7XG4gIHZhciBoID0gdGhhdC5feDEgLSB0aGF0Ll94MDtcbiAgcmV0dXJuIGggPyAoMyAqICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIGggLSB0KSAvIDIgOiB0O1xufVxuXG4vLyBBY2NvcmRpbmcgdG8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3ViaWNfSGVybWl0ZV9zcGxpbmUjUmVwcmVzZW50YXRpb25zXG4vLyBcInlvdSBjYW4gZXhwcmVzcyBjdWJpYyBIZXJtaXRlIGludGVycG9sYXRpb24gaW4gdGVybXMgb2YgY3ViaWMgQsOpemllciBjdXJ2ZXNcbi8vIHdpdGggcmVzcGVjdCB0byB0aGUgZm91ciB2YWx1ZXMgcDAsIHAwICsgbTAgLyAzLCBwMSAtIG0xIC8gMywgcDFcIi5cbmZ1bmN0aW9uIHBvaW50KHRoYXQsIHQwLCB0MSkge1xuICB2YXIgeDAgPSB0aGF0Ll94MCxcbiAgICAgIHkwID0gdGhhdC5feTAsXG4gICAgICB4MSA9IHRoYXQuX3gxLFxuICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgIGR4ID0gKHgxIC0geDApIC8gMztcbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwICsgZHgsIHkwICsgZHggKiB0MCwgeDEgLSBkeCwgeTEgLSBkeCAqIHQxLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBNb25vdG9uZVgoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTW9ub3RvbmVYLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID1cbiAgICB0aGlzLl90MCA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3QwLCBzbG9wZTIodGhpcywgdGhpcy5fdDApKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHQxID0gTmFOO1xuXG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgaWYgKHggPT09IHRoaXMuX3gxICYmIHkgPT09IHRoaXMuX3kxKSByZXR1cm47IC8vIElnbm9yZSBjb2luY2lkZW50IHBvaW50cy5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHBvaW50KHRoaXMsIHNsb3BlMih0aGlzLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSksIHQxKTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB0aGlzLl90MCwgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICAgIHRoaXMuX3QwID0gdDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gTW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IG5ldyBSZWZsZWN0Q29udGV4dChjb250ZXh0KTtcbn1cblxuKE1vbm90b25lWS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1vbm90b25lWC5wcm90b3R5cGUpKS5wb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgTW9ub3RvbmVYLnByb3RvdHlwZS5wb2ludC5jYWxsKHRoaXMsIHksIHgpO1xufTtcblxuZnVuY3Rpb24gUmVmbGVjdENvbnRleHQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuUmVmbGVjdENvbnRleHQucHJvdG90eXBlID0ge1xuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5tb3ZlVG8oeSwgeCk7IH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7IHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7IH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLl9jb250ZXh0LmxpbmVUbyh5LCB4KTsgfSxcbiAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHsgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHkxLCB4MSwgeTIsIHgyLCB5LCB4KTsgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1vbm90b25lWChjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVYKGNvbnRleHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBNb25vdG9uZVkoY29udGV4dCk7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcblxudmFyIHRvcCA9IDEsXG4gICAgcmlnaHQgPSAyLFxuICAgIGJvdHRvbSA9IDMsXG4gICAgbGVmdCA9IDQsXG4gICAgZXBzaWxvbiA9IDFlLTY7XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVgoeCkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyAoeCArIDAuNSkgKyBcIiwwKVwiO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVZKHkpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyAoeSArIDAuNSkgKyBcIilcIjtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHNjYWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2VudGVyKHNjYWxlKSB7XG4gIHZhciBvZmZzZXQgPSBNYXRoLm1heCgwLCBzY2FsZS5iYW5kd2lkdGgoKSAtIDEpIC8gMjsgLy8gQWRqdXN0IGZvciAwLjVweCBvZmZzZXQuXG4gIGlmIChzY2FsZS5yb3VuZCgpKSBvZmZzZXQgPSBNYXRoLnJvdW5kKG9mZnNldCk7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKSArIG9mZnNldDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW50ZXJpbmcoKSB7XG4gIHJldHVybiAhdGhpcy5fX2F4aXM7XG59XG5cbmZ1bmN0aW9uIGF4aXMob3JpZW50LCBzY2FsZSkge1xuICB2YXIgdGlja0FyZ3VtZW50cyA9IFtdLFxuICAgICAgdGlja1ZhbHVlcyA9IG51bGwsXG4gICAgICB0aWNrRm9ybWF0ID0gbnVsbCxcbiAgICAgIHRpY2tTaXplSW5uZXIgPSA2LFxuICAgICAgdGlja1NpemVPdXRlciA9IDYsXG4gICAgICB0aWNrUGFkZGluZyA9IDMsXG4gICAgICBrID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBsZWZ0ID8gLTEgOiAxLFxuICAgICAgeCA9IG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT09IHJpZ2h0ID8gXCJ4XCIgOiBcInlcIixcbiAgICAgIHRyYW5zZm9ybSA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gYm90dG9tID8gdHJhbnNsYXRlWCA6IHRyYW5zbGF0ZVk7XG5cbiAgZnVuY3Rpb24gYXhpcyhjb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlcyA9IHRpY2tWYWx1ZXMgPT0gbnVsbCA/IChzY2FsZS50aWNrcyA/IHNjYWxlLnRpY2tzLmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IHNjYWxlLmRvbWFpbigpKSA6IHRpY2tWYWx1ZXMsXG4gICAgICAgIGZvcm1hdCA9IHRpY2tGb3JtYXQgPT0gbnVsbCA/IChzY2FsZS50aWNrRm9ybWF0ID8gc2NhbGUudGlja0Zvcm1hdC5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBpZGVudGl0eSkgOiB0aWNrRm9ybWF0LFxuICAgICAgICBzcGFjaW5nID0gTWF0aC5tYXgodGlja1NpemVJbm5lciwgMCkgKyB0aWNrUGFkZGluZyxcbiAgICAgICAgcmFuZ2UgPSBzY2FsZS5yYW5nZSgpLFxuICAgICAgICByYW5nZTAgPSArcmFuZ2VbMF0gKyAwLjUsXG4gICAgICAgIHJhbmdlMSA9ICtyYW5nZVtyYW5nZS5sZW5ndGggLSAxXSArIDAuNSxcbiAgICAgICAgcG9zaXRpb24gPSAoc2NhbGUuYmFuZHdpZHRoID8gY2VudGVyIDogbnVtYmVyKShzY2FsZS5jb3B5KCkpLFxuICAgICAgICBzZWxlY3Rpb24gPSBjb250ZXh0LnNlbGVjdGlvbiA/IGNvbnRleHQuc2VsZWN0aW9uKCkgOiBjb250ZXh0LFxuICAgICAgICBwYXRoID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbbnVsbF0pLFxuICAgICAgICB0aWNrID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi50aWNrXCIpLmRhdGEodmFsdWVzLCBzY2FsZSkub3JkZXIoKSxcbiAgICAgICAgdGlja0V4aXQgPSB0aWNrLmV4aXQoKSxcbiAgICAgICAgdGlja0VudGVyID0gdGljay5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwidGlja1wiKSxcbiAgICAgICAgbGluZSA9IHRpY2suc2VsZWN0KFwibGluZVwiKSxcbiAgICAgICAgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKTtcblxuICAgIHBhdGggPSBwYXRoLm1lcmdlKHBhdGguZW50ZXIoKS5pbnNlcnQoXCJwYXRoXCIsIFwiLnRpY2tcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvbWFpblwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiMwMDBcIikpO1xuXG4gICAgdGljayA9IHRpY2subWVyZ2UodGlja0VudGVyKTtcblxuICAgIGxpbmUgPSBsaW5lLm1lcmdlKHRpY2tFbnRlci5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiIzAwMFwiKVxuICAgICAgICAuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKSk7XG5cbiAgICB0ZXh0ID0gdGV4dC5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjMDAwXCIpXG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAuYXR0cihcImR5XCIsIG9yaWVudCA9PT0gdG9wID8gXCIwZW1cIiA6IG9yaWVudCA9PT0gYm90dG9tID8gXCIwLjcxZW1cIiA6IFwiMC4zMmVtXCIpKTtcblxuICAgIGlmIChjb250ZXh0ICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgIHBhdGggPSBwYXRoLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0aWNrID0gdGljay50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgbGluZSA9IGxpbmUudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRleHQgPSB0ZXh0LnRyYW5zaXRpb24oY29udGV4dCk7XG5cbiAgICAgIHRpY2tFeGl0ID0gdGlja0V4aXQudHJhbnNpdGlvbihjb250ZXh0KVxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGlzRmluaXRlKGQgPSBwb3NpdGlvbihkKSkgPyB0cmFuc2Zvcm0oZCkgOiB0aGlzLmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTsgfSk7XG5cbiAgICAgIHRpY2tFbnRlclxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgdmFyIHAgPSB0aGlzLnBhcmVudE5vZGUuX19heGlzOyByZXR1cm4gdHJhbnNmb3JtKHAgJiYgaXNGaW5pdGUocCA9IHAoZCkpID8gcCA6IHBvc2l0aW9uKGQpKTsgfSk7XG4gICAgfVxuXG4gICAgdGlja0V4aXQucmVtb3ZlKCk7XG5cbiAgICBwYXRoXG4gICAgICAgIC5hdHRyKFwiZFwiLCBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09IHJpZ2h0XG4gICAgICAgICAgICA/IFwiTVwiICsgayAqIHRpY2tTaXplT3V0ZXIgKyBcIixcIiArIHJhbmdlMCArIFwiSDAuNVZcIiArIHJhbmdlMSArIFwiSFwiICsgayAqIHRpY2tTaXplT3V0ZXJcbiAgICAgICAgICAgIDogXCJNXCIgKyByYW5nZTAgKyBcIixcIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCJWMC41SFwiICsgcmFuZ2UxICsgXCJWXCIgKyBrICogdGlja1NpemVPdXRlcik7XG5cbiAgICB0aWNrXG4gICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCAxKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB0cmFuc2Zvcm0ocG9zaXRpb24oZCkpOyB9KTtcblxuICAgIGxpbmVcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcik7XG5cbiAgICB0ZXh0XG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAudGV4dChmb3JtYXQpO1xuXG4gICAgc2VsZWN0aW9uLmZpbHRlcihlbnRlcmluZylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcImZvbnQtc2l6ZVwiLCAxMClcbiAgICAgICAgLmF0dHIoXCJmb250LWZhbWlseVwiLCBcInNhbnMtc2VyaWZcIilcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBvcmllbnQgPT09IHJpZ2h0ID8gXCJzdGFydFwiIDogb3JpZW50ID09PSBsZWZ0ID8gXCJlbmRcIiA6IFwibWlkZGxlXCIpO1xuXG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkgeyB0aGlzLl9fYXhpcyA9IHBvc2l0aW9uOyB9KTtcbiAgfVxuXG4gIGF4aXMuc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGUgPSBfLCBheGlzKSA6IHNjYWxlO1xuICB9O1xuXG4gIGF4aXMudGlja3MgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGlja0FyZ3VtZW50cyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKSwgYXhpcztcbiAgfTtcblxuICBheGlzLnRpY2tBcmd1bWVudHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0FyZ3VtZW50cyA9IF8gPT0gbnVsbCA/IFtdIDogc2xpY2UuY2FsbChfKSwgYXhpcykgOiB0aWNrQXJndW1lbnRzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tWYWx1ZXMgPSBfID09IG51bGwgPyBudWxsIDogc2xpY2UuY2FsbChfKSwgYXhpcykgOiB0aWNrVmFsdWVzICYmIHRpY2tWYWx1ZXMuc2xpY2UoKTtcbiAgfTtcblxuICBheGlzLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0Zvcm1hdCA9IF8sIGF4aXMpIDogdGlja0Zvcm1hdDtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSB0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVJbm5lcjtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVJbm5lciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZU91dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZU91dGVyO1xuICB9O1xuXG4gIGF4aXMudGlja1BhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1BhZGRpbmcgPSArXywgYXhpcykgOiB0aWNrUGFkZGluZztcbiAgfTtcblxuICByZXR1cm4gYXhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNUb3Aoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXModG9wLCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzUmlnaHQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMocmlnaHQsIHNjYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNCb3R0b20oc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMoYm90dG9tLCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzTGVmdChzY2FsZSkge1xuICByZXR1cm4gYXhpcyhsZWZ0LCBzY2FsZSk7XG59XG4iLCJ2YXIgbm9vcCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7fX07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSB7fSwgdDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKHQgPSBhcmd1bWVudHNbaV0gKyBcIlwiKSB8fCAodCBpbiBfKSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHQpO1xuICAgIF9bdF0gPSBbXTtcbiAgfVxuICByZXR1cm4gbmV3IERpc3BhdGNoKF8pO1xufVxuXG5mdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gIHRoaXMuXyA9IF87XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5EaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgb246IGZ1bmN0aW9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBfID0gdGhpcy5fLFxuICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgdCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgZm9yICh2YXIgdCBpbiBfKSBjb3B5W3RdID0gX1t0XS5zbGljZSgpO1xuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gIH0sXG4gIGNhbGw6IGZ1bmN0aW9uKHR5cGUsIHRoYXQpIHtcbiAgICBpZiAoKG4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMikgPiAwKSBmb3IgKHZhciBhcmdzID0gbmV3IEFycmF5KG4pLCBpID0gMCwgbiwgdDsgaSA8IG47ICsraSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHZhciB0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKChjID0gdHlwZVtpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgdHlwZVtpXSA9IG5vb3AsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gIHJldHVybiB0eXBlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwYXRjaDtcbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oKSB7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG4iLCJ2YXIgZnJhbWUgPSAwLCAvLyBpcyBhbiBhbmltYXRpb24gZnJhbWUgcGVuZGluZz9cbiAgICB0aW1lb3V0ID0gMCwgLy8gaXMgYSB0aW1lb3V0IHBlbmRpbmc/XG4gICAgaW50ZXJ2YWwgPSAwLCAvLyBhcmUgYW55IHRpbWVycyBhY3RpdmU/XG4gICAgcG9rZURlbGF5ID0gMTAwMCwgLy8gaG93IGZyZXF1ZW50bHkgd2UgY2hlY2sgZm9yIGNsb2NrIHNrZXdcbiAgICB0YXNrSGVhZCxcbiAgICB0YXNrVGFpbCxcbiAgICBjbG9ja0xhc3QgPSAwLFxuICAgIGNsb2NrTm93ID0gMCxcbiAgICBjbG9ja1NrZXcgPSAwLFxuICAgIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZSxcbiAgICBzZXRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGltZXIoKSB7XG4gIHRoaXMuX2NhbGwgPVxuICB0aGlzLl90aW1lID1cbiAgdGhpcy5fbmV4dCA9IG51bGw7XG59XG5cblRpbWVyLnByb3RvdHlwZSA9IHRpbWVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRpbWVyLFxuICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcbiAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgIGlmICh0YXNrVGFpbCkgdGFza1RhaWwuX25leHQgPSB0aGlzO1xuICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XG4gICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICBzbGVlcCgpO1xuICB9LFxuICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2FsbCkge1xuICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICBzbGVlcCgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93OyAvLyBTdHJpY3RseSBsZXNzIHRoYW4gaWYgd2UgcmVjb21wdXRlZCBjbG9ja05vdy5cbiAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCB0aW1lIC0gY2xvY2subm93KCkgLSBjbG9ja1NrZXcpO1xuICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9jay5ub3coKSwgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VGltZXJ9IGZyb20gXCIuL3RpbWVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgdC5yZXN0YXJ0KGZ1bmN0aW9uKGVsYXBzZWQpIHtcbiAgICB0LnN0b3AoKTtcbiAgICBjYWxsYmFjayhlbGFwc2VkICsgZGVsYXkpO1xuICB9LCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge3RpbWVyLCB0aW1lb3V0fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGVtcHR5T24gPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiaW50ZXJydXB0XCIpO1xudmFyIGVtcHR5VHdlZW4gPSBbXTtcblxuZXhwb3J0IHZhciBDUkVBVEVEID0gMDtcbmV4cG9ydCB2YXIgU0NIRURVTEVEID0gMTtcbmV4cG9ydCB2YXIgU1RBUlRJTkcgPSAyO1xuZXhwb3J0IHZhciBTVEFSVEVEID0gMztcbmV4cG9ydCB2YXIgUlVOTklORyA9IDQ7XG5leHBvcnQgdmFyIEVORElORyA9IDU7XG5leHBvcnQgdmFyIEVOREVEID0gNjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSwgaWQsIGluZGV4LCBncm91cCwgdGltaW5nKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZXMpIG5vZGUuX190cmFuc2l0aW9uID0ge307XG4gIGVsc2UgaWYgKGlkIGluIHNjaGVkdWxlcykgcmV0dXJuO1xuICBjcmVhdGUobm9kZSwgaWQsIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIGluZGV4OiBpbmRleCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIGdyb3VwOiBncm91cCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIG9uOiBlbXB0eU9uLFxuICAgIHR3ZWVuOiBlbXB0eVR3ZWVuLFxuICAgIHRpbWU6IHRpbWluZy50aW1lLFxuICAgIGRlbGF5OiB0aW1pbmcuZGVsYXksXG4gICAgZHVyYXRpb246IHRpbWluZy5kdXJhdGlvbixcbiAgICBlYXNlOiB0aW1pbmcuZWFzZSxcbiAgICB0aW1lcjogbnVsbCxcbiAgICBzdGF0ZTogQ1JFQVRFRFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gQ1JFQVRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgc2NoZWR1bGVkXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gU1RBUlRJTkcpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHN0YXJ0ZWRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSkgdGhyb3cgbmV3IEVycm9yKFwidHJhbnNpdGlvbiBub3QgZm91bmRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKG5vZGUsIGlkLCBzZWxmKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHR3ZWVuO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHNlbGYgdGltZXIgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBjcmVhdGVkLlxuICAvLyBOb3RlIHRoZSBhY3R1YWwgZGVsYXkgaXMgbm90IGtub3duIHVudGlsIHRoZSBmaXJzdCBjYWxsYmFjayFcbiAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gIHNlbGYudGltZXIgPSB0aW1lcihzY2hlZHVsZSwgMCwgc2VsZi50aW1lKTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG5cbiAgICAvLyBJZiB0aGUgZWxhcHNlZCBkZWxheSBpcyBsZXNzIHRoYW4gb3VyIGZpcnN0IHNsZWVwLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBpZiAoc2VsZi5kZWxheSA8PSBlbGFwc2VkKSBzdGFydChlbGFwc2VkIC0gc2VsZi5kZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG4gICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAvLyBJZiB0aGUgc3RhdGUgaXMgbm90IFNDSEVEVUxFRCwgdGhlbiB3ZSBwcmV2aW91c2x5IGVycm9yZWQgb24gc3RhcnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNDSEVEVUxFRCkgcmV0dXJuIHN0b3AoKTtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIG8gPSBzY2hlZHVsZXNbaV07XG4gICAgICBpZiAoby5uYW1lICE9PSBzZWxmLm5hbWUpIGNvbnRpbnVlO1xuXG4gICAgICAvLyBXaGlsZSB0aGlzIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBzdGFydGluZyB0cmFuc2l0aW9uIGR1cmluZyB0aGlzIGZyYW1lLFxuICAgICAgLy8gZGVmZXIgc3RhcnRpbmcgYW4gaW50ZXJydXB0aW5nIHRyYW5zaXRpb24gdW50aWwgdGhhdCB0cmFuc2l0aW9uIGhhcyBhXG4gICAgICAvLyBjaGFuY2UgdG8gdGljayAoYW5kIHBvc3NpYmx5IGVuZCk7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzU0IVxuICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHJldHVybiB0aW1lb3V0KHN0YXJ0KTtcblxuICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxuICAgICAgLy8gRGlzcGF0Y2ggdGhlIGludGVycnVwdCBldmVudC5cbiAgICAgIGlmIChvLnN0YXRlID09PSBSVU5OSU5HKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLiBObyBpbnRlcnJ1cHQgZXZlbnQgaXMgZGlzcGF0Y2hlZFxuICAgICAgLy8gYmVjYXVzZSB0aGUgY2FuY2VsbGVkIHRyYW5zaXRpb25zIG5ldmVyIHN0YXJ0ZWQuIE5vdGUgdGhhdCB0aGlzIGFsc29cbiAgICAgIC8vIHJlbW92ZXMgdGhpcyB0cmFuc2l0aW9uIGZyb20gdGhlIHBlbmRpbmcgbGlzdCFcbiAgICAgIGVsc2UgaWYgKCtpIDwgaWQpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBkMy9kMyMxNTc2LlxuICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgc2NoZWR1bGVkIGJlZm9yZSB0aGUgc3RhcnQgZXZlbnQ7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzE2IVxuICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICB0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFNUQVJURUQpIHtcbiAgICAgICAgc2VsZi5zdGF0ZSA9IFJVTk5JTkc7XG4gICAgICAgIHNlbGYudGltZXIucmVzdGFydCh0aWNrLCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuICAgICAgICB0aWNrKGVsYXBzZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIHN0YXJ0IGV2ZW50LlxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSB0d2VlbiBhcmUgaW5pdGlhbGl6ZWQuXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJUSU5HO1xuICAgIHNlbGYub24uY2FsbChcInN0YXJ0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTVEFSVElORykgcmV0dXJuOyAvLyBpbnRlcnJ1cHRlZFxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVEVEO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXG4gICAgdHdlZW4gPSBuZXcgQXJyYXkobiA9IHNlbGYudHdlZW4ubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBqID0gLTE7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XG4gICAgICAgIHR3ZWVuWysral0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICB0d2Vlbi5sZW5ndGggPSBqICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgIHZhciB0ID0gZWxhcHNlZCA8IHNlbGYuZHVyYXRpb24gPyBzZWxmLmVhc2UuY2FsbChudWxsLCBlbGFwc2VkIC8gc2VsZi5kdXJhdGlvbikgOiAoc2VsZi50aW1lci5yZXN0YXJ0KHN0b3ApLCBzZWxmLnN0YXRlID0gRU5ESU5HLCAxKSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gdHdlZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHR3ZWVuW2ldLmNhbGwobnVsbCwgdCk7XG4gICAgfVxuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIGVuZCBldmVudC5cbiAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XG4gICAgICBzZWxmLm9uLmNhbGwoXCJlbmRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBzZWxmLnN0YXRlID0gRU5ERUQ7XG4gICAgc2VsZi50aW1lci5zdG9wKCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpZF07XG4gICAgZm9yICh2YXIgaSBpbiBzY2hlZHVsZXMpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHtTVEFSVElORywgRU5ESU5HLCBFTkRFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgYWN0aXZlLFxuICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgaTtcblxuICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICBhY3RpdmUgPSBzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HICYmIHNjaGVkdWxlLnN0YXRlIDwgRU5ESU5HO1xuICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XG4gICAgc2NoZWR1bGUudGltZXIuc3RvcCgpO1xuICAgIGlmIChhY3RpdmUpIHNjaGVkdWxlLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2NoZWR1bGUuaW5kZXgsIHNjaGVkdWxlLmdyb3VwKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICB9XG5cbiAgaWYgKGVtcHR5KSBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiB0d2VlblJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gdHdlZW4wID0gdHdlZW47XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xID0gdHdlZW4xLnNsaWNlKCk7XG4gICAgICAgICAgdHdlZW4xLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0d2VlbkZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9ICh0d2VlbjAgPSB0d2Vlbikuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIHQgPSB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfSwgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMVtpXSA9IHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpID09PSBuKSB0d2VlbjEucHVzaCh0KTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgbmFtZSArPSBcIlwiO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciB0d2VlbiA9IGdldCh0aGlzLm5vZGUoKSwgaWQpLnR3ZWVuO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4ubGVuZ3RoLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHQgPSB0d2VlbltpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gdC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsID8gdHdlZW5SZW1vdmUgOiB0d2VlbkZ1bmN0aW9uKShpZCwgbmFtZSwgdmFsdWUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR3ZWVuVmFsdWUodHJhbnNpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdHJhbnNpdGlvbi5faWQ7XG5cbiAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCk7XG4gICAgKHNjaGVkdWxlLnZhbHVlIHx8IChzY2hlZHVsZS52YWx1ZSA9IHt9KSlbbmFtZV0gPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBnZXQobm9kZSwgaWQpLnZhbHVlW25hbWVdO1xuICB9O1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJnYiwgaW50ZXJwb2xhdGVTdHJpbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBjO1xuICByZXR1cm4gKHR5cGVvZiBiID09PSBcIm51bWJlclwiID8gaW50ZXJwb2xhdGVOdW1iZXJcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gaW50ZXJwb2xhdGVSZ2JcbiAgICAgIDogKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKVxuICAgICAgOiBpbnRlcnBvbGF0ZVN0cmluZykoYSwgYik7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0ciBmcm9tIFwiLi9hdHRyXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyVHdlZW4gZnJvbSBcIi4vYXR0clR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kZWxheSBmcm9tIFwiLi9kZWxheVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZHVyYXRpb24gZnJvbSBcIi4vZHVyYXRpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2Vhc2UgZnJvbSBcIi4vZWFzZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlclwiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHRcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW5cIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHRyYW5zaXRpb25fZmlsdGVyLFxuICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbl90cmFuc2l0aW9uLFxuICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9wcm90b3R5cGUuZWFjaCxcbiAgb246IHRyYW5zaXRpb25fb24sXG4gIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgYXR0clR3ZWVuOiB0cmFuc2l0aW9uX2F0dHJUd2VlbixcbiAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgdGV4dDogdHJhbnNpdGlvbl90ZXh0LFxuICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgZGVsYXk6IHRyYW5zaXRpb25fZGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2Vcbn07XG4iLCJpbXBvcnQge3NlbGVjdG9yfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgICBzY2hlZHVsZShzdWJncm91cFtpXSwgbmFtZSwgaWQsIGksIHN1Ymdyb3VwLCBnZXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdG9yQWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPSBjaGlsZHJlbltrXSkge1xuICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7bWF0Y2hlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0cmFuc2l0aW9uKSB7XG4gIGlmICh0cmFuc2l0aW9uLl9pZCAhPT0gdGhpcy5faWQpIHRocm93IG5ldyBFcnJvcjtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gdHJhbnNpdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICBpZDEgPSBuZXdJZCgpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHZhciBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkMCk7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkMSwgaSwgZ3JvdXAsIHtcbiAgICAgICAgICB0aW1lOiBpbmhlcml0LnRpbWUgKyBpbmhlcml0LmRlbGF5ICsgaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBlYXNlOiBpbmhlcml0LmVhc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQxKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIHN0YXJ0KG5hbWUpIHtcbiAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiAhdCB8fCB0ID09PSBcInN0YXJ0XCI7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgb24wLCBvbjEsIHNpdCA9IHN0YXJ0KG5hbWUpID8gaW5pdCA6IHNldDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNpdCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjApIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24obmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMlxuICAgICAgPyBnZXQodGhpcy5ub2RlKCksIGlkKS5vbi5vbihuYW1lKVxuICAgICAgOiB0aGlzLmVhY2gob25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZVwiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIHZhbHVlMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICB2YWx1ZTEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCwgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKSwgaSA9IGZ1bGxuYW1lID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHRoaXMuYXR0clR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKShmdWxsbmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcImF0dHIuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHZhbHVlID09IG51bGwgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKShmdWxsbmFtZSlcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKGZ1bGxuYW1lLCBpLCB2YWx1ZSArIFwiXCIpKTtcbn1cbiIsImltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBpICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCBpKHQpKTtcbiAgICB9O1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2VlbihuYW1lLCB2YWx1ZSkge1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBpICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIGkodCkpO1xuICAgIH07XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGtleSA9IFwiYXR0ci5cIiArIG5hbWU7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIChmdWxsbmFtZS5sb2NhbCA/IGF0dHJUd2Vlbk5TIDogYXR0clR3ZWVuKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtzdHlsZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2VlblwiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlXCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUsIGludGVycG9sYXRlKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgdmFsdWUxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZUVuZChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gc3R5bGUodGhpcywgbmFtZSk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgdmFsdWUxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVSZW1vdmUobmFtZSwgaSkpXG4gICAgICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgc3R5bGVSZW1vdmVFbmQobmFtZSkpXG4gICAgICA6IHRoaXMuc3R5bGVUd2VlbihuYW1lLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICAgICAgOiBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlICsgXCJcIiksIHByaW9yaXR5KTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBub2RlID0gdGhpcywgaSA9IHZhbHVlLmFwcGx5KG5vZGUsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGkgJiYgZnVuY3Rpb24odCkge1xuICAgICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBpKHQpLCBwcmlvcml0eSk7XG4gICAgfTtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTEgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyB0ZXh0RnVuY3Rpb24odHdlZW5WYWx1ZSh0aGlzLCBcInRleHRcIiwgdmFsdWUpKVxuICAgICAgOiB0ZXh0Q29uc3RhbnQodmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCIpKTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZUZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5fX3RyYW5zaXRpb24pIGlmICgraSAhPT0gaWQpIHJldHVybjtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vbihcImVuZC5yZW1vdmVcIiwgcmVtb3ZlRnVuY3Rpb24odGhpcy5faWQpKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBkZWxheUZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVsYXlDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkZWxheUZ1bmN0aW9uXG4gICAgICAgICAgOiBkZWxheUNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kZWxheTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGR1cmF0aW9uRnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGR1cmF0aW9uQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkdXJhdGlvbkZ1bmN0aW9uXG4gICAgICAgICAgOiBkdXJhdGlvbkNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kdXJhdGlvbjtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5lYXNlO1xufVxuIiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICBoYWxmUGkgPSBwaSAvIDI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbih0KSB7XG4gIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5PdXQodCkge1xuICByZXR1cm4gTWF0aC5zaW4odCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbk91dCh0KSB7XG4gIHJldHVybiAoMSAtIE1hdGguY29zKHBpICogdCkpIC8gMjtcbn1cbiIsInZhciB0YXUgPSAyICogTWF0aC5QSSxcbiAgICBhbXBsaXR1ZGUgPSAxLFxuICAgIHBlcmlvZCA9IDAuMztcblxuZXhwb3J0IHZhciBlbGFzdGljSW4gPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luKHQpIHtcbiAgICByZXR1cm4gYSAqIE1hdGgucG93KDIsIDEwICogLS10KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNJbi5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbi5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbjtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNPdXQodCkge1xuICAgIHJldHVybiAxIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqICh0ID0gK3QpKSAqIE1hdGguc2luKCh0ICsgcykgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNPdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY091dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ID0gdCAqIDIgLSAxKSA8IDBcbiAgICAgICAgPyBhICogTWF0aC5wb3coMiwgMTAgKiB0KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKVxuICAgICAgICA6IDIgLSBhICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigocyArIHQpIC8gcCkpIC8gMjtcbiAgfVxuXG4gIGVsYXN0aWNJbk91dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbk91dC5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbk91dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuLi90cmFuc2l0aW9uL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUgZnJvbSBcIi4uL3RyYW5zaXRpb24vc2NoZWR1bGVcIjtcbmltcG9ydCB7ZWFzZUN1YmljSW5PdXR9IGZyb20gXCJkMy1lYXNlXCI7XG5pbXBvcnQge25vd30gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBkZWZhdWx0VGltaW5nID0ge1xuICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDI1MCxcbiAgZWFzZTogZWFzZUN1YmljSW5PdXRcbn07XG5cbmZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgdmFyIHRpbWluZztcbiAgd2hpbGUgKCEodGltaW5nID0gbm9kZS5fX3RyYW5zaXRpb24pIHx8ICEodGltaW5nID0gdGltaW5nW2lkXSkpIHtcbiAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRUaW1pbmcudGltZSA9IG5vdygpLCBkZWZhdWx0VGltaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGltaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBpZCxcbiAgICAgIHRpbWluZztcblxuICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaSwgZ3JvdXAsIHRpbWluZyB8fCBpbmhlcml0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW4odCkge1xuICByZXR1cm4gdCAqIHQgKiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0ICogdCA6ICh0IC09IDIpICogdCAqIHQgKyAyKSAvIDI7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oKSB7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnRlcnJ1cHQgZnJvbSBcIi4vaW50ZXJydXB0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcbiIsImltcG9ydCBpbnRlcnJ1cHQgZnJvbSBcIi4uL2ludGVycnVwdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtkcmFnRGlzYWJsZSwgZHJhZ0VuYWJsZX0gZnJvbSBcImQzLWRyYWdcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGV9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtjdXN0b21FdmVudCwgZXZlbnQsIG1vdXNlLCBzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7aW50ZXJydXB0fSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgQnJ1c2hFdmVudCBmcm9tIFwiLi9ldmVudFwiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50XCI7XG5cbnZhciBNT0RFX0RSQUcgPSB7bmFtZTogXCJkcmFnXCJ9LFxuICAgIE1PREVfU1BBQ0UgPSB7bmFtZTogXCJzcGFjZVwifSxcbiAgICBNT0RFX0hBTkRMRSA9IHtuYW1lOiBcImhhbmRsZVwifSxcbiAgICBNT0RFX0NFTlRFUiA9IHtuYW1lOiBcImNlbnRlclwifTtcblxudmFyIFggPSB7XG4gIG5hbWU6IFwieFwiLFxuICBoYW5kbGVzOiBbXCJlXCIsIFwid1wiXS5tYXAodHlwZSksXG4gIGlucHV0OiBmdW5jdGlvbih4LCBlKSB7IHJldHVybiB4ICYmIFtbeFswXSwgZVswXVsxXV0sIFt4WzFdLCBlWzFdWzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVswXSwgeHlbMV1bMF1dOyB9XG59O1xuXG52YXIgWSA9IHtcbiAgbmFtZTogXCJ5XCIsXG4gIGhhbmRsZXM6IFtcIm5cIiwgXCJzXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHksIGUpIHsgcmV0dXJuIHkgJiYgW1tlWzBdWzBdLCB5WzBdXSwgW2VbMV1bMF0sIHlbMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzFdLCB4eVsxXVsxXV07IH1cbn07XG5cbnZhciBYWSA9IHtcbiAgbmFtZTogXCJ4eVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwiZVwiLCBcInNcIiwgXCJ3XCIsIFwibndcIiwgXCJuZVwiLCBcInNlXCIsIFwic3dcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5OyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eTsgfVxufTtcblxudmFyIGN1cnNvcnMgPSB7XG4gIG92ZXJsYXk6IFwiY3Jvc3NoYWlyXCIsXG4gIHNlbGVjdGlvbjogXCJtb3ZlXCIsXG4gIG46IFwibnMtcmVzaXplXCIsXG4gIGU6IFwiZXctcmVzaXplXCIsXG4gIHM6IFwibnMtcmVzaXplXCIsXG4gIHc6IFwiZXctcmVzaXplXCIsXG4gIG53OiBcIm53c2UtcmVzaXplXCIsXG4gIG5lOiBcIm5lc3ctcmVzaXplXCIsXG4gIHNlOiBcIm53c2UtcmVzaXplXCIsXG4gIHN3OiBcIm5lc3ctcmVzaXplXCJcbn07XG5cbnZhciBmbGlwWCA9IHtcbiAgZTogXCJ3XCIsXG4gIHc6IFwiZVwiLFxuICBudzogXCJuZVwiLFxuICBuZTogXCJud1wiLFxuICBzZTogXCJzd1wiLFxuICBzdzogXCJzZVwiXG59O1xuXG52YXIgZmxpcFkgPSB7XG4gIG46IFwic1wiLFxuICBzOiBcIm5cIixcbiAgbnc6IFwic3dcIixcbiAgbmU6IFwic2VcIixcbiAgc2U6IFwibmVcIixcbiAgc3c6IFwibndcIlxufTtcblxudmFyIHNpZ25zWCA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IG51bGwsXG4gIGU6ICsxLFxuICBzOiBudWxsLFxuICB3OiAtMSxcbiAgbnc6IC0xLFxuICBuZTogKzEsXG4gIHNlOiArMSxcbiAgc3c6IC0xXG59O1xuXG52YXIgc2lnbnNZID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogLTEsXG4gIGU6IG51bGwsXG4gIHM6ICsxLFxuICB3OiBudWxsLFxuICBudzogLTEsXG4gIG5lOiAtMSxcbiAgc2U6ICsxLFxuICBzdzogKzFcbn07XG5cbmZ1bmN0aW9uIHR5cGUodCkge1xuICByZXR1cm4ge3R5cGU6IHR9O1xufVxuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoKSB7XG4gIHJldHVybiAhZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RXh0ZW50KCkge1xuICB2YXIgc3ZnID0gdGhpcy5vd25lclNWR0VsZW1lbnQgfHwgdGhpcztcbiAgcmV0dXJuIFtbMCwgMF0sIFtzdmcud2lkdGguYmFzZVZhbC52YWx1ZSwgc3ZnLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG59XG5cbi8vIExpa2UgZDMubG9jYWwsIGJ1dCB3aXRoIHRoZSBuYW1lIOKAnF9fYnJ1c2jigJ0gcmF0aGVyIHRoYW4gYXV0by1nZW5lcmF0ZWQuXG5mdW5jdGlvbiBsb2NhbChub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX2JydXNoKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICByZXR1cm4gbm9kZS5fX2JydXNoO1xufVxuXG5mdW5jdGlvbiBlbXB0eShleHRlbnQpIHtcbiAgcmV0dXJuIGV4dGVudFswXVswXSA9PT0gZXh0ZW50WzFdWzBdXG4gICAgICB8fCBleHRlbnRbMF1bMV0gPT09IGV4dGVudFsxXVsxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoU2VsZWN0aW9uKG5vZGUpIHtcbiAgdmFyIHN0YXRlID0gbm9kZS5fX2JydXNoO1xuICByZXR1cm4gc3RhdGUgPyBzdGF0ZS5kaW0ub3V0cHV0KHN0YXRlLnNlbGVjdGlvbikgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hYKCkge1xuICByZXR1cm4gYnJ1c2goWCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFkoKSB7XG4gIHJldHVybiBicnVzaChZKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBicnVzaChYWSk7XG59XG5cbmZ1bmN0aW9uIGJydXNoKGRpbSkge1xuICB2YXIgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChicnVzaCwgXCJzdGFydFwiLCBcImJydXNoXCIsIFwiZW5kXCIpLFxuICAgICAgaGFuZGxlU2l6ZSA9IDYsXG4gICAgICB0b3VjaGVuZGluZztcblxuICBmdW5jdGlvbiBicnVzaChncm91cCkge1xuICAgIHZhciBvdmVybGF5ID0gZ3JvdXBcbiAgICAgICAgLnByb3BlcnR5KFwiX19icnVzaFwiLCBpbml0aWFsaXplKVxuICAgICAgLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAuZGF0YShbdHlwZShcIm92ZXJsYXlcIildKTtcblxuICAgIG92ZXJsYXkuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJvdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KVxuICAgICAgLm1lcmdlKG92ZXJsYXkpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBleHRlbnQgPSBsb2NhbCh0aGlzKS5leHRlbnQ7XG4gICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleHRlbnRbMF1bMV0pXG4gICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV0pO1xuICAgICAgICB9KTtcblxuICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgIC5kYXRhKFt0eXBlKFwic2VsZWN0aW9uXCIpXSlcbiAgICAgIC5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInNlbGVjdGlvblwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzc3N1wiKVxuICAgICAgICAuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAwLjMpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiI2ZmZlwiKVxuICAgICAgICAuYXR0cihcInNoYXBlLXJlbmRlcmluZ1wiLCBcImNyaXNwRWRnZXNcIik7XG5cbiAgICB2YXIgaGFuZGxlID0gZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgLmRhdGEoZGltLmhhbmRsZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZTsgfSk7XG5cbiAgICBoYW5kbGUuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgaGFuZGxlLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwiaGFuZGxlIGhhbmRsZS0tXCIgKyBkLnR5cGU7IH0pXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGN1cnNvcnNbZC50eXBlXTsgfSk7XG5cbiAgICBncm91cFxuICAgICAgICAuZWFjaChyZWRyYXcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi5icnVzaCB0b3VjaHN0YXJ0LmJydXNoXCIsIHN0YXJ0ZWQpO1xuICB9XG5cbiAgYnJ1c2gubW92ZSA9IGZ1bmN0aW9uKGdyb3VwLCBzZWxlY3Rpb24pIHtcbiAgICBpZiAoZ3JvdXAuc2VsZWN0aW9uKSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5vbihcInN0YXJ0LmJydXNoXCIsIGZ1bmN0aW9uKCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuYmVmb3Jlc3RhcnQoKS5zdGFydCgpOyB9KVxuICAgICAgICAgIC5vbihcImludGVycnVwdC5icnVzaCBlbmQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5lbmQoKTsgfSlcbiAgICAgICAgICAudHdlZW4oXCJicnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjAgPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGUoc2VsZWN0aW9uMCwgc2VsZWN0aW9uMSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHR3ZWVuKHQpIHtcbiAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gdCA9PT0gMSAmJiBlbXB0eShzZWxlY3Rpb24xKSA/IG51bGwgOiBpKHQpO1xuICAgICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgICAgZW1pdC5icnVzaCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uMCAmJiBzZWxlY3Rpb24xID8gdHdlZW4gOiB0d2VlbigxKTtcbiAgICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjEgPSBkaW0uaW5wdXQodHlwZW9mIHNlbGVjdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0aW9uLmFwcGx5KHRoYXQsIGFyZ3MpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3MpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICAgICAgICAgIGludGVycnVwdCh0aGF0KTtcbiAgICAgICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjEgPT0gbnVsbCB8fCBlbXB0eShzZWxlY3Rpb24xKSA/IG51bGwgOiBzZWxlY3Rpb24xO1xuICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICBlbWl0LnN0YXJ0KCkuYnJ1c2goKS5lbmQoKTtcbiAgICAgICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVkcmF3KCkge1xuICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGlzKSxcbiAgICAgICAgc2VsZWN0aW9uID0gbG9jYWwodGhpcykuc2VsZWN0aW9uO1xuXG4gICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBzZWxlY3Rpb25bMF1bMV0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdKTtcblxuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlW2QudHlwZS5sZW5ndGggLSAxXSA9PT0gXCJlXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVswXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbMF0gPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMV0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJuXCIgfHwgZC50eXBlID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJlXCIgfHwgZC50eXBlID09PSBcIndcIiA/IHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb24sLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXR0ZXIodGhhdCwgYXJncykge1xuICAgIHJldHVybiB0aGF0Ll9fYnJ1c2guZW1pdHRlciB8fCBuZXcgRW1pdHRlcih0aGF0LCBhcmdzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEVtaXR0ZXIodGhhdCwgYXJncykge1xuICAgIHRoaXMudGhhdCA9IHRoYXQ7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLnN0YXRlID0gdGhhdC5fX2JydXNoO1xuICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgfVxuXG4gIEVtaXR0ZXIucHJvdG90eXBlID0ge1xuICAgIGJlZm9yZXN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgrK3RoaXMuYWN0aXZlID09PSAxKSB0aGlzLnN0YXRlLmVtaXR0ZXIgPSB0aGlzLCB0aGlzLnN0YXJ0aW5nID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuc3RhcnRpbmcpIHRoaXMuc3RhcnRpbmcgPSBmYWxzZSwgdGhpcy5lbWl0KFwic3RhcnRcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGJydXNoOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZW1pdChcImJydXNoXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIGRlbGV0ZSB0aGlzLnN0YXRlLmVtaXR0ZXIsIHRoaXMuZW1pdChcImVuZFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24odHlwZSkge1xuICAgICAgY3VzdG9tRXZlbnQobmV3IEJydXNoRXZlbnQoYnJ1c2gsIHR5cGUsIGRpbS5vdXRwdXQodGhpcy5zdGF0ZS5zZWxlY3Rpb24pKSwgbGlzdGVuZXJzLmFwcGx5LCBsaXN0ZW5lcnMsIFt0eXBlLCB0aGlzLnRoYXQsIHRoaXMuYXJnc10pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBzdGFydGVkKCkge1xuICAgIGlmIChldmVudC50b3VjaGVzKSB7IGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPCBldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuIG5vZXZlbnQoKTsgfVxuICAgIGVsc2UgaWYgKHRvdWNoZW5kaW5nKSByZXR1cm47XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICB0eXBlID0gZXZlbnQudGFyZ2V0Ll9fZGF0YV9fLnR5cGUsXG4gICAgICAgIG1vZGUgPSAoZXZlbnQubWV0YUtleSA/IHR5cGUgPSBcIm92ZXJsYXlcIiA6IHR5cGUpID09PSBcInNlbGVjdGlvblwiID8gTU9ERV9EUkFHIDogKGV2ZW50LmFsdEtleSA/IE1PREVfQ0VOVEVSIDogTU9ERV9IQU5ETEUpLFxuICAgICAgICBzaWduWCA9IGRpbSA9PT0gWSA/IG51bGwgOiBzaWduc1hbdHlwZV0sXG4gICAgICAgIHNpZ25ZID0gZGltID09PSBYID8gbnVsbCA6IHNpZ25zWVt0eXBlXSxcbiAgICAgICAgc3RhdGUgPSBsb2NhbCh0aGF0KSxcbiAgICAgICAgZXh0ZW50ID0gc3RhdGUuZXh0ZW50LFxuICAgICAgICBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgIFcgPSBleHRlbnRbMF1bMF0sIHcwLCB3MSxcbiAgICAgICAgTiA9IGV4dGVudFswXVsxXSwgbjAsIG4xLFxuICAgICAgICBFID0gZXh0ZW50WzFdWzBdLCBlMCwgZTEsXG4gICAgICAgIFMgPSBleHRlbnRbMV1bMV0sIHMwLCBzMSxcbiAgICAgICAgZHgsXG4gICAgICAgIGR5LFxuICAgICAgICBtb3ZpbmcsXG4gICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblkgJiYgZXZlbnQuc2hpZnRLZXksXG4gICAgICAgIGxvY2tYLFxuICAgICAgICBsb2NrWSxcbiAgICAgICAgcG9pbnQwID0gbW91c2UodGhhdCksXG4gICAgICAgIHBvaW50ID0gcG9pbnQwLFxuICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICBpZiAodHlwZSA9PT0gXCJvdmVybGF5XCIpIHtcbiAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiA9IFtcbiAgICAgICAgW3cwID0gZGltID09PSBZID8gVyA6IHBvaW50MFswXSwgbjAgPSBkaW0gPT09IFggPyBOIDogcG9pbnQwWzFdXSxcbiAgICAgICAgW2UwID0gZGltID09PSBZID8gRSA6IHcwLCBzMCA9IGRpbSA9PT0gWCA/IFMgOiBuMF1cbiAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHcwID0gc2VsZWN0aW9uWzBdWzBdO1xuICAgICAgbjAgPSBzZWxlY3Rpb25bMF1bMV07XG4gICAgICBlMCA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIHMwID0gc2VsZWN0aW9uWzFdWzFdO1xuICAgIH1cblxuICAgIHcxID0gdzA7XG4gICAgbjEgPSBuMDtcbiAgICBlMSA9IGUwO1xuICAgIHMxID0gczA7XG5cbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhhdClcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIik7XG5cbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuXG4gICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLm9uKFwidG91Y2htb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcInRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIGVuZGVkLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBzZWxlY3QoZXZlbnQudmlldylcbiAgICAgICAgICAub24oXCJrZXlkb3duLmJydXNoXCIsIGtleWRvd25lZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJrZXl1cC5icnVzaFwiLCBrZXl1cHBlZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwibW91c2V1cC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XG5cbiAgICAgIGRyYWdEaXNhYmxlKGV2ZW50LnZpZXcpO1xuICAgIH1cblxuICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgZW1pdC5zdGFydCgpO1xuXG4gICAgZnVuY3Rpb24gbW92ZWQoKSB7XG4gICAgICB2YXIgcG9pbnQxID0gbW91c2UodGhhdCk7XG4gICAgICBpZiAoc2hpZnRpbmcgJiYgIWxvY2tYICYmICFsb2NrWSkge1xuICAgICAgICBpZiAoTWF0aC5hYnMocG9pbnQxWzBdIC0gcG9pbnRbMF0pID4gTWF0aC5hYnMocG9pbnQxWzFdIC0gcG9pbnRbMV0pKSBsb2NrWSA9IHRydWU7XG4gICAgICAgIGVsc2UgbG9ja1ggPSB0cnVlO1xuICAgICAgfVxuICAgICAgcG9pbnQgPSBwb2ludDE7XG4gICAgICBtb3ZpbmcgPSB0cnVlO1xuICAgICAgbm9ldmVudCgpO1xuICAgICAgbW92ZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdmUoKSB7XG4gICAgICB2YXIgdDtcblxuICAgICAgZHggPSBwb2ludFswXSAtIHBvaW50MFswXTtcbiAgICAgIGR5ID0gcG9pbnRbMV0gLSBwb2ludDBbMV07XG5cbiAgICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgICBjYXNlIE1PREVfU1BBQ0U6XG4gICAgICAgIGNhc2UgTU9ERV9EUkFHOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSBkeCA9IE1hdGgubWF4KFcgLSB3MCwgTWF0aC5taW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICBpZiAoc2lnblkpIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gczAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9IQU5ETEU6IHtcbiAgICAgICAgICBpZiAoc2lnblggPCAwKSBkeCA9IE1hdGgubWF4KFcgLSB3MCwgTWF0aC5taW4oRSAtIHcwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTA7XG4gICAgICAgICAgZWxzZSBpZiAoc2lnblggPiAwKSBkeCA9IE1hdGgubWF4KFcgLSBlMCwgTWF0aC5taW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwLCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgZHkgPSBNYXRoLm1heChOIC0gbjAsIE1hdGgubWluKFMgLSBuMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwO1xuICAgICAgICAgIGVsc2UgaWYgKHNpZ25ZID4gMCkgZHkgPSBNYXRoLm1heChOIC0gczAsIE1hdGgubWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9DRU5URVI6IHtcbiAgICAgICAgICBpZiAoc2lnblgpIHcxID0gTWF0aC5tYXgoVywgTWF0aC5taW4oRSwgdzAgLSBkeCAqIHNpZ25YKSksIGUxID0gTWF0aC5tYXgoVywgTWF0aC5taW4oRSwgZTAgKyBkeCAqIHNpZ25YKSk7XG4gICAgICAgICAgaWYgKHNpZ25ZKSBuMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIG4wIC0gZHkgKiBzaWduWSkpLCBzMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIHMwICsgZHkgKiBzaWduWSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlMSA8IHcxKSB7XG4gICAgICAgIHNpZ25YICo9IC0xO1xuICAgICAgICB0ID0gdzAsIHcwID0gZTAsIGUwID0gdDtcbiAgICAgICAgdCA9IHcxLCB3MSA9IGUxLCBlMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBYKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFhbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHMxIDwgbjEpIHtcbiAgICAgICAgc2lnblkgKj0gLTE7XG4gICAgICAgIHQgPSBuMCwgbjAgPSBzMCwgczAgPSB0O1xuICAgICAgICB0ID0gbjEsIG4xID0gczEsIHMxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFkpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWVt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSFcbiAgICAgIGlmIChsb2NrWCkgdzEgPSBzZWxlY3Rpb25bMF1bMF0sIGUxID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgaWYgKGxvY2tZKSBuMSA9IHNlbGVjdGlvblswXVsxXSwgczEgPSBzZWxlY3Rpb25bMV1bMV07XG5cbiAgICAgIGlmIChzZWxlY3Rpb25bMF1bMF0gIT09IHcxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzBdWzFdICE9PSBuMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVswXSAhPT0gZTFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMV0gIT09IHMxKSB7XG4gICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IFtbdzEsIG4xXSwgW2UxLCBzMV1dO1xuICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgZW1pdC5icnVzaCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRvdWNoZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICAgICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIDUwMCk7IC8vIEdob3N0IGNsaWNrcyBhcmUgZGVsYXllZCFcbiAgICAgICAgZ3JvdXAub24oXCJ0b3VjaG1vdmUuYnJ1c2ggdG91Y2hlbmQuYnJ1c2ggdG91Y2hjYW5jZWwuYnJ1c2hcIiwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnRW5hYmxlKGV2ZW50LnZpZXcsIG1vdmluZyk7XG4gICAgICAgIHZpZXcub24oXCJrZXlkb3duLmJydXNoIGtleXVwLmJydXNoIG1vdXNlbW92ZS5icnVzaCBtb3VzZXVwLmJydXNoXCIsIG51bGwpO1xuICAgICAgfVxuICAgICAgZ3JvdXAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpO1xuICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSk7XG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSAob24gc3RhcnQpIVxuICAgICAgaWYgKGVtcHR5KHNlbGVjdGlvbikpIHN0YXRlLnNlbGVjdGlvbiA9IG51bGwsIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgZW1pdC5lbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXlkb3duZWQoKSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0U7IHRha2VzIHByaW9yaXR5IG92ZXIgQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFIHx8IG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxIC0gZHg7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MSAtIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMSAtIGR5OyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjEgLSBkeTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX1NQQUNFO1xuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogcmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9ldmVudCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleXVwcGVkKCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBpZiAoc2hpZnRpbmcpIHtcbiAgICAgICAgICAgIGxvY2tYID0gbG9ja1kgPSBzaGlmdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfU1BBQ0UpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5hbHRLZXkpIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9fYnJ1c2ggfHwge3NlbGVjdGlvbjogbnVsbH07XG4gICAgc3RhdGUuZXh0ZW50ID0gZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgc3RhdGUuZGltID0gZGltO1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIGJydXNoLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dKSwgYnJ1c2gpIDogZXh0ZW50O1xuICB9O1xuXG4gIGJydXNoLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGJydXNoKSA6IGZpbHRlcjtcbiAgfTtcblxuICBicnVzaC5oYW5kbGVTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGhhbmRsZVNpemUgPSArXywgYnJ1c2gpIDogaGFuZGxlU2l6ZTtcbiAgfTtcblxuICBicnVzaC5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBicnVzaCA6IHZhbHVlO1xuICB9O1xuXG4gIHJldHVybiBicnVzaDtcbn1cbiIsImltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgbm9ldmVudCBmcm9tIFwiLi9ub2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZpZXcpIHtcbiAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICBpZiAoXCJvbnNlbGVjdHN0YXJ0XCIgaW4gcm9vdCkge1xuICAgIHNlbGVjdGlvbi5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5fX25vc2VsZWN0ID0gcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0O1xuICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IFwibm9uZVwiO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5ZXNkcmFnKHZpZXcsIG5vY2xpY2spIHtcbiAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG51bGwpO1xuICBpZiAobm9jbGljaykge1xuICAgIHNlbGVjdGlvbi5vbihcImNsaWNrLmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBudWxsKTsgfSwgMCk7XG4gIH1cbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG51bGwpO1xuICB9IGVsc2Uge1xuICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IHJvb3QuX19ub3NlbGVjdDtcbiAgICBkZWxldGUgcm9vdC5fX25vc2VsZWN0O1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0YXJnZXQsIHR5cGUsIHNlbGVjdGlvbikge1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5zZWxlY3Rpb24gPSBzZWxlY3Rpb247XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5pbXBvcnQge21lYW4sIHF1YW50aWxlLCBkZXZpYXRpb259IGZyb20gXCJkMy1hcnJheVwiO1xuXG5cbi8vIHJlZmVyZW5jZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvS2VybmVsXyhzdGF0aXN0aWNzKVxuLy8gcmVmZXJlbmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9LZXJuZWxfZGVuc2l0eV9lc3RpbWF0aW9uXG5leHBvcnQgY29uc3Qga2VybmVsID0ge1xuICAgIGVwYW5lY2huaWtvdjogZnVuY3Rpb24odSl7cmV0dXJuIE1hdGguYWJzKHUpIDw9IDE/ICgzLzQpKigxLXUqdSk6MH0sXG4gICAgZ2F1c3NpYW46IGZ1bmN0aW9uKHUpe3JldHVybiAxL01hdGguc3FydCgyKk1hdGguUEkpKk1hdGguZXhwKC0uNSp1KnUpfVxufTtcblxuLy8gcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vamFzb25kYXZpZXMvc2NpZW5jZS5qcy9ibG9iL21hc3Rlci9zcmMvc3RhdHMvYmFuZHdpZHRoLmpzXG5leHBvcnQgY29uc3Qga2VybmVsQmFuZHdpZHRoID0ge1xuICAgIC8vIEJhbmR3aWR0aCBzZWxlY3RvcnMgZm9yIEdhdXNzaWFuIGtlcm5lbHMuXG4gICAgbnJkOiBmdW5jdGlvbih4KSB7XG4gICAgICAgIGxldCBpcXIgPSBxdWFudGlsZSh4LCAwLjc1KSAtIHF1YW50aWxlKHgsIDAuMjUpO1xuICAgICAgICBsZXQgaCA9IGlxciAvIDEuMzQ7XG4gICAgICAgIHJldHVybiAxLjA2ICogTWF0aC5taW4oZGV2aWF0aW9uKHgpLCBoKSAqIE1hdGgucG93KHgubGVuZ3RoLCAtMS81KTtcbiAgICB9XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ga2VybmVsOiB0aGUga2VybmVsIGZ1bmN0aW9uLCBzdWNoIGFzIGdhdXNzaWFuXG4gKiBAcGFyYW0gWDogbGlzdCBvZiBiaW5zXG4gKiBAcGFyYW0gaDogdGhlIGJhbmR3aWR0aCwgZWl0aGVyIGEgbnVtZXJpY2FsIHZhbHVlIGdpdmVuIGJ5IHRoZSB1c2VyIG9yIGNhbGN1bGF0ZWQgdXNpbmcgdGhlIGZ1bmN0aW9uIGtlcm5lbEJhbmR3aWR0aFxuICogQHJldHVybnMge0Z1bmN0aW9ufTogdGhlIGtlcm5lbCBkZW5zaXR5IGVzdGltYXRvclxuICovXG5leHBvcnQgZnVuY3Rpb24ga2VybmVsRGVuc2l0eUVzdGltYXRvcihrZXJuZWwsIFgsIGgpe1xuICAgIHJldHVybiBmdW5jdGlvbihWKSB7XG4gICAgICAgIC8vIFggaXMgdGhlIGJpbnNcbiAgICAgICAgcmV0dXJuIFgubWFwKCh4KSA9PiBbeCwgbWVhbihWLCAodikgPT4ga2VybmVsKCh4LXYpL2gpKS9oXSk7XG4gICAgfVxufVxuXG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgbSA9IG4sXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBpZiAobSkgcmV0dXJuIHN1bSAvIG07XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5pbXBvcnQge3NlbGVjdCwgZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHJhbnNpdGlvbn0gZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sdGlwIHtcbiAgICBjb25zdHJ1Y3RvcihpZCwgdmVyYm9zZT1mYWxzZSwgb2Zmc2V0WD0zMCwgb2Zmc2V0WT0tNDAsIGR1cmF0aW9uPTEwMCl7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy52ZXJib3NlID0gdmVyYm9zZTtcbiAgICAgICAgdGhpcy5vZmZzZXRYID0gb2Zmc2V0WDtcbiAgICAgICAgdGhpcy5vZmZzZXRZID0gb2Zmc2V0WTtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgIH1cblxuICAgIHNob3coaW5mbykge1xuICAgICAgICBpZih0aGlzLnZlcmJvc2UpIGNvbnNvbGUubG9nKGluZm8pO1xuICAgICAgICB0aGlzLmVkaXQoaW5mbyk7XG4gICAgICAgIHRoaXMubW92ZSgpO1xuICAgICAgICBzZWxlY3QoXCIjXCIgKyB0aGlzLmlkKVxuICAgICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcImlubGluZVwiKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKHRoaXMuZHVyYXRpb24pXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDEuMClcbiAgICB9XG5cbiAgICBoaWRlKCkge1xuICAgICAgICBzZWxlY3QoXCIjXCIgKyB0aGlzLmlkKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKHRoaXMuZHVyYXRpb24pXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDAuMCk7XG4gICAgICAgIHRoaXMuZWRpdChcIlwiKTtcbiAgICB9XG5cbiAgICBtb3ZlKHggPSBldmVudC5wYWdlWCwgeSA9IGV2ZW50LnBhZ2VZKSB7XG4gICAgICAgIGlmICh0aGlzLnZlcmJvc2UpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coeSk7XG4gICAgICAgIH1cbiAgICAgICAgeCA9IHggKyB0aGlzLm9mZnNldFg7IC8vIFRPRE86IGdldCByaWQgb2YgdGhlIGhhcmQtY29kZWQgYWRqdXN0bWVudFxuICAgICAgICB5ID0gKHkgKyB0aGlzLm9mZnNldFkpPDA/MTA6eSt0aGlzLm9mZnNldFk7XG4gICAgICAgIGNvbnN0IHQgPSBzZWxlY3QoJyMnK3RoaXMuaWQpXG4gICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIGAke3h9cHhgKVxuICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIGAke3l9cHhgKVxuICAgIH1cblxuICAgIGVkaXQoaW5mbykge1xuICAgICAgICBzZWxlY3QoXCIjXCIgKyB0aGlzLmlkKVxuICAgICAgICAgICAgLmh0bWwoaW5mbylcbiAgICB9XG59XG5cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbi8qKlxuICogQ3JlYXRlIGEgdG9vbGJhclxuICogVGhpcyBjbGFzcyB1c2VzIGEgbG90IG9mIGpRdWVyeSBmb3IgZG9tIGVsZW1lbnQgbWFuaXB1bGF0aW9uXG4gKi9cblxuaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7cGFyc2VDc3NTdHlsZXN9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2xiYXIge1xuICAgIGNvbnN0cnVjdG9yKGRvbUlkLCB0b29sdGlwPXVuZGVmaW5lZCwgdmVydGljYWw9ZmFsc2Upe1xuICAgICAgICAkKGAjJHtkb21JZH1gKS5zaG93KCk7IC8vIGlmIGhpZGRlblxuXG4gICAgICAgIC8vIGFkZCBhIG5ldyBiYXJncm91cCBkaXYgdG8gZG9tSUQgd2l0aCBib290c3RyYXAgYnV0dG9uIGNsYXNzZXNcbiAgICAgICAgY29uc3QgYnRuQ2xhc3NlcyA9IHZlcnRpY2FsPydidG4tZ3JvdXAtdmVydGljYWwgYnRuLWdyb3VwLXNtJzogJ2J0bi1ncm91cCBidG4tZ3JvdXAtc20nO1xuICAgICAgICB0aGlzLmJhciA9ICQoJzxkaXYvPicpLmFkZENsYXNzKGJ0bkNsYXNzZXMpLmFwcGVuZFRvKGAjJHtkb21JZH1gKTtcbiAgICAgICAgdGhpcy5idXR0b25zID0ge307XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRvb2x0aXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZG93bmxvYWQgYnV0dG9uIGZvciBTVkdcbiAgICAgKiBAcGFyYW0gaWQge1N0cmluZ30gdGhlIGJ1dHRvbiBkb20gSURcbiAgICAgKiBAcGFyYW0gc3ZnSWQge1N0cmluZ30gdGhlIFNWRyBkb20gSUQgdG8gZ3JhYiBhbmQgZG93bmxvYWRcbiAgICAgKiBAcGFyYW0gb3V0ZmlsZU5hbWUge1N0cmluZ30gdGhlIGRvd25sb2FkIGZpbGUgbmFtZVxuICAgICAqIEBwYXJhbSBjbG9uZUlkIHtTdHJpbmd9IHRoZSBjbG9uZWQgU1ZHIGRvbSBJRFxuICAgICAqIEBwYXJhbSBpY29uIHtTdHJpbmd9IGEgZm9udGF3ZXNvbWUncyBpY29uIGNsYXNzIG5hbWVcbiAgICAgKi9cbiAgICBjcmVhdGVEb3dubG9hZFN2Z0J1dHRvbihpZCwgc3ZnSWQsIG91dGZpbGVOYW1lLCBjbG9uZUlkLCBpY29uPSdmYS1kb3dubG9hZCcpe1xuICAgICAgICBjb25zdCAkYnV0dG9uID0gdGhpcy5jcmVhdGVCdXR0b24oaWQsIGljb24pO1xuICAgICAgICBzZWxlY3QoYCMke2lkfWApXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkU3ZnKHN2Z0lkLCBvdXRmaWxlTmFtZSwgY2xvbmVJZCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5zaG93KFwiRG93bmxvYWRcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNyZWF0ZVJlc2V0QnV0dG9uKGlkLCBjYWxsYmFjaywgaWNvbj0nZmEtZXhwYW5kLWFycm93cy1hbHQnKXtcbiAgICAgICAgY29uc3QgJGJ1dHRvbiA9IHRoaXMuY3JlYXRlQnV0dG9uKGlkLCBpY29uKTtcbiAgICAgICAgc2VsZWN0KGAjJHtpZH1gKVxuICAgICAgICAgICAgLm9uKCdjbGljaycsIGNhbGxiYWNrKVxuICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5zaG93KFwiUmVzZXQgdGhlIHNjYWxlc1wiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3V0JywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY3JlYXRlIGEgYnV0dG9uIHRvIHRoZSB0b29sYmFyXG4gICAgICogQHBhcmFtIGlkIHtTdHJpbmd9IHRoZSBidXR0b24ncyBpZFxuICAgICAqIEBwYXJhbSBpY29uIHtTdHJpbmd9IGEgZm9udGF3ZXNvbWUgaWNvbiBjbGFzc1xuICAgICAqIERlcGVuZGVuY2llczogQm9vdHN0cmFwLCBqUXVlcnksIEZvbnRhd2Vzb21lXG4gICAgICovXG4gICAgY3JlYXRlQnV0dG9uKGlkLCBpY29uPSdmYS1kb3dubG9hZCcpe1xuICAgICAgICBjb25zdCAkYnV0dG9uID0gJCgnPGEvPicpLmF0dHIoJ2lkJywgaWQpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2J0biBidG4tZGVmYXVsdCcpLmFwcGVuZFRvKHRoaXMuYmFyKTtcbiAgICAgICAgJCgnPGkvPicpLmFkZENsYXNzKGBmYSAke2ljb259YCkuYXBwZW5kVG8oJGJ1dHRvbik7XG4gICAgICAgIHRoaXMuYnV0dG9uc1tpZF0gPSAkYnV0dG9uO1xuICAgICAgICByZXR1cm4gJGJ1dHRvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhdHRhY2ggYSB0b29sdGlwIGRvbSB3aXRoIHRoZSB0b29sYmFyXG4gICAgICogQHBhcmFtIHRvb2x0aXAge1Rvb2x0aXB9XG4gICAgICovXG4gICAgYXR0YWNoVG9vbHRpcCh0b29sdGlwKXtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdG9vbHRpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEb3dubG9hZCBTVkcgb2JqXG4gICAgICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9IHRoZSBTVkcgZG9tIElEXG4gICAgICogQHBhcmFtIGZpbGVOYW1lIHtTdHJpbmd9IHRoZSBvdXRwdXQgZmlsZSBuYW1lXG4gICAgICogQHBhcmFtIGNsb25lSWQge1N0cmluZ30gdGhlIHRlbXBvcmFyeSBkb20gSUQgdG8gY29weSB0aGUgU1ZHIHRvXG4gICAgICogRGVwZW5kZW5jaWVzOiBGaWxlU2F2ZXJcbiAgICAgKi9cbiAgICBkb3dubG9hZFN2ZyhzdmdJZCwgZmlsZU5hbWUsIGNsb25lSWQpe1xuICAgICAgICAvLyBsZXQgc3ZnT2JqID0gJCgkKCQoYCR7XCIjXCIgK3N2Z0lkfSBzdmdgKSlbMF0pOyAvLyBjb21wbGljYXRlZCBqUXVlcnkgdG8gZ2V0IHRvIHRoZSBTVkcgb2JqZWN0XG4gICAgICAgIGxldCBzdmdPYmogPSAkKCQoJChgJHtcIiNcIiArc3ZnSWR9YCkpWzBdKTtcbiAgICAgICAgbGV0ICRzdmdDb3B5ID0gc3ZnT2JqLmNsb25lKClcbiAgICAgICAgLmF0dHIoXCJ2ZXJzaW9uXCIsIFwiMS4xXCIpXG4gICAgICAgIC5hdHRyKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcblxuICAgICAgICAvLyBwYXJzZSBhbmQgYWRkIGFsbCB0aGUgQ1NTIHN0eWxpbmcgdXNlZCBieSB0aGUgU1ZHXG4gICAgICAgIGxldCBzdHlsZXMgPSBwYXJzZUNzc1N0eWxlcyhzdmdPYmouZ2V0KCkpO1xuICAgICAgICAkc3ZnQ29weS5wcmVwZW5kKHN0eWxlcyk7XG5cbiAgICAgICAgJChcIiNcIiArIGNsb25lSWQpLmh0bWwoJycpLmhpZGUoKTsgLy8gbWFrZSBzdXJlIHRoZSBjb3B5SUQgaXMgaW52aXNpYmxlXG4gICAgICAgIGxldCBzdmdIdG1sID0gJChgIyR7Y2xvbmVJZH1gKS5hcHBlbmQoJHN2Z0NvcHkpLmh0bWwoKTtcblxuICAgICAgICBsZXQgc3ZnQmxvYiA9IG5ldyBCbG9iKFtzdmdIdG1sXSwge3R5cGU6IFwiaW1hZ2Uvc3ZnK3htbFwifSk7XG4gICAgICAgIHNhdmVBcyhzdmdCbG9iLCBmaWxlTmFtZSk7IC8vIHRoaXMgaXMgYSBGaWxlU2F2ZXIgZnVuY3Rpb24uLi4uXG5cbiAgICAgICAgLy8gY2xlYXIgdGhlIHRlbXAgZG93bmxvYWQgZGl2XG4gICAgICAgICQoYCMke2Nsb25lSWR9YCkuaHRtbCgnJykuaGlkZSgpO1xuICAgIH1cbn0iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG4vKipcbiAqIENyZWF0ZXMgYW4gU1ZHXG4gKiBAcGFyYW0gaWQge1N0cmluZ30gYSBET00gZWxlbWVudCBJRCB0aGF0IHN0YXJ0cyB3aXRoIGEgXCIjXCJcbiAqIEBwYXJhbSB3aWR0aCB7TnVtZXJpY31cbiAqIEBwYXJhbSBoZWlnaHQge051bWVyaWN9XG4gKiBAcGFyYW0gbWFyZ2luIHtPYmplY3R9IHdpdGggdHdvIGF0dHJpYnV0ZXM6IHdpZHRoIGFuZCBoZWlnaHRcbiAqIEByZXR1cm4ge1NlbGVjdGlvbn0gdGhlIGQzIHNlbGVjdGlvbiBvYmplY3Qgb2YgdGhlIFNWR1xuICovXG5cbmltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3JhbmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrRG9tSWQoaWQpe1xuICAgIC8vIHRlc3QgaW5wdXQgcGFyYW1zXG4gICAgaWYgKCQoYCMke2lkfWApLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGxldCBlcnJvciA9IGBJbnB1dCBFcnJvcjogRE9NIElEICR7aWR9IGlzIG5vdCBmb3VuZC5gO1xuICAgICAgICBhbGVydChlcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBDYW52YXMgRDMgb2JqZWN0XG4gKiBAcGFyYW0gaWQge1N0cmluZ30gdGhlIHBhcmVudCBkb20gSURcbiAqIEBwYXJhbSB3aWR0aCB7TnVtZXJpY306IHRoZSBvdXRlciB3aWR0aFxuICogQHBhcmFtIGhlaWdodCB7TnVtZXJpY306IHRoZSBvdXRlciBoZWlnaHRcbiAqIEBwYXJhbSBtYXJnaW4ge09iamVjdH0gd2l0aCBhdHRyOiBsZWZ0LCB0b3BcbiAqIEBwYXJhbSBjYW52YXNJZCB7U3RyaW5nfVxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDYW52YXMoaWQsIHdpZHRoLCBoZWlnaHQsIG1hcmdpbiwgY2FudmFzSWQ9dW5kZWZpbmVkLCBwb3NpdGlvbj1cImFic29sdXRlXCIpe1xuICAgIGNoZWNrRG9tSWQoaWQpO1xuICAgIGlmKGNhbnZhc0lkPT09dW5kZWZpbmVkKSBjYW52YXNJZD1gJHtpZH0tY2FudmFzYDtcbiAgICByZXR1cm4gc2VsZWN0KGAjJHtpZH1gKVxuICAgICAgICAuYXBwZW5kKFwiY2FudmFzXCIpXG4gICAgICAgIC5hdHRyKCdpZCcsIGNhbnZhc0lkKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAgIC5zdHlsZShcInBvc2l0aW9uXCIsIHBvc2l0aW9uKSAvLyBUT0RPOiBzaG91bGQgdGhlIHBvc2l0aW9uIGJlIHVzZXItZGVmaW5lZD8gcmVsYXRpdmUgdnMgYWJzb2x1dGVcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gU1ZHIEQzIG9iamVjdFxuICogQHBhcmFtIGlkIHtTdHJpbmd9IHRoZSBwYXJlbnQgZG9tIElEXG4gKiBAcGFyYW0gd2lkdGgge051bWVyaWN9OiB0aGUgb3V0ZXIgd2lkdGhcbiAqIEBwYXJhbSBoZWlnaHQge051bWVyaWN9OiB0aGUgb3V0ZXIgaGVpZ2h0XG4gKiBAcGFyYW0gbWFyZ2luIHtPYmplY3R9IHdpdGggYXR0cjogbGVmdCwgdG9wXG4gKiBAcGFyYW0gc3ZnSWQge1N0cmluZ31cbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3ZnKGlkLCB3aWR0aCwgaGVpZ2h0LCBtYXJnaW4sIHN2Z0lkPXVuZGVmaW5lZCwgcG9zaXRpb249XCJyZWxhdGl2ZVwiKXtcbiAgICBjaGVja0RvbUlkKGlkKTtcbiAgICBpZiAoc3ZnSWQ9PT11bmRlZmluZWQpIHN2Z0lkPWAke2lkfS1zdmdgO1xuICAgIHJldHVybiBzZWxlY3QoXCIjXCIraWQpLmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgc3ZnSWQpXG4gICAgICAgIC8vIC5zdHlsZShcInBvc2l0aW9uXCIsIHBvc2l0aW9uKVxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCAke21hcmdpbi50b3B9KWApXG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBzdmdPYmpcbiAqIEBwYXJhbSBkb3dubG9hZEZpbGVOYW1lIHtTdHJpbmd9XG4gKiBAcGFyYW0gdGVtcERvd25sb2FkRGl2SWQge1N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRvd25sb2FkU3ZnKHN2Z09iaiwgZG93bmxvYWRGaWxlTmFtZSwgdGVtcERvd25sb2FkRGl2SWQpe1xuICAgIGNvbnNvbGUubG9nKHN2Z09iaik7XG4gICAgdmFyICRzdmdDb3B5ID0gc3ZnT2JqLmNsb25lKClcbiAgICAuYXR0cihcInZlcnNpb25cIiwgXCIxLjFcIilcbiAgICAuYXR0cihcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG5cbiAgICAvLyBwYXJzZSBhbmQgYWRkIHRoZSBDU1Mgc3R5bGluZyB1c2VkIGJ5IHRoZSBTVkdcbiAgICB2YXIgc3R5bGVzID0gcGFyc2VDc3NTdHlsZXMoc3ZnT2JqLmdldCgpKTtcbiAgICAkc3ZnQ29weS5wcmVwZW5kKHN0eWxlcyk7XG5cbiAgICAkKFwiI1wiICsgdGVtcERvd25sb2FkRGl2SWQpLmh0bWwoJycpLmhpZGUoKTtcbiAgICB2YXIgc3ZnSHRtbCA9ICQoXCIjXCIgKyB0ZW1wRG93bmxvYWREaXZJZCkuYXBwZW5kKCRzdmdDb3B5KS5odG1sKCk7XG5cbiAgICB2YXIgc3ZnQmxvYiA9IG5ldyBCbG9iKFtzdmdIdG1sXSwge3R5cGU6IFwiaW1hZ2Uvc3ZnK3htbFwifSk7XG4gICAgc2F2ZUFzKHN2Z0Jsb2IsIGRvd25sb2FkRmlsZU5hbWUpO1xuXG4gICAgLy8gY2xlYXIgdGhlIHRlbXAgZG93bmxvYWQgZGl2XG4gICAgJChcIiNcIiArIHRlbXBEb3dubG9hZERpdklkKS5odG1sKCcnKS5oaWRlKCk7XG59XG4vKipcbiAqIEEgZnVuY3Rpb24gZm9yIHBhcnNpbmcgdGhlIENTUyBzdHlsZSBzaGVldCBhbmQgaW5jbHVkaW5nIHRoZSBzdHlsZSBwcm9wZXJ0aWVzIGluIHRoZSBkb3dubG9hZGFibGUgU1ZHLlxuICogQHBhcmFtIGRvbVxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNzc1N0eWxlcyAoZG9tKSB7XG4gICAgdmFyIHVzZWQgPSBcIlwiO1xuICAgIHZhciBzaGVldHMgPSBkb2N1bWVudC5zdHlsZVNoZWV0cztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2hlZXRzLmxlbmd0aDsgaSsrKSB7IC8vIFRPRE86IHdhbGsgdGhyb3VnaCB0aGlzIGJsb2NrIG9mIGNvZGVcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHNoZWV0c1tpXS5jc3NSdWxlcyA9PSBudWxsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHZhciBydWxlcyA9IHNoZWV0c1tpXS5jc3NSdWxlcztcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBydWxlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBydWxlID0gcnVsZXNbal07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihydWxlLnN0eWxlKSAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtcztcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZpbmcgYW55IHNlbGVjdG9yIHRleHQgaW5jbHVkaW5nIHN2ZyBlbGVtZW50IElEIC0tIGRvbSBhbHJlYWR5IHNlbGVjdHMgZm9yIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gcnVsZS5zZWxlY3RvclRleHQgPT09IHVuZGVmaW5lZD8gcnVsZS5zZWxlY3RvclRleHQgOiBydWxlLnNlbGVjdG9yVGV4dC5yZXBsYWNlKGAjJHtkb21bMF0uaWR9IGAsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgLy9Tb21lIHNlbGVjdG9ycyB3b24ndCB3b3JrLCBhbmQgbW9zdCBvZiB0aGVzZSBkb24ndCBtYXR0ZXIuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtcyA9ICQoZG9tKS5maW5kKHNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VkICs9IHJ1bGUuc2VsZWN0b3JUZXh0ICsgXCIgeyBcIiArIHJ1bGUuc3R5bGUuY3NzVGV4dCArIFwiIH1cXG5cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gSW4gRmlyZWZveCwgaWYgc3R5bGVzaGVldCBvcmlnaW5hdGVzIGZyb20gYSBkaWZmIGRvbWFpbixcbiAgICAgICAgICAgIC8vIHRyeWluZyB0byBhY2Nlc3MgdGhlIGNzc1J1bGVzIHdpbGwgdGhyb3cgYSBTZWN1cml0eUVycm9yLlxuICAgICAgICAgICAgLy8gSGVuY2UsIHdlIG11c3QgdXNlIGEgdHJ5L2NhdGNoIHRvIGhhbmRsZSB0aGlzIGluIEZpcmVmb3hcbiAgICAgICAgICAgIGlmIChlLm5hbWUgIT09ICdTZWN1cml0eUVycm9yJykgdGhyb3cgZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHMuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvY3NzJyk7XG4gICAgcy5pbm5lckhUTUwgPSBcIjwhW0NEQVRBW1xcblwiICsgdXNlZCArIFwiXFxuXV0+XCI7XG5cbiAgICByZXR1cm4gcztcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGxpc3Qgb2YgeCp5IGRhdGEgb2JqZWN0cyB3aXRoIHJhbmRvbSB2YWx1ZXNcbiAqIFRoZSBkYXRhIG9iamVjdCBoYXMgdGhpcyBzdHJ1Y3R1cmU6IHt4OiB4bGFiZWwsIHk6IHlsYWJlbCwgdmFsdWU6IHNvbWUgdmFsdWUsIGRpc3BsYXlWYWx1ZTogc29tZSB2YWx1ZX1cbiAqIEBwYXJhbSBwYXJcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tTWF0cml4KHBhcj17eDoyMCwgeToyMCwgc2NhbGVGYWN0b3I6MSwgZGl2ZXJnaW5nOmZhbHNlLCBidWJibGU6ZmFsc2V9KXtcbiAgICBsZXQgWCA9IHJhbmdlKDEsIHBhci54KzEpOyAvLyBnZW5lcmF0ZXMgYSAxLWJhc2VkIGxpc3QuXG4gICAgbGV0IFkgPSByYW5nZSgxLCBwYXIueSsxKTtcbiAgICBsZXQgZGF0YSA9IFtdO1xuICAgIFguZm9yRWFjaCgoeCk9PntcbiAgICAgICAgeCA9ICd4JyArIHgudG9TdHJpbmcoKTtcbiAgICAgICAgWS5mb3JFYWNoKCh5KT0+e1xuICAgICAgICAgICAgeSA9ICd5JyArIHkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGxldCB2ID0gTWF0aC5yYW5kb20oKSpwYXIuc2NhbGVGYWN0b3I7XG4gICAgICAgICAgICB2ID0gcGFyLmRpdmVyZ2luZyYmTWF0aC5yYW5kb20oKSA8IDAuNSA/IC12IDogdjsgLy8gcmFuZG9tbHkgYXNzaWduaW5nIG5lZ2F0aXZlIGFuZCBwb3NpdGl2ZSB2YWx1ZXNcbiAgICAgICAgICAgIGRhdGEucHVzaCh7XG4gICAgICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2LFxuICAgICAgICAgICAgICAgIGRpc3BsYXlWYWx1ZTogcGFyc2VGbG9hdCh2LnRvRXhwb25lbnRpYWwoKSkudG9QcmVjaXNpb24oMyksXG4gICAgICAgICAgICAgICAgcjogcGFyLmJ1YmJsZT9NYXRoLnJhbmRvbSgpKjMwOnVuZGVmaW5lZCAvLyBvbmx5IHJlbGV2YW50IHRvIGJ1YmJsZSBtYXBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgbGlzdCBvZiByYW5kb20gdmFsdWVzXG4gKiBAcGFyYW0gcGFyXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbUxpc3QocGFyPXtuOjEwMCwgc2NhbGVGYWN0b3I6MX0pIHtcbiAgICBsZXQgWCA9IHJhbmdlKDAsIHBhci5uKTsgLy8gZ2VuZXJhdGVzIGEgMS1iYXNlZCBsaXN0LlxuICAgIGxldCBkYXRhID0gW107XG4gICAgcmV0dXJuIFgubWFwKCh4KSA9PiBNYXRoLnJhbmRvbSgpICogcGFyLnNjYWxlRmFjdG9yKTtcblxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuLypcbklucHV0IGRhdGEgc3RydWN0dXJlOiBhIGxpc3Qgb2YgZGF0YSBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHN0cnVjdHVyZTpcbltcbiAgICB7XG4gICAgICAgIGdyb3VwOiBcImdyb3VwMVwiXG4gICAgICAgIGxhYmVsOiBcImRhdGFzZXQgMVwiLFxuICAgICAgICB2YWx1ZXM6IFthIGxpc3Qgb2YgbnVtZXJpY2FsIHZhbHVlc11cbiAgICAgfSxcbiAgICAge1xuICAgICAgICBncm91cDogXCJncm91cDFcIlxuICAgICAgICBsYWJlbDogXCJkYXRhc2V0IDJcIixcbiAgICAgICAgdmFsdWVzOiBbYSBsaXN0IG9mIG51bWVyaWNhbCB2YWx1ZXNdXG4gICAgIH0sXG4gICAgIHtcbiAgICAgICAgZ3JvdXA6IFwiZ3JvdXAyXCJcbiAgICAgICAgbGFiZWw6IFwiZGF0YXNldCAzXCIsXG4gICAgICAgIHZhbHVlczogW2EgbGlzdCBvZiBudW1lcmljYWwgdmFsdWVzXVxuICAgICB9XG5dXG4qL1xuXG5pbXBvcnQge2V4dGVudCwgbWVkaWFuLCBhc2NlbmRpbmcsIHF1YW50aWxlLCBtYXgsIG1pbn0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge25lc3R9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge3NjYWxlQmFuZCwgc2NhbGVMaW5lYXJ9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0IHthcmVhfSBmcm9tIFwiZDMtc2hhcGVcIjtcbmltcG9ydCB7YXhpc1RvcCwgYXhpc0JvdHRvbSwgYXhpc0xlZnR9IGZyb20gXCJkMy1heGlzXCI7XG5pbXBvcnQge3NlbGVjdCwgc2VsZWN0QWxsLCBldmVudH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHticnVzaH0gZnJvbSBcImQzLWJydXNoXCI7XG5cbmltcG9ydCB7a2VybmVsRGVuc2l0eUVzdGltYXRvciwga2VybmVsLCBrZXJuZWxCYW5kd2lkdGh9IGZyb20gXCIuL2tkZVwiO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSBcIi4vVG9vbHRpcFwiO1xuaW1wb3J0IFRvb2xiYXIgZnJvbSBcIi4vVG9vbGJhclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcm91cGVkVmlvbGluIHtcbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvciBmb3IgR3JvdXBlZFZpb2xpblxuICAgICAqIEBwYXJhbSBkYXRhIHtMaXN0fTogYSBsaXN0IG9mIG9iamVjdHMgd2l0aCBhdHRyaWJ1dGVzOiBncm91cDoge1N0cmluZ30sIGxhYmVsOiB7U3RyaW5nfSwgdmFsdWVzOiB7TGlzdH0gb2YgbnVtZXJpY2FsIHZhbHVlcywgc2l6ZTogaW50ZWdlciwgb3B0aW9uYWxcbiAgICAgKiBAcGFyYW0gZ3JvdXBJbmZvIHtEaWN0aW9uYXJ5fTogbWV0YWRhdGEgb2YgdGhlIGdyb3VwLCBpbmRleGVkIGJ5IGdyb3VwIElEXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGF0YSwgZ3JvdXBJbmZvID0ge30pe1xuICAgICAgICB0aGlzLl9zYW5pdHlDaGVjayhkYXRhKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5ncm91cEluZm8gPSBncm91cEluZm87XG4gICAgICAgIHRoaXMudG9vbGJhciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGRvbSB7RE9NfSB0aGUgU1ZHIGRvbSBvYmplY3QgdG8gYXBwZW5kIHRoZSB2aW9saW4gcGxvdCB0b1xuICAgICAqIEBwYXJhbSB3aWR0aCB7RmxvYXR9XG4gICAgICogQHBhcmFtIGhlaWdodCB7RmxvYXR9XG4gICAgICogQHBhcmFtIHhQYWRkaW5nIHtGbG9hdH0gcGFkZGluZyBvZiB0aGUgeCBheGlzXG4gICAgICogQHBhcmFtIHhEb21haW4ge0xpc3R9IHRoZSBvcmRlciBvZiBYIGdyb3Vwc1xuICAgICAqIEBwYXJhbSB5RG9tYWluICB7TGlzdH0gdGhlIG1pbiBhbmQgbWF4IHZhbHVlcyBvZiB0aGUgeSBkb21haW4uIFNldCB0byBlbXB0eSBhcnJheSBvciB1bmRlZmluZWQgdG8gYXV0by1jYWxjdWxhdGUuXG4gICAgICogQHBhcmFtIHlMYWJlbCB7U3RyaW5nfVxuICAgICAqIEBwYXJhbSBzaG93WFxuICAgICAqIEBwYXJhbSBzaG93U3ViWFxuICAgICAqIEBwYXJhbSBzdWJYQW5nbGVcbiAgICAgKiBAcGFyYW0gc2hvd1doaXNrZXJcbiAgICAgKiBAcGFyYW0gc2hvd0RpdmlkZXJcbiAgICAgKiBAcGFyYW0gc2hvd0xlZ2VuZFxuICAgICAqIEBwYXJhbSBzaG93U2l6ZVxuICAgICAqIEBwYXJhbSBzb3J0U3ViWFxuICAgICAqL1xuXG4gICAgcmVuZGVyKGRvbSwgd2lkdGg9NTAwLCBoZWlnaHQ9MzU3LCB4UGFkZGluZz0wLjA1LCB4RG9tYWluPXVuZGVmaW5lZCwgeURvbWFpbj1bLTMsM10sIHlMYWJlbD1cIlkgYXhpc1wiLFxuICAgICAgICAgICBzaG93WD10cnVlLCB4QW5nbGU9MzAsIHNob3dTdWJYPXRydWUsIHN1YlhBbmdsZT0wLFxuICAgICAgICAgICBzaG93V2hpc2tlcj1mYWxzZSwgc2hvd0RpdmlkZXI9ZmFsc2UsIHNob3dMZWdlbmQ9ZmFsc2UsIHNob3dTaXplPWZhbHNlLCBzb3J0U3ViWD1mYWxzZSwgc2hvd091dGxpZXJzPWZhbHNlKXtcblxuICAgICAgICAvLyBkZWZpbmUgdGhlIHJlc2V0IGZvciB0aGlzIHBsb3RcbiAgICAgICAgdGhpcy5yZXNldCA9ICgpID0+IHtcbiAgICAgICAgICAgIGRvbS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoZG9tLCB3aWR0aCwgaGVpZ2h0LCB4UGFkZGluZywgeERvbWFpbiwgeURvbWFpbiwgeUxhYmVsLCBzaG93WCwgeEFuZ2xlLCBzaG93U3ViWCwgc3ViWEFuZ2xlLCBzaG93V2hpc2tlciwgc2hvd0RpdmlkZXIsIHNob3dMZWdlbmQsIHNob3dTaXplLCBzb3J0U3ViWCwgc2hvd091dGxpZXJzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnVwZGF0ZVlTY2FsZSA9IGZ1bmN0aW9uKHlMYWJlbD11bmRlZmluZWQsIHlTY2FsZT11bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRvbS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgaWYgKHlTY2FsZSA9PT0gdW5kZWZpbmVkKSB5U2NhbGUgPSBbXTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKGRvbSwgd2lkdGgsIGhlaWdodCwgeFBhZGRpbmcsIHhEb21haW4sIFtdLCB5TGFiZWwsIHNob3dYLCB4QW5nbGUsIHNob3dTdWJYLCBzdWJYQW5nbGUsIHNob3dXaGlza2VyLCBzaG93RGl2aWRlciwgc2hvd0xlZ2VuZCwgc2hvd1NpemUsIHNvcnRTdWJYLCBzaG93T3V0bGllcnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudXBkYXRlWFNjYWxlID0gZnVuY3Rpb24oeERvbWFpbj11bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh4RG9tYWluID09PSB1bmRlZmluZWQpIGNvbnNvbGUuZXJyb3IoJ3VwZGF0ZVhTY2FsZSBjYWxsZWQgd2l0aG91dCBuZXcgWCBkb21haW4nKTtcbiAgICAgICAgICAgIGRvbS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoZG9tLCB3aWR0aCwgaGVpZ2h0LCB4UGFkZGluZywgeERvbWFpbiwgW10sIHlMYWJlbCwgc2hvd1gsIHhBbmdsZSwgc2hvd1N1YlgsIHN1YlhBbmdsZSwgc2hvd1doaXNrZXIsIHNob3dEaXZpZGVyLCBzaG93TGVnZW5kLCBzaG93U2l6ZSwgc29ydFN1YlgsIHNob3dPdXRsaWVycyk7XG5cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBkZWZpbmVzIHRoZSBYLCBzdWJYLCBZLCBaIHNjYWxlc1xuICAgICAgICBpZiAoeURvbWFpbj09PXVuZGVmaW5lZCB8fCAwID09IHlEb21haW4ubGVuZ3RoKXtcbiAgICAgICAgICAgIGxldCBhbGxWID0gW107XG4gICAgICAgICAgICB0aGlzLmRhdGEuZm9yRWFjaCgoZCkgPT4gYWxsViA9IGFsbFYuY29uY2F0KGQudmFsdWVzKSk7XG4gICAgICAgICAgICB5RG9tYWluID0gZXh0ZW50KGFsbFYpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmUtb3JnYW5pemVkIHRoaXMuZGF0YSBpbmRleGVkIGJ5IGdyb3Vwc1xuICAgICAgICB0aGlzLmdyb3VwcyA9IG5lc3QoKVxuICAgICAgICAgICAgLmtleSgoZCkgPT4gZC5ncm91cClcbiAgICAgICAgICAgIC5lbnRyaWVzKHRoaXMuZGF0YSk7XG5cbiAgICAgICAgdGhpcy5zY2FsZSA9IHtcbiAgICAgICAgICAgIHg6IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoWzAsIHdpZHRoXSlcbiAgICAgICAgICAgICAgICAuZG9tYWluKHhEb21haW58fHRoaXMuZ3JvdXBzLm1hcCgoZCkgPT4gZC5rZXkpKVxuICAgICAgICAgICAgICAgIC5wYWRkaW5nSW5uZXIoeFBhZGRpbmcpLFxuICAgICAgICAgICAgc3VieDogc2NhbGVCYW5kKCksXG4gICAgICAgICAgICB5OiBzY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoW2hlaWdodCwgMF0pXG4gICAgICAgICAgICAgICAgLmRvbWFpbih5RG9tYWluKSxcbiAgICAgICAgICAgIHo6IHNjYWxlTGluZWFyKCkgLy8gdGhpcyBpcyB0aGUgdmlvbGluIHdpZHRoLCB0aGUgZG9tYWluIGFuZCByYW5nZSBhcmUgZGV0ZXJtaW5lZCBsYXRlciBpbmRpdmlkdWFsbHkgZm9yIGVhY2ggdmlvbGluXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZm9yIGVhY2ggZ3JvdXBcbiAgICAgICAgdGhpcy5ncm91cHMuZm9yRWFjaCgoZykgPT4ge1xuICAgICAgICAgICAgbGV0IGdyb3VwID0gZy5rZXk7XG4gICAgICAgICAgICBsZXQgZW50cmllcyA9IGcudmFsdWVzO1xuICAgICAgICAgICAgbGV0IGluZm8gPSB0aGlzLmdyb3VwSW5mb1tncm91cF07IC8vIG9wdGlvbmFsXG4gICAgICAgICAgICBnLmluZGV4ID0gdGhpcy5zY2FsZS54LmRvbWFpbigpLmluZGV4T2YoZ3JvdXApO1xuXG4gICAgICAgICAgICBpZiAoaW5mbyAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgLy8gcmVuZGVycyBncm91cCBpbmZvIHN1Y2ggYXMgcC12YWx1ZSwgZ3JvdXAgbmFtZVxuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwSW5mb0RvbSA9IGRvbS5hcHBlbmQoXCJnXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwTGFiZWxzID0gZ3JvdXBJbmZvRG9tLnNlbGVjdEFsbChcIi52aW9saW4tZ3JvdXAtbGFiZWxcIilcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEoWydwdmFsdWUnXSk7XG4gICAgICAgICAgICAgICAgZ3JvdXBMYWJlbHMuZW50ZXIoKS5hcHBlbmQoXCJ0ZXh0XCIpIC8vIENvZGUgcmV2aWV3OiBjb25zaWRlciBtb3ZpbmcgdGhpcyBwYXJ0IHRvIHRoZSBlUVRMIGRhc2hib2FyZFxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tZ3JvdXAtbGFiZWxcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcImNlbnRlclwiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImZpbGxcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGluZm9bJ3B2YWx1ZVRocmVzaG9sZCddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkPT0ncHZhbHVlJyYmcGFyc2VGbG9hdChpbmZvW2RdKTw9cGFyc2VGbG9hdChpbmZvWydwdmFsdWVUaHJlc2hvbGQnXSk/XCJvcmFuZ2VyZWRcIjpcIlNsYXRlR3JheVwiXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIChkLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeCA9IHRoaXMuc2NhbGUueChncm91cCkgKyB0aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkvMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB5ID0gdGhpcy5zY2FsZS55KHlEb21haW5bMF0pICsgNTA7IC8vIHRvZG86IGF2b2lkIGhhcmQtY29kZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke3h9LCAke3l9KWBcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoKGQpID0+IGAke2R9OiAke3BhcnNlRmxvYXQocGFyc2VGbG9hdChpbmZvW2RdKS50b1ByZWNpc2lvbigzKSkudG9FeHBvbmVudGlhbCgpfWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBkZWZpbmVzIHRoZSB0aGlzLnNjYWxlLnN1YnggYmFzZWQgb24gdGhpcy5zY2FsZS54XG4gICAgICAgICAgICBpZiAoc29ydFN1YlgpIHtcbiAgICAgICAgICAgICAgICBlbnRyaWVzLnNvcnQoKGEsYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYS5sYWJlbCA8IGIubGFiZWwpIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYS5sYWJlbCA+IGIubGFiZWwpIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zY2FsZS5zdWJ4XG4gICAgICAgICAgICAgICAgLmRvbWFpbihlbnRyaWVzLm1hcCgoZCkgPT4gZC5sYWJlbCkpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoW3RoaXMuc2NhbGUueChncm91cCksIHRoaXMuc2NhbGUueChncm91cCkgKyB0aGlzLnNjYWxlLnguYmFuZHdpZHRoKCldKTtcblxuICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKDAgPT0gZW50cnkudmFsdWVzLmxlbmd0aCkgcmV0dXJuOyAvLyBubyBmdXJ0aGVyIHJlbmRlcmluZyBpZiB0aGlzIGdyb3VwIGhhcyBubyBlbnRyaWVzXG4gICAgICAgICAgICAgICAgZW50cnkudmFsdWVzID0gZW50cnkudmFsdWVzLnNvcnQoYXNjZW5kaW5nKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9kcmF3VmlvbGluKGRvbSwgZW50cnksIHNob3dXaGlza2VyLCBnLmluZGV4LCBzaG93T3V0bGllcnMpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGFkZHMgdGhlIHN1Yi14IGF4aXMgaWYgdGhlcmUgYXJlIG1vcmUgdGhhbiBvbmUgZW50cmllc1xuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IDE1O1xuICAgICAgICAgICAgaWYgKHNob3dTaXplKXtcbiAgICAgICAgICAgICAgICAgY29uc3Qgc2l6ZVNjYWxlID0gc2NhbGVCYW5kKClcbiAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihlbnRyaWVzLm1hcCgoZCkgPT4ge3JldHVybiBkLnNpemU9PXVuZGVmaW5lZD8nKDApJzpgKCR7ZC5zaXplfHwwfSlgfSkpXG4gICAgICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kKFt0aGlzLnNjYWxlLngoZ3JvdXApLCB0aGlzLnNjYWxlLngoZ3JvdXApICsgdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpXSk7XG4gICAgICAgICAgICAgICAgIGNvbnN0IHNpemV4RyA9IGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLXNpemUtYXhpc1wiKVxuICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAke2hlaWdodCArIGJ1ZmZlcn0pYClcbiAgICAgICAgICAgICAgICAgICAgIC5jYWxsKGF4aXNCb3R0b20oc2l6ZVNjYWxlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzaG93U3ViWCkge1xuICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSA1O1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1YnhHID0gZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1zdWItYXhpc1wiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKDAsICR7aGVpZ2h0ICsgYnVmZmVyfSlgKVxuICAgICAgICAgICAgICAgICAgICAuY2FsbChheGlzQm90dG9tKHRoaXMuc2NhbGUuc3VieCkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHN1YlhBbmdsZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VieEcuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgcm90YXRlKCR7c3ViWEFuZ2xlfSwgMiwgMTApYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVuZGVycyB0aGUgeCBheGlzXG4gICAgICAgIGxldCBidWZmZXIgPSBzaG93U3ViWD81NTowOyAvLyBDb2RlIHJldmlldzogaGFyZC1jb2RlZCB2YWx1ZXNcbiAgICAgICAgdGhpcy54QXhpcyA9IHNob3dYP2F4aXNCb3R0b20odGhpcy5zY2FsZS54KTpheGlzQm90dG9tKHRoaXMuc2NhbGUueCkudGlja0Zvcm1hdChcIlwiKTtcbiAgICAgICAgZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4teC1heGlzIGF4aXMtLXhcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwgJHtoZWlnaHQgKyBidWZmZXJ9KWApXG4gICAgICAgICAgICAuY2FsbCh0aGlzLnhBeGlzKSAvLyBzZXQgdGlja0Zvcm1hdChcIlwiKSB0byBzaG93IHRpY2sgbWFya3Mgd2l0aG91dCB0ZXh0IGxhYmVsc1xuICAgICAgICAgICAgLnNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHJvdGF0ZSgke3hBbmdsZX0sIC0xMCwgMTApYCk7XG5cbiAgICAgICAgLy8gYWRkcyB0aGUgeSBBeGlzXG4gICAgICAgIGJ1ZmZlciA9IDU7XG4gICAgICAgIHRoaXMueUF4aXMgPSBheGlzTGVmdCh0aGlzLnNjYWxlLnkpXG4gICAgICAgICAgICAgICAgICAgIC50aWNrVmFsdWVzKHRoaXMuc2NhbGUueS50aWNrcyg1KSk7XG4gICAgICAgIGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLXktYXhpcyBheGlzLS15XCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKC0ke2J1ZmZlcn0sIDApYClcbiAgICAgICAgICAgIC5jYWxsKHRoaXMueUF4aXMpO1xuXG4gICAgICAgIC8vIGFkZHMgdGhlIHRleHQgbGFiZWwgZm9yIHRoZSB5IGF4aXNcbiAgICAgICAgZG9tLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tYXhpcy1sYWJlbFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgtJHtidWZmZXIgKiAyICsgc2VsZWN0KCcudmlvbGluLXktYXhpcycpLm5vZGUoKS5nZXRCQm94KCkud2lkdGh9LCAke3RoaXMuc2NhbGUueS5yYW5nZSgpWzBdICsgKHRoaXMuc2NhbGUueS5yYW5nZSgpWzFdIC0gdGhpcy5zY2FsZS55LnJhbmdlKClbMF0pLzJ9KSByb3RhdGUoLTkwKWApXG4gICAgICAgICAgICAudGV4dCh5TGFiZWwpO1xuXG4gICAgICAgIC8vIHBsb3QgbW91c2UgZXZlbnRzXG4gICAgICAgIGRvbS5vbihcIm1vdXNlb3V0XCIsICgpPT57XG4gICAgICAgICAgICBpZih0aGlzLnRvb2x0aXAgIT09IHVuZGVmaW5lZCkgdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYWRkIGdyb3VwIGRpdmlkZXJzXG4gICAgICAgIGlmKHNob3dEaXZpZGVyKXtcbiAgICAgICAgICAgIHRoaXMuX2FkZEdyb3VwRGl2aWRlcihkb20pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIGNvbG9yIGxlZ2VuZFxuICAgICAgICBpZiAoc2hvd0xlZ2VuZCkge1xuICAgICAgICAgICAgY29uc3QgbGVnZW5kRyA9IGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBcInZpb2xpbkxlZ2VuZFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwgMClgKTtcblxuICAgICAgICAgICAgbGVnZW5kRy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHRoaXMuc2NhbGUueC5yYW5nZSgpWzBdKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtMzUpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCA2MCoodGhpcy5ncm91cHNbMF0udmFsdWVzLmxlbmd0aCkgKyAxMClcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCAyNClcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcInNpbHZlclwiKTtcblxuICAgICAgICAgICAgY29uc3QgbGVnZW5kcyA9IGxlZ2VuZEcuc2VsZWN0QWxsKFwiLnZpb2xpbi1sZWdlbmRcIikuZGF0YSh0aGlzLmdyb3Vwc1swXS52YWx1ZXMpO1xuXG5cbiAgICAgICAgICAgIGNvbnN0IGcgPSBsZWdlbmRzLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5jbGFzc2VkKFwidmlvbGluLWxlZ2VuZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIGNvbnN0IHcgPSAxMDtcbiAgICAgICAgICAgIGcuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCwgaSkgPT4gNSArIDYwKihpKSAgKyB0aGlzLnNjYWxlLngucmFuZ2UoKVswXSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgLTI4KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdylcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCB3KVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQpID0+IGQuY29sb3IpO1xuXG4gICAgICAgICAgICBnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLWxlZ2VuZC10ZXh0XCIpXG4gICAgICAgICAgICAgICAgLnRleHQoKGQpID0+IGQubGFiZWwpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkLCBpKSA9PiAxNyArIDYwKihpKSArIHRoaXMuc2NhbGUueC5yYW5nZSgpWzBdKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtMjApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkUGxvdFRpdGxlKGRvbSwgdGl0bGUpe1xuICAgICAgICBsZXQgeCA9ICh0aGlzLnNjYWxlLngucmFuZ2UoKVsxXS10aGlzLnNjYWxlLngucmFuZ2UoKVswXSArIDEpIC8yO1xuICAgICAgICBsZXQgeSA9ICh0aGlzLnNjYWxlLnkucmFuZ2UoKVsxXSAtIDEwKTtcbiAgICAgICAgZG9tLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tdGl0bGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSlgKVxuICAgICAgICAgICAgLnRleHQodGl0bGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgdG9vbHRpcCBvYmplY3RcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2x0aXAncyBkb20gSURcbiAgICAgKiBAcmV0dXJucyB7VG9vbHRpcH1cbiAgICAgKi9cbiAgICBjcmVhdGVUb29sdGlwKGRvbUlkKXtcbiAgICAgICAgaWYgKCQoYCMke2RvbUlkfWApLmxlbmd0aCA9PSAwKSAkKCc8ZGl2Lz4nKS5hdHRyKCdpZCcsIGRvbUlkKS5hcHBlbmRUbygkKCdib2R5JykpO1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSBuZXcgVG9vbHRpcChkb21JZCk7XG4gICAgICAgIHNlbGVjdChgIyR7ZG9tSWR9YCkuY2xhc3NlZCgndmlvbGluLXRvb2x0aXAnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbHRpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHRvb2xiYXIgcGFuZWxcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2xiYXIncyBkb20gSURcbiAgICAgKiBAcGFyYW0gdG9vbHRpcCB7VG9vbHRpcH1cbiAgICAgKiBAcmV0dXJucyB7VG9vbGJhcn1cbiAgICAgKi9cblxuICAgIGNyZWF0ZVRvb2xiYXIoZG9tSWQsIHRvb2x0aXApe1xuICAgICAgICAvLyBpZiAodG9vbHRpcCA9PT0gdW5kZWZpbmVkKSB0b29sdGlwID0gdGhpcy5jcmVhdGVUb29sdGlwKGRvbUlkKTtcbiAgICAgICAgdGhpcy50b29sYmFyID0gbmV3IFRvb2xiYXIoZG9tSWQsIHRvb2x0aXApO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sYmFyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGJydXNoIHRvIHRoZSBwbG90XG4gICAgICogQHBhcmFtIGRvbSB7RDN9IERvbSBlbGVtZW50XG4gICAgICovXG4gICAgYWRkQnJ1c2goZG9tKXtcbiAgICAgICAgY29uc3QgdGhlQnJ1c2ggPSBicnVzaCgpO1xuICAgICAgICB0aGVCcnVzaC5vbihcImVuZFwiLCAoKT0+e3RoaXMuem9vbShkb20sIHRoZUJydXNoKX0pO1xuICAgICAgICBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJydXNoXCIpXG4gICAgICAgICAgICAuY2FsbCh0aGVCcnVzaCk7XG4gICAgfVxuXG4gICAgem9vbShkb20sIHRoZUJydXNoKXtcbiAgICAgICAgbGV0IHMgPSBldmVudC5zZWxlY3Rpb24sXG4gICAgICAgICAgICBpZGVsVGltZW91dCxcbiAgICAgICAgICAgIGlkZWxEZWxheSA9IDM1MDtcbiAgICAgICAgaWYgKHRoZUJydXNoID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFzKSB7XG4gICAgICAgICAgICBpZiAoIWlkZWxUaW1lb3V0KSByZXR1cm4gaWRlbFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZGVsVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICB9LCBpZGVsRGVsYXkpO1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyByZXNldCB0aGUgY3VycmVudCBzY2FsZXMnIGRvbWFpbnMgYmFzZWQgb24gdGhlIGJydXNoZWQgd2luZG93XG4gICAgICAgICAgICB0aGlzLnNjYWxlLnguZG9tYWluKHRoaXMuc2NhbGUueC5kb21haW4oKS5maWx0ZXIoKGQsIGkpPT57XG4gICAgICAgICAgICAgICAgICBjb25zdCBsb3dCb3VuZCA9IE1hdGguZmxvb3Ioc1swXVswXS90aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkpO1xuICAgICAgICAgICAgICAgICAgY29uc3QgdXBwZXJCb3VuZCA9IE1hdGguZmxvb3Ioc1sxXVswXS90aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPj0gbG93Qm91bmQgJiYgaSA8PXVwcGVyQm91bmQ7XG4gICAgICAgICAgICB9KSk7IC8vIFRPRE86IGFkZCBjb21tZW50c1xuXG4gICAgICAgICAgICBjb25zdCBtaW4gPSBNYXRoLmZsb29yKHRoaXMuc2NhbGUueS5pbnZlcnQoc1sxXVsxXSkpO1xuICAgICAgICAgICAgY29uc3QgbWF4ID0gTWF0aC5mbG9vcih0aGlzLnNjYWxlLnkuaW52ZXJ0KHNbMF1bMV0pKTtcbiAgICAgICAgICAgIHRoaXMuc2NhbGUueS5kb21haW4oW21pbiwgbWF4XSk7IC8vIHRvZG86IGRlYnVnXG5cbiAgICAgICAgICAgIGRvbS5zZWxlY3QoXCIuYnJ1c2hcIikuY2FsbCh0aGVCcnVzaC5tb3ZlLCBudWxsKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgIC8vIHpvb21cbiAgICAgICAgbGV0IHQgPSBkb20udHJhbnNpdGlvbigpLmR1cmF0aW9uKDc1MCk7XG4gICAgICAgIGRvbS5zZWxlY3QoXCIuYXhpcy0teFwiKS50cmFuc2l0aW9uKHQpLmNhbGwodGhpcy54QXhpcyk7XG4gICAgICAgIGRvbS5zZWxlY3QoXCIuYXhpcy0teVwiKS50cmFuc2l0aW9uKHQpLmNhbGwodGhpcy55QXhpcyk7XG5cbiAgICAgICAgdGhpcy5ncm91cHMuZm9yRWFjaCgoZ2csIGkpPT4ge1xuICAgICAgICAgICAgbGV0IGdyb3VwID0gZ2cua2V5O1xuICAgICAgICAgICAgbGV0IGVudHJpZXMgPSBnZy52YWx1ZXM7XG5cbiAgICAgICAgICAgIC8vIHJlLWRlZmluZSB0aGUgc3VieCdzIHJhbmdlXG4gICAgICAgICAgICB0aGlzLnNjYWxlLnN1YnhcbiAgICAgICAgICAgICAgICAucmFuZ2VSb3VuZChbdGhpcy5zY2FsZS54KGdyb3VwKSwgdGhpcy5zY2FsZS54KGdyb3VwKSArIHRoaXMuc2NhbGUueC5iYW5kd2lkdGgoKV0pO1xuXG4gICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT0gZW50cnkudmFsdWVzLmxlbmd0aCkgcmV0dXJuOyAvLyBubyBmdXJ0aGVyIHJlbmRlcmluZyBpZiB0aGlzIGdyb3VwIGhhcyBubyBlbnRyaWVzXG4gICAgICAgICAgICAgICAgY29uc3QgZ0luZGV4ID0gdGhpcy5zY2FsZS54LmRvbWFpbigpLmluZGV4T2YoZ3JvdXApO1xuXG5cbiAgICAgICAgICAgICAgICAvLyByZS1kZWZpbmUgdGhlIHNjYWxlLnoncyByYW5nZVxuICAgICAgICAgICAgICAgIHRoaXMuc2NhbGUuelxuICAgICAgICAgICAgICAgICAgICAucmFuZ2UoW3RoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCksIHRoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCkgKyB0aGlzLnNjYWxlLnN1YnguYmFuZHdpZHRoKCldKTtcblxuICAgICAgICAgICAgICAgIC8vIHJlLXJlbmRlciB0aGUgdmlvbGluXG4gICAgICAgICAgICAgICAgY29uc3QgZyA9IGRvbS5zZWxlY3QoYCN2aW9saW4ke2dnLmluZGV4fS0ke2VudHJ5LmxhYmVsfWApO1xuICAgICAgICAgICAgICAgIGcuc2VsZWN0KFwiLnZpb2xpblwiKVxuICAgICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbih0KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgYXJlYSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAueDAoKGQpID0+IHRoaXMuc2NhbGUueihkWzFdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC54MSgoZCkgPT4gdGhpcy5zY2FsZS56KC1kWzFdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC55KChkKSA9PiB0aGlzLnNjYWxlLnkoZFswXSkpXG4gICAgICAgICAgICAgICAgICAgICk7XG5cblxuICAgICAgICAgICAgICAgIC8vIHJlLXJlbmRlciB0aGUgYm94IHBsb3RcbiAgICAgICAgICAgICAgICAvLyBpbnRlcnF1YXJ0aWxlIHJhbmdlXG4gICAgICAgICAgICAgICAgY29uc3QgcTEgPSBxdWFudGlsZShlbnRyeS52YWx1ZXMsIDAuMjUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHEzID0gcXVhbnRpbGUoZW50cnkudmFsdWVzLCAwLjc1KTtcbiAgICAgICAgICAgICAgICBjb25zdCB6ID0gMC4xO1xuICAgICAgICAgICAgICAgIGcuc2VsZWN0KFwiLnZpb2xpbi1pclwiKVxuICAgICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbih0KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy5zY2FsZS56KC16KSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIHRoaXMuc2NhbGUueShxMykpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgTWF0aC5hYnModGhpcy5zY2FsZS56KC16KSAtIHRoaXMuc2NhbGUueih6KSkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIE1hdGguYWJzKHRoaXMuc2NhbGUueShxMykgLSB0aGlzLnNjYWxlLnkocTEpKSk7XG5cbiAgICAgICAgICAgICAgICAvLyB0aGUgbWVkaWFuIGxpbmVcbiAgICAgICAgICAgICAgICBjb25zdCBtZWQgPSBtZWRpYW4oZW50cnkudmFsdWVzKTtcbiAgICAgICAgICAgICAgICBnLnNlbGVjdChcIi52aW9saW4tbWVkaWFuXCIpXG4gICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKHQpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgdGhpcy5zY2FsZS56KC16KSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCB0aGlzLnNjYWxlLnooeikpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgdGhpcy5zY2FsZS55KG1lZCkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgdGhpcy5zY2FsZS55KG1lZCkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZW5kZXIgdGhlIHZpb2xpbiBhbmQgYm94IHBsb3RzXG4gICAgICogQHBhcmFtIGRvbSB7RDMgRE9NfVxuICAgICAqIEBwYXJhbSBlbnRyeSB7T2JqZWN0fSB3aXRoIGF0dHJzOiB2YWx1ZXMsIGxhYmVsXG4gICAgICogQHBhcmFtIHNob3dXaGlza2VyIHtCb29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2RyYXdWaW9saW4oZG9tLCBlbnRyeSwgc2hvd1doaXNrZXIsIGdJbmRleCwgc2hvd091dGxpZXJzKXtcblxuICAgICAgICAvLyBnZW5lcmF0ZSB0aGUgdmVydGljZXMgZm9yIHRoZSB2aW9saW4gcGF0aCB1c2UgYSBrZGVcbiAgICAgICAgbGV0IGtkZSA9IGtlcm5lbERlbnNpdHlFc3RpbWF0b3IoXG4gICAgICAgICAgICBrZXJuZWwuZ2F1c3NpYW4sXG4gICAgICAgICAgICB0aGlzLnNjYWxlLnkudGlja3MoMTAwKSwgLy8gdXNlIHVwIHRvIDEwMCB2ZXJ0aWNlcyBhbG9uZyB0aGUgWSBheGlzICh0byBjcmVhdGUgdGhlIHZpb2xpbiBwYXRoKVxuICAgICAgICAgICAga2VybmVsQmFuZHdpZHRoLm5yZChlbnRyeS52YWx1ZXMpIC8vIGVzdGltYXRlIHRoZSBiYW5kd2lkdGggYmFzZWQgb24gdGhlIGRhdGFcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgZURvbWFpbiA9IGV4dGVudChlbnRyeS52YWx1ZXMpOyAvLyBnZXQgdGhlIG1heCBhbmQgbWluIGluIGVudHJ5LnZhbHVlc1xuICAgICAgICBjb25zdCB2ZXJ0aWNlcyA9IGtkZShlbnRyeS52YWx1ZXMpLmZpbHRlcigoZCk9PmRbMF0+PWVEb21haW5bMF0mJmRbMF08PWVEb21haW5bMV0pOyAvLyBmaWx0ZXIgdGhlIHZlcnRpY2VzIHRoYXQgYXJlbid0IGluIHRoZSBlbnRyeS52YWx1ZXNcblxuICAgICAgICAvLyB2aW9saW4gcGxvdCBhbmQgYm94IGNhbiBvbmx5IGJlIGRyYXduIHdoZW4gdmVydGljZXMgZXhpc3QgYW5kIHRoZXJlIGFyZSBubyBOYU4gcG9pbnRzXG4gICAgICAgIGlmICh2ZXJ0aWNlcy5sZW5ndGggJiYgdGhpcy5fdmFsaWRWZXJ0aWNlcyh2ZXJ0aWNlcykpIHtcbiAgICAgICAgICAgIC8vIGRlZmluZSB0aGUgeiBzY2FsZSAtLSB0aGUgdmlvbGluIHdpZHRoXG4gICAgICAgICAgICBsZXQgek1heCA9IG1heCh2ZXJ0aWNlcywgKGQpPT5NYXRoLmFicyhkWzFdKSk7IC8vIGZpbmQgdGhlIGFicyh2YWx1ZSkgaW4gZW50cnkudmFsdWVzXG4gICAgICAgICAgICB0aGlzLnNjYWxlLnpcbiAgICAgICAgICAgICAgICAuZG9tYWluKFstek1heCwgek1heF0pXG4gICAgICAgICAgICAgICAgLnJhbmdlKFt0aGlzLnNjYWxlLnN1YngoZW50cnkubGFiZWwpLCB0aGlzLnNjYWxlLnN1YngoZW50cnkubGFiZWwpICsgdGhpcy5zY2FsZS5zdWJ4LmJhbmR3aWR0aCgpXSk7XG5cbiAgICAgICAgICAgIC8vIHZpc3VhbCByZW5kZXJpbmdcbiAgICAgICAgICAgIGNvbnN0IHZpb2xpbkcgPSBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsIGB2aW9saW4ke2dJbmRleH0tJHtlbnRyeS5sYWJlbH1gKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd2aW9saW4tZycpXG4gICAgICAgICAgICAgICAgLmRhdHVtKGVudHJ5KTtcblxuICAgICAgICAgICAgbGV0IHZpb2xpbiA9IGFyZWEoKVxuICAgICAgICAgICAgICAgIC54MCgoZCkgPT4gdGhpcy5zY2FsZS56KGRbMV0pKVxuICAgICAgICAgICAgICAgIC54MSgoZCkgPT4gdGhpcy5zY2FsZS56KC1kWzFdKSlcbiAgICAgICAgICAgICAgICAueSgoZCkgPT4gdGhpcy5zY2FsZS55KGRbMF0pKTtcbiAgICAgICAgICAgIGNvbnN0IHZQYXRoID0gdmlvbGluRy5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgICAgICAgICAgLmRhdHVtKHZlcnRpY2VzKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCB2aW9saW4pXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJ2aW9saW5cIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsICgpPT57XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeS5jb2xvciAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZW50cnkuY29sb3I7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFsdGVybmF0ZSB0aGUgb2RkIGFuZCBldmVuIGNvbG9ycywgbWF5YmUgd2UgZG9uJ3Qgd2FudCB0aGlzIGZlYXR1cmVcbiAgICAgICAgICAgICAgICAgICAgaWYoZ0luZGV4JTIgPT0gMCkgcmV0dXJuIFwiIzkwYzFjMVwiO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIjOTRhOGI4XCI7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGJveHBsb3RcbiAgICAgICAgICAgIGNvbnN0IHExID0gcXVhbnRpbGUoZW50cnkudmFsdWVzLCAwLjI1KTtcbiAgICAgICAgICAgIGNvbnN0IHEzID0gcXVhbnRpbGUoZW50cnkudmFsdWVzLCAwLjc1KTtcbiAgICAgICAgICAgIGNvbnN0IHogPSB0aGlzLnNjYWxlLnouZG9tYWluKClbMV0vMztcblxuICAgICAgICAgICAgaWYoc2hvd1doaXNrZXIpe1xuICAgICAgICAgICAgICAgIC8vIHRoZSB1cHBlciBhbmQgbG93ZXIgbGltaXRzIG9mIGVudHJ5LnZhbHVlc1xuICAgICAgICAgICAgICAgIGNvbnN0IGlxciA9IE1hdGguYWJzKHEzLXExKTtcbiAgICAgICAgICAgICAgICBjb25zdCB1cHBlciA9IG1heChlbnRyeS52YWx1ZXMuZmlsdGVyKChkKT0+ZDw9cTMrKGlxcioxLjUpKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbG93ZXIgPSBtaW4oZW50cnkudmFsdWVzLmZpbHRlcigoZCk9PmQ+PXExLShpcXIqMS41KSkpO1xuICAgICAgICAgICAgICAgIGRvbS5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwid2hpc2tlclwiLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcIngxXCIsIHRoaXMuc2NhbGUueigwKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCB0aGlzLnNjYWxlLnooMCkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgdGhpcy5zY2FsZS55KHVwcGVyKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCB0aGlzLnNjYWxlLnkobG93ZXIpKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJzdHJva2VcIiwgXCIjZmZmXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpbnRlcnF1YXJ0aWxlIHJhbmdlXG4gICAgICAgICAgICB2aW9saW5HLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy5zY2FsZS56KC16KSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgdGhpcy5zY2FsZS55KHEzKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIE1hdGguYWJzKHRoaXMuc2NhbGUueigteiktdGhpcy5zY2FsZS56KHopKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBNYXRoLmFicyh0aGlzLnNjYWxlLnkocTMpIC0gdGhpcy5zY2FsZS55KHExKSkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1pclwiKTtcblxuICAgICAgICAgICAgLy8gbWVkaWFuXG4gICAgICAgICAgICBjb25zdCBtZWQgPSBtZWRpYW4oZW50cnkudmFsdWVzKTtcbiAgICAgICAgICAgIHZpb2xpbkcuYXBwZW5kKFwibGluZVwiKSAvLyB0aGUgbWVkaWFuIGxpbmVcbiAgICAgICAgICAgICAgICAuYXR0cihcIngxXCIsIHRoaXMuc2NhbGUueigteikpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCB0aGlzLnNjYWxlLnooeikpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCB0aGlzLnNjYWxlLnkobWVkKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInkyXCIsIHRoaXMuc2NhbGUueShtZWQpKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tbWVkaWFuXCIpO1xuXG4gICAgICAgICAgICAvLyBvdXRsaWVyc1xuICAgICAgICAgICAgaWYgKHNob3dPdXRsaWVycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlxciA9IE1hdGguYWJzKHEzLXExKTtcbiAgICAgICAgICAgICAgICBjb25zdCB1cHBlciA9IG1heChlbnRyeS52YWx1ZXMuZmlsdGVyKChkKT0+ZDw9cTMrKGlxcioxLjUpKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbG93ZXIgPSBtaW4oZW50cnkudmFsdWVzLmZpbHRlcigoZCk9PmQ+PXExLShpcXIqMS41KSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG91dGxpZXJzID0gZW50cnkudmFsdWVzLmZpbHRlcigoZCk9PmQ8bG93ZXJ8fGQ+dXBwZXIpO1xuICAgICAgICAgICAgICAgIHZpb2xpbkcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLW91dGxpZXJzXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEob3V0bGllcnMpXG4gICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCAoKT0+dGhpcy5zY2FsZS56KDApKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImN5XCIsIChkKT0+dGhpcy5zY2FsZS55KGQpKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgMik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG1vdXNlIGV2ZW50c1xuICAgICAgICAgICAgdmlvbGluRy5vbihcIm1vdXNlb3ZlclwiLCAoKT0+e1xuICAgICAgICAgICAgICAgIHZQYXRoLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlbnRyeSk7XG4gICAgICAgICAgICAgICAgaWYodGhpcy50b29sdGlwID09PSB1bmRlZmluZWQpIGNvbnNvbGUud2FybihcIkdyb3VwVmlvbGluIFdhcm5pbmc6IHRvb2x0aXAgbm90IGRlZmluZWRcIik7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5zaG93KFxuICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkuZ3JvdXAgKyBcIjxici8+XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkubGFiZWwgKyBcIjxici8+XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJNZWRpYW46IFwiICsgbWVkLnRvUHJlY2lzaW9uKDQpICsgXCI8YnIvPlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZpb2xpbkcub24oXCJtb3VzZW91dFwiLCAoKT0+e1xuICAgICAgICAgICAgICAgIHZQYXRoLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgX3Nhbml0eUNoZWNrKGRhdGEpe1xuICAgICAgICBjb25zdCBhdHRyID0gW1wiZ3JvdXBcIiwgXCJsYWJlbFwiLCBcInZhbHVlc1wiXTtcblxuICAgICAgICBkYXRhLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgICAgIGF0dHIuZm9yRWFjaCgoYSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkW2FdID09PSB1bmRlZmluZWQpIHRocm93IFwiR3JvdXBlZFZpb2xpbjogaW5wdXQgZGF0YSBlcnJvci5cIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBpZiAoMCA9PSBkLnZhbHVlcy5sZW5ndGgpIHRocm93IFwiVmlvbGluOiBJbnB1dCBkYXRhIGVycm9yXCI7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9hZGRHcm91cERpdmlkZXIoZG9tKXtcbiAgICAgICAgY29uc3QgZ3JvdXBzID0gdGhpcy5zY2FsZS54LmRvbWFpbigpO1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gTWF0aC5hYnModGhpcy5zY2FsZS54KHRoaXMuc2NhbGUueC5kb21haW4oKVsxXSkgLSB0aGlzLnNjYWxlLngodGhpcy5zY2FsZS54LmRvbWFpbigpWzBdKSAtIHRoaXMuc2NhbGUueC5iYW5kd2lkdGgoKSk7XG5cbiAgICAgICAgY29uc3QgZ2V0WCA9IChnLCBpKT0+IHtcbiAgICAgICAgICAgIGlmIChpICE9PSBncm91cHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYWxlLngoZykgKyArdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpICsgKHBhZGRpbmcvMilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGRvbS5zZWxlY3RBbGwoXCIudmxpbmVcIikuZGF0YShncm91cHMpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgIC5jbGFzc2VkKFwidmxpbmVcIiwgdHJ1ZSlcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgZ2V0WClcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgZ2V0WClcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgdGhpcy5zY2FsZS55LnJhbmdlKClbMF0pXG4gICAgICAgICAgICAuYXR0cihcInkyXCIsIHRoaXMuc2NhbGUueS5yYW5nZSgpWzFdKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIChnLCBpKT0+aSE9Z3JvdXBzLmxlbmd0aC0xPzE6MClcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcInJnYig4Niw5OCwxMDcpXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDAuNSlcblxuICAgIH1cblxuICAgIF92YWxpZFZlcnRpY2VzKHZlcnRpY2VzKSB7XG4gICAgICAgIGxldCB2YWxzID0gdmVydGljZXMucmVkdWNlKChhLCBiKT0+YS5jb25jYXQoYiksIFtdKTtcbiAgICAgICAgbGV0IGludmFsaWRWZXJ0aWNlcyA9IHZhbHMuZmlsdGVyKGQ9PmlzTmFOKGQpKTtcblxuICAgICAgICByZXR1cm4gIShpbnZhbGlkVmVydGljZXMubGVuZ3RoKTtcbiAgICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7anNvbn0gZnJvbSAnZDMtZmV0Y2gnO1xuaW1wb3J0IHttZWRpYW4sIGFzY2VuZGluZ30gZnJvbSAnZDMtYXJyYXknO1xuaW1wb3J0IHtzZWxlY3QsIHNlbGVjdEFsbH0gZnJvbSAnZDMtc2VsZWN0aW9uJztcbmltcG9ydCB7Z2V0R3RleFVybHMsIHBhcnNlVGlzc3VlcywgcGFyc2VUaXNzdWVTaXRlc30gZnJvbSAnLi9tb2R1bGVzL2d0ZXhEYXRhUGFyc2VyJztcbmltcG9ydCB7Y3JlYXRlVGlzc3VlR3JvdXBNZW51LCBwYXJzZVRpc3N1ZUdyb3VwTWVudX0gZnJvbSAnLi9tb2R1bGVzL2d0ZXhNZW51QnVpbGRlcic7XG5pbXBvcnQgR3JvdXBlZFZpb2xpbiBmcm9tICcuL21vZHVsZXMvR3JvdXBlZFZpb2xpbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBsYXVuY2gocm9vdElkLCB0b29sdGlwUm9vdElkLCBnZW5jb2RlSWQsIHBsb3RUaXRsZT1cIkdlbmUgRXhwcmVzc2lvbiBWaW9saW4gUGxvdFwiLCB1cmxzPWdldEd0ZXhVcmxzKCksIG1hcmdpbnM9X3NldFZpb2xpblBsb3RNYXJnaW5zKDUwLDc1LDI1MCw2MCksIGRpbWVuc2lvbnM9e3c6IHdpbmRvdy5pbm5lcldpZHRoKjAuOCwgaDoyNTB9KSB7XG4gICAgY29uc3QgcHJvbWlzZXMgPSBbXG4gICAgICAgIGpzb24odXJscy50aXNzdWUpLFxuICAgICAgICBqc29uKHVybHMuZ2VuZUV4cCArIGdlbmNvZGVJZCksXG4gICAgICAgIGpzb24odXJscy5nZW5lRXhwICsgZ2VuY29kZUlkICsgJyZhdHRyaWJ1dGVTdWJzZXQ9c2V4JylcbiAgICBdO1xuXG4gICAgY29uc3QgaWRzID0ge1xuICAgICAgICByb290OiByb290SWQsXG4gICAgICAgIHNwaW5uZXI6ICdzcGlubmVyJyxcbiAgICAgICAgc3ZnOiBgJHtyb290SWR9LXN2Z2AsXG4gICAgICAgIHRvb2x0aXA6IHRvb2x0aXBSb290SWQsXG4gICAgICAgIHRvb2xiYXI6IGAke3Jvb3RJZH0tdG9vbGJhcmAsXG4gICAgICAgIGNsb25lOiBgJHtyb290SWR9LXN2Zy1jbG9uZWAsIC8vIGZvciB1c2VyIGRvd25sb2FkXG4gICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgIGRvd25sb2FkOiBgJHtyb290SWR9LWRvd25sb2FkYCxcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiBgJHtyb290SWR9LW9wdGlvbi1tb2RhbGAsXG4gICAgICAgICAgICBmaWx0ZXI6IGAke3Jvb3RJZH0tZmlsdGVyYCxcbiAgICAgICAgICAgIC8vIHBsb3Qgb3B0aW9uIGJ1dHRvbnNcbiAgICAgICAgICAgIGFzY0FscGhhU29ydDogYCR7cm9vdElkfS1hc2MtYWxwaGFzb3J0YCxcbiAgICAgICAgICAgIGRlc2NBbHBoYVNvcnQ6IGAke3Jvb3RJZH0tZGVzYy1hbHBoYXNvcnRgLFxuICAgICAgICAgICAgYXNjU29ydDogYCR7cm9vdElkfS1hc2Mtc29ydGAsXG4gICAgICAgICAgICBkZXNjU29ydDogYCR7cm9vdElkfS1kZXNjLXNvcnRgLFxuICAgICAgICAgICAgbG9nU2NhbGU6IGAke3Jvb3RJZH0tbG9nLXNjYWxlYCxcbiAgICAgICAgICAgIGxpbmVhclNjYWxlOiBgJHtyb290SWR9LWxpbmVhci1zY2FsZWAsXG4gICAgICAgICAgICBub0RpZmY6IGAke3Jvb3RJZH0tbm8tZGlmZmAsXG4gICAgICAgICAgICBzZXhEaWZmOiBgJHtyb290SWR9LXNleC1kaWZmYCxcbiAgICAgICAgICAgIG91dGxpZXJzT246IGAke3Jvb3RJZH0tb3V0bGllcnMtb25gLFxuICAgICAgICAgICAgb3V0bGllcnNPZmY6IGAke3Jvb3RJZH0tb3V0bGllcnMtb2ZmYFxuICAgICAgICB9LFxuICAgICAgICBwbG90T3B0aW9uR3JvdXBzOiB7XG4gICAgICAgICAgICBzY2FsZTogYCR7cm9vdElkfS1vcHRpb24tc2NhbGVgLFxuICAgICAgICAgICAgc29ydDogYCR7cm9vdElkfS1vcHRpb24tc29ydGAsXG4gICAgICAgICAgICBkaWZmZXJlbnRpYXRpb246IGAke3Jvb3RJZH0tb3B0aW9uLWRpZmZlcmVudGlhdGlvbmAsXG4gICAgICAgICAgICBvdXRsaWVyczogYCR7cm9vdElkfS1vcHRpb24tb3V0bGllcmBcbiAgICAgICAgfSxcbiAgICAgICAgcGxvdFNvcnRzOiB7XG4gICAgICAgICAgICBhc2NBbHBoYVNvcnQ6ICdhc2MtYWxwaGFzb3J0JyxcbiAgICAgICAgICAgIGRlc2NBbHBoYVNvcnQ6ICdkZXNjLWFscGhhc29ydCcsXG4gICAgICAgICAgICBhc2NTb3J0OiAnYXNjLXNvcnQnLFxuICAgICAgICAgICAgZGVzY1NvcnQ6ICdkZXNjLXNvcnQnXG4gICAgICAgIH0sXG4gICAgICAgIHRpc3N1ZUZpbHRlcjogYCR7cm9vdElkfS1maWx0ZXItbW9kYWxgXG5cbiAgICB9O1xuXG4gICAgaWYgKCQoYCMke2lkcy5yb290fWApLmxlbmd0aCA9PSAwKSB0aHJvdyAnVmlvbGluIFBsb3QgRXJyb3I6IHJvb3RJZCBkb2VzIG5vdCBleGlzdC4nO1xuICAgIC8vIGNyZWF0ZSBET00gY29tcG9uZW50cyBpZiBub3QgYWxyZWFkeSBwcmVzZW50XG4gICAgaWYgKCQoYCMke2lkcy50b29sdGlwfWApLmxlbmd0aCA9PSAwKSAkKCc8ZGl2Lz4nKS5hdHRyKCdpZCcsIGlkcy50b29sdGlwKS5hcHBlbmRUbygkKCdib2R5JykpO1xuICAgIGlmICgkKGAjJHtpZHMudG9vbGJhcn1gKS5sZW5ndGggPT0gMCkgJCgnPGRpdi8+JykuYXR0cignaWQnLCBpZHMudG9vbGJhcikuYXBwZW5kVG8oJChgIyR7aWRzLnJvb3R9YCkpO1xuICAgIGlmICgkKGAjJHtpZHMucm9vdH0gIyR7aWRzLnNwaW5uZXJ9YCkubGVuZ3RoID09IDApICQoYDxzcGFuPjxpIGlkPVwic3Bpbm5lclwiIGNsYXNzPVwiZmFzIGZhLXN5bmMgZmEtc3BpblwiPjwvaT48L3NwYW4+YCkuYXBwZW5kVG8oJChgIyR7aWRzLnJvb3R9YCkpOyBlbHNlICQoYCMke2lkcy5yb290fSAjJHtpZHMuc3Bpbm5lcn1gKS5zaG93KCk7XG4gICAgaWYgKCQoYCMke2lkcy5jbG9uZX1gKS5sZW5ndGggPT0gMCkgJCgnPGRpdi8+JykuYXR0cignaWQnLCBpZHMuY2xvbmUpLmFwcGVuZFRvKCQoYCMke2lkcy5yb290fWApKTtcblxuXG4gICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpc3N1ZXMgPSBwYXJzZVRpc3N1ZXMoYXJnc1swXSk7XG4gICAgICAgICAgICBjb25zdCB0aXNzdWVJZE5hbWVNYXAgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwQ29sb3JEaWN0ID0ge1xuICAgICAgICAgICAgICAgIGZlbWFsZTogJyNlNjdmN2InLFxuICAgICAgICAgICAgICAgIG1hbGU6ICcjNzBiY2QyJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHRpc3N1ZURpY3QgPSB7fTtcbiAgICAgICAgICAgIHRpc3N1ZXMuZm9yRWFjaCh4ID0+IHtcbiAgICAgICAgICAgICAgICB0aXNzdWVJZE5hbWVNYXBbeC50aXNzdWVTaXRlRGV0YWlsSWRdID0geC50aXNzdWVTaXRlRGV0YWlsO1xuICAgICAgICAgICAgICAgIHRpc3N1ZURpY3RbeC50aXNzdWVTaXRlRGV0YWlsXSA9IHg7XG4gICAgICAgICAgICAgICAgZ3JvdXBDb2xvckRpY3RbeC50aXNzdWVTaXRlRGV0YWlsSWRdID0geC5jb2xvckhleDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCB2aW9saW5QbG90RGF0YSA9IF9wYXJzZUdlbmVFeHByZXNzaW9uRm9yVmlvbGluKGFyZ3NbMV0sIHRpc3N1ZUlkTmFtZU1hcCwgZ3JvdXBDb2xvckRpY3QpO1xuICAgICAgICAgICAgbGV0IHZpb2xpblBsb3QgPSBuZXcgR3JvdXBlZFZpb2xpbih2aW9saW5QbG90RGF0YSk7XG4gICAgICAgICAgICAvLyBhbHBoYWJldGljYWxseSBzb3J0IGJ5IGRlZmF1bHRcbiAgICAgICAgICAgIHZpb2xpblBsb3QuZGF0YS5zb3J0KChhLGIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYS5ncm91cCA8IGIuZ3JvdXApIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhLmdyb3VwID4gYi5ncm91cCkgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IHRvb2x0aXAgPSB2aW9saW5QbG90LmNyZWF0ZVRvb2x0aXAoaWRzLnRvb2x0aXApO1xuXG4gICAgICAgICAgICAvLyBhZGRpbmcgcHJvcGVydGllcyB0byBrZWVwIHRyYWNrIG9mIHNvcnRpbmcgYW5kIGZpbHRlcmluZyBzcGVjaWZpY2FsbHkgZm9yIHRoaXMgcGxvdFxuICAgICAgICAgICAgdmlvbGluUGxvdC5zb3J0RGF0YSA9IHZpb2xpblBsb3QuZGF0YS5tYXAoZD0+ZCk7IC8vIHNvcnQgYW55IGRpZmZlcmVudGlhdGVkIGRhdGEgYnkgdGhlIGFnZ3JlZ2F0ZSBkYXRhLCB0b29cbiAgICAgICAgICAgIHZpb2xpblBsb3QuYWxsRGF0YSA9IHZpb2xpblBsb3QuZGF0YS5tYXAoZD0+ZCk7XG4gICAgICAgICAgICB2aW9saW5QbG90LmdlbmNvZGVJZCA9IGdlbmNvZGVJZDtcbiAgICAgICAgICAgIHZpb2xpblBsb3QudElkTmFtZU1hcCA9IHRpc3N1ZUlkTmFtZU1hcDtcbiAgICAgICAgICAgIHZpb2xpblBsb3QuZ3JvdXBDb2xvckRpY3QgPSBncm91cENvbG9yRGljdDtcbiAgICAgICAgICAgIHZpb2xpblBsb3QudGlzc3VlRGljdCA9IHRpc3N1ZURpY3Q7XG4gICAgICAgICAgICB2aW9saW5QbG90LmdlbmVKc29uID0ge1xuICAgICAgICAgICAgICAgIGFsbERhdGE6IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgc3Vic2V0RGF0YTogYXJnc1syXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZpb2xpblBsb3QudW5pdCA9IHZpb2xpblBsb3REYXRhLmxlbmd0aCA+IDAgPyBgICR7dmlvbGluUGxvdERhdGFbMF0udW5pdH1gIDogJyc7XG4gICAgICAgICAgICAvLyBkZWZhdWx0IHBsb3Qgb3B0aW9uc1xuICAgICAgICAgICAgdmlvbGluUGxvdC5ncENvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICBzdWJzZXQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNjYWxlOiAnbG9nJyxcbiAgICAgICAgICAgICAgICBzb3J0OiBpZHMucGxvdFNvcnRzLmFzY0FscGhhU29ydCxcbiAgICAgICAgICAgICAgICBzaG93T3V0bGllcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBwbG90VGl0bGVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIF9kcmF3VmlvbGluUGxvdCh2aW9saW5QbG90LCBtYXJnaW5zLCBkaW1lbnNpb25zLCBpZHMpO1xuICAgICAgICAgICAgX3BvcHVsYXRlVGlzc3VlRmlsdGVyKHZpb2xpblBsb3QsIGlkcy50aXNzdWVGaWx0ZXIsIGlkcywgYXJnc1swXSk7XG4gICAgICAgICAgICBfYWRkVG9vbGJhcih2aW9saW5QbG90LCB0b29sdGlwLCBpZHMsIHVybHMpO1xuICAgICAgICAgICAgJChgIyR7aWRzLnJvb3R9ICMke2lkcy5zcGlubmVyfWApLmhpZGUoKTtcbiAgICAgICAgfSk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBtYXJnaW5zIG9mIHRoZSB2aW9saW4gcGxvdFxuICogQHBhcmFtIHRvcCB7SW50ZWdlcn1cbiAqIEBwYXJhbSByaWdodCB7SW50ZWdlcn1cbiAqIEBwYXJhbSBib3R0b20ge2ludGVnZXJ9XG4gKiBAcGFyYW0gbGVmdCB7SW50ZWdlcn1cbiAqIEByZXR1cm5zIHt7dG9wOiBudW1iZXIsIHJpZ2h0OiBudW1iZXIsIGJvdHRvbTogbnVtYmVyLCBsZWZ0OiBudW1iZXJ9fVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX3NldFZpb2xpblBsb3RNYXJnaW5zKHRvcD01MCwgcmlnaHQ9NTAsIGJvdHRvbT01MCwgbGVmdD01MCl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgIHJpZ2h0OiByaWdodCxcbiAgICAgICAgYm90dG9tOiBib3R0b20sXG4gICAgICAgIGxlZnQ6IGxlZnRcbiAgICB9O1xufVxuXG4vKipcbiAqIFNldCB0aGUgZGltZW5zaW9ucyBvZiB0aGUgdmlvbGluIHBsb3RcbiAqIEBwYXJhbSB3aWR0aCB7SW50ZWdlcn1cbiAqIEBwYXJhbSBoZWlnaHQge0ludGVnZXJ9XG4gKiBAcGFyYW0gbWFyZ2luIHtPYmplY3R9IHdpdGggYXR0cjogdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XG4gKiBAcmV0dXJucyB7e3dpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBvdXRlcldpZHRoOiBudW1iZXIsIG91dGVySGVpZ2h0OiBudW1iZXJ9fVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX3NldFZpb2xpblBsb3REaW1lbnNpb25zKHdpZHRoPTEyMDAsIGhlaWdodD0yNTAsIG1hcmdpbj1fc2V0VmlvbGluUGxvdE1hcmdpbnMoKSl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgb3V0ZXJXaWR0aDogd2lkdGggKyAobWFyZ2luLmxlZnQgKyBtYXJnaW4ucmlnaHQpLFxuICAgICAgICBvdXRlckhlaWdodDogaGVpZ2h0ICsgKG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tKVxuICAgIH1cbn1cblxuLyoqXG4gKiBBZGRzIHRvb2xiYXIgYWxsb3dpbmcgdGhlIHVzZXIgdG8gY29udHJvbCBkaWZmZXJlbnQgcGxvdCBvcHRpb25zXG4gKiBAcGFyYW0gdnBsb3Qge0dyb3VwZWRWaW9saW59IFZpb2xpbiBwbG90IG9iamVjdCB0byBhZGQgdG9vbGJhciB0b1xuICogQHBhcmFtIHRvb2x0aXAge1Rvb2x0aXB9IFZpb2xpbiBwbG90IHRvb2x0aXBcbiAqIEBwYXJhbSBpZHMge0RpY3Rpb25hcnl9IERpY3Rpb25hcnkgb2YgSURzIHJlbGV2YW50IHRvIHRoZSBwbG90XG4gKiBAcGFyYW0gdXJscyB7RGljdGlvbmFyeX0gRGljdGlvbmFyeSBvZiBVUkxzIHRvIHVzZSB3aGVuIG1ha2luZyBBSkFYIGNhbGxzXG4gKi9cbmZ1bmN0aW9uIF9hZGRUb29sYmFyKHZwbG90LCB0b29sdGlwLCBpZHMsIHVybHMpIHtcbiAgICBsZXQgdG9vbGJhciA9IHZwbG90LmNyZWF0ZVRvb2xiYXIoaWRzLnRvb2xiYXIsIHRvb2x0aXApO1xuICAgIHRvb2xiYXIuY3JlYXRlRG93bmxvYWRTdmdCdXR0b24oaWRzLmJ1dHRvbnMuZG93bmxvYWQsIGlkcy5zdmcsICdnZW5lLWV4cC1wbG90LnN2ZycsIGlkcy5jbG9uZSk7XG5cbiAgICAvLyBhZGRpbmcgYm9vdHN0cmFwIGNsYXNzZXMgdG8gdG9vbGJhclxuICAgICQoYCMke2lkcy50b29sYmFyfWApLmFkZENsYXNzKCdyb3cnKTtcbiAgICAkKGAjJHtpZHMudG9vbGJhcn0gLmJ0bi1ncm91cGApLmFkZENsYXNzKCdjb2wteHMtMTIgY29sLWxnLTEgdGV4dC1ub3dyYXAnKS5jc3MoJ2Rpc3BsYXknLCAnZmxleCcpO1xuXG4gICAgJCgnPGRpdj48L2Rpdj4nKS5hcHBlbmRUbyhgIyR7aWRzLnRvb2xiYXJ9YClcbiAgICAgICAgLmF0dHIoJ2lkJywgYCR7aWRzLnRvb2xiYXJ9LXBsb3Qtb3B0aW9uc2ApXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdjb2wtbGctMTEgdGV4dC1ub3dyYXAnKTtcbiAgICBsZXQgcGxvdE9wdGlvbnMgPSAkKGAjJHtpZHMudG9vbGJhcn0tcGxvdC1vcHRpb25zYCk7XG5cbiAgICAvLyBzdWJzZXR0aW5nIG9wdGlvbnNcbiAgICAkKCc8ZGl2Lz4nKS5hcHBlbmRUbyhwbG90T3B0aW9ucylcbiAgICAgICAgLmF0dHIoJ2lkJywgaWRzLnBsb3RPcHRpb25Hcm91cHMuZGlmZmVyZW50aWF0aW9uKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnY29sLWxnLTIgY29sLXhsLTInKTtcbiAgICAkKCc8c3Bhbi8+JykuYXBwZW5kVG8oYCMke2lkcy5wbG90T3B0aW9uR3JvdXBzLmRpZmZlcmVudGlhdGlvbn1gKVxuICAgICAgICAuYXR0cignY2xhc3MnLCBgJHtpZHMucm9vdH0tb3B0aW9uLWxhYmVsYClcbiAgICAgICAgLmh0bWwoJ1N1YnNldCcpO1xuICAgICQoJzxkaXYvPicpLmFwcGVuZFRvKGAjJHtpZHMucGxvdE9wdGlvbkdyb3Vwcy5kaWZmZXJlbnRpYXRpb259YClcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2J0bi1ncm91cCBidG4tZ3JvdXAtc20nKTtcbiAgICBsZXQgc3Vic2V0QnV0dG9uR3JvdXAgPSAkKGAjJHtpZHMucGxvdE9wdGlvbkdyb3Vwcy5kaWZmZXJlbnRpYXRpb259IC5idG4tZ3JvdXBgKTtcbiAgICAkKGA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCIgaWQ9XCIke2lkcy5idXR0b25zLm5vRGlmZn1cIj5Ob25lPC9idXR0b24+YCkuYXBwZW5kVG8oc3Vic2V0QnV0dG9uR3JvdXApO1xuICAgICQoYDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBpZD1cIiR7aWRzLmJ1dHRvbnMuc2V4RGlmZn1cIj5TZXg8L2J1dHRvbj5gKS5hcHBlbmRUbyhzdWJzZXRCdXR0b25Hcm91cCk7XG5cbiAgICAvLyBzY2FsZSBvcHRpb25zXG4gICAgJCgnPGRpdi8+JykuYXBwZW5kVG8ocGxvdE9wdGlvbnMpXG4gICAgICAgIC5hdHRyKCdpZCcsIGlkcy5wbG90T3B0aW9uR3JvdXBzLnNjYWxlKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnY29sLWxnLTIgY29sLXhsLTInKTtcbiAgICAkKCc8c3Bhbi8+JykuYXBwZW5kVG8oYCMke2lkcy5wbG90T3B0aW9uR3JvdXBzLnNjYWxlfWApXG4gICAgICAgIC5hdHRyKCdjbGFzcycsIGAke2lkcy5yb290fS1vcHRpb24tbGFiZWxgKVxuICAgICAgICAuaHRtbCgnU2NhbGUnKTtcbiAgICAkKCc8ZGl2Lz4nKS5hcHBlbmRUbyhgIyR7aWRzLnBsb3RPcHRpb25Hcm91cHMuc2NhbGV9YClcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2J0bi1ncm91cCBidG4tZ3JvdXAtc20nKTtcbiAgICBsZXQgc2NhbGVCdXR0b25Hcm91cCA9ICQoYCMke2lkcy5wbG90T3B0aW9uR3JvdXBzLnNjYWxlfSAuYnRuLWdyb3VwYCk7XG4gICAgJChgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIGlkPVwiJHtpZHMuYnV0dG9ucy5sb2dTY2FsZX1cIj5Mb2c8L2J1dHRvbj5gKS5hcHBlbmRUbyhzY2FsZUJ1dHRvbkdyb3VwKTtcbiAgICAkKGA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCIgaWQ9XCIke2lkcy5idXR0b25zLmxpbmVhclNjYWxlfVwiPkxpbmVhcjwvYnV0dG9uPmApLmFwcGVuZFRvKHNjYWxlQnV0dG9uR3JvdXApO1xuXG4gICAgLy8gc29ydCBvcHRpb25zIC0tIHRpc3N1ZSBuYW1lIHNvcnRzXG4gICAgJCgnPGRpdi8+JykuYXBwZW5kVG8ocGxvdE9wdGlvbnMpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsIGAke2lkcy5wbG90T3B0aW9uR3JvdXBzLnNvcnR9IGNvbC1sZy0yIGNvbC14bC0yYClcbiAgICAgICAgLmF0dHIoJ2lkJywgYHZwbG90LWFscGhhLXNvcnRzYCk7XG4gICAgJCgnPHNwYW4vPicpLmFwcGVuZFRvKGAuJHtpZHMucGxvdE9wdGlvbkdyb3Vwcy5zb3J0fSN2cGxvdC1hbHBoYS1zb3J0c2ApXG4gICAgICAgIC5hdHRyKCdjbGFzcycsIGAke2lkcy5yb290fS1vcHRpb24tbGFiZWxgKVxuICAgICAgICAuaHRtbCgnVGlzc3VlIFNvcnQnKTtcbiAgICAkKCc8ZGl2Lz4nKS5hcHBlbmRUbyhgLiR7aWRzLnBsb3RPcHRpb25Hcm91cHMuc29ydH0jdnBsb3QtYWxwaGEtc29ydHNgKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnYnRuLWdyb3VwIGJ0bi1ncm91cC1zbScpXG4gICAgICAgIC5hdHRyKCdpZCcsIGAke2lkcy5wbG90T3B0aW9uR3JvdXBzLnNvcnR9LWFscGhhYCk7XG4gICAgbGV0IGFscGhhU29ydEJ1dHRvbkdyb3VwID0gJChgIyR7aWRzLnBsb3RPcHRpb25Hcm91cHMuc29ydH0tYWxwaGEuYnRuLWdyb3VwYCk7XG4gICAgJChgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBmYSBmYS1zb3J0LWFscGhhLWRvd25cIiBpZD1cIiR7aWRzLmJ1dHRvbnMuYXNjQWxwaGFTb3J0fVwiPjwvYnV0dG9uPmApLmFwcGVuZFRvKGFscGhhU29ydEJ1dHRvbkdyb3VwKTtcbiAgICAkKGA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGZhIGZhLXNvcnQtYWxwaGEtdXBcIiBpZD1cIiR7aWRzLmJ1dHRvbnMuZGVzY0FscGhhU29ydH1cIj48L2J1dHRvbj5gKS5hcHBlbmRUbyhhbHBoYVNvcnRCdXR0b25Hcm91cCk7XG5cblxuICAgIC8vIHNvcnQgb3B0aW9ucyAtLSBtZWRpYW4gc29ydHNcbiAgICAkKCc8ZGl2Lz4nKS5hcHBlbmRUbyhwbG90T3B0aW9ucylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgYCR7aWRzLnBsb3RPcHRpb25Hcm91cHMuc29ydH0gY29sLWxnLTIgY29sLXhsLTJgKVxuICAgICAgICAuYXR0cignaWQnLCBgdnBsb3QtbnVtLXNvcnRzYCk7XG4gICAgJCgnPHNwYW4vPicpLmFwcGVuZFRvKGAuJHtpZHMucGxvdE9wdGlvbkdyb3Vwcy5zb3J0fSN2cGxvdC1udW0tc29ydHNgKVxuICAgICAgICAuYXR0cignY2xhc3MnLCBgJHtpZHMucm9vdH0tb3B0aW9uLWxhYmVsYClcbiAgICAgICAgLmh0bWwoJ01lZGlhbiBTb3J0Jyk7XG4gICAgJCgnPGRpdi8+JykuYXBwZW5kVG8oYC4ke2lkcy5wbG90T3B0aW9uR3JvdXBzLnNvcnR9I3ZwbG90LW51bS1zb3J0c2ApXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdidG4tZ3JvdXAgYnRuLWdyb3VwLXNtJylcbiAgICAgICAgLmF0dHIoJ2lkJywgYCR7aWRzLnBsb3RPcHRpb25Hcm91cHMuc29ydH0tbnVtYCk7XG4gICAgbGV0IG51bVNvcnRCdXR0b25Hcm91cCA9ICQoYCMke2lkcy5wbG90T3B0aW9uR3JvdXBzLnNvcnR9LW51bS5idG4tZ3JvdXBgKTtcbiAgICAkKGA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGZhIGZhLXNvcnQtbnVtZXJpYy1kb3duXCIgaWQ9XCIke2lkcy5idXR0b25zLmFzY1NvcnR9XCI+PC9idXR0b24+YCkuYXBwZW5kVG8obnVtU29ydEJ1dHRvbkdyb3VwKTtcbiAgICAkKGA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGZhIGZhLXNvcnQtbnVtZXJpYy11cFwiIGlkPVwiJHtpZHMuYnV0dG9ucy5kZXNjU29ydH1cIj48L2J1dHRvbj5gKS5hcHBlbmRUbyhudW1Tb3J0QnV0dG9uR3JvdXApO1xuXG4gICAgLy8gb3V0bGllciBkaXNwbGF5IG9wdGlvbnNcbiAgICAkKCc8ZGl2Lz4nKS5hcHBlbmRUbyhwbG90T3B0aW9ucylcbiAgICAgICAgLmF0dHIoJ2lkJywgaWRzLnBsb3RPcHRpb25Hcm91cHMub3V0bGllcnMpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdjb2wtbGctMiBjb2wteGwtMicpO1xuICAgICQoJzxzcGFuLz4nKS5hcHBlbmRUbyhgIyR7aWRzLnBsb3RPcHRpb25Hcm91cHMub3V0bGllcnN9YClcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgYCR7aWRzLnJvb3R9LW9wdGlvbi1sYWJlbGApXG4gICAgICAgIC5odG1sKCdPdXRsaWVycycpO1xuICAgICQoJzxkaXYvPicpLmFwcGVuZFRvKGAjJHtpZHMucGxvdE9wdGlvbkdyb3Vwcy5vdXRsaWVyc31gKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnYnRuLWdyb3VwIGJ0bi1ncm91cC1zbScpO1xuICAgIGxldCBvdXRsaWVyc0J1dHRvbkdyb3VwID0gJChgIyR7aWRzLnBsb3RPcHRpb25Hcm91cHMub3V0bGllcnN9IC5idG4tZ3JvdXBgKTtcbiAgICAkKGA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCIgaWQ9XCIke2lkcy5idXR0b25zLm91dGxpZXJzT259XCI+T248L2J1dHRvbj5gKS5hcHBlbmRUbyhvdXRsaWVyc0J1dHRvbkdyb3VwKTtcbiAgICAkKGA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCIgaWQ9XCIke2lkcy5idXR0b25zLm91dGxpZXJzT2ZmfVwiPk9mZjwvYnV0dG9uPmApLmFwcGVuZFRvKG91dGxpZXJzQnV0dG9uR3JvdXApO1xuXG4gICAgc2VsZWN0QWxsKGAjJHtpZHMucGxvdE9wdGlvbnNNb2RhbH0gLm1vZGFsLWJvZHkgYnV0dG9uYCkuY2xhc3NlZCgnYWN0aXZlJywgZmFsc2UpO1xuXG4gICAgLy8gcGxvdCBkZWZhdWx0c1xuICAgIHNlbGVjdEFsbChgIyR7aWRzLmJ1dHRvbnMuYXNjQWxwaGFTb3J0fSxcbiAgICAgICAgICAgICAgICMke2lkcy5idXR0b25zLmxvZ1NjYWxlfSxcbiAgICAgICAgICAgICAgICMke2lkcy5idXR0b25zLm5vRGlmZn0sXG4gICAgICAgICAgICAgICAjJHtpZHMuYnV0dG9ucy5vdXRsaWVyc09mZn1gKS5jbGFzc2VkKCdhY3RpdmUnLCB0cnVlKTtcblxuICAgIC8vIGZpbHRlclxuICAgIHRvb2xiYXIuY3JlYXRlQnV0dG9uKGlkcy5idXR0b25zLmZpbHRlciwgJ2ZhLWZpbHRlcicpO1xuICAgIGxldCB0aXNzdWVGaWx0ZXJCdXR0b24gPSBzZWxlY3QoYCMke2lkcy5idXR0b25zLmZpbHRlcn1gKVxuICAgICAgICAub24oJ21vdXNlb3ZlcicsICgpPT57dG9vbGJhci50b29sdGlwLnNob3coJ0ZpbHRlciBUaXNzdWVzJyk7fSlcbiAgICAgICAgLm9uKCdtb3VzZW91dCcsICgpPT57dG9vbGJhci50b29sdGlwLmhpZGUoKTt9KTtcblxuXG4gICAgLy8gc29ydCBldmVudHNcbiAgICAkKGAuJHtpZHMucGxvdE9wdGlvbkdyb3Vwcy5zb3J0fSBidXR0b25gKS5vbignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICAgICAgbGV0IGJ0biA9IHNlbGVjdCh0aGlzKTtcbiAgICAgICAgaWYgKGJ0bi5jbGFzc2VkKCdhY3RpdmUnKSkgcmV0dXJuO1xuICAgICAgICB2cGxvdC5ncENvbmZpZy5zb3J0ID0gZS50YXJnZXQuaWQucmVwbGFjZShgJHtpZHMucm9vdH0tYCwgJycpO1xuICAgICAgICBzZWxlY3RBbGwoYC4ke2lkcy5wbG90T3B0aW9uR3JvdXBzLnNvcnR9IGJ1dHRvbmApLmNsYXNzZWQoJ2FjdGl2ZScsIGZhbHNlKTtcbiAgICAgICAgYnRuLmNsYXNzZWQoJ2FjdGl2ZScsIHRydWUpO1xuICAgICAgICBfc29ydEFuZFVwZGF0ZURhdGEodnBsb3QsIGlkcyk7XG4gICAgfSk7XG5cbiAgICAvLyBzY2FsZSBldmVudHNcbiAgICAkKGAjJHtpZHMucGxvdE9wdGlvbkdyb3Vwcy5zY2FsZX0gYnV0dG9uYCkub24oJ2NsaWNrJywgZnVuY3Rpb24oZSl7XG4gICAgICAgIGxldCBidG4gPSBzZWxlY3QodGhpcyk7XG4gICAgICAgIGlmIChidG4uY2xhc3NlZCgnYWN0aXZlJykpIHJldHVybjtcbiAgICAgICAgc2VsZWN0QWxsKGAjJHtpZHMucGxvdE9wdGlvbkdyb3Vwcy5zY2FsZX0gYnV0dG9uYCkuY2xhc3NlZCgnYWN0aXZlJywgZmFsc2UpO1xuICAgICAgICBidG4uY2xhc3NlZCgnYWN0aXZlJywgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKGUudGFyZ2V0LmlkID09IGlkcy5idXR0b25zLmxvZ1NjYWxlKSB7XG4gICAgICAgICAgICBfY2FsY1Zpb2xpblBsb3RWYWx1ZXModnBsb3QuZGF0YSwgdHJ1ZSk7XG4gICAgICAgICAgICBfY2FsY1Zpb2xpblBsb3RWYWx1ZXModnBsb3QuYWxsRGF0YSwgdHJ1ZSk7XG4gICAgICAgICAgICB2cGxvdC51cGRhdGVZU2NhbGUoJ2xvZzEwKFRQTSsxKScpO1xuICAgICAgICAgICAgdnBsb3QuZ3BDb25maWcuc2NhbGUgPSAnbG9nJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9jYWxjVmlvbGluUGxvdFZhbHVlcyh2cGxvdC5kYXRhLCBmYWxzZSk7XG4gICAgICAgICAgICBfY2FsY1Zpb2xpblBsb3RWYWx1ZXModnBsb3QuYWxsRGF0YSwgZmFsc2UpO1xuICAgICAgICAgICAgdnBsb3QudXBkYXRlWVNjYWxlKCdUUE0nKTtcbiAgICAgICAgICAgIHZwbG90LmdwQ29uZmlnLnNjYWxlID0gJ2xpbmVhcic7XG4gICAgICAgIH1cblxuICAgICAgICBfY3VzdG9taXplVG9vbHRpcCh2cGxvdCk7XG4gICAgICAgIGxldCBzdmcgPSBzZWxlY3QoYCMke2lkcy5zdmd9IGdgKTtcbiAgICAgICAgaWYodnBsb3QucGxvdFRpdGxlICE9PSB1bmRlZmluZWQpIHZwbG90LmFkZFBsb3RUaXRsZShzdmcsIHZwbG90LnBsb3RUaXRsZSk7XG4gICAgICAgIGlmICh2cGxvdC5ncENvbmZpZy5zdWJzZXQpIF9hZGRWaW9saW5UaXNzdWVDb2xvckJhbmQodnBsb3QsIHN2ZywgdnBsb3QudGlzc3VlRGljdCwgJ2JvdHRvbScpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNlbGVjdChgIyR7aWRzLnN2Z30gI3Zpb2xpbkxlZ2VuZGApLnJlbW92ZSgpO1xuICAgICAgICAgICAgX21vdmVYQXhpcyhzdmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2cGxvdC5zaG93T3V0bGllcnMpIHNlbGVjdEFsbChgIyR7aWRzLnN2Z30gcGF0aC52aW9saW5gKS5jbGFzc2VkKCdvdXRsaW5lZCcsIGZhbHNlKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAkKGAjJHtpZHMuc3ZnfSAudmlvbGluLW91dGxpZXJzYCkuaGlkZSgpO1xuICAgICAgICAgICAgc2VsZWN0QWxsKGAjJHtpZHMuc3ZnfSBwYXRoLnZpb2xpbmApLmNsYXNzZWQoJ291dGxpbmVkJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIG91dGxpZXIgZGlzcGxheSBldmVudHNcbiAgICAkKGAjJHtpZHMucGxvdE9wdGlvbkdyb3Vwcy5vdXRsaWVyc30gYnV0dG9uYCkub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBsZXQgYnRuID0gc2VsZWN0KHRoaXMpO1xuICAgICAgICBpZiAoYnRuLmNsYXNzZWQoJ2FjdGl2ZScpKSByZXR1cm47XG4gICAgICAgIHNlbGVjdEFsbChgIyR7aWRzLnBsb3RPcHRpb25Hcm91cHMub3V0bGllcnN9IGJ1dHRvbmApLmNsYXNzZWQoJ2FjdGl2ZScsIGZhbHNlKTtcbiAgICAgICAgYnRuLmNsYXNzZWQoJ2FjdGl2ZScsIHRydWUpO1xuICAgICAgICB2cGxvdC5ncENvbmZpZy5zaG93T3V0bGllcnMgPSBlLnRhcmdldC5pZCA9PSBpZHMuYnV0dG9ucy5vdXRsaWVyc09uO1xuICAgICAgICBfdXBkYXRlT3V0bGllckRpc3BsYXkodnBsb3QsIGlkcyk7XG4gICAgfSk7XG5cbiAgICAvLyBkaWZmZXJlbnRpYXRpb24gZXZlbnRzXG4gICAgJChgIyR7aWRzLnBsb3RPcHRpb25Hcm91cHMuZGlmZmVyZW50aWF0aW9ufSBidXR0b25gKS5vbignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICAgICAgbGV0IGJ0biA9IHNlbGVjdCh0aGlzKTtcbiAgICAgICAgaWYgKGJ0bi5jbGFzc2VkKCdhY3RpdmUnKSkgcmV0dXJuO1xuICAgICAgICBzZWxlY3RBbGwoYCMke2lkcy5wbG90T3B0aW9uR3JvdXBzLmRpZmZlcmVudGlhdGlvbn0gYnV0dG9uYCkuY2xhc3NlZCgnYWN0aXZlJywgZmFsc2UpO1xuICAgICAgICBidG4uY2xhc3NlZCgnYWN0aXZlJywgdHJ1ZSk7XG4gICAgICAgIGxldCBuZXdEYXRhID0gZS50YXJnZXQuaWQgPT0gaWRzLmJ1dHRvbnMuc2V4RGlmZiA/IHZwbG90LmdlbmVKc29uLnN1YnNldERhdGEgOiB2cGxvdC5nZW5lSnNvbi5hbGxEYXRhO1xuICAgICAgICBjb25zdCB2aW9saW5QbG90RGF0YSA9IHZwbG90LmdwQ29uZmlnLnNjYWxlID09ICdsb2cnPyBfcGFyc2VHZW5lRXhwcmVzc2lvbkZvclZpb2xpbihuZXdEYXRhLCB2cGxvdC50SWROYW1lTWFwLCB2cGxvdC5ncm91cENvbG9yRGljdCkgOiBfcGFyc2VHZW5lRXhwcmVzc2lvbkZvclZpb2xpbihuZXdEYXRhLCB2cGxvdC50SWROYW1lTWFwLCB2cGxvdC5ncm91cENvbG9yRGljdCwgZmFsc2UpO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZFRpc3N1ZXMgPSB2cGxvdC5kYXRhLm1hcChkID0+IGQuZ3JvdXApO1xuICAgICAgICB2cGxvdC5hbGxEYXRhID0gdmlvbGluUGxvdERhdGEubWFwKGQ9PmQpO1xuICAgICAgICB2cGxvdC5kYXRhID0gdmlvbGluUGxvdERhdGEuZmlsdGVyKGQ9PmZpbHRlcmVkVGlzc3Vlcy5pbmRleE9mKGQuZ3JvdXApICE9IC0xKTtcbiAgICAgICAgdnBsb3QucmVzZXQoKTtcbiAgICAgICAgbGV0IHN2ZyA9IHNlbGVjdChgIyR7aWRzLnN2Z30gZ2ApO1xuICAgICAgICBpZiAoIXZwbG90LnNob3dPdXRsaWVycykge1xuICAgICAgICAgICAgICAgICQoYCMke2lkcy5zdmd9IC52aW9saW4tb3V0bGllcnNgKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgc2VsZWN0QWxsKGAjJHtpZHMuc3ZnfSBwYXRoLnZpb2xpbmApLmNsYXNzZWQoJ291dGxpbmVkJywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIGlmKHZwbG90LnBsb3RUaXRsZSAhPT0gdW5kZWZpbmVkKSB2cGxvdC5hZGRQbG90VGl0bGUoc3ZnLCB2cGxvdC5wbG90VGl0bGUpO1xuICAgICAgICBpZiAoZS50YXJnZXQuaWQgPT0gaWRzLmJ1dHRvbnMuc2V4RGlmZikge1xuICAgICAgICAgICAgdnBsb3QuZ3BDb25maWcuc3Vic2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgIF9hZGRWaW9saW5UaXNzdWVDb2xvckJhbmQodnBsb3QsIHN2ZywgdnBsb3QudGlzc3VlRGljdCwgJ2JvdHRvbScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZWN0KGAjJHtpZHMuc3ZnfSAjdmlvbGluTGVnZW5kYCkucmVtb3ZlKCk7XG4gICAgICAgICAgICB2cGxvdC5ncENvbmZpZy5zdWJzZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIF9tb3ZlWEF4aXMoc3ZnKTtcbiAgICAgICAgfVxuICAgICAgICBfY3VzdG9taXplVG9vbHRpcCh2cGxvdCk7XG4gICAgfSk7XG5cbiAgICB0aXNzdWVGaWx0ZXJCdXR0b24ub24oJ2NsaWNrJywgKGQsIGksIG5vZGVzKT0+e1xuICAgICAgICAkKCcjZ2VuZS1leHByLXZwbG90LWZpbHRlci1tb2RhbCcpLm1vZGFsKCdzaG93Jyk7XG4gICAgfSk7XG5cbn1cblxuZnVuY3Rpb24gX2NhbGNWaW9saW5QbG90VmFsdWVzKGRhdGEsIHVzZUxvZz10cnVlKSB7XG4gICAgZGF0YS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBkLnZhbHVlcyA9IHVzZUxvZz9kLmRhdGEubWFwKChkZCk9PntyZXR1cm4gTWF0aC5sb2cxMCgrZGQrMSl9KTpkLmRhdGE7XG4gICAgICAgIGQudmFsdWVzLnNvcnQoYXNjZW5kaW5nKTtcbiAgICAgICAgLy8gbWVkaWFuIG5lZWRlZCBmb3Igc29ydGluZ1xuICAgICAgICBkLm1lZGlhbiA9IG1lZGlhbihkLnZhbHVlcyk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGV4cHJlc3Npb24gZGF0YSBvZiBhIGdlbmUgZm9yIGEgZ3JvdXBlZCB2aW9saW4gcGxvdFxuICogQHBhcmFtIGRhdGEge0pTT059IGZyb20gR1RFeCBnZW5lIGV4cHJlc3Npb24gd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBjb2xvcnMge0RpY3Rpb25hcnl9IHRoZSB2aW9saW4gY29sb3IgZm9yIGdlbmVzXG4gKiBAcGFyYW0gSWROYW1lTWFwIHtEaWN0aW9uYXJ5fSBtYXBwaW5nIG9mIHRpc3N1ZUlkcyB0byB0aXNzdWUgbmFtZXNcbiAqIEBwYXJhbSB1c2VMb2cge0Jvb2xlYW59IHdoZXRoZXIgb3Igbm90IHRvIGNhbGN1bGF0ZSB2YWx1ZXMgaW4gbG9nXG4gKi9cbmZ1bmN0aW9uIF9wYXJzZUdlbmVFeHByZXNzaW9uRm9yVmlvbGluKGRhdGEsIGlkTmFtZU1hcD11bmRlZmluZWQsIGNvbG9ycz11bmRlZmluZWQsIHVzZUxvZz10cnVlKXtcbiAgICBjb25zdCBhdHRyID0gJ2dlbmVFeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNlIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpPT57XG4gICAgICAgIFsnZGF0YScsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnZ2VuZVN5bWJvbCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ1BhcnNlIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGQuZ3JvdXAgPSBpZE5hbWVNYXA9PT11bmRlZmluZWQ/ZC50aXNzdWVTaXRlRGV0YWlsSWQ6aWROYW1lTWFwW2QudGlzc3VlU2l0ZURldGFpbElkXTtcbiAgICAgICAgZC5sYWJlbCA9IGQuc3Vic2V0R3JvdXA9PT11bmRlZmluZWQ/ZC5nZW5lU3ltYm9sOmQuc3Vic2V0R3JvdXA7XG4gICAgICAgIGQuY29sb3IgPSBjb2xvcnM9PT11bmRlZmluZWQ/JyM5MGMxYzEnOmQuc3Vic2V0R3JvdXA9PT11bmRlZmluZWQ/YCMke2NvbG9yc1tkLnRpc3N1ZVNpdGVEZXRhaWxJZF19YDpjb2xvcnNbZC5zdWJzZXRHcm91cF07XG4gICAgfSk7XG4gICAgX2NhbGNWaW9saW5QbG90VmFsdWVzKGRhdGFbYXR0cl0sIHVzZUxvZyk7XG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogcG9wdWxhdGVzIHRpc3N1ZSBmaWx0ZXIgbW9kYWwgd2l0aCB0aXNzdWVzXG4gKiBAcGFyYW0gIHZwbG90IHtHcm91cGVkVmlvbGlufSB2aW9saW4gcGxvdCBvYmplY3QgYmVpbmcgbW9kaWZpZWRcbiAqIEBwYXJhbSAgZG9tSWQge1N0cmluZ30gSUQgb2YgbW9kYWwgd2hvc2UgYm9keSBpcyB0byBiZSBwb3B1bGF0ZWRcbiAqIEBwYXJhbSAgaWRzIHtEaWN0aW9uYXJ5fSBEaWN0aW9uYXJ5IG9mIElEcyByZWxldmFudCB0byBwbG90XG4gKiBAcGFyYW0gIHRpc3N1ZXMge0FycmF5fSBBcnJheSBvZiB0aXNzdWVzIHJldHVybmVkIGZyb20gR1RFeCB0aXNzdWVTaXRlRGV0YWlsIEFQSVxuICovXG5mdW5jdGlvbiBfcG9wdWxhdGVUaXNzdWVGaWx0ZXIodnBsb3QsIGRvbUlkLCBpZHMsIHRpc3N1ZXMpIHtcbiAgICBjb25zdCB0aXNzdWVHcm91cHMgPSBwYXJzZVRpc3N1ZVNpdGVzKHRpc3N1ZXMpO1xuICAgIGNyZWF0ZVRpc3N1ZUdyb3VwTWVudSh0aXNzdWVHcm91cHMsIGAke2RvbUlkfS1ib2R5YCwgZmFsc2UsIHRydWUsIDMpO1xuICAgIF9hZGRUaXNzdWVGaWx0ZXJFdmVudCh2cGxvdCwgZG9tSWQsIGlkcywgdGlzc3VlR3JvdXBzKTtcbn1cblxuLyoqXG4gKiBmaWx0ZXJzIHRpc3N1ZXMgZGlzcGxheWVkIGluIHRoZSBwbG90XG4gKiBAcGFyYW0gdnBsb3Qge0dyb3VwZWRWaW9saW59IHZpb2xpbiBwbG90IG9iamVjdCBiZWluZyBtb2RpZmllZFxuICogQHBhcmFtIGRvbUlkIHtTdHJpbmd9IG1vZGFsIElEXG4gKiBAcGFyYW0gaWRzIHtEaWN0aW9uYXJ5fSBEaWN0aW9uYXJ5IG9mIElEcyByZWxldmFudCB0byBwbG90XG4gKiBAcGFyYW0gdGlzc3VlcyB7RGljdGlvbmFyeX0gRGljdGlvbmFyeSBvZiB0aXNzdWUgZ3JvdXBzXG4gKi9cbmZ1bmN0aW9uIF9hZGRUaXNzdWVGaWx0ZXJFdmVudCh2cGxvdCwgZG9tSWQsIGlkcywgdGlzc3Vlcykge1xuICAgICQoYCMke2RvbUlkfWApLm9uKCdoaWRkZW4uYnMubW9kYWwnLCAoZSkgPT4ge1xuICAgICAgICBsZXQgY2hlY2tlZFRpc3N1ZXMgPSBwYXJzZVRpc3N1ZUdyb3VwTWVudSh0aXNzdWVzLCBgJHtkb21JZH0tYm9keWAsIHRydWUpO1xuICAgICAgICBfZmlsdGVyVGlzc3Vlcyh2cGxvdCwgaWRzLCBjaGVja2VkVGlzc3Vlcyk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBwbG90IHNvcnQgYW5kIHVwZGF0ZXMgcGxvdCB2aWV3XG4gKiBAcGFyYW0gIHZwbG90IHtHcm91cGVkVmlvbGlufSB2aW9saW4gcGxvdCBvYmplY3QgdG8gYmUgbW9kaWZpZWRcbiAqIEBwYXJhbSAgaWRzIHtEaWN0aW9uYXJ5fSBEaWN0aW9uYXJ5IG9mIElEcyByZWxldmFudCB0byBwbG90XG4gKi9cbmZ1bmN0aW9uIF9zb3J0QW5kVXBkYXRlRGF0YSh2cGxvdCwgaWRzKSB7XG4gICAgbGV0IGZpbHRlcmVkVGlzc3VlcyA9IHZwbG90LmRhdGEubWFwKChkKT0+ZC5ncm91cCk7XG4gICAgbGV0IHNvcnREYXRhID0gdnBsb3Quc29ydERhdGEuZmlsdGVyKChkKSA9PiBmaWx0ZXJlZFRpc3N1ZXMuaW5jbHVkZXMoZC5ncm91cCkpO1xuXG4gICAgc3dpdGNoICh2cGxvdC5ncENvbmZpZy5zb3J0KSB7XG4gICAgICAgIGNhc2UgaWRzLnBsb3RTb3J0cy5hc2NBbHBoYVNvcnQ6XG4gICAgICAgICAgICBzb3J0RGF0YS5zb3J0KChhLGIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYS5ncm91cCA8IGIuZ3JvdXApIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhLmdyb3VwID4gYi5ncm91cCkgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgaWRzLnBsb3RTb3J0cy5kZXNjQWxwaGFTb3J0OlxuICAgICAgICAgICAgc29ydERhdGEuc29ydCgoYSxiKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGEuZ3JvdXAgPCBiLmdyb3VwKSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhLmdyb3VwID4gYi5ncm91cCkgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIDA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGlkcy5wbG90U29ydHMuYXNjU29ydDpcbiAgICAgICAgICAgIHNvcnREYXRhLnNvcnQoKGEsYikgPT4geyByZXR1cm4gYS5tZWRpYW4gLSBiLm1lZGlhbjsgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBpZHMucGxvdFNvcnRzLmRlc2NTb3J0OlxuICAgICAgICAgICAgc29ydERhdGEuc29ydCgoYSxiKSA9PiB7IHJldHVybiBiLm1lZGlhbiAtIGEubWVkaWFuOyB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgIH1cblxuICAgIGxldCB4RG9tYWluID0gc29ydERhdGEubWFwKChkKSA9PiBkLmdyb3VwKTtcbiAgICB2cGxvdC51cGRhdGVYU2NhbGUoeERvbWFpbik7XG4gICAgX2N1c3RvbWl6ZVRvb2x0aXAodnBsb3QpO1xuICAgIGxldCBzdmcgPSBzZWxlY3QoYCMke2lkcy5yb290fSBzdmcgZ2ApO1xuXG4gICAgaWYgKHZwbG90LmdwQ29uZmlnLnN1YnNldCkgX2FkZFZpb2xpblRpc3N1ZUNvbG9yQmFuZCh2cGxvdCwgc3ZnLCB2cGxvdC50aXNzdWVEaWN0LCAnYm90dG9tJyk7XG4gICAgZWxzZSB7XG4gICAgICAgIHNlbGVjdChgIyR7aWRzLnN2Z30gI3Zpb2xpbkxlZ2VuZGApLnJlbW92ZSgpO1xuICAgICAgICBfbW92ZVhBeGlzKHN2Zyk7XG4gICAgfVxuXG4gICAgaWYgKCF2cGxvdC5zaG93T3V0bGllcnMpIHtcbiAgICAgICAgc2VsZWN0QWxsKGAjJHtpZHMuc3ZnfSBwYXRoLnZpb2xpbmApLmNsYXNzZWQoJ291dGxpbmVkJywgdHJ1ZSk7XG4gICAgICAgICQoYCMke2lkcy5zdmd9IC52aW9saW4tb3V0bGllcnNgKS5oaWRlKCk7XG4gICAgfVxuICAgIGlmKHZwbG90LnBsb3RUaXRsZSAhPT0gdW5kZWZpbmVkKSB2cGxvdC5hZGRQbG90VGl0bGUoc3ZnLCB2cGxvdC5wbG90VGl0bGUpO1xufVxuXG4vKipcbiAqIEZpbHRlcnMgdmlldyB0byBvbmx5IHNwZWNpZmllZCB0aXNzdWVzXG4gKiBAcGFyYW0gdnBsb3Qge0dyb3VwZWRWaW9saW59IHZpb2xpbiBwbG90IG9iamVjdCB0byBiZSBtb2RpZmllZFxuICogQHBhcmFtIGlkcyB7RGljdGlvbmFyeX0gRGljdGlvbmFyeSBvZiBJRHMgcmVsZXZhbnQgdG8gcGxvdFxuICogQHBhcmFtIHRpc3N1ZXMge0FycmF5fSBMaXN0IG9mIHRpc3N1ZXMgdG8gZmlsdGVyIGRvd24gdG9cbiAqL1xuZnVuY3Rpb24gX2ZpbHRlclRpc3N1ZXModnBsb3QsIGlkcywgdGlzc3Vlcykge1xuICAgIGxldCBmaWx0ZXJlZERhdGEgPSB2cGxvdC5hbGxEYXRhLmZpbHRlcih4ID0+IHRpc3N1ZXMuaW5jbHVkZXMoeC5ncm91cCkpO1xuICAgIHZwbG90LmRhdGEgPSBmaWx0ZXJlZERhdGE7XG4gICAgX3NvcnRBbmRVcGRhdGVEYXRhKHZwbG90LCBpZHMpO1xufVxuXG5mdW5jdGlvbiBfbW92ZVhBeGlzKGRvbSkge1xuICAgIC8vIG1vdmluZyB4LWF4aXMgZG93biBhIGJpdCBmb3Igc3BhY2VcbiAgICBjb25zdCB4QXhpcyA9IGRvbS5zZWxlY3QoJy52aW9saW4teC1heGlzJyk7XG4gICAgeEF4aXMuYXR0cigndHJhbnNmb3JtJywgYCR7eEF4aXMuYXR0cigndHJhbnNmb3JtJyl9IHRyYW5zbGF0ZSgwLCAzKWApO1xufVxuXG4vKipcbiAqIEFkZHMgdGlzc3VlIGNvbG9yIHRvIHRoZSBwbG90XG4gKiBAcGFyYW0gcGxvdCB7R3JvdXBlZFZpb2xpbn0gdmlvbGluIHBsb3Qgb2JqZWN0IHRvIGJlIG1vZGlmaWVkXG4gKiBAcGFyYW0gZG9tIHtkMyBTZWxlY3Rpb259IGQzIHNlbGVjdGlvbiBvZiB0aGUgc3ZnIHRvIG1vZGlmeVxuICogQHBhcmFtIHRpc3N1ZURpY3Qge0RpY3Rpb25hcnl9IERpY3Rpb25hcnkgb2YgdGlzc3VlcyBjb250YWluaW5nIGNvbG9yIGluZm9cbiAqIEBwYXJhbSBsb2Mge1N0cmluZ30gXCJ0b3BcIiB8fCBcImJvdHRvbVwiOyBzcGVjaWZpZWQgd2hlcmUgdG8gZGlzcGxheSB0aGUgY29sb3JzXG4gKi9cbmZ1bmN0aW9uIF9hZGRWaW9saW5UaXNzdWVDb2xvckJhbmQocGxvdCwgZG9tLCB0aXNzdWVEaWN0LCBsb2M9XCJ0b3BcIil7XG4gICAgX21vdmVYQXhpcyhkb20pO1xuXG4gICAgLy8gbW92aW5nIHgtYXhpcyB0ZXh0IGRvd24gdG8gbWFrZSBzcGFjZSBmb3IgY29sb3IgYmFuZFxuICAgIGNvbnN0IHhBeGlzVGV4dCA9IGRvbS5zZWxlY3RBbGwoJy52aW9saW4teC1heGlzIHRleHQnKTtcbiAgICB4QXhpc1RleHQuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCA4KSAke3hBeGlzVGV4dC5hdHRyKCd0cmFuc2Zvcm0nKX1gKTtcblxuICAgIC8vIGFkZCB0aXNzdWUgY29sb3JzXG4gICAgY29uc3QgdGlzc3VlRyA9IGRvbS5hcHBlbmQoXCJnXCIpO1xuICAgIHRpc3N1ZUcuc2VsZWN0QWxsKFwiLnRjb2xvclwiKS5kYXRhKHBsb3Quc2NhbGUueC5kb21haW4oKSlcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmNsYXNzZWQoXCJ0Y29sb3JcIiwgdHJ1ZSlcbiAgICAgICAgLmF0dHIoXCJ4XCIsIChnKT0+cGxvdC5zY2FsZS54KGcpKVxuICAgICAgICAuYXR0cihcInlcIiwgKGcpPT5sb2M9PVwidG9wXCI/cGxvdC5zY2FsZS55LnJhbmdlKClbMV06cGxvdC5zY2FsZS55LnJhbmdlKClbMF0pXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsIDE0KScpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgKGcpPT5wbG90LnNjYWxlLnguYmFuZHdpZHRoKCkpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIDUpXG4gICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCAwKVxuICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChnKT0+YCMke3Rpc3N1ZURpY3RbZ10uY29sb3JIZXh9YClcbiAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjkpO1xufVxuXG5mdW5jdGlvbiBfY3VzdG9taXplVG9vbHRpcChwbG90KXtcbiAgICBsZXQgdmlvbGluR3MgPSBzZWxlY3RBbGwoJy52aW9saW4tZycpO1xuICAgIHZpb2xpbkdzLm9uKCdtb3VzZW92ZXInLCAoZCwgaSwgbm9kZXMpPT57XG4gICAgICAgIGxldCBtZWQgPSBwbG90LmdwQ29uZmlnLnNjYWxlPT0nbG9nJz9NYXRoLnBvdygxMCwgZC5tZWRpYW4pIC0gMTpkLm1lZGlhbjtcbiAgICAgICAgbGV0IHZQYXRoID0gc2VsZWN0KG5vZGVzW2ldKS5zZWxlY3QoJ3BhdGgnKTtcbiAgICAgICAgdlBhdGguY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCB0cnVlKTtcbiAgICAgICAgaWYgKCFwbG90LmdwQ29uZmlnLnN1YnNldCkge1xuICAgICAgICAgICAgcGxvdC50b29sdGlwLnNob3coXG4gICAgICAgICAgICAgICAgZC5ncm91cCArIFwiPGJyLz5cIiArXG4gICAgICAgICAgICAgICAgYG4gPSAke2QudmFsdWVzLmxlbmd0aH1gICsgXCI8YnIvPlwiICtcbiAgICAgICAgICAgICAgICBgTWVkaWFuJHtwbG90LnVuaXR9OiAke21lZC50b1ByZWNpc2lvbig0KX1gICsgXCI8YnIvPlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBsb3QudG9vbHRpcC5zaG93KFxuICAgICAgICAgICAgICAgIGQuZ3JvdXAgKyBcIjxici8+XCIgK1xuICAgICAgICAgICAgICAgIGQubGFiZWwgKyBgIChuID0gJHtkLnZhbHVlcy5sZW5ndGh9KWAgKyBcIjxici8+XCIgK1xuICAgICAgICAgICAgICAgIGBNZWRpYW4ke3Bsb3QudW5pdH06ICR7bWVkLnRvUHJlY2lzaW9uKDQpfWAgKyBcIjxici8+XCIpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIF9kcmF3VmlvbGluUGxvdCh2cGxvdCwgbWFyZ2lucywgZGltZW5zaW9ucywgaWRzKSB7XG4gICAgY29uc3QgbWFyZ2luID0gbWFyZ2lucztcbiAgICBjb25zdCBkaW0gPSBfc2V0VmlvbGluUGxvdERpbWVuc2lvbnMoZGltZW5zaW9ucy53LCBkaW1lbnNpb25zLmgsIG1hcmdpbik7XG4gICAgY29uc3Qgc3ZnID0gc2VsZWN0KGAjJHtpZHMucm9vdH1gKVxuICAgICAgICAgICAgLmFwcGVuZCgnc3ZnJylcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsIGlkcy5zdmcpXG4gICAgICAgICAgICAuYXR0cignd2lkdGgnLCBkaW0ub3V0ZXJXaWR0aClcbiAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBkaW0ub3V0ZXJIZWlnaHQpXG4gICAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwgJHttYXJnaW4udG9wfSlgKTtcbiAgICBjb25zdCB3aWR0aCA9IGRpbS53aWR0aDtcbiAgICBjb25zdCBoZWlnaHQgPSBkaW0uaGVpZ2h0O1xuICAgIGNvbnN0IHhQYWRkaW5nID0gMC4yO1xuICAgIGNvbnN0IHhEb21haW4gPSB2cGxvdC5kYXRhLm1hcChkID0+IGQuZ3JvdXApO1xuICAgIGNvbnN0IHlEb21haW4gPVtdO1xuICAgIGNvbnN0IHlMYWJlbCA9ICdsb2cxMChUUE0rMSknO1xuICAgIGNvbnN0IHNob3dYID0gdHJ1ZTtcbiAgICBjb25zdCB4QW5nbGUgPSAzNTtcbiAgICBjb25zdCBzaG93U3ViWCA9IGZhbHNlO1xuICAgIGNvbnN0IHN1YlhBbmdsZSA9IDA7XG4gICAgY29uc3Qgc2hvd1doaXNrZXIgPSBmYWxzZTtcbiAgICBjb25zdCBzaG93RGl2aWRlciA9IGZhbHNlO1xuICAgIGNvbnN0IHNob3dMZWdlbmQgPSB0cnVlO1xuICAgIGNvbnN0IHNob3dTaXplID0gZmFsc2U7XG4gICAgY29uc3Qgc29ydFN1YlggPSB0cnVlO1xuICAgIGNvbnN0IHNob3dPdXRsaWVycyA9IHRydWU7XG5cbiAgICB2cGxvdC5yZW5kZXIoc3ZnLCB3aWR0aCwgaGVpZ2h0LCB4UGFkZGluZywgeERvbWFpbiwgeURvbWFpbiwgeUxhYmVsLCBzaG93WCwgeEFuZ2xlLCBzaG93U3ViWCwgc3ViWEFuZ2xlLCBzaG93V2hpc2tlciwgc2hvd0RpdmlkZXIsIHNob3dMZWdlbmQsIHNob3dTaXplLCBzb3J0U3ViWCwgc2hvd091dGxpZXJzKTtcbiAgICBfY3VzdG9taXplUGxvdCh2cGxvdCwgaWRzKTtcbn1cblxuZnVuY3Rpb24gX2N1c3RvbWl6ZVBsb3QodnBsb3QsIGlkcykge1xuICAgIGxldCBzdmcgPSBzZWxlY3QoYCMke2lkcy5zdmd9IGdgKTtcbiAgICBpZih2cGxvdC5ncENvbmZpZy50aXRsZSAhPT0gdW5kZWZpbmVkKSB2cGxvdC5hZGRQbG90VGl0bGUoc3ZnLCB2cGxvdC5ncENvbmZpZy50aXRsZSk7XG4gICAgX3VwZGF0ZU91dGxpZXJEaXNwbGF5KHZwbG90LCBpZHMpO1xuICAgIGlmICghdnBsb3QuZ3BDb25maWcuc3Vic2V0KSB7XG4gICAgICAgIHNlbGVjdChgIyR7aWRzLnN2Z30gI3Zpb2xpbkxlZ2VuZGApLnJlbW92ZSgpO1xuICAgICAgICBfbW92ZVhBeGlzKHN2Zyk7XG4gICAgfVxuICAgIF9jdXN0b21pemVUb29sdGlwKHZwbG90KTtcbn1cblxuZnVuY3Rpb24gX3VwZGF0ZU91dGxpZXJEaXNwbGF5KHZwbG90LCBpZHMpIHtcbiAgICBzZWxlY3RBbGwoYCMke2lkcy5zdmd9IHBhdGgudmlvbGluYCkuY2xhc3NlZCgnb3V0bGluZWQnLCAhdnBsb3QuZ3BDb25maWcuc2hvd091dGxpZXJzKTtcbiAgICAkKGAjJHtpZHMuc3ZnfSAudmlvbGluLW91dGxpZXJzYCkudG9nZ2xlKHZwbG90LmdwQ29uZmlnLnNob3dPdXRsaWVycyk7XG59XG5cbmZ1bmN0aW9uIF9yZWRyYXdWaW9saW5QbG90KHZwbG90LCBpZHMpIHtcbiAgICAvLyBzb3J0aW5nXG4gICAgLy8gc2NhbGluZ1xuICAgIC8vIHN1YnNldHRpbmdcblxuICAgIF9jdXN0b21pemVQbG90KHZwbG90LCBpZHMpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0R3RleFVybHMoKXtcbiAgICBjb25zdCBob3N0ID0gJ2h0dHBzOi8vZ3RleHBvcnRhbC5vcmcvcmVzdC92MS8nO1xuICAgIC8vIGNvbnN0IGhvc3QgPSAnbG9jYWwuZ3RleHBvcnRhbC5vcmcvcmVzdC92MS8nXG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gZ2VuZS1lcXRsIHZpc3VhbGl6ZXIgc3BlY2lmaWNcbiAgICAgICAgc2luZ2xlVGlzc3VlRXF0bDogaG9zdCArICdhc3NvY2lhdGlvbi9zaW5nbGVUaXNzdWVFcXRsP2Zvcm1hdD1qc29uJmRhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuICAgICAgICBsZDogaG9zdCArICdkYXRhc2V0L2xkP2Zvcm1hdD1qc29uJmRhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuICAgICAgICB0aXNzdWVTdW1tYXJ5OiBob3N0ICsgJ2RhdGFzZXQvdGlzc3VlU3VtbWFyeT9kYXRhc2V0SWQ9Z3RleF92NycsXG5cbiAgICAgICAgLy8gZXF0bCBEYXNoYm9hcmQgc3BlY2lmaWNcbiAgICAgICAgZHluZXF0bDogaG9zdCArICdhc3NvY2lhdGlvbi9keW5lcXRsJyxcbiAgICAgICAgc25wOiBob3N0ICsgJ3JlZmVyZW5jZS92YXJpYW50P2Zvcm1hdD1qc29uJnNucElkPScsXG4gICAgICAgIHZhcmlhbnRJZDogaG9zdCArICdkYXRhc2V0L3ZhcmlhbnQ/Zm9ybWF0PWpzb24mdmFyaWFudElkPScsXG5cbiAgICAgICAgLy8gdHJhbnNjcmlwdCwgZXhvbiwganVuY3Rpb24gZXhwcmVzc2lvbiBzcGVjaWZpY1xuICAgICAgICBleG9uRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuRXhvbkV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjcmaGNsdXN0ZXI9dHJ1ZSZnZW5jb2RlSWQ9JyxcbiAgICAgICAgdHJhbnNjcmlwdEV4cDogaG9zdCArICdleHByZXNzaW9uL21lZGlhblRyYW5zY3JpcHRFeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmhjbHVzdGVyPXRydWUmZ2VuY29kZUlkPScsXG4gICAgICAgIGp1bmN0aW9uRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmhjbHVzdGVyPXRydWUmZ2VuY29kZUlkPScsXG4gICAgICAgIHRyYW5zY3JpcHQ6IGhvc3QgKyAncmVmZXJlbmNlL3RyYW5zY3JpcHQ/ZGF0YXNldElkPWd0ZXhfdjcmZ2VuY29kZUlkPScsXG4gICAgICAgIGV4b246IGhvc3QgKyAncmVmZXJlbmNlL2V4b24/ZGF0YXNldElkPWd0ZXhfdjcmZ2VuY29kZUlkPScsXG4gICAgICAgIGdlbmVNb2RlbDogaG9zdCArICdkYXRhc2V0L2NvbGxhcHNlZEdlbmVNb2RlbEV4b24/ZGF0YXNldElkPWd0ZXhfdjcmZ2VuY29kZUlkPScsXG4gICAgICAgIGdlbmVNb2RlbFVuZmlsdGVyZWQ6IGhvc3QgKyAnZGF0YXNldC9mdWxsQ29sbGFwc2VkR2VuZU1vZGVsRXhvbj9kYXRhc2V0SWQ9Z3RleF92NyZnZW5jb2RlSWQ9JyxcblxuICAgICAgICAvLyBnZW5lIGV4cHJlc3Npb24gdmlvbGluIHBsb3Qgc3BlY2lmaWNcbiAgICAgICAgZ2VuZUV4cDogaG9zdCArICdleHByZXNzaW9uL2dlbmVFeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuXG4gICAgICAgIC8vIGdlbmUgZXhwcmVzc2lvbiBoZWF0IG1hcCBzcGVjaWZpY1xuICAgICAgICBtZWRHZW5lRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuR2VuZUV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjcmaGNsdXN0ZXI9dHJ1ZSZwYWdlU2l6ZT0xMDAwMCcsXG5cbiAgICAgICAgLy8gZ2VuZSBleHByZXNzaW9uIGJveHBsb3Qgc3BlY2lmaWNcbiAgICAgICAgZ2VuZUV4cEJveHBsb3Q6IGhvc3QgKyAnZXhwcmVzc2lvbi9nZW5lRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92NyZib3hwbG90RGV0YWlsPWZ1bGwmZ2VuY29kZUlkPScsXG5cbiAgICAgICAgLy8gdG9wIGV4cHJlc3NlZCBnZW5lIGV4cHJlc3Npb24gc3BlY2lmaWNcbiAgICAgICAgdG9wSW5UaXNzdWVGaWx0ZXJlZDogaG9zdCArICdleHByZXNzaW9uL3RvcEV4cHJlc3NlZEdlbmU/ZGF0YXNldElkPWd0ZXhfdjcmZmlsdGVyTXRHZW5lPXRydWUmc29ydEJ5PW1lZGlhbiZzb3J0RGlyZWN0aW9uPWRlc2MmcGFnZVNpemU9NTAmdGlzc3VlU2l0ZURldGFpbElkPScsXG4gICAgICAgIHRvcEluVGlzc3VlOiBob3N0ICsgJ2V4cHJlc3Npb24vdG9wRXhwcmVzc2VkR2VuZT9kYXRhc2V0SWQ9Z3RleF92NyZzb3J0Qnk9bWVkaWFuJnNvcnREaXJlY3Rpb249ZGVzYyZwYWdlU2l6ZT01MCZ0aXNzdWVTaXRlRGV0YWlsSWQ9JyxcblxuICAgICAgICBnZW5lSWQ6IGhvc3QgKyAncmVmZXJlbmNlL2dlbmU/Zm9ybWF0PWpzb24mZ2VuY29kZVZlcnNpb249djE5Jmdlbm9tZUJ1aWxkPUdSQ2gzNyUyRmhnMTkmZ2VuZUlkPScsXG5cbiAgICAgICAgLy8gdGlzc3VlIG1lbnUgc3BlY2lmaWNcbiAgICAgICAgLy8gVE9ETzogcmVtb3ZlIHJlZHVuZGFudCBVUkxzXG4gICAgICAgIHRpc3N1ZTogIGhvc3QgKyAnbWV0YWRhdGEvdGlzc3VlU2l0ZURldGFpbD9mb3JtYXQ9anNvbicsXG4gICAgICAgIHRpc3N1ZVNpdGVzOiBob3N0ICsgJ21ldGFkYXRhL3Rpc3N1ZVNpdGVEZXRhaWw/Zm9ybWF0PWpzb24nLFxuXG4gICAgICAgIC8vIGxvY2FsIHN0YXRpYyBmaWxlc1xuICAgICAgICBzYW1wbGU6ICd0bXBTdW1tYXJ5RGF0YS9ndGV4LlNhbXBsZS5jc3YnLFxuICAgICAgICBybmFzZXFDcmFtOiAndG1wU3VtbWFyeURhdGEvcm5hc2VxX2NyYW1fZmlsZXNfdjdfZGJHYVBfMDExNTE2LnR4dCcsXG4gICAgICAgIHdnc0NyYW06ICd0bXBTdW1tYXJ5RGF0YS93Z3NfY3JhbV9maWxlc192N19oZzM4X2RiR2FQXzAxMTUxNi50eHQnLFxuXG4gICAgICAgIC8vIGZpcmVDbG91ZFxuICAgICAgICBmY0JpbGxpbmc6ICdodHRwczovL2FwaS5maXJlY2xvdWQub3JnL2FwaS9wcm9maWxlL2JpbGxpbmcnLFxuICAgICAgICBmY1dvcmtTcGFjZTogJ2h0dHBzOi8vYXBpLmZpcmVjbG91ZC5vcmcvYXBpL3dvcmtzcGFjZXMnLFxuICAgICAgICBmY1BvcnRhbFdvcmtTcGFjZTogJ2h0dHBzOi8vcG9ydGFsLmZpcmVjbG91ZC5vcmcvI3dvcmtzcGFjZXMnXG4gICAgfVxufVxuXG4vKipcbiAqIHBhcnNlIEdURXggZHluZXF0bCBqc29uXG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gZnJvbSBHVEV4IGR5bmVxdGwgd2ViIHNlcnZpY2VcbiAqIEByZXR1cm5zIGRhdGEge0pTT059IG1vZGlmaWVkIGRhdGFcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUR5bkVxdGwoanNvbil7XG4gICAgLy8gY2hlY2sgcmVxdWlyZWQganNvbiBhdHRyaWJ1dGVzXG4gICAgWydkYXRhJywgJ2dlbm90eXBlcycsICdwVmFsdWUnLCAncFZhbHVlVGhyZXNob2xkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGQpKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoanNvbik7XG4gICAgICAgICAgICB0aHJvdyAnUGFyc2UgRXJyb3I6IFJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBkO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBqc29uLmV4cHJlc3Npb25fdmFsdWVzID0ganNvbi5kYXRhLm1hcCgoZCk9PnBhcnNlRmxvYXQoZCkpO1xuICAgIGpzb24uZ2Vub3R5cGVzID0ganNvbi5nZW5vdHlwZXMubWFwKChkKT0+cGFyc2VGbG9hdChkKSk7XG5cbiAgICBqc29uLmhvbW9SZWZFeHAgPSBqc29uLmV4cHJlc3Npb25fdmFsdWVzLmZpbHRlcigoZCxpKSA9PiB7XG4gICAgICAgIHJldHVybiBqc29uLmdlbm90eXBlc1tpXSA9PSAwXG4gICAgfSk7XG4gICAganNvbi5ob21vQWx0RXhwID0ganNvbi5leHByZXNzaW9uX3ZhbHVlcy5maWx0ZXIoKGQsaSkgPT4ge1xuICAgICAgICByZXR1cm4ganNvbi5nZW5vdHlwZXNbaV0gPT0gMlxuICAgIH0pO1xuICAgIGpzb24uaGV0ZXJvRXhwID0ganNvbi5leHByZXNzaW9uX3ZhbHVlcy5maWx0ZXIoKGQsaSkgPT4ge1xuICAgICAgICByZXR1cm4ganNvbi5nZW5vdHlwZXNbaV0gPT0gMVxuICAgIH0pO1xuXG4gICAgLy8gZ2VuZXJhdGUgZ2Vub3R5cGUgdGV4dCBsYWJlbHNcbiAgICBsZXQgcmVmID0ganNvbi52YXJpYW50SWQuc3BsaXQoL18vKVsyXTtcbiAgICBsZXQgYWx0ID0ganNvbi52YXJpYW50SWQuc3BsaXQoL18vKVszXTtcbiAgICBqc29uLmhldCA9IHJlZiArIGFsdDtcbiAgICBqc29uLnJlZiA9IHJlZiArIHJlZjtcbiAgICBqc29uLmFsdCA9IGFsdCArIGFsdDtcblxuICAgIHJldHVybiBqc29uO1xufVxuXG5cbi8qKlxuICogUGFyc2UgdGhlIHNpbmdsZSB0aXNzdWUgZXF0bHMgZnJvbSBHVEV4IHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEBwYXJhbSB0aXNzdWVTaXRlVGFibGUge0pzb259IG9wdGlvbmFsIGZvciBtYXBwaW5nIHRpc3N1ZVNpdGVEZXRhaWxJZCB0byB0aXNzdWVTaXRlRGV0YWlsLCBhIGRpY3Rpb25hcnkgb2YgdGlzc3VlU2l0ZSBvYmplY3RzICh3aXRoIHRoZSBhdHRyIHRpc3N1ZVNpdGVEZXRhaWwpIGluZGV4ZWQgYnkgdGlzc3VlU2l0ZURldGFpbElkLCBhbmRcbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBlcXRscyB3aXRoIGF0dHJpYnV0ZXMgcmVxdWlyZWQgZm9yIEdFViByZW5kZXJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU2luZ2xlVGlzc3VlRXF0bHMoZGF0YSwgdGlzc3VlU2l0ZVRhYmxlID0gdW5kZWZpbmVkKXtcbiAgICBjb25zdCBhdHRyID0gJ3NpbmdsZVRpc3N1ZUVxdGwnO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGF0dHJpYnV0ZSBpcyBub3QgZm91bmQ6IFwiICsgYXR0cjtcbiAgICBbJ3ZhcmlhbnRJZCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnbmVzJywgJ3BWYWx1ZSddLmZvckVhY2goKGspPT57XG4gICAgICAgIGlmICghZGF0YVthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShrKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICB9KTtcblxuXG4gICAgcmV0dXJuIGRhdGFbYXR0cl0ubWFwKChkKT0+e1xuICAgICAgICBkLnggPSBkLnZhcmlhbnRJZDtcbiAgICAgICAgZC5kaXNwbGF5WCA9IGdlbmVyYXRlU2hvcnRWYXJpYW50SWQoZC52YXJpYW50SWQpO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgaWYgKHRpc3N1ZVNpdGVUYWJsZSkgZC5kaXNwbGF5WSA9IHRpc3N1ZVNpdGVUYWJsZVtkLnRpc3N1ZVNpdGVEZXRhaWxJZF0udGlzc3VlU2l0ZURldGFpbDtcbiAgICAgICAgZC52YWx1ZSA9IGQubmVzO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IGQubmVzLnRvUHJlY2lzaW9uKDMpO1xuICAgICAgICBkLnIgPSAtTWF0aC5sb2cxMChkLnBWYWx1ZSk7IC8vIHNldCByIHRvIGJlIHRoZSAtbG9nMTAocC12YWx1ZSlcbiAgICAgICAgZC5yRGlzcGxheVZhbHVlID0gcGFyc2VGbG9hdChkLnBWYWx1ZS50b0V4cG9uZW50aWFsKCkpLnRvUHJlY2lzaW9uKDMpO1xuICAgICAgICByZXR1cm4gZDtcbiAgICB9KVxufVxuXG4vKipcbiAqIFBhcnNlIHRoZSBnZW5lcyBmcm9tIEdURXggd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHJldHVybnMge0xpc3R9IG9mIGdlbmVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVzKGRhdGEsIHNpbmdsZT1mYWxzZSwgZ2VuZUlkPW51bGwpe1xuICAgIGNvbnN0IGF0dHIgPSAnZ2VuZSc7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93IFwiUGFyc2luZyBFcnJvcjogYXR0cmlidXRlIGdlbmUgZG9lc24ndCBleGlzdC5cIjtcbiAgICBpZiAoZGF0YS5nZW5lLmxlbmd0aD09MCl7XG4gICAgICAgICBhbGVydChcIk5vIGdlbmUgaXMgZm91bmRcIik7XG4gICAgICAgICB0aHJvdyBcIkZhdGFsIEVycm9yOiBnZW5lKHMpIG5vdCBmb3VuZFwiO1xuICAgICB9XG4gICAgaWYgKHNpbmdsZSl7XG4gICAgICAgIGlmIChnZW5lSWQgPT09IG51bGwpIHRocm93IFwiUGxlYXNlIHByb3ZpZGUgYSBnZW5lIElEIGZvciBzZWFyY2ggcmVzdWx0cyB2YWxpZGF0aW9uXCI7XG4gICAgICAgIGlmIChkYXRhLmdlbmUubGVuZ3RoPjEpIHsgLy8gd2hlbiBhIHNpbmdsZSBnZW5lIElEIGhhcyBtdWx0aXBsZSBtYXRjaGVzXG4gICAgICAgICAgICAgbGV0IGZpbHRlcmVkID0gZGF0YS5nZW5lLmZpbHRlcigoZyk9PntcbiAgICAgICAgICAgICAgICAgcmV0dXJuIGcuZ2VuZVN5bWJvbFVwcGVyPT1nZW5lSWQudG9VcHBlckNhc2UoKSB8fCBnLmdlbmNvZGVJZCA9PSBnZW5lSWQudG9VcHBlckNhc2UoKVxuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIGlmIChmaWx0ZXJlZC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgIGFsZXJ0KFwiRmF0YWwgRXJyb3I6IGlucHV0IGdlbmUgSUQgaXMgbm90IHVuaXF1ZS5cIik7XG4gICAgICAgICAgICAgICAgIHRocm93IFwiRmF0YWwgRXJyb3I6IGlucHV0IGdlbmUgSUQgaXMgbm90IHVuaXF1ZS5cIjtcbiAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgfSBlbHNlIGlmIChmaWx0ZXJlZC5sZW5ndGggPT0gMCl7XG4gICAgICAgICAgICAgICAgIGFsZXJ0KFwiTm8gZ2VuZSBpcyBmb3VuZCB3aXRoIFwiICsgZ2VuZUlkKTtcbiAgICAgICAgICAgICAgICAgdGhyb3cgXCJGYXRhbCBFcnJvcjogZ2VuZSBub3QgZm91bmRcIjtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgZGF0YS5nZW5lID0gZmlsdGVyZWRcbiAgICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgICByZXR1cm4gZGF0YS5nZW5lWzBdXG4gICAgfVxuICAgIGVsc2UgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZXNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHJldHVybnMge0xpc3R9IG9mIHRpc3N1ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3Vlcyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ3Rpc3N1ZVNpdGVEZXRhaWwnO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIGNvbnN0IHRpc3N1ZXMgPSBqc29uW2F0dHJdO1xuXG4gICAgLy8gc2FuaXR5IGNoZWNrXG4gICAgWyd0aXNzdWVTaXRlRGV0YWlsSWQnLCAndGlzc3VlU2l0ZURldGFpbCcsICdjb2xvckhleCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghdGlzc3Vlc1swXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0ciBpcyBtaXNzaW5nOiAnICsgZDtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aXNzdWVzO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSB0aXNzdWVzIGFuZCByZXR1cm4gYSBsb29rdXAgdGFibGUgaW5kZXhlZCBieSB0aXNzdWVTaXRlRGV0YWlsSWRcbiAqIEBwYXJhbSBqc29uIGZyb20gd2ViIHNlcnZpY2UgdGlzc3VlU2l0ZURldGFpbFxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpc3N1ZURpY3QoanNvbil7XG4gICAgY29uc3QgYXR0ciA9ICd0aXNzdWVTaXRlRGV0YWlsJztcbiAgICBpZighanNvbi5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0ciBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBjb25zdCB0aXNzdWVzID0ganNvblthdHRyXTtcbiAgICAvLyBzYW5pdHkgY2hlY2tcbiAgICBbJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICd0aXNzdWVTaXRlRGV0YWlsJywgJ2NvbG9ySGV4J10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCF0aXNzdWVzWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6ICcgKyBkO1xuICAgIH0pO1xuICAgIHJldHVybiB0aXNzdWVzLnJlZHVjZSgoYXJyLCBkKT0+e2FycltkLnRpc3N1ZVNpdGVEZXRhaWxJZF0gPSBkOyByZXR1cm4gYXJyO30se30pO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSB0aXNzdWVzIHNhbXBsZSBjb3VudHMsIEdURXggcmVsZWFzZSBzcGVjaWZpY1xuICogQHBhcmFtIGpzb24gZnJvbSB3ZWIgc2VydmljZSB0aXNzdWVTdW1tYXJ5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpc3N1ZVNhbXBsZUNvdW50cyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ3Rpc3N1ZVN1bW1hcnknO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIGNvbnN0IHRpc3N1ZXMgPSBqc29uW2F0dHJdO1xuXG4gICAgLy8gY2hlY2sganNvbiBzdHJ1Y3R1cmVcbiAgICBjb25zdCB0aXNzdWUgPSB0aXNzdWVzWzBdO1xuICAgIGlmICghdGlzc3VlLmhhc093blByb3BlcnR5KCd0aXNzdWVTaXRlRGV0YWlsSWQnKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGF0dHIgaXMgbWlzc2luZzogdGlzc3VlU2l0ZURldGFpbElkJztcbiAgICBpZiAoIXRpc3N1ZS5oYXNPd25Qcm9wZXJ0eSgncm5hU2VxQW5kR2Vub3R5cGVTYW1wbGVDb3VudCcpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQgYXR0ciBpcyBtaXNzaW5nOiBybmFTZXFBbmRHZW5vdHlwZVNhbXBsZUNvdW50JztcbiAgICByZXR1cm4gdGlzc3Vlcztcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgdGlzc3VlIGdyb3Vwc1xuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcGFyYW0gZm9yRXF0bCB7Qm9vbGVhbn0gcmVzdHJpY3QgdG8gZXF0bCB0aXNzdWVzXG4gKiBAcmV0dXJucyB7RGljdGlvbmFyeX0gb2YgbGlzdHMgb2YgdGlzc3VlcyBpbmRleGVkIGJ5IHRoZSB0aXNzdWUgZ3JvdXAgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaXNzdWVTaXRlcyhkYXRhLCBmb3JFcXRsPWZhbHNlKXtcbiAgICAvLyB0aGUgbGlzdCBvZiBpbnZhbGlkZSBlcXRsIHRpc3N1ZXMgZHVlIHRvIHNhbXBsZSBzaXplIDwgNzBcbiAgICAvLyBhIGhhcmQtY29kZWQgbGlzdCBiZWNhdXNlIHRoZSBzYW1wbGUgc2l6ZSBpcyBub3QgZWFzeSB0byByZXRyaWV2ZVxuICAgIGNvbnN0IGludmFsaWRUaXNzdWVzID0gWydCbGFkZGVyJywgJ0NlcnZpeF9FY3RvY2Vydml4JywgJ0NlcnZpeF9FbmRvY2Vydml4JywgJ0ZhbGxvcGlhbl9UdWJlJywgJ0tpZG5leV9Db3J0ZXgnXTtcblxuICAgIGNvbnN0IGF0dHIgPSAndGlzc3VlU2l0ZURldGFpbCc7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBsZXQgdGlzc3VlcyA9IGRhdGFbYXR0cl07XG4gICAgWyd0aXNzdWVTaXRlJywndGlzc3VlU2l0ZURldGFpbElkJywndGlzc3VlU2l0ZURldGFpbCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghdGlzc3Vlc1swXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgYHBhcnNlVGlzc3VlU2l0ZXMgYXR0ciBlcnJvci4gJHtkfSBpcyBub3QgZm91bmRgO1xuICAgIH0pO1xuICAgIHRpc3N1ZXMgPSBmb3JFcXRsPT1mYWxzZT90aXNzdWVzOnRpc3N1ZXMuZmlsdGVyKChkKT0+e3JldHVybiAhaW52YWxpZFRpc3N1ZXMuaW5jbHVkZXMoZC50aXNzdWVTaXRlRGV0YWlsSWQpfSk7IC8vIGFuIGFycmF5IG9mIHRpc3N1ZVNpdGVEZXRhaWxJZCBvYmplY3RzXG5cbiAgICAvLyBidWlsZCB0aGUgdGlzc3VlR3JvdXBzIGxvb2t1cCBkaWN0aW9uYXJ5IGluZGV4ZWQgYnkgdGhlIHRpc3N1ZSBncm91cCBuYW1lIChpLmUuIHRoZSB0aXNzdWUgbWFpbiBzaXRlIG5hbWUpXG4gICAgbGV0IHRpc3N1ZUdyb3VwcyA9IHRpc3N1ZXMucmVkdWNlKChhcnIsIGQpPT57XG4gICAgICAgIGxldCBncm91cE5hbWUgPSBkLnRpc3N1ZVNpdGU7XG4gICAgICAgIGxldCBzaXRlID0ge1xuICAgICAgICAgICAgaWQ6IGQudGlzc3VlU2l0ZURldGFpbElkLFxuICAgICAgICAgICAgbmFtZTogZC50aXNzdWVTaXRlRGV0YWlsXG4gICAgICAgIH07XG4gICAgICAgIGlmICghYXJyLmhhc093blByb3BlcnR5KGdyb3VwTmFtZSkpIGFycltncm91cE5hbWVdID0gW107IC8vIGluaXRpYXRlIGFuIGFycmF5XG4gICAgICAgIGFycltncm91cE5hbWVdLnB1c2goc2l0ZSk7XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfSwge30pO1xuXG4gICAgLy8gbW9kaWZ5IHRoZSB0aXNzdWUgZ3JvdXBzIHRoYXQgaGF2ZSBvbmx5IGEgc2luZ2xlIHNpdGVcbiAgICAvLyBieSByZXBsYWNpbmcgdGhlIGdyb3VwJ3MgbmFtZSB3aXRoIHRoZSBzaW5nbGUgc2l0ZSdzIG5hbWUgLS0gcmVzdWx0aW5nIGEgYmV0dGVyIEFscGhhYmV0aWNhbCBvcmRlciBvZiB0aGUgdGlzc3VlIGdyb3Vwc1xuXG4gICAgT2JqZWN0LmtleXModGlzc3VlR3JvdXBzKS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAodGlzc3VlR3JvdXBzW2RdLmxlbmd0aCA9PSAxKXsgLy8gYSBzaW5nbGUtc2l0ZSBncm91cFxuICAgICAgICAgICAgbGV0IHNpdGUgPSB0aXNzdWVHcm91cHNbZF1bMF07IC8vIHRoZSBzaW5nbGUgc2l0ZVxuICAgICAgICAgICAgZGVsZXRlIHRpc3N1ZUdyb3Vwc1tkXTsgLy8gcmVtb3ZlIHRoZSBvbGQgZ3JvdXAgaW4gdGhlIGRpY3Rpb25hcnlcbiAgICAgICAgICAgIHRpc3N1ZUdyb3Vwc1tzaXRlLm5hbWVdID0gW3NpdGVdOyAvLyBjcmVhdGUgYSBuZXcgZ3JvdXAgd2l0aCB0aGUgc2l0ZSdzIG5hbWVcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aXNzdWVHcm91cHM7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGV4b25zXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEBwYXJhbSBmdWxsIHtCb29sZWFufVxuICogQHJldHVybnMge0xpc3R9IG9mIGV4b25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1vZGVsRXhvbnMoanNvbil7XG4gICAgY29uc3QgYXR0ciA9ICdjb2xsYXBzZWRHZW5lTW9kZWxFeG9uJztcbiAgICBpZighanNvbi5oYXNPd25Qcm9wZXJ0eShhdHRyKSl7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoanNvbik7XG4gICAgICAgIHRocm93ICdQYXJzaW5nIEVycm9yOiBSZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICB9XG4gICAgLy8gc2FuaXR5IGNoZWNrXG4gICAgWydzdGFydCcsICdlbmQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWpzb25bYXR0cl1bMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93ICdQYXJzaW5nIEVycm9yOiBSZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgZDtcbiAgICB9KTtcbiAgICByZXR1cm4ganNvblthdHRyXS5tYXAoKGQpPT57XG4gICAgICAgIGQuY2hyb21TdGFydCA9IGQuc3RhcnQ7XG4gICAgICAgIGQuY2hyb21FbmQgPSBkLmVuZDtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGp1bmN0aW9uc1xuICogQHBhcmFtIGRhdGFcbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBqdW5jdGlvbnNcbiAqIC8vIGp1bmN0aW9uIGFubm90YXRpb25zIGFyZSBub3Qgc3RvcmVkIGluIE1vbmdvXG4gICAgLy8gc28gaGVyZSB3ZSB1c2UgdGhlIGp1bmN0aW9uIGV4cHJlc3Npb24gd2ViIHNlcnZpY2UgdG8gcGFyc2UgdGhlIGp1bmN0aW9uIElEIGZvciBpdHMgZ2Vub21pYyBsb2NhdGlvblxuICAgIC8vIGFzc3VtaW5nIHRoYXQgZWFjaCB0aXNzdWUgaGFzIHRoZSBzYW1lIGp1bmN0aW9ucyxcbiAgICAvLyB0byBncmFiIGFsbCB0aGUga25vd24ganVuY3Rpb25zIG9mIGEgZ2VuZSwgd2Ugb25seSBuZWVkIHRvIHF1ZXJ5IG9uZSB0aXNzdWVcbiAgICAvLyBoZXJlIHdlIGFyYml0cmFyaWx5IHBpY2sgTGl2ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUp1bmN0aW9ucyhqc29uKXtcblxuICAgIGNvbnN0IGF0dHIgPSAnbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uJztcbiAgICBpZighanNvbi5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHBhcnNlSnVuY3Rpb25zIGlucHV0IGVycm9yLiAnICsgYXR0cjtcblxuICAgIC8vIGNoZWNrIHJlcXVpcmVkIGpzb24gYXR0cmlidXRlc1xuICAgIFsndGlzc3VlU2l0ZURldGFpbElkJywgJ2p1bmN0aW9uSWQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICAvLyB1c2UgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGpzb24gb2JqZWN0cyBhcyBhIHRlc3QgY2FzZVxuICAgICAgICBpZighanNvblthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShkKSl7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGpzb25bYXR0cl1bMF0pO1xuICAgICAgICAgICAgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGp1bmN0aW9uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgZDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBqc29uW2F0dHJdLmZpbHRlcigoZCk9PmQudGlzc3VlU2l0ZURldGFpbElkPT0nTGl2ZXInKVxuICAgICAgICAgICAgICAgICAgICAubWFwKChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG9zID0gZC5qdW5jdGlvbklkLnNwbGl0KCdfJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tOiBwb3NbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21TdGFydDogcG9zWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tRW5kOiBwb3NbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganVuY3Rpb25JZDogZC5qdW5jdGlvbklkXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXMgZnJvbSB0aGUgR1RFeCB3ZWIgc2VydmljZTogJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIHJldHVybnMgYSBkaWN0aW9uYXJ5IG9mIHRyYW5zY3JpcHQgZXhvbiBvYmplY3QgbGlzdHMgaW5kZXhlZCBieSB0cmFuc2NyaXB0IElEcyAtLSBFTlNUIElEc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFeG9ucyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ2V4b24nO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogZXhvbic7XG4gICAgcmV0dXJuIGpzb25bYXR0cl0ucmVkdWNlKChhLCBkKT0+e1xuICAgICAgICAvLyBjaGVjayByZXF1aXJlZCBhdHRyaWJ1dGVzXG4gICAgICAgIFsndHJhbnNjcmlwdElkJywgJ2Nocm9tb3NvbWUnLCAnc3RhcnQnLCAnZW5kJywgJ2V4b25OdW1iZXInLCAnZXhvbklkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChhW2QudHJhbnNjcmlwdElkXSA9PT0gdW5kZWZpbmVkKSBhW2QudHJhbnNjcmlwdElkXSA9IFtdO1xuICAgICAgICBkLmNocm9tID0gZC5jaHJvbW9zb21lO1xuICAgICAgICBkLmNocm9tU3RhcnQgPSBkLnN0YXJ0O1xuICAgICAgICBkLmNocm9tRW5kID0gZC5lbmQ7XG4gICAgICAgIGFbZC50cmFuc2NyaXB0SWRdLnB1c2goZCk7XG4gICAgICAgIHJldHVybiBhO1xuICAgIH0sIHt9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGlzb2Zvcm1zIGZyb20gdGhlIEdURXggd2ViIHNlcnZpY2U6ICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9yZWxlYXNlPXY3JmdlbmNvZGVfaWQ9J1xuICogQHBhcmFtIGRhdGEge0pzb259IGZyb20gd2ViIHNlcnZpY2UgZXhvblxuICogcmV0dXJucyBhIGxpc3Qgb2YgYWxsIEV4b25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV4b25zVG9MaXN0KGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAnZXhvbic7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBleG9uJztcbiAgICByZXR1cm4ganNvblthdHRyXTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGlzb2Zvcm1zXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn0gZnJvbSBHVEV4IHdlYiBzZXJ2aWNlICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9yZWxlYXNlPXY3JmdlbmNvZGVfaWQ9J1xuICogcmV0dXJucyBhIGxpc3Qgb2YgaXNvZm9ybSBvYmplY3RzIHNvcnRlZCBieSBsZW5ndGggaW4gZGVzY2VuZGluZyBvcmRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUcmFuc2NyaXB0cyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ3RyYW5zY3JpcHQnO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdygncGFyc2VJc29mb3JtcyBpbnB1dCBlcnJvcicpO1xuXG4gICAgLy8gY2hlY2sgcmVxdWlyZWQgYXR0cmlidXRlcywgdXNlIHRoZSBmaXJzdCB0cmFuc2NyaXB0IGFzIHRoZSB0ZXN0IGNhc2VcbiAgICBbJ3RyYW5zY3JpcHRJZCcsICdzdGFydCcsICdlbmQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICBpZighanNvblthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsga1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ganNvblthdHRyXS5zb3J0KChhLCBiKT0+e1xuICAgICAgICBjb25zdCBsMSA9IE1hdGguYWJzKGEuZW5kIC0gYS5zdGFydCkgKyAxO1xuICAgICAgICBjb25zdCBsMiA9IE1hdGguYWJzKGIuZW5kIC0gYi5zdGFydCkgKyAxO1xuICAgICAgICByZXR1cm4gLShsMS1sMik7IC8vIHNvcnQgYnkgaXNvZm9ybSBsZW5ndGggaW4gZGVzY2VuZGluZyBvcmRlclxuICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIGZpbmFsIChtYXNrZWQpIGdlbmUgbW9kZWwgZXhvbiBleHByZXNzaW9uXG4gKiBleHByZXNzaW9uIGlzIG5vcm1hbGl6ZWQgdG8gcmVhZHMgcGVyIGtiXG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gb2YgZXhvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gZXhvbnMge0xpc3R9IG9mIGV4b25zIHdpdGggcG9zaXRpb25zXG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgZXhvbiBvYmplY3RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV4b25FeHByZXNzaW9uKGRhdGEsIGV4b25zKXtcbiAgICBjb25zdCBleG9uRGljdCA9IGV4b25zLnJlZHVjZSgoYSwgZCk9PnthW2QuZXhvbklkXSA9IGQ7IHJldHVybiBhO30sIHt9KTtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhbkV4b25FeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ3BhcnNlRXhvbkV4cHJlc3Npb24gaW5wdXQgZXJyb3InKTtcblxuICAgIGNvbnN0IGV4b25PYmplY3RzID0gZGF0YVthdHRyXTtcbiAgICAvLyBlcnJvci1jaGVja2luZ1xuICAgIFsnbWVkaWFuJywgJ2V4b25JZCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWV4b25PYmplY3RzWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlRXhvbkV4cHJlc3Npb24gYXR0ciBub3QgZm91bmQ6ICcgKyBkO1xuICAgIH0pO1xuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGV4b24gY291bnRzXG4gICAgZXhvbk9iamVjdHMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBjb25zdCBleG9uID0gZXhvbkRpY3RbZC5leG9uSWRdOyAvLyBmb3IgcmV0cmlldmluZyBleG9uIHBvc2l0aW9uc1xuICAgICAgICAvLyBlcnJvci1jaGVja2luZ1xuICAgICAgICBbJ2VuZCcsICdzdGFydCddLmZvckVhY2goKHApPT57XG4gICAgICAgICAgICBpZiAoIWV4b24uaGFzT3duUHJvcGVydHkocCkpIHRocm93ICdGYXRhbCBFcnJvcjogcGFyc2VFeG9uRXhwcmVzc2lvbiBwb3NpdGlvbiBhdHRyIG5vdCBmb3VuZDogJyArIHA7XG4gICAgICAgIH0pO1xuICAgICAgICBkLmwgPSBleG9uLmVuZCAtIGV4b24uc3RhcnQgKyAxO1xuICAgICAgICBkLnZhbHVlID0gTnVtYmVyKGQubWVkaWFuKS9kLmw7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKGQubWVkaWFuKS9kLmw7XG4gICAgICAgIGQueCA9IGQuZXhvbklkO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLmNocm9tU3RhcnQgPSBleG9uLnN0YXJ0O1xuICAgICAgICBkLmNocm9tRW5kID0gZXhvbi5lbmQ7XG4gICAgICAgIGQudW5pdCA9ICdtZWRpYW4gJyArIGQudW5pdCArICcgcGVyIGJhc2UnO1xuICAgICAgICBkLnRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGV4b25PYmplY3RzLnNvcnQoKGEsYik9PntcbiAgICAgICAgaWYgKGEuY2hyb21TdGFydDxiLmNocm9tU3RhcnQpIHJldHVybiAtMTtcbiAgICAgICAgaWYgKGEuY2hyb21TdGFydD5iLmNocm9tU3RhcnQpIHJldHVybiAxO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTsgLy8gc29ydCBieSBnZW5vbWljIGxvY2F0aW9uIGluIGFzY2VuZGluZyBvcmRlclxufVxuXG4vKipcbiAqIFBhcnNlIGp1bmN0aW9uIG1lZGlhbiByZWFkIGNvdW50IGRhdGFcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBvZiB0aGUganVuY3Rpb24gZXhwcmVzc2lvbiB3ZWIgc2VydmljZVxuICogQHJldHVybnMge0xpc3R9IG9mIGp1bmN0aW9uIG9iamVjdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSnVuY3Rpb25FeHByZXNzaW9uKGRhdGEpe1xuICAgIGNvbnN0IGF0dHIgPSAnbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ3BhcnNlSnVuY3Rpb25FeHByZXNzaW9uIGlucHV0IGVycm9yJyk7XG5cbiAgICBjb25zdCBqdW5jdGlvbnMgPSBkYXRhW2F0dHJdO1xuXG4gICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICBpZiAoanVuY3Rpb25zID09PSB1bmRlZmluZWQgfHwganVuY3Rpb25zLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignTm8ganVuY3Rpb24gZGF0YSBmb3VuZCcpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuXG4gICAgLy8gcGFyc2UgR1RFeCBtZWRpYW4ganVuY3Rpb24gcmVhZCBjb3VudHNcbiAgICBqdW5jdGlvbnMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBbJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdqdW5jdGlvbklkJywgJ21lZGlhbicsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYgKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2luZ3IgRXJyb3I6IHBhcnNlSnVuY3Rpb25FeHByZXNzaW9uIGF0dHIgbm90IGZvdW5kOiAnICsgaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBtZWRpYW4gPSBkLm1lZGlhbjtcbiAgICAgICAgbGV0IHRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQudGlzc3VlSWQgPSB0aXNzdWVJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLnggPSBkLmp1bmN0aW9uSWQ7XG4gICAgICAgIGQueSA9IHRpc3N1ZUlkO1xuICAgICAgICBkLnZhbHVlID0gTnVtYmVyKG1lZGlhbik7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKG1lZGlhbik7XG4gICAgfSk7XG5cbiAgICAvLyBzb3J0IGJ5IGdlbm9taWMgbG9jYXRpb24gaW4gYXNjZW5kaW5nIG9yZGVyXG4gICAgcmV0dXJuIGp1bmN0aW9ucy5zb3J0KChhLGIpPT57XG4gICAgICAgIGlmIChhLmp1bmN0aW9uSWQ+Yi5qdW5jdGlvbklkKSByZXR1cm4gMTtcbiAgICAgICAgZWxzZSBpZiAoYS5qdW5jdGlvbklkPGIuanVuY3Rpb25JZCkgcmV0dXJuIC0xO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGV4cHJlc3Npb25cbiAqIEBwYXJhbSBkYXRhXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb24oZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5UcmFuc2NyaXB0RXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdQYXJzaW5nIEVycm9yOiBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uIGlucHV0IGVycm9yJyk7XG4gICAgLy8gcGFyc2UgR1RFeCBpc29mb3JtIG1lZGlhbiBUUE1cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgWydtZWRpYW4nLCAndHJhbnNjcmlwdElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93KCdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCB0cmFuc2NpcHQgYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGQudmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IE51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQueCA9IGQudHJhbnNjcmlwdElkO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLnRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGF0YVthdHRyXTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGV4cHJlc3Npb24sIGFuZCB0cmFuc3Bvc2UgdGhlIG1hdHJpeFxuICogQHBhcmFtIGRhdGFcbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvblRyYW5zcG9zZShkYXRhKXtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhblRyYW5zY3JpcHRFeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGRhdGEpO1xuICAgICAgICB0aHJvdygnUGFyc2luZyBFcnJvcjogcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvblRyYW5zcG9zZSBpbnB1dCBlcnJvci4nKTtcbiAgICB9XG4gICAgLy8gcGFyc2UgR1RFeCBpc29mb3JtIG1lZGlhbiBUUE1cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgWydtZWRpYW4nLCAndHJhbnNjcmlwdElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93KCdQYXJzaW5nIEVycm9yOiBSZXF1aXJlZCB0cmFuc2NyaXB0IGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBtZWRpYW4gPSBkLm1lZGlhbjtcbiAgICAgICAgY29uc3QgdGlzc3VlSWQgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC52YWx1ZSA9IE51bWJlcihtZWRpYW4pO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IE51bWJlcihtZWRpYW4pO1xuICAgICAgICBkLnkgPSBkLnRyYW5zY3JpcHRJZDtcbiAgICAgICAgZC54ID0gdGlzc3VlSWQ7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZDtcbiAgICAgICAgZC50aXNzdWVJZCA9IHRpc3N1ZUlkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogcGFyc2UgbWVkaWFuIGdlbmUgZXhwcmVzc2lvblxuICogQHBhcmFtIGRhdGEge0pzb259IHdpdGggYXR0ciBtZWRpYW5HZW5lRXhwcmVzc2lvblxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1lZGlhbkV4cHJlc3Npb24oZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5HZW5lRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBjb25zdCBhZGp1c3QgPSAxO1xuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGdlbmUgZXhwcmVzc2lvblxuICAgIC8vIGVycm9yLWNoZWNraW5nIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGVzOlxuICAgIGlmIChkYXRhW2F0dHJdLmxlbmd0aCA9PSAwKSB0aHJvdyAncGFyc2VNZWRpYW5FeHByZXNzaW9uIGZpbmRzIG5vIGRhdGEuJztcbiAgICBbJ21lZGlhbicsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnZ2VuY29kZUlkJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCFkYXRhW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGQpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGRhdGFbYXR0cl1bMF0pO1xuICAgICAgICAgICAgdGhyb3cgYFBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3NpbmdwOiAke2R9YDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGxldCByZXN1bHRzID0gZGF0YVthdHRyXTtcbiAgICByZXN1bHRzLmZvckVhY2goZnVuY3Rpb24oZCl7XG4gICAgICAgIGQudmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pO1xuICAgICAgICBkLnggPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC55ID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKGQubWVkaWFuKTtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGV4cHJlc3Npb24gZGF0YSBvZiBhIGdlbmUgZm9yIGEgZ3JvdXBlZCB2aW9saW4gcGxvdFxuICogQHBhcmFtIGRhdGEge0pTT059IGZyb20gR1RFeCBnZW5lIGV4cHJlc3Npb24gd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBjb2xvcnMge0RpY3Rpb25hcnl9IHRoZSB2aW9saW4gY29sb3IgZm9yIGdlbmVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVFeHByZXNzaW9uRm9yVmlvbGluKGRhdGEsIHVzZUxvZz10cnVlLCBjb2xvcnM9dW5kZWZpbmVkKXtcbiAgICBjb25zdCBhdHRyID0gJ2dlbmVFeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIGRhdGFbYXR0cl0uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgWydkYXRhJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5lU3ltYm9sJywgJ2dlbmNvZGVJZCddLmZvckVhY2goKGspPT57XG4gICAgICAgICAgICBpZighZC5oYXNPd25Qcm9wZXJ0eShrKSl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkLnZhbHVlcyA9IHVzZUxvZz9kLmRhdGEubWFwKChkZCk9PntyZXR1cm4gTWF0aC5sb2cxMCgrZGQrMSl9KTpkLmRhdGE7XG4gICAgICAgIGQuZ3JvdXAgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC5sYWJlbCA9IGQuZ2VuZVN5bWJvbDtcbiAgICAgICAgZC5jb2xvciA9IGNvbG9ycz09PXVuZGVmaW5lZD8nIzkwYzFjMSc6Y29sb3JzW2QuZ2VuY29kZUlkXTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGF0YVthdHRyXTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0aGUgTEQgKGxpbmthZ2UgZGlzZXF1aWxpYnJpdW0gZGF0YSlcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggbGQgd2ViIHNlcnZpY2VcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTEQoZGF0YSkge1xuICAgIGNvbnN0IGF0dHIgPSAnbGQnO1xuICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIGxldCBwYXJzZWQgPSBbXTtcbiAgICBsZXQgdW5pcXVlID0ge307XG4gICAgZGF0YVthdHRyXS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIGxldCBsYWJlbHMgPSBkWzBdLnNwbGl0KFwiLFwiKS5zb3J0KCk7IC8vIHNvcnQgdGhlIHZhcmlhbnQgSURzXG4gICAgICAgIHVuaXF1ZVtsYWJlbHNbMF1dID0gdHJ1ZTtcbiAgICAgICAgdW5pcXVlW2xhYmVsc1sxXV0gPSB0cnVlO1xuICAgICAgICBwYXJzZWQucHVzaCh7XG4gICAgICAgICAgICB4OiBsYWJlbHNbMF0sXG4gICAgICAgICAgICBkaXNwbGF5WDogZ2VuZXJhdGVTaG9ydFZhcmlhbnRJZChsYWJlbHNbMF0pLFxuICAgICAgICAgICAgeTogbGFiZWxzWzFdLFxuICAgICAgICAgICAgZGlzcGxheVk6IGdlbmVyYXRlU2hvcnRWYXJpYW50SWQobGFiZWxzWzFdKSxcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZUZsb2F0KGRbMV0pLFxuICAgICAgICAgICAgZGlzcGxheVZhbHVlOiBwYXJzZUZsb2F0KGRbMV0pLnRvUHJlY2lzaW9uKDMpIC8vIHRvUHJlY2lzaW9uKCkgcmV0dXJucyBhIHN0cmluZ1xuICAgICAgICB9KVxuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKHVuaXF1ZSkuZm9yRWFjaCgoZCk9PntcbiAgICAgICAgcGFyc2VkLnB1c2goe1xuICAgICAgICAgICAgeDogZCxcbiAgICAgICAgICAgIGRpc3BsYXlYOiBnZW5lcmF0ZVNob3J0VmFyaWFudElkKGQpLFxuICAgICAgICAgICAgeTogZCxcbiAgICAgICAgICAgIGRpc3BsYXlZOiBnZW5lcmF0ZVNob3J0VmFyaWFudElkKGQpLFxuICAgICAgICAgICAgdmFsdWU6IDEsXG4gICAgICAgICAgICBkaXNwbGF5VmFsdWU6IFwiMVwiXG4gICAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnNlZDtcbn1cblxuLyogcGFyc2UgdGhlIGV4cHJlc3Npb24gZGF0YSBvZiBhIGdlbmUgZm9yIGJveHBsb3RcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggZ2VuZSBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gdGlzc3VlcyB7T2JqZWN0fSBtYXBwaW5nIG9mIHRpc3N1ZSBpZHMgdG8gbGFiZWxzICh0aXNzdWUgbmFtZSlcbiAqIEBwYXJhbSBjb2xvcnMge09iamVjdH0gbWFwcGluZyBvZiB0aXNzdWUgaWRzIHRvIGJveHBsb3QgY29sb3JzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVFeHByZXNzaW9uRm9yQm94cGxvdChkYXRhLCB0aXNzdWVzPXVuZGVmaW5lZCwgY29sb3JzPXVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGF0dHIgPSAnZ2VuZUV4cHJlc3Npb24nO1xuXG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KGBQYXJzaW5nIGVycm9yOiByZXF1aXJlZCBKU09OIGF0dHJpYnV0ZSAke2F0dHJ9IG1pc3NpbmcuYCk7XG5cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpPT57XG4gICAgICAgIFsnZGF0YScsICdnZW5jb2RlSWQnLCAnZ2VuZVN5bWJvbCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYgKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBgUGFyc2luZyBlcnJvcjogcmVxdWlyZWQgSlNPTiBhdHRyaWJ1dGUgJHtrfSBpcyBtaXNzaW5nIGZyb20gYSByZWNvcmQuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGQubGFiZWwgPSB0aXNzdWVzPT09dW5kZWZpbmVkP2QudGlzc3VlU2l0ZURldGFpbElkOnRpc3N1ZXNbZC50aXNzdWVTaXRlRGV0YWlsSWRdO1xuICAgICAgICBkLmNvbG9yID0gY29sb3JzPT09dW5kZWZpbmVkPycjNDY4MmI0Jzpjb2xvcnNbZC50aXNzdWVTaXRlRGV0YWlsSWRdO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogZ2VuZXJhdGUgdmFyaWFudCBJRCBzaG9ydGhhbmRcbiAqIEBwYXJhbSBpZFxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlU2hvcnRWYXJpYW50SWQoaWQpe1xuICAgIGxldCB0ZW1wID0gaWQuc3BsaXQoXCJfXCIpO1xuICAgIGlmKHRlbXBbMl0ubGVuZ3RoID09IDEgJiYgdGVtcFszXS5sZW5ndGggPT0gMSkgcmV0dXJuIGlkO1xuICAgIGlmKHRlbXBbMl0ubGVuZ3RoID4gdGVtcFszXS5sZW5ndGgpIHtcbiAgICAgICAgdGVtcFsyXSA9IFwiZGVsXCI7XG4gICAgICAgIHRlbXAuc3BsaWNlKDMsIDEpOyAvLyBkZWxldGUgdGhlIGFsdFxuICAgIH1cbiAgICBlbHNlIGlmKHRlbXBbM10ubGVuZ3RoID4gdGVtcFsyXS5sZW5ndGgpIHtcbiAgICAgICAgdGVtcFszXSA9IFwiaW5zXCI7XG4gICAgICAgIHRlbXAuc3BsaWNlKDIsIDEpOyAvLyBkZWxldGUgdGhlIHJlZlxuICAgIH1cbiAgICBlbHNlIHsgLy8gdGVtcFszXS5sZW5ndGggPT0gdGVtcFsyXS5sZW5ndGggYW5kIHRlbXBbM10ubGVuZ3RoID4gMVxuICAgICAgICB0ZW1wWzNdID0gXCJzdWJcIjtcbiAgICAgICAgdGVtcC5zcGxpY2UoMiwgMSk7IC8vIGRlbGV0ZSB0aGUgcmVmXG4gICAgfVxuICAgIHJldHVybiB0ZW1wLmpvaW4oXCJfXCIpO1xufSIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cblwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHtqc29ufSBmcm9tIFwiZDMtZmV0Y2hcIjtcbmltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3JhbmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7Z2V0R3RleFVybHMsIHBhcnNlVGlzc3Vlc30gZnJvbSBcIi4vZ3RleERhdGFQYXJzZXJcIjtcblxuLyoqXG4gKiBDcmVhdGUgdGhlIHRpc3N1ZSAoZGF0YXNldCkgZHJvcGRvd24gbWVudSB1c2luZyBzZWxlY3QyXG4gKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIGRvbSBJRCBvZiB0aGUgbWVudVxuICogQHBhcmFtIHVybCB7U3RyaW5nfSB0aGUgdGlzc3VlIHdlYiBzZXJ2aWNlIHVybFxuICogZGVwZW5kZW5jeTogc2VsZWN0MlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGlzc3VlTWVudShkb21JZCwgdXJsID0gZ2V0R3RleFVybHMoKS50aXNzdWUpe1xuICAgIGpzb24odXJsKVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXN1bHRzKXtcbiAgICAgICAgICAgIGxldCB0aXNzdWVzID0gcGFyc2VUaXNzdWVzKHJlc3VsdHMpO1xuICAgICAgICAgICAgdGlzc3Vlcy5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgICAgICAgICAgZC5pZCA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICAgICAgICAgIGQudGV4dCA9IGQudGlzc3VlU2l0ZURldGFpbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGlzc3Vlcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYoYS50aXNzdWVTaXRlRGV0YWlsIDwgYi50aXNzdWVTaXRlRGV0YWlsKSByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgaWYoYS50aXNzdWVTaXRlRGV0YWlsID4gYi50aXNzdWVTaXRlRGV0YWlsKSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBleHRlcm5hbCBsaWJyYXJ5IGRlcGVuZGVuY3k6IHNlbGVjdDJcbiAgICAgICAgICAgICQoYCMke2RvbUlkfWApLnNlbGVjdDIoe1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnU2VsZWN0IGEgZGF0YSBzZXQnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHRpc3N1ZXNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpe2NvbnNvbGUuZXJyb3IoZXJyKX0pO1xufVxuXG4vKipcbiAqIEJ1aWxkIHRoZSB0d28tbGV2ZWwgY2hlY2tib3gtc3R5bGUgdGlzc3VlIG1lbnVcbiAqIGRlcGVuZGVuY2llczogdGlzc3VlR3JvdXAuY3NzIGNsYXNzZXNcbiAqIEBwYXJhbSBncm91cHMge0RpY3Rpb25hcnl9IG9mIGxpc3RzIG9mIHRpc3N1ZXMgaW5kZXhlZCBieSB0aGUgZ3JvdXAgbmFtZSwgdGhpcyBpcyBjcmVhdGVkIGJ5IGd0ZXhEYXRhUGFyc2VyOnBhcnNlVGlzc3VlU2l0ZXMoKVxuICogQHBhcmFtIGRvbUlkIHtTdHJpbmd9IDxkaXY+IElEXG4gKiBAcGFyYW0gZm9yRXF0bCB7Qm9vbGVhbn1cbiAqIEBwYXJhbSBjaGVja0FsbCB7Qm9vbGVhbn0gV2hldGhlciBvciBub3QgdG8gc3RhcnQgYWxsIG9wdGlvbnMgY2hlY2tlZFxuICogQHBhcmFtIHNlY3Rpb25zIHtJbnRlZ2VyfSBOdW1iZXIgb2Ygc2VjdGlvbnMgdG8gc3BsaXQgbWVudSBpbnRvXG4gKiBEZXBlbmRlbmNpZXM6IGpRdWVyeSwgQm9vdHN0cmFwLCB0aXNzdWVHcm91cC5jc3NcbiAqIHRvZG86IGFkZCByZXNldCBhbmQgc2VsZWN0IGFsbCBvcHRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUaXNzdWVHcm91cE1lbnUoZ3JvdXBzLCBkb21JZCwgZm9yRXF0bD1mYWxzZSwgY2hlY2tBbGw9ZmFsc2UsIHNlY3Rpb25zPTQpe1xuICAgIGNvbnN0IG1haW5DbGFzcz1cInRpc3N1ZS1ncm91cC1tYWluLWxldmVsXCI7XG4gICAgY29uc3Qgc3ViQ2xhc3MgPSBcInRpc3N1ZS1ncm91cC1zdWItbGV2ZWxcIjtcbiAgICBjb25zdCBsYXN0U2l0ZUNsYXNzID0gXCJsYXN0LXNpdGVcIjtcblxuICAgIC8vIGVyYXNlIGV2ZXJ5dGhpbmcgaW4gZG9tSWQgaW4gY2FzZSBpdCBpc24ndCBlbXB0eVxuICAgIHNlbGVjdChgIyR7ZG9tSWR9YCkuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcblxuICAgIC8vIGFkZCBjaGVjayBhbGwgYW5kIHJlc2V0IG9wdGlvbnNcbiAgICBjb25zdCAkYWxsVGlzc3VlRGl2ID0gJCgnPGRpdi8+JykuYXR0cignY2xhc3MnLCAnY29sLXhzLTEyIGNvbC1tZC0xMicpLmFwcGVuZFRvKCQoYCMke2RvbUlkfWApKTtcbiAgICBpZiAoZm9yRXF0bCl7XG4gICAgICAgICQoYDxsYWJlbCBjbGFzcz0ke21haW5DbGFzc30+YCArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImFsbFRpc3N1ZXNcIiB2YWx1ZT1cInJlc2V0XCI+IFJlc2V0ICcgK1xuICAgICAgICAnPC9sYWJlbD48YnIvPicpLmFwcGVuZFRvKCRhbGxUaXNzdWVEaXYpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgICQoYDxsYWJlbCBjbGFzcz0ke21haW5DbGFzc30+YCArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImFsbFRpc3N1ZXNcIiB2YWx1ZT1cImFsbFwiPiBBbGwgPC9sYWJlbD4gJyArXG4gICAgICAgIGA8bGFiZWwgY2xhc3M9JHttYWluQ2xhc3N9PmAgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJhbGxUaXNzdWVzXCIgdmFsdWU9XCJyZXNldFwiPiBSZXNldCAnICtcbiAgICAgICAgJzwvbGFiZWw+PGJyLz4nKS5hcHBlbmRUbygkYWxsVGlzc3VlRGl2KTtcbiAgICB9XG5cblxuICAgIC8vIGNoZWNrIGFsbCBvciByZXNldCBldmVudHNcbiAgICAkKCdpbnB1dFtuYW1lPVwiYWxsVGlzc3Vlc1wiXScpLmNoYW5nZShmdW5jdGlvbigpe1xuICAgICAgICBsZXQgdmFsID0gJCh0aGlzKS52YWwoKTtcbiAgICAgICAgc3dpdGNoKHZhbCl7XG4gICAgICAgICAgICBjYXNlICdhbGwnOiB7XG4gICAgICAgICAgICAgICAgJCgnLnRpc3N1ZUdyb3VwJykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgICQoJy50aXNzdWVTdWJHcm91cCcpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3Jlc2V0Jzoge1xuICAgICAgICAgICAgICAgICQoJy50aXNzdWVHcm91cCcpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgJCgnLnRpc3N1ZVN1Ykdyb3VwJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIHNvcnQgdGhlIHRpc3N1ZSBncm91cHMgYWxwaGFiZXRpY2FsbHlcbiAgICBsZXQgZ3JvdXBOYW1lcyA9IE9iamVjdC5rZXlzKGdyb3Vwcykuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAvLyByZWd1bGFyIHNvcnRpbmcsIGV4Y2VwdCB0aGF0ICdCcmFpbicgZ3JvdXAgd2lsbCBhbHdheXMgYmUgZmlyc3RcbiAgICAgICAgaWYgKGEgPT0gJ0JyYWluJykgcmV0dXJuIC0xO1xuICAgICAgICBlbHNlIGlmIChiID09ICdCcmFpbicpIHJldHVybiAxO1xuICAgICAgICBlbHNlIGlmIChhIDwgYikgcmV0dXJuIC0xO1xuICAgICAgICBlbHNlIGlmIChhID4gYikgcmV0dXJuIDE7XG4gICAgfSk7XG5cbiAgICAvLyB0b3RhbCBudW1iZXIgb2Ygcm93cyB0aGF0IHdpbGwgYmUgZ2VuZXJhdGVkXG4gICAgbGV0IHJvd3MgPSBPYmplY3Qua2V5cyhncm91cHMpLnJlZHVjZSgoYSxiKT0+e1xuICAgICAgICBpZiAoZ3JvdXBzW2JdLmxlbmd0aD4xKSByZXR1cm4gYSsxK2dyb3Vwc1tiXS5sZW5ndGg7XG4gICAgICAgIGVsc2UgcmV0dXJuIGErZ3JvdXBzW2JdLmxlbmd0aDtcbiAgICB9LCAwKTtcbiAgICBsZXQgcm93c1BlclNlY3Rpb24gPSBNYXRoLmZsb29yKHJvd3Mvc2VjdGlvbnMpO1xuICAgIGxldCByb3dzUmVtYWluID0gcm93cyAlIHNlY3Rpb25zO1xuICAgIGxldCBjb2xTaXplID0gTWF0aC5mbG9vcigxMi9zZWN0aW9ucyk7IC8vIGZvciBib290c3RyYXAgZ3JpZFxuICAgIGNvbnN0ICRzZWN0aW9ucyA9IHJhbmdlKDAsIHNlY3Rpb25zKS5tYXAoZD0+e1xuICAgICAgICByZXR1cm4gJChgPGRpdiBpZD1cInNlY3Rpb24ke2R9XCIgY2xhc3M9XCJjb2wteHMtMTIgY29sLW1kLSR7Y29sU2l6ZX1cIj5gKS5hcHBlbmRUbygkKGAjJHtkb21JZH1gKSk7XG4gICAgfSk7XG5cbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgbGV0IGN1cnJTZWN0aW9uID0gMDtcbiAgICBncm91cE5hbWVzLmZvckVhY2goKGduYW1lKT0+e1xuICAgICAgICBsZXQgc2l0ZXMgPSBncm91cHNbZ25hbWVdOyAvLyBhIGxpc3Qgb2Ygc2l0ZSBvYmplY3RzIHdpdGggYXR0cjogbmFtZSBhbmQgaWRcbiAgICAgICAgY29uc3QgZ0lkID0gZ25hbWUucmVwbGFjZSgvIC9nLCBcIl9cIik7IC8vIHJlcGxhY2UgdGhlIHNwYWNlcyB3aXRoIGRhc2hlcyB0byBjcmVhdGUgYSBncm91cCA8RE9NPiBpZFxuICAgICAgICAvLyBmaWd1cmUgb3V0IHdoaWNoIGRvbSBzZWN0aW9uIHRvIGFwcGVuZCB0aGlzIHRpc3N1ZSBzaXRlXG4gICAgICAgIGxldCBncm91cExlbiA9IGdyb3Vwc1tnbmFtZV0ubGVuZ3RoO1xuICAgICAgICBncm91cExlbiA9IGdyb3VwTGVuID09IDEgPyBncm91cExlbiA6IGdyb3VwTGVuKzE7IC8vICsxIHRvIGFjY291bnQgZm9yIHNpdGUgbmFtZVxuICAgICAgICAvLyBtb3ZlIHRvIG5ldyBzZWN0aW9uIGlmIGVub3VnaCByb3dzIGFyZSBpbiB0aGUgY3VycmVudCBzZWN0aW9uXG4gICAgICAgIGlmIChjb3VudGVyICE9IDAgJiYgZ3JvdXBMZW4gKyBjb3VudGVyID4gcm93c1BlclNlY3Rpb24gKyByb3dzUmVtYWluKSB7XG4gICAgICAgICAgICBjb3VudGVyID0gMDtcbiAgICAgICAgICAgIGN1cnJTZWN0aW9uICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgY291bnRlciArPSBncm91cExlbjtcbiAgICAgICAgbGV0ICRjdXJyZW50RG9tID0gJHNlY3Rpb25zW2N1cnJTZWN0aW9uXTtcblxuICAgICAgICAvLyBjcmVhdGUgdGhlIDxsYWJlbD4gZm9yIHRoZSB0aXNzdWUgZ3JvdXBcbiAgICAgICAgJChgPGxhYmVsIGNsYXNzPSR7bWFpbkNsYXNzfT5gK1xuICAgICAgICAgICAgYDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cIiR7Z0lkfVwiIGNsYXNzPVwidGlzc3VlR3JvdXBcIj4gYCArXG4gICAgICAgICAgICBgPHNwYW4+JHtnbmFtZX08L3NwYW4+YCArXG4gICAgICAgICAgICAnPC9sYWJlbD48YnIvPicpLmFwcGVuZFRvKCRjdXJyZW50RG9tKTtcblxuICAgICAgICAvLyB0aXNzdWUgc2l0ZXMgaW4gdGhlIGdyb3VwXG4gICAgICAgIGlmIChzaXRlcy5sZW5ndGggPiAxKXtcbiAgICAgICAgICAgICAvLyBzb3J0IHNpdGVzIGFscGhhYmV0aWNhbGx5XG4gICAgICAgICAgICBzaXRlcy5zb3J0KChhLCBiKT0+e1xuICAgICAgICAgICAgICAgIGlmIChhLmlkID4gYi5pZCkgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgaWYgKGEuaWQgPCBiLmlkKSByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24oc2l0ZSwgaSl7XG4gICAgICAgICAgICAgICAgbGV0ICRzaXRlRG9tID0gJChgPGxhYmVsIGNsYXNzPSR7c3ViQ2xhc3N9PmArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCIke3NpdGUuaWR9XCIgY2xhc3M9XCJ0aXNzdWVTdWJHcm91cFwiPiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYDxzcGFuPiR7c2l0ZS5uYW1lfTwvc3Bhbj5gICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvbGFiZWw+PGJyLz4nKS5hcHBlbmRUbygkY3VycmVudERvbSk7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT0gc2l0ZXMubGVuZ3RoIC0xKSAkc2l0ZURvbS5hZGRDbGFzcyhsYXN0U2l0ZUNsYXNzKTtcbiAgICAgICAgICAgICAgICAkc2l0ZURvbS5jbGljayhmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAkKCdpbnB1dFtuYW1lPVwiYWxsVGlzc3Vlc1wiXScpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY3VzdG9tIGNsaWNrIGV2ZW50IGZvciB0aGUgdG9wLWxldmVsIHRpc3N1ZXM6IHRvZ2dsZSB0aGUgY2hlY2sgYm94ZXNcbiAgICAgICAgJChcIiNcIiArIGdJZCkuY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQoJ2lucHV0W25hbWU9XCJhbGxUaXNzdWVzXCJdJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmICgkKCcjJyArIGdJZCkuaXMoXCI6Y2hlY2tlZFwiKSkge1xuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGdyb3VwIGlzIGNoZWNrZWQsIGNoZWNrIGFsbCBpdHMgdGlzc3Vlc1xuICAgICAgICAgICAgICAgIHNpdGVzLmZvckVhY2goZnVuY3Rpb24gKHNpdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwiaWRcIiA9PSBzaXRlLmlkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICQoJyMnICsgc2l0ZS5pZCkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgZ3JvdXAgaXMgdW5jaGVja2VkLCB1bi1jaGVjayBhbGwgaXRzIHRpc3N1ZXNcbiAgICAgICAgICAgICAgICBzaXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzaXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcImlkXCIgPT0gc2l0ZS5pZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAkKCcjJyArIHNpdGUuaWQpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChjaGVja0FsbCkge1xuICAgICAgICAkKCdpbnB1dFtuYW1lPVwiYWxsVGlzc3Vlc1wiXVt2YWx1ZT1cImFsbFwiXScpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICAgICAgJCgnLnRpc3N1ZUdyb3VwJykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAkKCcudGlzc3VlU3ViR3JvdXAnKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIFBhcnNlIHRoZSB0d28tbGV2ZWwgY2hlY2tib3gtc3R5bGUgdGlzc3VlIG1lbnVcbiAqIEBwYXJhbSBncm91cHMge0RpY3Rpb25hcnl9IG9mIGxpc3RzIG9mIHRpc3N1ZXMgaW5kZXhlZCBieSB0aGUgZ3JvdXAgbmFtZSwgdGhpcyBpcyBjcmVhdGVkIGJ5IGd0ZXhEYXRhUGFyc2VyOnBhcnNlVGlzc3VlU2l0ZXMoKVxuICogQHBhcmFtIGRvbUlkIHtTdHJpbmd9IDxkaXY+IElEXG4gKiBAcGFyYW0gdXNlTmFtZXMge0Jvb2xlYW59IFdoZXRoZXIgdG8gcmV0dXJuIHRpc3N1ZSBpZHMgb3IgdGlzc3VlIG5hbWVzXG4gKiBEZXBlbmRlbmNpZXM6IGpRdWVyeVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaXNzdWVHcm91cE1lbnUoZ3JvdXBzLCBkb21JZCwgdXNlTmFtZXM9ZmFsc2Upe1xuICAgIGxldCBxdWVyeVRpc3N1ZXMgPSBbXTtcbiAgICAkKGAjJHtkb21JZH1gKS5maW5kKFwiOmlucHV0XCIpLmVhY2goZnVuY3Rpb24oKXsgLy8gdXNpbmcgalF1ZXJ5IHRvIHBhcnNlIGVhY2ggaW5wdXQgaXRlbVxuICAgICAgICBpZiAoICQodGhpcykuaXMoXCI6Y2hlY2tlZFwiKSkgeyAvLyB0aGUgalF1ZXJ5IHdheSB0byBmZXRjaCBhIGNoZWNrZWQgdGlzc3VlXG4gICAgICAgICAgICBjb25zdCBpZCA9ICQodGhpcykuYXR0cignaWQnKTtcbiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKFwidGlzc3VlR3JvdXBcIikpe1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgaW5wdXQgaXRlbSBpcyBhIHRpc3N1ZSBncm91cFxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgdGlzc3VlIGdyb3VwIGlzIGEgc2luZ2xlLXNpdGUgZ3JvdXAgdXNpbmcgdGhlIHRpc3N1ZUdyb3VwcyBkaWN0aW9uYXJ5XG4gICAgICAgICAgICAgICAgLy8gaWYgc28sIGFkZCB0aGUgc2luZ2xlIHNpdGUgdG8gdGhlIHF1ZXJ5IGxpc3RcbiAgICAgICAgICAgICAgICBsZXQgZ3JvdXBOYW1lID0gaWQucmVwbGFjZSgvXy9nLCBcIiBcIik7IC8vIGZpcnN0IGNvbnZlcnQgdGhlIElEIGJhY2sgdG8gZ3JvdXAgbmFtZVxuICAgICAgICAgICAgICAgIGlmIChncm91cHNbZ3JvdXBOYW1lXS5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB1c2VOYW1lcz9xdWVyeVRpc3N1ZXMucHVzaChncm91cHNbZ3JvdXBOYW1lXVswXS5uYW1lKSA6IHF1ZXJ5VGlzc3Vlcy5wdXNoKGdyb3Vwc1tncm91cE5hbWVdWzBdLmlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNleyAvLyB0aGlzIGlucHV0IGl0ZW0gaXMgYSB0aXNzdWUgc2l0ZVxuICAgICAgICAgICAgICAgIHVzZU5hbWVzP3F1ZXJ5VGlzc3Vlcy5wdXNoKCQoJCh0aGlzKS5zaWJsaW5ncygpWzBdKS50ZXh0KCkpOnF1ZXJ5VGlzc3Vlcy5wdXNoKGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBxdWVyeVRpc3N1ZXMuZmlsdGVyKChkKT0+ZCE9PXVuZGVmaW5lZCk7XG59XG4iXSwibmFtZXMiOlsiRU9MIiwiRU9GIiwiUVVPVEUiLCJORVdMSU5FIiwiUkVUVVJOIiwib2JqZWN0Q29udmVydGVyIiwiY29sdW1ucyIsIkZ1bmN0aW9uIiwibWFwIiwibmFtZSIsImkiLCJKU09OIiwic3RyaW5naWZ5Iiwiam9pbiIsImRlbGltaXRlciIsInJlRm9ybWF0IiwiUmVnRXhwIiwiREVMSU1JVEVSIiwiY2hhckNvZGVBdCIsInBhcnNlUm93cyIsInRleHQiLCJmIiwidCIsInJvd3MiLCJOIiwibGVuZ3RoIiwiSSIsIm4iLCJlb2YiLCJlb2wiLCJ0b2tlbiIsImMiLCJqIiwic2xpY2UiLCJyZXBsYWNlIiwicm93IiwicHVzaCIsImZvcm1hdFJvdyIsImZvcm1hdFZhbHVlIiwidGVzdCIsInBhcnNlIiwiY29udmVydCIsIm9iamVjdCIsImN1c3RvbUNvbnZlcnRlciIsImZvcm1hdCIsImNvbHVtblNldCIsIk9iamVjdCIsImNyZWF0ZSIsImZvckVhY2giLCJjb2x1bW4iLCJpbmZlckNvbHVtbnMiLCJjb25jYXQiLCJmb3JtYXRSb3dzIiwiZHN2IiwicmVzcG9uc2VKc29uIiwicmVzcG9uc2UiLCJvayIsIkVycm9yIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImpzb24iLCJpbnB1dCIsImluaXQiLCJmZXRjaCIsInRoZW4iLCJhIiwiYiIsIk5hTiIsImNvbXBhcmUiLCJiaXNlY3RSaWdodCIsImFzY2VuZGluZyIsImQiLCJ4IiwibGVmdCIsImxvIiwiaGkiLCJtaWQiLCJyaWdodCIsImFycmF5IiwidiIsInZhbHVlcyIsInZhbHVlb2YiLCJ2YWx1ZSIsImRlbHRhIiwibSIsIm1lYW4iLCJzdW0iLCJpc05hTiIsIm51bWJlciIsInZhcmlhbmNlIiwiTWF0aCIsInNxcnQiLCJtaW4iLCJtYXgiLCJzdGFydCIsInN0b3AiLCJzdGVwIiwiYXJndW1lbnRzIiwiY2VpbCIsInJhbmdlIiwiQXJyYXkiLCJlMTAiLCJlNSIsImUyIiwidGlja0luY3JlbWVudCIsImNvdW50IiwicG93ZXIiLCJmbG9vciIsImxvZyIsIkxOMTAiLCJlcnJvciIsInBvdyIsInAiLCJpMCIsInZhbHVlMCIsIm51bWJlcnMiLCJxdWFudGlsZSIsInNvcnQiLCJ4aHRtbCIsInN2ZyIsInhsaW5rIiwieG1sIiwieG1sbnMiLCJwcmVmaXgiLCJpbmRleE9mIiwibmFtZXNwYWNlcyIsImhhc093blByb3BlcnR5Iiwic3BhY2UiLCJsb2NhbCIsImZ1bGxuYW1lIiwibmFtZXNwYWNlIiwidGhpcyIsIm93bmVyRG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJkb2N1bWVudCIsInVyaSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJub25lIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwiZW1wdHkiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWF0Y2hlciIsIm1hdGNoZXMiLCJlbGVtZW50IiwidmVuZG9yTWF0Y2hlcyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsImNhbGwiLCJ1cGRhdGUiLCJFbnRlck5vZGUiLCJwYXJlbnQiLCJkYXR1bSIsIl9uZXh0IiwiX3BhcmVudCIsIl9fZGF0YV9fIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJhcHBlbmRDaGlsZCIsImNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwibmV4dCIsImtleVByZWZpeCIsImJpbmRJbmRleCIsImdyb3VwIiwiZW50ZXIiLCJleGl0IiwiZGF0YSIsIm5vZGUiLCJncm91cExlbmd0aCIsImRhdGFMZW5ndGgiLCJiaW5kS2V5Iiwia2V5Iiwia2V5VmFsdWUiLCJub2RlQnlLZXlWYWx1ZSIsImtleVZhbHVlcyIsImRlZmF1bHRWaWV3Iiwic3R5bGVWYWx1ZSIsInN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJjbGFzc0FycmF5Iiwic3RyaW5nIiwidHJpbSIsInNwbGl0IiwiY2xhc3NMaXN0IiwiQ2xhc3NMaXN0IiwiX25vZGUiLCJfbmFtZXMiLCJnZXRBdHRyaWJ1dGUiLCJjbGFzc2VkQWRkIiwibmFtZXMiLCJsaXN0IiwiYWRkIiwiY2xhc3NlZFJlbW92ZSIsInJlbW92ZSIsInRleHRSZW1vdmUiLCJ0ZXh0Q29udGVudCIsImh0bWxSZW1vdmUiLCJpbm5lckhUTUwiLCJyYWlzZSIsIm5leHRTaWJsaW5nIiwicGFyZW50Tm9kZSIsImxvd2VyIiwicHJldmlvdXNTaWJsaW5nIiwiZmlyc3RDaGlsZCIsImNvbnN0YW50TnVsbCIsInJlbW92ZUNoaWxkIiwic2VsZWN0aW9uX2Nsb25lU2hhbGxvdyIsImNsb25lTm9kZSIsInNlbGVjdGlvbl9jbG9uZURlZXAiLCJzZXRBdHRyaWJ1dGUiLCJzcGxpY2UiLCJjb250YWlucyIsImZpbHRlckV2ZW50cyIsImV2ZW50IiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJmaWx0ZXJDb250ZXh0TGlzdGVuZXIiLCJsaXN0ZW5lciIsImluZGV4IiwiY29udGV4dExpc3RlbmVyIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImV2ZW50MSIsImV2ZW50MCIsIm9uUmVtb3ZlIiwidHlwZW5hbWUiLCJvbiIsIl9fb24iLCJvIiwidHlwZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYXB0dXJlIiwib25BZGQiLCJ3cmFwIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJwYXJhbXMiLCJ3aW5kb3ciLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZXRhaWwiLCJyb290IiwiU2VsZWN0aW9uIiwiZ3JvdXBzIiwicGFyZW50cyIsIl9ncm91cHMiLCJfcGFyZW50cyIsInNlbGVjdGlvbiIsInNvdXJjZSIsImN1cnJlbnQiLCJzb3VyY2VFdmVudCIsImNoYW5nZWRUb3VjaGVzIiwib3duZXJTVkdFbGVtZW50IiwiY3JlYXRlU1ZHUG9pbnQiLCJwb2ludCIsImNsaWVudFgiLCJ5IiwiY2xpZW50WSIsIm1hdHJpeFRyYW5zZm9ybSIsImdldFNjcmVlbkNUTSIsImludmVyc2UiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50TGVmdCIsInRvcCIsImNsaWVudFRvcCIsInNlbGVjdCIsInN1Ymdyb3VwcyIsInN1Ym5vZGUiLCJzdWJncm91cCIsInNlbGVjdEFsbCIsInNlbGVjdG9yQWxsIiwiZmlsdGVyIiwibWF0Y2giLCJzaXplIiwiZWFjaCIsImJpbmQiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJwcmV2aW91cyIsImkxIiwiX2VudGVyIiwiX2V4aXQiLCJzcGFyc2UiLCJtZXJnZSIsImdyb3VwczAiLCJncm91cHMxIiwibTAiLCJtMSIsIm1lcmdlcyIsImdyb3VwMCIsImdyb3VwMSIsIm9yZGVyIiwiY29tcGFyZU5vZGUiLCJzb3J0Z3JvdXBzIiwic29ydGdyb3VwIiwiY2FsbGJhY2siLCJhcHBseSIsIm5vZGVzIiwiYXR0ciIsImdldEF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInByaW9yaXR5IiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsInByb3BlcnR5IiwiY2xhc3NlZCIsImh0bWwiLCJhcHBlbmQiLCJjcmVhdG9yIiwiaW5zZXJ0IiwiYmVmb3JlIiwiY2xvbmUiLCJkZWVwIiwidHlwZW5hbWVzIiwicGFyc2VUeXBlbmFtZXMiLCJkaXNwYXRjaCIsIk1hcCIsInNldCIsImlzQXJyYXkiLCJzb3J0VmFsdWVzIiwicm9sbHVwIiwibmVzdCIsImtleXMiLCJzb3J0S2V5cyIsImRlcHRoIiwiY3JlYXRlUmVzdWx0Iiwic2V0UmVzdWx0IiwidmFsdWVzQnlLZXkiLCJyZXN1bHQiLCJnZXQiLCJjcmVhdGVPYmplY3QiLCJzZXRPYmplY3QiLCJjcmVhdGVNYXAiLCJzZXRNYXAiLCJlbnRyaWVzIiwic29ydEtleSIsImsiLCJTZXQiLCJoYXMiLCJjbGVhciIsInByb3RvIiwiaW1wbGljaXQiLCJiYW5kIiwiYmFuZHdpZHRoIiwic2NhbGUiLCJvcmRpbmFsIiwiZG9tYWluIiwidW5rbm93biIsIl8iLCJjb3B5IiwidW5kZWZpbmVkIiwib3JkaW5hbFJhbmdlIiwicm91bmQiLCJwYWRkaW5nSW5uZXIiLCJwYWRkaW5nT3V0ZXIiLCJhbGlnbiIsInJlc2NhbGUiLCJyZXZlcnNlIiwic2VxdWVuY2UiLCJyYW5nZVJvdW5kIiwicGFkZGluZyIsImZhY3RvcnkiLCJleHRlbmQiLCJkZWZpbml0aW9uIiwiQ29sb3IiLCJyZUkiLCJyZU4iLCJyZVAiLCJyZUhleDMiLCJyZUhleDYiLCJyZVJnYkludGVnZXIiLCJyZVJnYlBlcmNlbnQiLCJyZVJnYmFJbnRlZ2VyIiwicmVSZ2JhUGVyY2VudCIsInJlSHNsUGVyY2VudCIsInJlSHNsYVBlcmNlbnQiLCJuYW1lZCIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiY29sb3IiLCJ0b0xvd2VyQ2FzZSIsImV4ZWMiLCJSZ2IiLCJwYXJzZUludCIsInJnYm4iLCJyZ2JhIiwiaHNsYSIsInIiLCJnIiwicmdiQ29udmVydCIsInJnYiIsIm9wYWNpdHkiLCJoZXgiLCJ0b1N0cmluZyIsImgiLCJzIiwibCIsIkhzbCIsImhzbDJyZ2IiLCJtMiIsImRlZmluZSIsImRpc3BsYXlhYmxlIiwiYnJpZ2h0ZXIiLCJkYXJrZXIiLCJoc2xDb252ZXJ0IiwiZGVnMnJhZCIsIlBJIiwicmFkMmRlZyIsIlhuIiwiWW4iLCJabiIsInQwIiwidDEiLCJ0MiIsInQzIiwibGFiQ29udmVydCIsIkxhYiIsIkhjbCIsImNvcyIsInNpbiIsInoiLCJyZ2IybHJnYiIsInh5ejJsYWIiLCJsYWIyeHl6IiwibHJnYjJyZ2IiLCJhdGFuMiIsImhjbENvbnZlcnQiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkVEIiwiRUIiLCJCQ19EQSIsIkN1YmVoZWxpeCIsImdhbW1hIiwibm9nYW1tYSIsImV4cG9uZW50aWFsIiwiY29uc3RhbnQiLCJsaW5lYXIiLCJibCIsImN1YmVoZWxpeENvbnZlcnQiLCJjb3NoIiwic2luaCIsInJnYkdhbW1hIiwiZW5kIiwiY29sb3JSZ2IiLCJyZUEiLCJyZUIiLCJhbSIsImJtIiwiYnMiLCJiaSIsImxhc3RJbmRleCIsInEiLCJvbmUiLCJ6ZXJvIiwiRGF0ZSIsInNldFRpbWUiLCJuYiIsIm5hIiwidmFsdWVPZiIsImNzc05vZGUiLCJjc3NSb290IiwiY3NzVmlldyIsInN2Z05vZGUiLCJkZWdyZWVzIiwiaWRlbnRpdHkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInJvdGF0ZSIsInNrZXdYIiwic2NhbGVYIiwic2NhbGVZIiwiZSIsImF0YW4iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJwb3AiLCJ4YSIsInlhIiwieGIiLCJ5YiIsInRyYW5zbGF0ZSIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwidHJhbnNmb3JtIiwiZGVjb21wb3NlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmciLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJtYXRyaXgiLCJTUVJUMiIsInVuaXQiLCJkZWludGVycG9sYXRlTGluZWFyIiwiYmltYXAiLCJkZWludGVycG9sYXRlIiwicmVpbnRlcnBvbGF0ZSIsImQwIiwiZDEiLCJyMCIsInIxIiwicG9seW1hcCIsImJpc2VjdCIsInRvRXhwb25lbnRpYWwiLCJjb2VmZmljaWVudCIsImZvcm1hdERlY2ltYWwiLCJhYnMiLCJwcmVmaXhFeHBvbmVudCIsInJlIiwiZm9ybWF0U3BlY2lmaWVyIiwic3BlY2lmaWVyIiwiRm9ybWF0U3BlY2lmaWVyIiwiZmlsbCIsInNpZ24iLCJzeW1ib2wiLCJ3aWR0aCIsImNvbW1hIiwicHJlY2lzaW9uIiwiZXhwb25lbnQiLCIlIiwidG9GaXhlZCIsInRvUHJlY2lzaW9uIiwiZm9ybWF0Um91bmRlZCIsIlgiLCJ0b1VwcGVyQ2FzZSIsImxvY2FsZSIsImZvcm1hdFByZWZpeCIsInByZWZpeGVzIiwiZ3JvdXBpbmciLCJ0aG91c2FuZHMiLCJzdWJzdHJpbmciLCJjdXJyZW5jeSIsImRlY2ltYWwiLCJudW1lcmFscyIsImZvcm1hdE51bWVyYWxzIiwicGVyY2VudCIsIm5ld0Zvcm1hdCIsImZvcm1hdFR5cGVzIiwic3VmZml4IiwiZm9ybWF0VHlwZSIsIm1heWJlU3VmZml4IiwidmFsdWVQcmVmaXgiLCJ2YWx1ZVN1ZmZpeCIsInZhbHVlTmVnYXRpdmUiLCJvdXQiLCJmb3JtYXRUcmltIiwiSW5maW5pdHkiLCJzdGVwMCIsInN0ZXAxIiwidGlja1N0ZXAiLCJwcmVjaXNpb25QcmVmaXgiLCJwcmVjaXNpb25Sb3VuZCIsInByZWNpc2lvbkZpeGVkIiwibGluZWFyaXNoIiwidGlja3MiLCJpc0Zpbml0ZSIsInRpY2tGb3JtYXQiLCJuaWNlIiwicGllY2V3aXNlIiwib3V0cHV0IiwiaW50ZXJwb2xhdGUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiY2xhbXAiLCJkZWludGVycG9sYXRlQ2xhbXAiLCJpbnZlcnQiLCJyZWludGVycG9sYXRlQ2xhbXAiLCJpbnRlcnBvbGF0ZVJvdW5kIiwiY29udGludW91cyIsImZvcm1hdExvY2FsZSIsIm5ld0ludGVydmFsIiwiZmxvb3JpIiwib2Zmc2V0aSIsImZpZWxkIiwiaW50ZXJ2YWwiLCJkYXRlIiwib2Zmc2V0IiwiZXZlcnkiLCJtaWxsaXNlY29uZCIsImR1cmF0aW9uTWludXRlIiwiZHVyYXRpb25XZWVrIiwiZGF5IiwiZ2V0VVRDU2Vjb25kcyIsImdldE1pbnV0ZXMiLCJnZXRUaW1lem9uZU9mZnNldCIsImdldEhvdXJzIiwic2V0SG91cnMiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsIndlZWtkYXkiLCJnZXREYXkiLCJzdW5kYXkiLCJtb25kYXkiLCJ0aHVyc2RheSIsInllYXIiLCJzZXRNb250aCIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJzZXRGdWxsWWVhciIsInNldFVUQ1NlY29uZHMiLCJnZXRVVENNaW51dGVzIiwic2V0VVRDTWludXRlcyIsImdldFVUQ0hvdXJzIiwidXRjRGF5Iiwic2V0VVRDSG91cnMiLCJzZXRVVENEYXRlIiwiZ2V0VVRDRGF0ZSIsInV0Y1dlZWtkYXkiLCJnZXRVVENEYXkiLCJ1dGNTdW5kYXkiLCJ1dGNNb25kYXkiLCJ1dGNUaHVyc2RheSIsInV0Y1llYXIiLCJzZXRVVENNb250aCIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRnVsbFllYXIiLCJzZXRVVENGdWxsWWVhciIsImxvY2FsRGF0ZSIsIkgiLCJNIiwiUyIsIkwiLCJ1dGNEYXRlIiwiVVRDIiwibmV3WWVhciIsInV0Y0Zvcm1hdCIsInV0Y1BhcnNlIiwicGFkcyIsIi0iLCIwIiwibnVtYmVyUmUiLCJwZXJjZW50UmUiLCJyZXF1b3RlUmUiLCJwYWQiLCJyZXF1b3RlIiwiZm9ybWF0UmUiLCJmb3JtYXRMb29rdXAiLCJwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXkiLCJ3IiwicGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5IiwidSIsInBhcnNlV2Vla051bWJlclN1bmRheSIsIlUiLCJwYXJzZVdlZWtOdW1iZXJJU08iLCJWIiwicGFyc2VXZWVrTnVtYmVyTW9uZGF5IiwiVyIsInBhcnNlRnVsbFllYXIiLCJwYXJzZVllYXIiLCJwYXJzZVpvbmUiLCJaIiwicGFyc2VNb250aE51bWJlciIsInBhcnNlRGF5T2ZNb250aCIsInBhcnNlRGF5T2ZZZWFyIiwicGFyc2VIb3VyMjQiLCJwYXJzZU1pbnV0ZXMiLCJwYXJzZVNlY29uZHMiLCJwYXJzZU1pbGxpc2Vjb25kcyIsInBhcnNlTWljcm9zZWNvbmRzIiwicGFyc2VMaXRlcmFsUGVyY2VudCIsInBhcnNlVW5peFRpbWVzdGFtcCIsIlEiLCJwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzIiwiZm9ybWF0RGF5T2ZNb250aCIsImZvcm1hdEhvdXIyNCIsImZvcm1hdEhvdXIxMiIsImZvcm1hdERheU9mWWVhciIsInRpbWVEYXkiLCJ0aW1lWWVhciIsImZvcm1hdE1pbGxpc2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsImZvcm1hdE1pY3Jvc2Vjb25kcyIsImZvcm1hdE1vbnRoTnVtYmVyIiwiZm9ybWF0TWludXRlcyIsImZvcm1hdFNlY29uZHMiLCJnZXRTZWNvbmRzIiwiZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSIsImZvcm1hdFdlZWtOdW1iZXJTdW5kYXkiLCJ0aW1lU3VuZGF5IiwiZm9ybWF0V2Vla051bWJlcklTTyIsInRpbWVUaHVyc2RheSIsImZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVyTW9uZGF5IiwidGltZU1vbmRheSIsImZvcm1hdFllYXIiLCJmb3JtYXRGdWxsWWVhciIsImZvcm1hdFpvbmUiLCJmb3JtYXRVVENEYXlPZk1vbnRoIiwiZm9ybWF0VVRDSG91cjI0IiwiZm9ybWF0VVRDSG91cjEyIiwiZm9ybWF0VVRDRGF5T2ZZZWFyIiwiZm9ybWF0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZm9ybWF0VVRDTWljcm9zZWNvbmRzIiwiZm9ybWF0VVRDTW9udGhOdW1iZXIiLCJmb3JtYXRVVENNaW51dGVzIiwiZm9ybWF0VVRDU2Vjb25kcyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkiLCJkb3ciLCJmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlcklTTyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5IiwiZm9ybWF0VVRDWWVhciIsImZvcm1hdFVUQ0Z1bGxZZWFyIiwiZm9ybWF0VVRDWm9uZSIsImZvcm1hdExpdGVyYWxQZXJjZW50IiwiZm9ybWF0VW5peFRpbWVzdGFtcCIsImZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzIiwibG9jYWxlX2RhdGVUaW1lIiwiZGF0ZVRpbWUiLCJsb2NhbGVfZGF0ZSIsImxvY2FsZV90aW1lIiwidGltZSIsImxvY2FsZV9wZXJpb2RzIiwicGVyaW9kcyIsImxvY2FsZV93ZWVrZGF5cyIsImRheXMiLCJsb2NhbGVfc2hvcnRXZWVrZGF5cyIsInNob3J0RGF5cyIsImxvY2FsZV9tb250aHMiLCJtb250aHMiLCJsb2NhbGVfc2hvcnRNb250aHMiLCJzaG9ydE1vbnRocyIsInBlcmlvZFJlIiwicGVyaW9kTG9va3VwIiwid2Vla2RheVJlIiwid2Vla2RheUxvb2t1cCIsInNob3J0V2Vla2RheVJlIiwic2hvcnRXZWVrZGF5TG9va3VwIiwibW9udGhSZSIsIm1vbnRoTG9va3VwIiwic2hvcnRNb250aFJlIiwic2hvcnRNb250aExvb2t1cCIsImZvcm1hdHMiLCJZIiwidXRjRm9ybWF0cyIsInBhcnNlcyIsInBhcnNlU3BlY2lmaWVyIiwiY2hhckF0IiwibmV3UGFyc2UiLCJuZXdEYXRlIiwid2VlayIsInRvSVNPU3RyaW5nIiwicGkiLCJ0YXUiLCJ0YXVFcHNpbG9uIiwiUGF0aCIsIl94MCIsIl95MCIsIl94MSIsIl95MSIsInBhdGgiLCJtb3ZlVG8iLCJjbG9zZVBhdGgiLCJsaW5lVG8iLCJxdWFkcmF0aWNDdXJ2ZVRvIiwieDEiLCJ5MSIsImJlemllckN1cnZlVG8iLCJ4MiIsInkyIiwiYXJjVG8iLCJ4MCIsInkwIiwieDIxIiwieTIxIiwieDAxIiwieTAxIiwibDAxXzIiLCJ4MjAiLCJ5MjAiLCJsMjFfMiIsImwyMF8yIiwibDIxIiwibDAxIiwiYWNvcyIsInQwMSIsInQyMSIsImFyYyIsImEwIiwiYTEiLCJjY3ciLCJkeCIsImR5IiwiY3ciLCJkYSIsIkxpbmVhciIsImNvbnRleHQiLCJfY29udGV4dCIsInBvaW50WCIsInBvaW50WSIsImRlZmluZWQiLCJjdXJ2ZSIsImN1cnZlTGluZWFyIiwiYXJlYSIsImJ1ZmZlciIsImRlZmluZWQwIiwieDB6IiwieTB6IiwiYXJlYVN0YXJ0IiwibGluZVN0YXJ0IiwibGluZUVuZCIsImFyZWFFbmQiLCJhcmVhbGluZSIsImxpbmUiLCJsaW5lWDAiLCJsaW5lWTAiLCJsaW5lWTEiLCJsaW5lWDEiLCJzbG9wZTMiLCJ0aGF0IiwiaDAiLCJoMSIsInMwIiwiczEiLCJzbG9wZTIiLCJNb25vdG9uZVgiLCJSZWZsZWN0Q29udGV4dCIsIl9saW5lIiwiX3BvaW50IiwiX3QwIiwiYm90dG9tIiwiZXBzaWxvbiIsImVudGVyaW5nIiwiX19heGlzIiwiYXhpcyIsIm9yaWVudCIsInRpY2tBcmd1bWVudHMiLCJ0aWNrVmFsdWVzIiwidGlja1NpemVJbm5lciIsInRpY2tTaXplT3V0ZXIiLCJ0aWNrUGFkZGluZyIsInNwYWNpbmciLCJyYW5nZTAiLCJyYW5nZTEiLCJwb3NpdGlvbiIsInRpY2siLCJ0aWNrRXhpdCIsInRpY2tFbnRlciIsInRyYW5zaXRpb24iLCJ0aWNrU2l6ZSIsImF4aXNCb3R0b20iLCJub29wIiwiRGlzcGF0Y2giLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInR5cGVzIiwiVCIsImFyZ3MiLCJ0YXNrSGVhZCIsInRhc2tUYWlsIiwiZnJhbWUiLCJ0aW1lb3V0IiwicG9rZURlbGF5IiwiY2xvY2tMYXN0IiwiY2xvY2tOb3ciLCJjbG9ja1NrZXciLCJjbG9jayIsInBlcmZvcm1hbmNlIiwibm93Iiwic2V0RnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwiY2xlYXJOb3ciLCJUaW1lciIsIl9jYWxsIiwiX3RpbWUiLCJ0aW1lciIsImRlbGF5IiwicmVzdGFydCIsIndha2UiLCJ0aW1lckZsdXNoIiwic2xlZXAiLCJuYXAiLCJwb2tlIiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiZWxhcHNlZCIsIlR5cGVFcnJvciIsImVtcHR5T24iLCJlbXB0eVR3ZWVuIiwiQ1JFQVRFRCIsIlNDSEVEVUxFRCIsIlNUQVJUSU5HIiwiU1RBUlRFRCIsIlJVTk5JTkciLCJFTkRJTkciLCJFTkRFRCIsImlkIiwidGltaW5nIiwic2NoZWR1bGVzIiwiX190cmFuc2l0aW9uIiwic2VsZiIsInR3ZWVuIiwic3RhdGUiLCJkdXJhdGlvbiIsImVhc2UiLCJzY2hlZHVsZSIsImFjdGl2ZSIsInR3ZWVuVmFsdWUiLCJfaWQiLCJpbnRlcnBvbGF0ZU51bWJlciIsImludGVycG9sYXRlUmdiIiwiaW50ZXJwb2xhdGVTdHJpbmciLCJUcmFuc2l0aW9uIiwiX25hbWUiLCJuZXdJZCIsInNlbGVjdGlvbl9wcm90b3R5cGUiLCJjaGlsZHJlbiIsImluaGVyaXQiLCJpZDAiLCJpZDEiLCJvbjAiLCJvbjEiLCJzaXQiLCJvbkZ1bmN0aW9uIiwiYXR0clR3ZWVuIiwidmFsdWUwMCIsInZhbHVlMTAiLCJpbnRlcnBvbGF0ZTAiLCJ2YWx1ZTEiLCJfdmFsdWUiLCJzdHlsZVR3ZWVuIiwic3R5bGVSZW1vdmUiLCJzdHlsZVJlbW92ZUVuZCIsInN0eWxlRnVuY3Rpb24iLCJzdHlsZUNvbnN0YW50IiwidGV4dEZ1bmN0aW9uIiwidGV4dENvbnN0YW50IiwidHdlZW4wIiwidHdlZW4xIiwiZWFzZUNvbnN0YW50IiwiZGVmYXVsdFRpbWluZyIsIm5vcHJvcGFnYXRpb24iLCJpbnRlcnJ1cHQiLCJNT0RFX0RSQUciLCJNT0RFX1NQQUNFIiwiTU9ERV9IQU5ETEUiLCJNT0RFX0NFTlRFUiIsImhhbmRsZXMiLCJ4eSIsIlhZIiwiY3Vyc29ycyIsIm92ZXJsYXkiLCJudyIsIm5lIiwic2UiLCJzdyIsImZsaXBYIiwiZmxpcFkiLCJzaWduc1giLCJzaWduc1kiLCJkZWZhdWx0RmlsdGVyIiwiYnV0dG9uIiwiZGVmYXVsdEV4dGVudCIsImhlaWdodCIsIl9fYnJ1c2giLCJleHRlbnQiLCJkaW0iLCJ0b3VjaGVuZGluZyIsImxpc3RlbmVycyIsImJydXNoIiwiaGFuZGxlU2l6ZSIsImluaXRpYWxpemUiLCJoYW5kbGUiLCJyZWRyYXciLCJzdGFydGVkIiwiZW1pdHRlciIsIkVtaXR0ZXIiLCJ0b3VjaGVzIiwibm9ldmVudCIsIncwIiwidzEiLCJuMCIsIm4xIiwiZTAiLCJlMSIsIm1vdmluZyIsImxvY2tYIiwibG9ja1kiLCJ0YXJnZXQiLCJtb2RlIiwibWV0YUtleSIsImFsdEtleSIsInNpZ25YIiwic2lnblkiLCJzaGlmdGluZyIsInNoaWZ0S2V5IiwicG9pbnQwIiwibW91c2UiLCJlbWl0IiwiYmVmb3Jlc3RhcnQiLCJtb3ZlZCIsImVuZGVkIiwidmlldyIsImtleUNvZGUiLCJtb3ZlIiwiX19ub3NlbGVjdCIsIk1velVzZXJTZWxlY3QiLCJkcmFnRGlzYWJsZSIsInBvaW50MSIsIm5vY2xpY2siLCJkcmFnRW5hYmxlIiwic2VsZWN0aW9uMCIsInNlbGVjdGlvbjEiLCJzdGFydGluZyIsImN1c3RvbUV2ZW50Iiwia2VybmVsIiwiZXBhbmVjaG5pa292IiwiZ2F1c3NpYW4iLCJleHAiLCJrZXJuZWxCYW5kd2lkdGgiLCJucmQiLCJkZXZpYXRpb24iLCJrZXJuZWxEZW5zaXR5RXN0aW1hdG9yIiwiVG9vbHRpcCIsIltvYmplY3QgT2JqZWN0XSIsInZlcmJvc2UiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImluZm8iLCJjb25zb2xlIiwiZWRpdCIsInBhZ2VYIiwicGFnZVkiLCJUb29sYmFyIiwiZG9tSWQiLCJ0b29sdGlwIiwidmVydGljYWwiLCIkIiwic2hvdyIsImJ0bkNsYXNzZXMiLCJiYXIiLCJhZGRDbGFzcyIsImFwcGVuZFRvIiwiYnV0dG9ucyIsInN2Z0lkIiwib3V0ZmlsZU5hbWUiLCJjbG9uZUlkIiwiaWNvbiIsImNyZWF0ZUJ1dHRvbiIsImRvd25sb2FkU3ZnIiwiaGlkZSIsIiRidXR0b24iLCJmaWxlTmFtZSIsInN2Z09iaiIsIiRzdmdDb3B5Iiwic3R5bGVzIiwiZG9tIiwidXNlZCIsInNoZWV0cyIsInN0eWxlU2hlZXRzIiwiY3NzUnVsZXMiLCJydWxlcyIsInJ1bGUiLCJlbGVtcyIsInNlbGVjdG9yVGV4dCIsImZpbmQiLCJjc3NUZXh0IiwicGFyc2VDc3NTdHlsZXMiLCJwcmVwZW5kIiwic3ZnSHRtbCIsInN2Z0Jsb2IiLCJCbG9iIiwic2F2ZUFzIiwiR3JvdXBlZFZpb2xpbiIsImdyb3VwSW5mbyIsIl9zYW5pdHlDaGVjayIsInRvb2xiYXIiLCJ4UGFkZGluZyIsInhEb21haW4iLCJ5RG9tYWluIiwieUxhYmVsIiwic2hvd1giLCJ4QW5nbGUiLCJzaG93U3ViWCIsInN1YlhBbmdsZSIsInNob3dXaGlza2VyIiwic2hvd0RpdmlkZXIiLCJzaG93TGVnZW5kIiwic2hvd1NpemUiLCJzb3J0U3ViWCIsInNob3dPdXRsaWVycyIsInJlc2V0IiwicmVuZGVyIiwidXBkYXRlWVNjYWxlIiwieVNjYWxlIiwidXBkYXRlWFNjYWxlIiwiYWxsViIsInNjYWxlQmFuZCIsInN1YngiLCJzY2FsZUxpbmVhciIsInBhcnNlRmxvYXQiLCJsYWJlbCIsImVudHJ5IiwiX2RyYXdWaW9saW4iLCJzaXplU2NhbGUiLCJzdWJ4RyIsInhBeGlzIiwieUF4aXMiLCJnZXRCQm94IiwiX2FkZEdyb3VwRGl2aWRlciIsImxlZ2VuZEciLCJ0aXRsZSIsInRoZUJydXNoIiwiem9vbSIsImlkZWxUaW1lb3V0IiwibG93Qm91bmQiLCJ1cHBlckJvdW5kIiwiZ2ciLCJxMSIsInEzIiwibWVkIiwibWVkaWFuIiwiZ0luZGV4Iiwia2RlIiwiZURvbWFpbiIsInZlcnRpY2VzIiwiX3ZhbGlkVmVydGljZXMiLCJ6TWF4IiwidmlvbGluRyIsInZpb2xpbiIsInZQYXRoIiwiaXFyIiwidXBwZXIiLCJvdXRsaWVycyIsIndhcm4iLCJnZXRYIiwicmVkdWNlIiwiX3NldFZpb2xpblBsb3RNYXJnaW5zIiwiX2NhbGNWaW9saW5QbG90VmFsdWVzIiwidXNlTG9nIiwiZGQiLCJsb2cxMCIsIl9wYXJzZUdlbmVFeHByZXNzaW9uRm9yVmlvbGluIiwiaWROYW1lTWFwIiwiY29sb3JzIiwidGlzc3VlU2l0ZURldGFpbElkIiwic3Vic2V0R3JvdXAiLCJnZW5lU3ltYm9sIiwiX3NvcnRBbmRVcGRhdGVEYXRhIiwidnBsb3QiLCJpZHMiLCJmaWx0ZXJlZFRpc3N1ZXMiLCJzb3J0RGF0YSIsImluY2x1ZGVzIiwiZ3BDb25maWciLCJwbG90U29ydHMiLCJhc2NBbHBoYVNvcnQiLCJkZXNjQWxwaGFTb3J0IiwiYXNjU29ydCIsImRlc2NTb3J0IiwiX2N1c3RvbWl6ZVRvb2x0aXAiLCJzdWJzZXQiLCJfYWRkVmlvbGluVGlzc3VlQ29sb3JCYW5kIiwidGlzc3VlRGljdCIsIl9tb3ZlWEF4aXMiLCJwbG90VGl0bGUiLCJhZGRQbG90VGl0bGUiLCJwbG90IiwibG9jIiwieEF4aXNUZXh0IiwiY29sb3JIZXgiLCJfdXBkYXRlT3V0bGllckRpc3BsYXkiLCJ0b2dnbGUiLCJyb290SWQiLCJ0b29sdGlwUm9vdElkIiwiZ2VuY29kZUlkIiwidXJscyIsImhvc3QiLCJzaW5nbGVUaXNzdWVFcXRsIiwibGQiLCJ0aXNzdWVTdW1tYXJ5IiwiZHluZXF0bCIsInNucCIsInZhcmlhbnRJZCIsImV4b25FeHAiLCJ0cmFuc2NyaXB0RXhwIiwianVuY3Rpb25FeHAiLCJ0cmFuc2NyaXB0IiwiZXhvbiIsImdlbmVNb2RlbCIsImdlbmVNb2RlbFVuZmlsdGVyZWQiLCJnZW5lRXhwIiwibWVkR2VuZUV4cCIsImdlbmVFeHBCb3hwbG90IiwidG9wSW5UaXNzdWVGaWx0ZXJlZCIsInRvcEluVGlzc3VlIiwiZ2VuZUlkIiwidGlzc3VlIiwidGlzc3VlU2l0ZXMiLCJzYW1wbGUiLCJybmFzZXFDcmFtIiwid2dzQ3JhbSIsImZjQmlsbGluZyIsImZjV29ya1NwYWNlIiwiZmNQb3J0YWxXb3JrU3BhY2UiLCJnZXRHdGV4VXJscyIsIm1hcmdpbnMiLCJkaW1lbnNpb25zIiwiaW5uZXJXaWR0aCIsInByb21pc2VzIiwic3Bpbm5lciIsImRvd25sb2FkIiwicGxvdE9wdGlvbnMiLCJsb2dTY2FsZSIsImxpbmVhclNjYWxlIiwibm9EaWZmIiwic2V4RGlmZiIsIm91dGxpZXJzT24iLCJvdXRsaWVyc09mZiIsInBsb3RPcHRpb25Hcm91cHMiLCJkaWZmZXJlbnRpYXRpb24iLCJ0aXNzdWVGaWx0ZXIiLCJQcm9taXNlIiwiYWxsIiwidGlzc3VlSWROYW1lTWFwIiwiZ3JvdXBDb2xvckRpY3QiLCJmZW1hbGUiLCJtYWxlIiwidGlzc3VlcyIsInBhcnNlVGlzc3VlcyIsInRpc3N1ZVNpdGVEZXRhaWwiLCJ2aW9saW5QbG90RGF0YSIsInZpb2xpblBsb3QiLCJjcmVhdGVUb29sdGlwIiwiYWxsRGF0YSIsInRJZE5hbWVNYXAiLCJnZW5lSnNvbiIsInN1YnNldERhdGEiLCJtYXJnaW4iLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJfc2V0VmlvbGluUGxvdERpbWVuc2lvbnMiLCJfY3VzdG9taXplUGxvdCIsIl9kcmF3VmlvbGluUGxvdCIsInRpc3N1ZUdyb3VwcyIsImZvckVxdGwiLCJpbnZhbGlkVGlzc3VlcyIsImFyciIsImdyb3VwTmFtZSIsInRpc3N1ZVNpdGUiLCJzaXRlIiwicGFyc2VUaXNzdWVTaXRlcyIsImNoZWNrQWxsIiwic2VjdGlvbnMiLCJtYWluQ2xhc3MiLCIkYWxsVGlzc3VlRGl2IiwiY2hhbmdlIiwidmFsIiwicHJvcCIsImdyb3VwTmFtZXMiLCJyb3dzUGVyU2VjdGlvbiIsInJvd3NSZW1haW4iLCJjb2xTaXplIiwiJHNlY3Rpb25zIiwiY291bnRlciIsImN1cnJTZWN0aW9uIiwiZ25hbWUiLCJzaXRlcyIsImdJZCIsImdyb3VwTGVuIiwiJGN1cnJlbnREb20iLCIkc2l0ZURvbSIsImNsaWNrIiwiaXMiLCJjcmVhdGVUaXNzdWVHcm91cE1lbnUiLCJjaGVja2VkVGlzc3VlcyIsInVzZU5hbWVzIiwicXVlcnlUaXNzdWVzIiwiaGFzQ2xhc3MiLCJzaWJsaW5ncyIsInBhcnNlVGlzc3VlR3JvdXBNZW51IiwiZmlsdGVyZWREYXRhIiwiX2ZpbHRlclRpc3N1ZXMiLCJfYWRkVGlzc3VlRmlsdGVyRXZlbnQiLCJfcG9wdWxhdGVUaXNzdWVGaWx0ZXIiLCJjcmVhdGVUb29sYmFyIiwiY3JlYXRlRG93bmxvYWRTdmdCdXR0b24iLCJjc3MiLCJzdWJzZXRCdXR0b25Hcm91cCIsInNjYWxlQnV0dG9uR3JvdXAiLCJhbHBoYVNvcnRCdXR0b25Hcm91cCIsIm51bVNvcnRCdXR0b25Hcm91cCIsIm91dGxpZXJzQnV0dG9uR3JvdXAiLCJwbG90T3B0aW9uc01vZGFsIiwidGlzc3VlRmlsdGVyQnV0dG9uIiwiYnRuIiwibmV3RGF0YSIsIm1vZGFsIiwiX2FkZFRvb2xiYXIiXSwibWFwcGluZ3MiOiJzREFBQSxJQUFJQSxLQUNBQyxL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
