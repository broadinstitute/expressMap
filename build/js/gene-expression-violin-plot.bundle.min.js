var GeneExpressionViolinPlot=function(t){"use strict";var e={},n={},r=34,i=10,o=13;function a(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}function s(t){var s=new RegExp('["'+t+"\n\r]"),u=t.charCodeAt(0);function l(t,a){var s,l=[],c=t.length,h=0,f=0,p=c<=0,d=!1;function g(){if(p)return n;if(d)return d=!1,e;var a,s,l=h;if(t.charCodeAt(l)===r){for(;h++<c&&t.charCodeAt(h)!==r||t.charCodeAt(++h)===r;);return(a=h)>=c?p=!0:(s=t.charCodeAt(h++))===i?d=!0:s===o&&(d=!0,t.charCodeAt(h)===i&&++h),t.slice(l+1,a-1).replace(/""/g,'"')}for(;h<c;){if((s=t.charCodeAt(a=h++))===i)d=!0;else if(s===o)d=!0,t.charCodeAt(h)===i&&++h;else if(s!==u)continue;return t.slice(l,a)}return p=!0,t.slice(l,c)}for(t.charCodeAt(c-1)===i&&--c,t.charCodeAt(c-1)===o&&--c;(s=g())!==n;){for(var v=[];s!==e&&s!==n;)v.push(s),s=g();a&&null==(v=a(v,f++))||l.push(v)}return l}function c(e){return e.map(h).join(t)}function h(t){return null==t?"":s.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,r,i=l(t,function(t,i){if(n)return n(t,i-1);r=t,n=e?function(t,e){var n=a(t);return function(r,i){return e(n(r),i,t)}}(t,e):a(t)});return i.columns=r||[],i},parseRows:l,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}(e)),[n.map(h).join(t)].concat(e.map(function(e){return n.map(function(t){return h(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(c).join("\n")}}}s(","),s("\t");function u(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function l(t,e){return fetch(t,e).then(u)}function c(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var h,f,p=(1===(h=c).length&&(f=h,h=function(t,e){return c(f(t),e)}),{left:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var i=n+r>>>1;h(t[i],e)<0?n=i+1:r=i}return n},right:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var i=n+r>>>1;h(t[i],e)>0?r=i:n=i+1}return n}}).right;function d(t){return null===t?NaN:+t}function g(t,e){var n=function(t,e){var n,r,i=t.length,o=0,a=-1,s=0,u=0;if(null==e)for(;++a<i;)isNaN(n=d(t[a]))||(u+=(r=n-s)*(n-(s+=r/++o)));else for(;++a<i;)isNaN(n=d(e(t[a],a,t)))||(u+=(r=n-s)*(n-(s+=r/++o)));if(o>1)return u/(o-1)}(t,e);return n?Math.sqrt(n):n}function v(t,e){var n,r,i,o=t.length,a=-1;if(null==e){for(;++a<o;)if(null!=(n=t[a])&&n>=n)for(r=i=n;++a<o;)null!=(n=t[a])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++a<o;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=i=n;++a<o;)null!=(n=e(t[a],a,t))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]}function m(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o}var y=Math.sqrt(50),b=Math.sqrt(10),w=Math.sqrt(2);function x(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=y?10:o>=b?5:o>=w?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=y?10:o>=b?5:o>=w?2:1)}function _(t,e,n){if(null==n&&(n=d),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,i=(r-1)*e,o=Math.floor(i),a=+n(t[o],o,t);return a+(+n(t[o+1],o+1,t)-a)*(i-o)}}function M(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&n>r&&(r=n);return r}function T(t,e){var n,r=t.length,i=-1,o=[];if(null==e)for(;++i<r;)isNaN(n=d(t[i]))||o.push(n);else for(;++i<r;)isNaN(n=d(e(t[i],i,t)))||o.push(n);return _(o.sort(c),.5)}function S(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&r>n&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&r>n&&(r=n);return r}var k="http://www.w3.org/1999/xhtml",A={svg:"http://www.w3.org/2000/svg",xhtml:k,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function C(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),A.hasOwnProperty(e)?{space:A[e],local:t}:t}function D(t){var e=C(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===k&&e.documentElement.namespaceURI===k?e.createElement(t):e.createElementNS(n,t)}})(e)}function E(){}function N(t){return null==t?E:function(){return this.querySelector(t)}}function O(){return[]}function I(t){return null==t?O:function(){return this.querySelectorAll(t)}}var P=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var U=document.documentElement;if(!U.matches){var z=U.webkitMatchesSelector||U.msMatchesSelector||U.mozMatchesSelector||U.oMatchesSelector;P=function(t){return function(){return z.call(this,t)}}}}var G=P;function F(t){return new Array(t.length)}function Y(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}Y.prototype={constructor:Y,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var j="$";function H(t,e,n,r,i,o){for(var a,s=0,u=e.length,l=o.length;s<l;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new Y(t,o[s]);for(;s<u;++s)(a=e[s])&&(i[s]=a)}function L(t,e,n,r,i,o,a){var s,u,l,c={},h=e.length,f=o.length,p=new Array(h);for(s=0;s<h;++s)(u=e[s])&&(p[s]=l=j+a.call(u,u.__data__,s,e),l in c?i[s]=u:c[l]=u);for(s=0;s<f;++s)(u=c[l=j+a.call(t,o[s],s,o)])?(r[s]=u,u.__data__=o[s],c[l]=null):n[s]=new Y(t,o[s]);for(s=0;s<h;++s)(u=e[s])&&c[p[s]]===u&&(i[s]=u)}function V(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function q(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function X(t,e){return t.style.getPropertyValue(e)||q(t).getComputedStyle(t,null).getPropertyValue(e)}function B(t){return t.trim().split(/^|\s+/)}function R(t){return t.classList||new W(t)}function W(t){this._node=t,this._names=B(t.getAttribute("class")||"")}function Z(t,e){for(var n=R(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function Q(t,e){for(var n=R(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function J(){this.textContent=""}function K(){this.innerHTML=""}function tt(){this.nextSibling&&this.parentNode.appendChild(this)}function et(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function nt(){return null}function rt(){var t=this.parentNode;t&&t.removeChild(this)}function it(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function ot(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}W.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var at={},st=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(at={mouseenter:"mouseover",mouseleave:"mouseout"}));function ut(t,e,n){return t=lt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function lt(t,e,n){return function(r){var i=st;st=r;try{t.call(this,this.__data__,e,n)}finally{st=i}}}function ct(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function ht(t,e,n){var r=at.hasOwnProperty(t.type)?ut:lt;return function(i,o,a){var s,u=this.__on,l=r(e,o,a);if(u)for(var c=0,h=u.length;c<h;++c)if((s=u[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=l,s.capture=n),void(s.value=e);this.addEventListener(t.type,l,n),s={type:t.type,name:t.name,value:e,listener:l,capture:n},u?u.push(s):this.__on=[s]}}function ft(t,e,n){var r=q(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}var pt=[null];function dt(t,e){this._groups=t,this._parents=e}function gt(){return new dt([[document.documentElement]],pt)}function vt(t){return"string"==typeof t?new dt([[document.querySelector(t)]],[document.documentElement]):new dt([[t]],pt)}function mt(){for(var t,e=st;t=e.sourceEvent;)e=t;return e}function yt(t){var e=mt();return e.changedTouches&&(e=e.changedTouches[0]),function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[e.clientX-i.left-t.clientLeft,e.clientY-i.top-t.clientTop]}(t,e)}function bt(t){return"string"==typeof t?new dt([document.querySelectorAll(t)],[document.documentElement]):new dt([null==t?[]:t],pt)}dt.prototype=gt.prototype={constructor:dt,select:function(t){"function"!=typeof t&&(t=N(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=e[i],u=s.length,l=r[i]=new Array(u),c=0;c<u;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new dt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=I(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,s=e[o],u=s.length,l=0;l<u;++l)(a=s[l])&&(r.push(t.call(a,a.__data__,l,s)),i.push(a));return new dt(r,i)},filter:function(t){"function"!=typeof t&&(t=G(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new dt(r,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),c=-1,this.each(function(t){d[++c]=t}),d;var n,r=e?L:H,i=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var a=o.length,s=new Array(a),u=new Array(a),l=new Array(a),c=0;c<a;++c){var h=i[c],f=o[c],p=f.length,d=t.call(h,h&&h.__data__,c,i),g=d.length,v=u[c]=new Array(g),m=s[c]=new Array(g);r(h,f,v,m,l[c]=new Array(p),d,e);for(var y,b,w=0,x=0;w<g;++w)if(y=v[w]){for(w>=x&&(x=w+1);!(b=m[x])&&++x<g;);y._next=b||null}}return(s=new dt(s,i))._enter=u,s._exit=l,s},enter:function(){return new dt(this._enter||this._groups.map(F),this._parents)},exit:function(){return new dt(this._exit||this._groups.map(F),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=e[s],c=n[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=e[s];return new dt(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=V);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],u=s.length,l=i[o]=new Array(u),c=0;c<u;++c)(a=s[c])&&(l[c]=a);l.sort(e)}return new dt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=C(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):X(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=B(t+"");if(arguments.length<2){for(var r=R(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?Z:Q)(this,t)}}:e?function(t){return function(){Z(this,t)}}:function(t){return function(){Q(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?J:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?K:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(tt)},lower:function(){return this.each(et)},append:function(t){var e="function"==typeof t?t:D(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:D(t),r=null==e?nt:"function"==typeof e?e:N(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(rt)},clone:function(t){return this.select(t?ot:it)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?ht:ct,null==n&&(n=!1),r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var u,l=0,c=s.length;l<c;++l)for(r=0,u=s[l];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return ft(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return ft(this,t,e)}})(t,e))}};function wt(){}function xt(t,e){var n=new wt;if(t instanceof wt)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==e)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e(r=t[i],i,t),r)}else if(t)for(var a in t)n.set(a,t[a]);return n}function _t(){var t,e,n,r=[],i=[];function o(n,i,a,s){if(i>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var u,l,c,h=-1,f=n.length,p=r[i++],d=xt(),g=a();++h<f;)(c=d.get(u=p(l=n[h])+""))?c.push(l):d.set(u,[l]);return d.each(function(t,e){s(g,e,o(t,i,a,s))}),g}return n={object:function(t){return o(t,0,$t,Mt)},map:function(t){return o(t,0,Tt,St)},entries:function(t){return function t(n,o){if(++o>r.length)return n;var a,s=i[o-1];return null!=e&&o>=r.length?a=n.entries():(a=[],n.each(function(e,n){a.push({key:n,values:t(e,o)})})),null!=s?a.sort(function(t,e){return s(t.key,e.key)}):a}(o(t,0,Tt,St),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return i[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}}function $t(){return{}}function Mt(t,e,n){t[e]=n}function Tt(){return xt()}function St(t,e,n){t.set(e,n)}function kt(){}wt.prototype=xt.prototype={constructor:wt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var At=xt.prototype;kt.prototype=function(t,e){var n=new kt;if(t instanceof kt)t.each(function(t){n.add(t)});else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}.prototype={constructor:kt,has:At.has,add:function(t){return this["$"+(t+="")]=t,this},remove:At.remove,clear:At.clear,values:At.keys,size:At.size,empty:At.empty,each:At.each};var Ct=Array.prototype,Dt=Ct.map,Et=Ct.slice,Nt={name:"implicit"};function Ot(){var t,e,n=function t(e){var n=xt(),r=[],i=Nt;function o(t){var o=t+"",a=n.get(o);if(!a){if(i!==Nt)return i;n.set(o,a=r.push(t))}return e[(a-1)%e.length]}return e=null==e?[]:Et.call(e),o.domain=function(t){if(!arguments.length)return r.slice();r=[],n=xt();for(var e,i,a=-1,s=t.length;++a<s;)n.has(i=(e=t[a])+"")||n.set(i,r.push(e));return o},o.range=function(t){return arguments.length?(e=Et.call(t),o):e.slice()},o.unknown=function(t){return arguments.length?(i=t,o):i},o.copy=function(){return t().domain(r).range(e).unknown(i)},o}().unknown(void 0),r=n.domain,i=n.range,o=[0,1],a=!1,s=0,u=0,l=.5;function c(){var n=r().length,c=o[1]<o[0],h=o[c-0],f=o[1-c];t=(f-h)/Math.max(1,n-s+2*u),a&&(t=Math.floor(t)),h+=(f-h-t*(n-s))*l,e=t*(1-s),a&&(h=Math.round(h),e=Math.round(e));var p=m(n).map(function(e){return h+t*e});return i(c?p.reverse():p)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),c()):r()},n.range=function(t){return arguments.length?(o=[+t[0],+t[1]],c()):o.slice()},n.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,c()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(a=!!t,c()):a},n.padding=function(t){return arguments.length?(s=u=Math.max(0,Math.min(1,t)),c()):s},n.paddingInner=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),c()):s},n.paddingOuter=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),c()):u},n.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),c()):l},n.copy=function(){return Ot().domain(r()).range(o).round(a).paddingInner(s).paddingOuter(u).align(l)},c()}function It(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Pt(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Ut(){}var zt="\\s*([+-]?\\d+)\\s*",Gt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ft="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Yt=/^#([0-9a-f]{3})$/,jt=/^#([0-9a-f]{6})$/,Ht=new RegExp("^rgb\\("+[zt,zt,zt]+"\\)$"),Lt=new RegExp("^rgb\\("+[Ft,Ft,Ft]+"\\)$"),Vt=new RegExp("^rgba\\("+[zt,zt,zt,Gt]+"\\)$"),qt=new RegExp("^rgba\\("+[Ft,Ft,Ft,Gt]+"\\)$"),Xt=new RegExp("^hsl\\("+[Gt,Ft,Ft]+"\\)$"),Bt=new RegExp("^hsla\\("+[Gt,Ft,Ft,Gt]+"\\)$"),Rt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Wt(t){var e;return t=(t+"").trim().toLowerCase(),(e=Yt.exec(t))?new te((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=jt.exec(t))?Zt(parseInt(e[1],16)):(e=Ht.exec(t))?new te(e[1],e[2],e[3],1):(e=Lt.exec(t))?new te(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Vt.exec(t))?Qt(e[1],e[2],e[3],e[4]):(e=qt.exec(t))?Qt(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Xt.exec(t))?ne(e[1],e[2]/100,e[3]/100,1):(e=Bt.exec(t))?ne(e[1],e[2]/100,e[3]/100,e[4]):Rt.hasOwnProperty(t)?Zt(Rt[t]):"transparent"===t?new te(NaN,NaN,NaN,0):null}function Zt(t){return new te(t>>16&255,t>>8&255,255&t,1)}function Qt(t,e,n,r){return r<=0&&(t=e=n=NaN),new te(t,e,n,r)}function Jt(t){return t instanceof Ut||(t=Wt(t)),t?new te((t=t.rgb()).r,t.g,t.b,t.opacity):new te}function Kt(t,e,n,r){return 1===arguments.length?Jt(t):new te(t,e,n,null==r?1:r)}function te(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function ee(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function ne(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new re(t,e,n,r)}function re(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function ie(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}It(Ut,Wt,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),It(te,Kt,Pt(Ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new te(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new te(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+ee(this.r)+ee(this.g)+ee(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),It(re,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof re)return new re(t.h,t.s,t.l,t.opacity);if(t instanceof Ut||(t=Wt(t)),!t)return new re;if(t instanceof re)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new re(a,s,u,t.opacity)}(t):new re(t,e,n,null==r?1:r)},Pt(Ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new re(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new re(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new te(ie(t>=240?t-240:t+120,i,r),ie(t,i,r),ie(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var oe=Math.PI/180,ae=180/Math.PI,se=.96422,ue=1,le=.82521,ce=4/29,he=6/29,fe=3*he*he,pe=he*he*he;function de(t){if(t instanceof ge)return new ge(t.l,t.a,t.b,t.opacity);if(t instanceof we){if(isNaN(t.h))return new ge(t.l,0,0,t.opacity);var e=t.h*oe;return new ge(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof te||(t=Jt(t));var n,r,i=be(t.r),o=be(t.g),a=be(t.b),s=ve((.2225045*i+.7168786*o+.0606169*a)/ue);return i===o&&o===a?n=r=s:(n=ve((.4360747*i+.3850649*o+.1430804*a)/se),r=ve((.0139322*i+.0971045*o+.7141733*a)/le)),new ge(116*s-16,500*(n-s),200*(s-r),t.opacity)}function ge(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function ve(t){return t>pe?Math.pow(t,1/3):t/fe+ce}function me(t){return t>he?t*t*t:fe*(t-ce)}function ye(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function be(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function we(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}It(ge,function(t,e,n,r){return 1===arguments.length?de(t):new ge(t,e,n,null==r?1:r)},Pt(Ut,{brighter:function(t){return new ge(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new ge(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new te(ye(3.1338561*(e=se*me(e))-1.6168667*(t=ue*me(t))-.4906146*(n=le*me(n))),ye(-.9787684*e+1.9161415*t+.033454*n),ye(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),It(we,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof we)return new we(t.h,t.c,t.l,t.opacity);if(t instanceof ge||(t=de(t)),0===t.a&&0===t.b)return new we(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*ae;return new we(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new we(t,e,n,null==r?1:r)},Pt(Ut,{brighter:function(t){return new we(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new we(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return de(this).rgb()}}));var xe=-.14861,_e=1.78277,$e=-.29227,Me=-.90649,Te=1.97294,Se=Te*Me,ke=Te*_e,Ae=_e*$e-Me*xe;function Ce(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function De(t){return function(){return t}}function Ee(t){return 1==(t=+t)?Ne:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):De(isNaN(e)?n:e)}}function Ne(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):De(isNaN(t)?e:t)}It(Ce,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Ce)return new Ce(t.h,t.s,t.l,t.opacity);t instanceof te||(t=Jt(t));var e=t.r/255,n=t.g/255,r=t.b/255,i=(Ae*r+Se*e-ke*n)/(Ae+Se-ke),o=r-i,a=(Te*(n-i)-$e*o)/Me,s=Math.sqrt(a*a+o*o)/(Te*i*(1-i)),u=s?Math.atan2(a,o)*ae-120:NaN;return new Ce(u<0?u+360:u,s,i,t.opacity)}(t):new Ce(t,e,n,null==r?1:r)},Pt(Ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ce(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ce(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*oe,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),i=Math.sin(t);return new te(255*(e+n*(xe*r+_e*i)),255*(e+n*($e*r+Me*i)),255*(e+n*(Te*r)),this.opacity)}}));var Oe=function t(e){var n=Ee(e);function r(t,e){var r=n((t=Kt(t)).r,(e=Kt(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=Ne(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function Ie(t,e){return e-=t=+t,function(n){return t+e*n}}var Pe=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ue=new RegExp(Pe.source,"g");function ze(t,e){var n,r,i,o=Pe.lastIndex=Ue.lastIndex=0,a=-1,s=[],u=[];for(t+="",e+="";(n=Pe.exec(t))&&(r=Ue.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:Ie(n,r)})),o=Ue.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)s[(n=u[r]).i]=n.x(t);return s.join("")})}function Ge(t,e){var n,r=typeof e;return null==e||"boolean"===r?De(e):("number"===r?Ie:"string"===r?(n=Wt(e))?(e=n,Oe):ze:e instanceof Wt?Oe:e instanceof Date?function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}}:Array.isArray(e)?function(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=Ge(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}}:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Ge(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}:Ie)(t,e)}function Fe(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}}var Ye,je,He,Le,Ve=180/Math.PI,qe={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Xe(t,e,n,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,u/=s),t*r<e*n&&(t=-t,e=-e,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*Ve,skewX:Math.atan(u)*Ve,scaleX:a,scaleY:s}}function Be(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,e,null,n);s.push({i:u-4,x:Ie(t,i)},{i:u-2,x:Ie(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Ie(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,u),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Ie(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,u),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:Ie(t,n)},{i:s-2,x:Ie(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var e,n=-1,r=u.length;++n<r;)s[(e=u[n]).i]=e.x(t);return s.join("")}}}var Re=Be(function(t){return"none"===t?qe:(Ye||(Ye=document.createElement("DIV"),je=document.documentElement,He=document.defaultView),Ye.style.transform=t,t=He.getComputedStyle(je.appendChild(Ye),null).getPropertyValue("transform"),je.removeChild(Ye),Xe(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),We=Be(function(t){return null==t?qe:(Le||(Le=document.createElementNS("http://www.w3.org/2000/svg","g")),Le.setAttribute("transform",t),(t=Le.transform.baseVal.consolidate())?Xe((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):qe)},", ",")",")");Math.SQRT2;function Ze(t){return+t}var Qe=[0,1];function Je(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=e,function(){return n});var n}function Ke(t,e,n,r){var i=t[0],o=t[1],a=e[0],s=e[1];return o<i?(i=n(o,i),a=r(s,a)):(i=n(i,o),a=r(a,s)),function(t){return a(i(t))}}function tn(t,e,n,r){var i=Math.min(t.length,e.length)-1,o=new Array(i),a=new Array(i),s=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++s<i;)o[s]=n(t[s],t[s+1]),a[s]=r(e[s],e[s+1]);return function(e){var n=p(t,e,1,i)-1;return a[n](o[n](e))}}function en(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function nn(t){return(t=en(Math.abs(t)))?t[1]:NaN}var rn,on=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function an(t){return new sn(t)}function sn(t){if(!(e=on.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}function un(t,e){var n=en(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}an.prototype=sn.prototype,sn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var ln={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return un(100*t,e)},r:un,s:function(t,e){var n=en(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(rn=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+en(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function cn(t){return t}var hn,fn,pn,dn=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function gn(t){var e,n,r=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,r){for(var i=t.length,o=[],a=0,s=e[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}):cn,i=t.currency,o=t.decimal,a=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):cn,s=t.percent||"%";function u(t){var e=(t=an(t)).fill,n=t.align,u=t.sign,l=t.symbol,c=t.zero,h=t.width,f=t.comma,p=t.precision,d=t.trim,g=t.type;"n"===g?(f=!0,g="g"):ln[g]||(null==p&&(p=12),d=!0,g="g"),(c||"0"===e&&"="===n)&&(c=!0,e="0",n="=");var v="$"===l?i[0]:"#"===l&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",m="$"===l?i[1]:/[%p]/.test(g)?s:"",y=ln[g],b=/[defgprs%]/.test(g);function w(t){var i,s,l,w=v,x=m;if("c"===g)x=y(t)+x,t="";else{var _=(t=+t)<0;if(t=y(Math.abs(t),p),d&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),_&&0==+t&&(_=!1),w=(_?"("===u?u:"-":"-"===u||"("===u?"":u)+w,x=("s"===g?dn[8+rn/3]:"")+x+(_&&"("===u?")":""),b)for(i=-1,s=t.length;++i<s;)if(48>(l=t.charCodeAt(i))||l>57){x=(46===l?o+t.slice(i+1):t.slice(i))+x,t=t.slice(0,i);break}}f&&!c&&(t=r(t,1/0));var $=w.length+t.length+x.length,M=$<h?new Array(h-$+1).join(e):"";switch(f&&c&&(t=r(M+t,M.length?h-x.length:1/0),M=""),n){case"<":t=w+t+x+M;break;case"=":t=w+M+t+x;break;case"^":t=M.slice(0,$=M.length>>1)+w+t+x+M.slice($);break;default:t=M+w+t+x}return a(t)}return p=null==p?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),w.toString=function(){return t+""},w}return{format:u,formatPrefix:function(t,e){var n=u(((t=an(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(nn(e)/3))),i=Math.pow(10,-r),o=dn[8+r/3];return function(t){return n(i*t)+o}}}}function vn(t,e,n){var r,i=t[0],o=t[t.length-1],a=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=y?i*=10:o>=b?i*=5:o>=w&&(i*=2),e<t?-i:i}(i,o,null==e?10:e);switch((n=an(null==n?",f":n)).type){case"s":var s=Math.max(Math.abs(i),Math.abs(o));return null!=n.precision||isNaN(r=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(nn(e)/3)))-nn(Math.abs(t)))}(a,s))||(n.precision=r),pn(n,s);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(r=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,nn(e)-nn(t))+1}(a,Math.max(Math.abs(i),Math.abs(o))))||(n.precision=r-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(r=function(t){return Math.max(0,-nn(Math.abs(t)))}(a))||(n.precision=r-2*("%"===n.type))}return fn(n)}function mn(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,i,o,a,s=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=x(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),o=new Array(i=Math.ceil(t-e+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return vn(e(),t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),o=0,a=i.length-1,s=i[o],u=i[a];return u<s&&(r=s,s=u,u=r,r=o,o=a,a=r),(r=x(s,u,n))>0?r=x(s=Math.floor(s/r)*r,u=Math.ceil(u/r)*r,n):r<0&&(r=x(s=Math.ceil(s*r)/r,u=Math.floor(u*r)/r,n)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(u/r)*r,e(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(u*r)/r,e(i)),t},t}function yn(){var t=function(t,e){var n,r,i,o=Qe,a=Qe,s=Ge,u=!1;function l(){return n=Math.min(o.length,a.length)>2?tn:Ke,r=i=null,c}function c(e){return(r||(r=n(o,a,u?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:r(t)}}}(t):t,s)))(+e)}return c.invert=function(t){return(i||(i=n(a,o,Je,u?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:r(t)}}}(e):e)))(+t)},c.domain=function(t){return arguments.length?(o=Dt.call(t,Ze),l()):o.slice()},c.range=function(t){return arguments.length?(a=Et.call(t),l()):a.slice()},c.rangeRound=function(t){return a=Et.call(t),s=Fe,l()},c.clamp=function(t){return arguments.length?(u=!!t,l()):u},c.interpolate=function(t){return arguments.length?(s=t,l()):s},l()}(Je,Ie);return t.copy=function(){return e=t,yn().domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp());var e},mn(t)}hn=gn({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),fn=hn.format,pn=hn.formatPrefix;var bn=new Date,wn=new Date;function xn(t,e,n,r){function i(e){return t(e=new Date(+e)),e}return i.floor=i,i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,o){var a,s=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return s;do{s.push(a=new Date(+n)),e(n,o),t(n)}while(a<n&&n<r);return s},i.filter=function(n){return xn(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(i.count=function(e,r){return bn.setTime(+e),wn.setTime(+r),t(bn),t(wn),Math.floor(n(bn,wn))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var _n=xn(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});_n.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?xn(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):_n:null};var $n=6e4,Mn=6048e5,Tn=(xn(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),xn(function(t){t.setTime(Math.floor(t/$n)*$n)},function(t,e){t.setTime(+t+e*$n)},function(t,e){return(e-t)/$n},function(t){return t.getMinutes()}),xn(function(t){var e=t.getTimezoneOffset()*$n%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),xn(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*$n)/864e5},function(t){return t.getDate()-1}));function Sn(t){return xn(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*$n)/Mn})}var kn=Sn(0),An=Sn(1),Cn=(Sn(2),Sn(3),Sn(4)),Dn=(Sn(5),Sn(6),xn(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),xn(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Dn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xn(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};xn(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*$n)},function(t,e){return(e-t)/$n},function(t){return t.getUTCMinutes()}),xn(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()});var En=xn(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1});function Nn(t){return xn(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/Mn})}var On=Nn(0),In=Nn(1),Pn=(Nn(2),Nn(3),Nn(4)),Un=(Nn(5),Nn(6),xn(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),xn(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function zn(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Gn(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Fn(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}Un.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xn(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var Yn,jn,Hn,Ln={"-":"",_:" ",0:"0"},Vn=/^\s*\d+/,qn=/^%/,Xn=/[\\^$*+?|[\]().{}]/g;function Bn(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function Rn(t){return t.replace(Xn,"\\$&")}function Wn(t){return new RegExp("^(?:"+t.map(Rn).join("|")+")","i")}function Zn(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function Qn(t,e,n){var r=Vn.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Jn(t,e,n){var r=Vn.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Kn(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function tr(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function er(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function nr(t,e,n){var r=Vn.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function rr(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function ir(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function or(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function ar(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function sr(t,e,n){var r=Vn.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function ur(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function lr(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function cr(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function hr(t,e,n){var r=Vn.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function fr(t,e,n){var r=Vn.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function pr(t,e,n){var r=qn.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function dr(t,e,n){var r=Vn.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function gr(t,e,n){var r=Vn.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function vr(t,e){return Bn(t.getDate(),e,2)}function mr(t,e){return Bn(t.getHours(),e,2)}function yr(t,e){return Bn(t.getHours()%12||12,e,2)}function br(t,e){return Bn(1+Tn.count(Dn(t),t),e,3)}function wr(t,e){return Bn(t.getMilliseconds(),e,3)}function xr(t,e){return wr(t,e)+"000"}function _r(t,e){return Bn(t.getMonth()+1,e,2)}function $r(t,e){return Bn(t.getMinutes(),e,2)}function Mr(t,e){return Bn(t.getSeconds(),e,2)}function Tr(t){var e=t.getDay();return 0===e?7:e}function Sr(t,e){return Bn(kn.count(Dn(t),t),e,2)}function kr(t,e){var n=t.getDay();return t=n>=4||0===n?Cn(t):Cn.ceil(t),Bn(Cn.count(Dn(t),t)+(4===Dn(t).getDay()),e,2)}function Ar(t){return t.getDay()}function Cr(t,e){return Bn(An.count(Dn(t),t),e,2)}function Dr(t,e){return Bn(t.getFullYear()%100,e,2)}function Er(t,e){return Bn(t.getFullYear()%1e4,e,4)}function Nr(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Bn(e/60|0,"0",2)+Bn(e%60,"0",2)}function Or(t,e){return Bn(t.getUTCDate(),e,2)}function Ir(t,e){return Bn(t.getUTCHours(),e,2)}function Pr(t,e){return Bn(t.getUTCHours()%12||12,e,2)}function Ur(t,e){return Bn(1+En.count(Un(t),t),e,3)}function zr(t,e){return Bn(t.getUTCMilliseconds(),e,3)}function Gr(t,e){return zr(t,e)+"000"}function Fr(t,e){return Bn(t.getUTCMonth()+1,e,2)}function Yr(t,e){return Bn(t.getUTCMinutes(),e,2)}function jr(t,e){return Bn(t.getUTCSeconds(),e,2)}function Hr(t){var e=t.getUTCDay();return 0===e?7:e}function Lr(t,e){return Bn(On.count(Un(t),t),e,2)}function Vr(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Pn(t):Pn.ceil(t),Bn(Pn.count(Un(t),t)+(4===Un(t).getUTCDay()),e,2)}function qr(t){return t.getUTCDay()}function Xr(t,e){return Bn(In.count(Un(t),t),e,2)}function Br(t,e){return Bn(t.getUTCFullYear()%100,e,2)}function Rr(t,e){return Bn(t.getUTCFullYear()%1e4,e,4)}function Wr(){return"+0000"}function Zr(){return"%"}function Qr(t){return+t}function Jr(t){return Math.floor(+t/1e3)}!function(t){Yn=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,s=t.months,u=t.shortMonths,l=Wn(i),c=Zn(i),h=Wn(o),f=Zn(o),p=Wn(a),d=Zn(a),g=Wn(s),v=Zn(s),m=Wn(u),y=Zn(u),b={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:vr,e:vr,f:xr,H:mr,I:yr,j:br,L:wr,m:_r,M:$r,p:function(t){return i[+(t.getHours()>=12)]},Q:Qr,s:Jr,S:Mr,u:Tr,U:Sr,V:kr,w:Ar,W:Cr,x:null,X:null,y:Dr,Y:Er,Z:Nr,"%":Zr},w={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:Or,e:Or,f:Gr,H:Ir,I:Pr,j:Ur,L:zr,m:Fr,M:Yr,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:Qr,s:Jr,S:jr,u:Hr,U:Lr,V:Vr,w:qr,W:Xr,x:null,X:null,y:Br,Y:Rr,Z:Wr,"%":Zr},x={a:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=h.exec(e.slice(n));return r?(t.w=f[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=m.exec(e.slice(n));return r?(t.m=y[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=v[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return M(t,e,n,r)},d:ar,e:ar,f:fr,H:ur,I:ur,j:sr,L:hr,m:or,M:lr,p:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.p=c[r[0].toLowerCase()],n+r[0].length):-1},Q:dr,s:gr,S:cr,u:Jn,U:Kn,V:tr,w:Qn,W:er,x:function(t,e,r){return M(t,n,e,r)},X:function(t,e,n){return M(t,r,e,n)},y:rr,Y:nr,Z:ir,"%":pr};function _(t,e){return function(n){var r,i,o,a=[],s=-1,u=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++s<l;)37===t.charCodeAt(s)&&(a.push(t.slice(u,s)),null!=(i=Ln[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(o=e[r])&&(r=o(n,i)),a.push(r),u=s+1);return a.push(t.slice(u,s)),a.join("")}}function $(t,e){return function(n){var r,i,o=Fn(1900);if(M(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(r=(i=(r=Gn(Fn(o.y))).getUTCDay())>4||0===i?In.ceil(r):In(r),r=En.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(r=(i=(r=e(Fn(o.y))).getDay())>4||0===i?An.ceil(r):An(r),r=Tn.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Gn(Fn(o.y)).getUTCDay():e(Fn(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Gn(o)):e(o)}}function M(t,e,n,r){for(var i,o,a=0,s=e.length,u=n.length;a<s;){if(r>=u)return-1;if(37===(i=e.charCodeAt(a++))){if(i=e.charAt(a++),!(o=x[i in Ln?e.charAt(a++):i])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return b.x=_(n,b),b.X=_(r,b),b.c=_(e,b),w.x=_(n,w),w.X=_(r,w),w.c=_(e,w),{format:function(t){var e=_(t+="",b);return e.toString=function(){return t},e},parse:function(t){var e=$(t+="",zn);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",w);return e.toString=function(){return t},e},utcParse:function(t){var e=$(t,Gn);return e.toString=function(){return t},e}}}(t),Yn.format,Yn.parse,jn=Yn.utcFormat,Hn=Yn.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||jn("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Hn("%Y-%m-%dT%H:%M:%S.%LZ");var Kr=Math.PI,ti=2*Kr,ei=ti-1e-6;function ni(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ri(){return new ni}function ii(t){return function(){return t}}ni.prototype=ri.prototype={constructor:ni,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,s=n-t,u=r-e,l=o-t,c=a-e,h=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(h>1e-6)if(Math.abs(c*s-u*l)>1e-6&&i){var f=n-o,p=r-a,d=s*s+u*u,g=f*f+p*p,v=Math.sqrt(d),m=Math.sqrt(h),y=i*Math.tan((Kr-Math.acos((d+h-g)/(2*v*m)))/2),b=y/m,w=y/v;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*l)+","+(e+b*c)),this._+="A"+i+","+i+",0,0,"+ +(c*f>l*p)+","+(this._x1=t+w*s)+","+(this._y1=e+w*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e;var a=(n=+n)*Math.cos(r),s=n*Math.sin(r),u=t+a,l=e+s,c=1^o,h=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+l:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+u+","+l),n&&(h<0&&(h=h%ti+ti),h>ei?this._+="A"+n+","+n+",0,1,"+c+","+(t-a)+","+(e-s)+"A"+n+","+n+",0,1,"+c+","+(this._x1=u)+","+(this._y1=l):h>1e-6&&(this._+="A"+n+","+n+",0,"+ +(h>=Kr)+","+c+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};Math.PI;function oi(t){this._context=t}function ai(t){return new oi(t)}function si(t){return t[0]}function ui(t){return t[1]}function li(){var t=si,e=null,n=ii(0),r=ui,i=ii(!0),o=null,a=ai,s=null;function u(u){var l,c,h,f,p,d=u.length,g=!1,v=new Array(d),m=new Array(d);for(null==o&&(s=a(p=ri())),l=0;l<=d;++l){if(!(l<d&&i(f=u[l],l,u))===g)if(g=!g)c=l,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),h=l-1;h>=c;--h)s.point(v[h],m[h]);s.lineEnd(),s.areaEnd()}g&&(v[l]=+t(f,l,u),m[l]=+n(f,l,u),s.point(e?+e(f,l,u):v[l],r?+r(f,l,u):m[l]))}if(p)return s=null,p+""||null}function l(){return function(){var t=si,e=ui,n=ii(!0),r=null,i=ai,o=null;function a(a){var s,u,l,c=a.length,h=!1;for(null==r&&(o=i(l=ri())),s=0;s<=c;++s)!(s<c&&n(u=a[s],s,a))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+t(u,s,a),+e(u,s,a));if(l)return o=null,l+""||null}return a.x=function(e){return arguments.length?(t="function"==typeof e?e:ii(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:ii(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:ii(!!t),a):n},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}().defined(i).curve(a).context(o)}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:ii(+n),e=null,u):t},u.x0=function(e){return arguments.length?(t="function"==typeof e?e:ii(+e),u):t},u.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:ii(+t),u):e},u.y=function(t){return arguments.length?(n="function"==typeof t?t:ii(+t),r=null,u):n},u.y0=function(t){return arguments.length?(n="function"==typeof t?t:ii(+t),u):n},u.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:ii(+t),u):r},u.lineX0=u.lineY0=function(){return l().x(t).y(n)},u.lineY1=function(){return l().x(t).y(r)},u.lineX1=function(){return l().x(e).y(n)},u.defined=function(t){return arguments.length?(i="function"==typeof t?t:ii(!!t),u):i},u.curve=function(t){return arguments.length?(a=t,null!=o&&(s=a(o)),u):a},u.context=function(t){return arguments.length?(null==t?o=s=null:s=a(o=t),u):o},u}function ci(t){return t<0?-1:1}function hi(t,e,n){var r=t._x1-t._x0,i=e-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(n-t._y1)/(i||r<0&&-0),s=(o*i+a*r)/(r+i);return(ci(o)+ci(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(s))||0}function fi(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function pi(t,e,n){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,s=(o-r)/3;t._context.bezierCurveTo(r+s,i+s*e,o-s,a-s*n,o,a)}function di(t){this._context=t}function gi(t){this._context=t}oi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},di.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:pi(this,this._t0,fi(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,pi(this,fi(this,n=hi(this,t,e)),n);break;default:pi(this,this._t0,n=hi(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new gi(t)}.prototype=Object.create(di.prototype)).point=function(t,e){di.prototype.point.call(this,e,t)},gi.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,o){this._context.bezierCurveTo(e,t,r,n,o,i)}};var vi=Array.prototype.slice;function mi(t){return t}var yi=1,bi=2,wi=3,xi=4,_i=1e-6;function $i(t){return"translate("+(t+.5)+",0)"}function Mi(t){return"translate(0,"+(t+.5)+")"}function Ti(){return!this.__axis}function Si(t,e){var n=[],r=null,i=null,o=6,a=6,s=3,u=t===yi||t===xi?-1:1,l=t===xi||t===bi?"x":"y",c=t===yi||t===wi?$i:Mi;function h(h){var f=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,p=null==i?e.tickFormat?e.tickFormat.apply(e,n):mi:i,d=Math.max(o,0)+s,g=e.range(),v=+g[0]+.5,m=+g[g.length-1]+.5,y=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),b=h.selection?h.selection():h,w=b.selectAll(".domain").data([null]),x=b.selectAll(".tick").data(f,e).order(),_=x.exit(),$=x.enter().append("g").attr("class","tick"),M=x.select("line"),T=x.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),x=x.merge($),M=M.merge($.append("line").attr("stroke","#000").attr(l+"2",u*o)),T=T.merge($.append("text").attr("fill","#000").attr(l,u*d).attr("dy",t===yi?"0em":t===wi?"0.71em":"0.32em")),h!==b&&(w=w.transition(h),x=x.transition(h),M=M.transition(h),T=T.transition(h),_=_.transition(h).attr("opacity",_i).attr("transform",function(t){return isFinite(t=y(t))?c(t):this.getAttribute("transform")}),$.attr("opacity",_i).attr("transform",function(t){var e=this.parentNode.__axis;return c(e&&isFinite(e=e(t))?e:y(t))})),_.remove(),w.attr("d",t===xi||t==bi?"M"+u*a+","+v+"H0.5V"+m+"H"+u*a:"M"+v+","+u*a+"V0.5H"+m+"V"+u*a),x.attr("opacity",1).attr("transform",function(t){return c(y(t))}),M.attr(l+"2",u*o),T.attr(l,u*d).text(p),b.filter(Ti).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===bi?"start":t===xi?"end":"middle"),b.each(function(){this.__axis=y})}return h.scale=function(t){return arguments.length?(e=t,h):e},h.ticks=function(){return n=vi.call(arguments),h},h.tickArguments=function(t){return arguments.length?(n=null==t?[]:vi.call(t),h):n.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:vi.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(o=a=+t,h):o},h.tickSizeInner=function(t){return arguments.length?(o=+t,h):o},h.tickSizeOuter=function(t){return arguments.length?(a=+t,h):a},h.tickPadding=function(t){return arguments.length?(s=+t,h):s},h}function ki(t){return Si(wi,t)}var Ai={value:function(){}};function Ci(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new Di(r)}function Di(t){this._=t}function Ei(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function Ni(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=Ai,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}function Oi(){st.preventDefault(),st.stopImmediatePropagation()}Di.prototype=Ci.prototype={constructor:Di,on:function(t,e){var n,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),a=-1,s=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<s;)if(n=(t=o[a]).type)i[n]=Ni(i[n],t.name,e);else if(null==e)for(n in i)i[n]=Ni(i[n],t.name,null);return this}for(;++a<s;)if((n=(t=o[a]).type)&&(n=Ei(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Di(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var Ii,Pi,Ui=0,zi=0,Gi=0,Fi=1e3,Yi=0,ji=0,Hi=0,Li="object"==typeof performance&&performance.now?performance:Date,Vi="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function qi(){return ji||(Vi(Xi),ji=Li.now()+Hi)}function Xi(){ji=0}function Bi(){this._call=this._time=this._next=null}function Ri(t,e,n){var r=new Bi;return r.restart(t,e,n),r}function Wi(){ji=(Yi=Li.now())+Hi,Ui=zi=0;try{!function(){qi(),++Ui;for(var t,e=Ii;e;)(t=ji-e._time)>=0&&e._call.call(null,t),e=e._next;--Ui}()}finally{Ui=0,function(){var t,e,n=Ii,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Ii=e);Pi=t,Qi(r)}(),ji=0}}function Zi(){var t=Li.now(),e=t-Yi;e>Fi&&(Hi-=e,Yi=t)}function Qi(t){Ui||(zi&&(zi=clearTimeout(zi)),t-ji>24?(t<1/0&&(zi=setTimeout(Wi,t-Li.now()-Hi)),Gi&&(Gi=clearInterval(Gi))):(Gi||(Yi=Li.now(),Gi=setInterval(Zi,Fi)),Ui=1,Vi(Wi)))}function Ji(t,e,n){var r=new Bi;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r}Bi.prototype=Ri.prototype={constructor:Bi,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?qi():+n)+(null==e?0:+e),this._next||Pi===this||(Pi?Pi._next=this:Ii=this,Pi=this),this._call=t,this._time=n,Qi()},stop:function(){this._call&&(this._call=null,this._time=1/0,Qi())}};var Ki=Ci("start","end","interrupt"),to=[],eo=0,no=1,ro=2,io=3,oo=4,ao=5,so=6;function uo(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(u){var l,c,h,f;if(n.state!==no)return s();for(l in i)if((f=i[l]).name===n.name){if(f.state===io)return Ji(o);f.state===oo?(f.state=so,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<e&&(f.state=so,f.timer.stop(),delete i[l])}if(Ji(function(){n.state===io&&(n.state=oo,n.timer.restart(a,n.delay,n.time),a(u))}),n.state=ro,n.on.call("start",t,t.__data__,n.index,n.group),n.state===ro){for(n.state=io,r=new Array(h=n.tween.length),l=0,c=-1;l<h;++l)(f=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=f);r.length=c+1}}function a(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=ao,1),o=-1,a=r.length;++o<a;)r[o].call(null,i);n.state===ao&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=so,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=Ri(function(t){n.state=no,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)},0,n.time)}(t,n,{name:e,index:r,group:i,on:Ki,tween:to,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:eo})}function lo(t,e){var n=ho(t,e);if(n.state>eo)throw new Error("too late; already scheduled");return n}function co(t,e){var n=ho(t,e);if(n.state>ro)throw new Error("too late; already started");return n}function ho(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function fo(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>ro&&n.state<ao,n.state=so,n.timer.stop(),r&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}}function po(t,e,n){var r=t._id;return t.each(function(){var t=co(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return ho(t,r).value[e]}}function go(t,e){var n;return("number"==typeof e?Ie:e instanceof Wt?Oe:(n=Wt(e))?(e=n,Oe):ze)(t,e)}var vo=gt.prototype.constructor;var mo=0;function yo(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function bo(){return++mo}var wo=gt.prototype;yo.prototype=function(t){return gt().transition(t)}.prototype={constructor:yo,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=N(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,u,l=r[a],c=l.length,h=o[a]=new Array(c),f=0;f<c;++f)(s=l[f])&&(u=t.call(s,s.__data__,f,l))&&("__data__"in s&&(u.__data__=s.__data__),h[f]=u,uo(h[f],e,n,f,h,ho(s,n)));return new yo(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=I(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var u,l=r[s],c=l.length,h=0;h<c;++h)if(u=l[h]){for(var f,p=t.call(u,u.__data__,h,l),d=ho(u,n),g=0,v=p.length;g<v;++g)(f=p[g])&&uo(f,e,n,g,p,d);o.push(p),a.push(u)}return new yo(o,a,e,n)},filter:function(t){"function"!=typeof t&&(t=G(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new yo(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=e[s],c=n[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=e[s];return new yo(a,this._parents,this._name,this._id)},selection:function(){return new vo(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=bo(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)if(a=s[l]){var c=ho(a,e);uo(a,t,n,l,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new yo(r,this._parents,t,n)},call:wo.call,nodes:wo.nodes,node:wo.node,size:wo.size,empty:wo.empty,each:wo.each,on:function(t,e){var n=this._id;return arguments.length<2?ho(this.node(),n).on.on(t):this.each(function(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?lo:co;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}(n,t,e))},attr:function(t,e){var n=C(t),r="transform"===n?We:go;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var r,i,o;return function(){var a,s=n(this);if(null!=s)return(a=this.getAttributeNS(t.space,t.local))===s?null:a===r&&s===i?o:o=e(r=a,i=s);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var r,i,o;return function(){var a,s=n(this);if(null!=s)return(a=this.getAttribute(t))===s?null:a===r&&s===i?o:o=e(r=a,i=s);this.removeAttribute(t)}})(n,r,po(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===n?null:o===r?i:i=e(r=o,n)}}:function(t,e,n){var r,i;return function(){var o=this.getAttribute(t);return o===n?null:o===r?i:i=e(r=o,n)}})(n,r,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=C(t);return this.tween(n,(r.local?function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttributeNS(t.space,t.local,r(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttribute(t,r(e))}}return n._value=e,n})(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Re:go;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=X(this,t),a=(this.style.removeProperty(t),X(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var r,i,o;return function(){var a=X(this,t),s=n(this);return null==s&&(this.style.removeProperty(t),s=X(this,t)),a===s?null:a===r&&s===i?o:o=e(r=a,i=s)}}(t,r,po(this,"style."+t,e)):function(t,e,n){var r,i;return function(){var o=X(this,t);return o===n?null:o===r?i:i=e(r=o,n)}}(t,r,e+""),n)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){function r(){var r=this,i=e.apply(r,arguments);return i&&function(e){r.style.setProperty(t,i(e),n)}}return r._value=e,r}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(po(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=ho(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?function(t,e){var n,r;return function(){var i=co(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}:function(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=co(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},u=0,l=i.length;u<l;++u)if(i[u].name===e){i[u]=s;break}u===l&&i.push(s)}o.tween=i}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){lo(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){lo(this,t).delay=e}})(e,t)):ho(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){co(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){co(this,t).duration=e}})(e,t)):ho(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){co(this,t).ease=e}}(e,t)):ho(this.node(),e).ease}};Math.PI,Math.PI;var xo={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function _o(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return xo.time=qi(),xo;return n}function $o(t){return function(){return t}}function Mo(){st.stopImmediatePropagation()}function To(){st.preventDefault(),st.stopImmediatePropagation()}gt.prototype.interrupt=function(t){return this.each(function(){fo(this,t)})},gt.prototype.transition=function(t){var e,n;t instanceof yo?(e=t._id,t=t._name):(e=bo(),(n=xo).time=qi(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)(a=s[l])&&uo(a,t,e,l,s,n||_o(a,e));return new yo(r,this._parents,t,e)};var So={name:"drag"},ko={name:"space"},Ao={name:"handle"},Co={name:"center"},Do={name:"x",handles:["e","w"].map(Go),input:function(t,e){return t&&[[t[0],e[0][1]],[t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Eo={name:"y",handles:["n","s"].map(Go),input:function(t,e){return t&&[[e[0][0],t[0]],[e[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},No={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Go),input:function(t){return t},output:function(t){return t}},Oo={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Io={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Po={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Uo={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},zo={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Go(t){return{type:t}}function Fo(){return!st.button}function Yo(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function jo(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Ho(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Lo(){return function(t){var e,n=Yo,r=Fo,i=Ci(a,"start","brush","end"),o=6;function a(e){var n=e.property("__brush",h).selectAll(".overlay").data([Go("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Oo.overlay).merge(n).each(function(){var t=jo(this).extent;vt(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),e.selectAll(".selection").data([Go("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Oo.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=e.selectAll(".handle").data(t.handles,function(t){return t.type});r.exit().remove(),r.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Oo[t.type]}),e.each(s).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",c)}function s(){var t=vt(this),e=jo(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?e[1][0]-o/2:e[0][0]-o/2}).attr("y",function(t){return"s"===t.type[0]?e[1][1]-o/2:e[0][1]-o/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+o:o}).attr("height",function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+o:o})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function u(t,e){return t.__brush.emitter||new l(t,e)}function l(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function c(){if(st.touches){if(st.changedTouches.length<st.touches.length)return To()}else if(e)return;if(r.apply(this,arguments)){var n,i,o,a,l,c,h,f,p,d,g,v,m,y=this,b=st.target.__data__.type,w="selection"===(st.metaKey?b="overlay":b)?So:st.altKey?Co:Ao,x=t===Eo?null:Uo[b],_=t===Do?null:zo[b],$=jo(y),M=$.extent,T=$.selection,S=M[0][0],k=M[0][1],A=M[1][0],C=M[1][1],D=x&&_&&st.shiftKey,E=yt(y),N=E,O=u(y,arguments).beforestart();"overlay"===b?$.selection=T=[[n=t===Eo?S:E[0],o=t===Do?k:E[1]],[l=t===Eo?A:n,h=t===Do?C:o]]:(n=T[0][0],o=T[0][1],l=T[1][0],h=T[1][1]),i=n,a=o,c=l,f=h;var I=vt(y).attr("pointer-events","none"),P=I.selectAll(".overlay").attr("cursor",Oo[b]);if(st.touches)I.on("touchmove.brush",z,!0).on("touchend.brush touchcancel.brush",F,!0);else{var U=vt(st.view).on("keydown.brush",function(){switch(st.keyCode){case 16:D=x&&_;break;case 18:w===Ao&&(x&&(l=c-p*x,n=i+p*x),_&&(h=f-d*_,o=a+d*_),w=Co,G());break;case 32:w!==Ao&&w!==Co||(x<0?l=c-p:x>0&&(n=i-p),_<0?h=f-d:_>0&&(o=a-d),w=ko,P.attr("cursor",Oo.selection),G());break;default:return}To()},!0).on("keyup.brush",function(){switch(st.keyCode){case 16:D&&(v=m=D=!1,G());break;case 18:w===Co&&(x<0?l=c:x>0&&(n=i),_<0?h=f:_>0&&(o=a),w=Ao,G());break;case 32:w===ko&&(st.altKey?(x&&(l=c-p*x,n=i+p*x),_&&(h=f-d*_,o=a+d*_),w=Co):(x<0?l=c:x>0&&(n=i),_<0?h=f:_>0&&(o=a),w=Ao),P.attr("cursor",Oo[b]),G());break;default:return}To()},!0).on("mousemove.brush",z,!0).on("mouseup.brush",F,!0);!function(t){var e=t.document.documentElement,n=vt(t).on("dragstart.drag",Oi,!0);"onselectstart"in e?n.on("selectstart.drag",Oi,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}(st.view)}Mo(),fo(y),s.call(y),O.start()}function z(){var t=yt(y);!D||v||m||(Math.abs(t[0]-N[0])>Math.abs(t[1]-N[1])?m=!0:v=!0),N=t,g=!0,To(),G()}function G(){var t;switch(p=N[0]-E[0],d=N[1]-E[1],w){case ko:case So:x&&(p=Math.max(S-n,Math.min(A-l,p)),i=n+p,c=l+p),_&&(d=Math.max(k-o,Math.min(C-h,d)),a=o+d,f=h+d);break;case Ao:x<0?(p=Math.max(S-n,Math.min(A-n,p)),i=n+p,c=l):x>0&&(p=Math.max(S-l,Math.min(A-l,p)),i=n,c=l+p),_<0?(d=Math.max(k-o,Math.min(C-o,d)),a=o+d,f=h):_>0&&(d=Math.max(k-h,Math.min(C-h,d)),a=o,f=h+d);break;case Co:x&&(i=Math.max(S,Math.min(A,n-p*x)),c=Math.max(S,Math.min(A,l+p*x))),_&&(a=Math.max(k,Math.min(C,o-d*_)),f=Math.max(k,Math.min(C,h+d*_)))}c<i&&(x*=-1,t=n,n=l,l=t,t=i,i=c,c=t,b in Io&&P.attr("cursor",Oo[b=Io[b]])),f<a&&(_*=-1,t=o,o=h,h=t,t=a,a=f,f=t,b in Po&&P.attr("cursor",Oo[b=Po[b]])),$.selection&&(T=$.selection),v&&(i=T[0][0],c=T[1][0]),m&&(a=T[0][1],f=T[1][1]),T[0][0]===i&&T[0][1]===a&&T[1][0]===c&&T[1][1]===f||($.selection=[[i,a],[c,f]],s.call(y),O.brush())}function F(){if(Mo(),st.touches){if(st.touches.length)return;e&&clearTimeout(e),e=setTimeout(function(){e=null},500),I.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(t,e){var n=t.document.documentElement,r=vt(t).on("dragstart.drag",null);e&&(r.on("click.drag",Oi,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(st.view,g),U.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);I.attr("pointer-events","all"),P.attr("cursor",Oo.overlay),$.selection&&(T=$.selection),Ho(T)&&($.selection=null,s.call(y)),O.end()}}function h(){var e=this.__brush||{selection:null};return e.extent=n.apply(this,arguments),e.dim=t,e}return a.move=function(e,n){e.selection?e.on("start.brush",function(){u(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){u(this,arguments).end()}).tween("brush",function(){var e=this,r=e.__brush,i=u(e,arguments),o=r.selection,a=t.input("function"==typeof n?n.apply(this,arguments):n,r.extent),l=Ge(o,a);function c(t){r.selection=1===t&&Ho(a)?null:l(t),s.call(e),i.brush()}return o&&a?c:c(1)}):e.each(function(){var e=arguments,r=this.__brush,i=t.input("function"==typeof n?n.apply(this,e):n,r.extent),o=u(this,e).beforestart();fo(this),r.selection=null==i||Ho(i)?null:i,s.call(this),o.start().brush().end()})},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){!function(t,e,n,r){var i=st;t.sourceEvent=st,st=t;try{e.apply(n,r)}finally{st=i}}(new function(t,e,n){this.target=t,this.type=e,this.selection=n}(a,e,t.output(this.state.selection)),i.apply,i,[e,this.that,this.args])}},a.extent=function(t){return arguments.length?(n="function"==typeof t?t:$o([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),a):n},a.filter=function(t){return arguments.length?(r="function"==typeof t?t:$o(!!t),a):r},a.handleSize=function(t){return arguments.length?(o=+t,a):o},a.on=function(){var t=i.on.apply(i,arguments);return t===i?a:t},a}(No)}const Vo={epanechnikov:function(t){return Math.abs(t)<=1?.75*(1-t*t):0},gaussian:function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)}},qo={nrd:function(t){let e=(_(t,.75)-_(t,.25))/1.34;return 1.06*Math.min(g(t),e)*Math.pow(t.length,-.2)}};function Xo(t,e,n){return function(r){return e.map(e=>[e,function(t,e){var n,r=t.length,i=r,o=-1,a=0;if(null==e)for(;++o<r;)isNaN(n=d(t[o]))?--i:a+=n;else for(;++o<r;)isNaN(n=d(e(t[o],o,t)))?--i:a+=n;if(i)return a/i}(r,r=>t((e-r)/n))/n])}}class Bo{constructor(t,e=!1,n=30,r=-40,i=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),vt("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){vt("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=st.pageX,e=st.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;vt("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){vt("#"+this.id).html(t)}}class Ro{constructor(t,e,n=!1){$(`#${t}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,r,i="fa-download"){this.createButton(t,i);vt(`#${t}`).on("click",()=>{this.downloadSvg(e,n,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);vt(`#${t}`).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download"){const n=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${e}`).appendTo(n),this.buttons[t]=n,n}attachTooltip(t){this.tooltip=t}downloadSvg(t,e,n){let r=$($($(`${"#"+t}`))[0]),i=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),o=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var i=n[r].cssRules,o=0;o<i.length;o++){var a=i[o];if(void 0!==a.style){var s,u=void 0===a.selectorText?a.selectorText:a.selectorText.replace(`#${t[0].id} `,"");try{s=$(t).find(u)}catch(t){s=[]}s.length>0&&(e+=a.selectorText+" { "+a.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var l=document.createElement("style");return l.setAttribute("type","text/css"),l.innerHTML="<![CDATA[\n"+e+"\n]]>",l}(r.get());i.prepend(o),$("#"+n).html("").hide();let a=$(`#${n}`).append(i).html(),s=new Blob([a],{type:"image/svg+xml"});saveAs(s,e),$(`#${n}`).html("").hide()}}class Wo{constructor(t,e={}){this._sanityCheck(t),this.data=t,this.groupInfo=e,this.toolbar=void 0,this.tooltip=void 0}render(t,e=500,n=357,r=.05,i,o=[-3,3],a="Y axis",s=!0,u=30,l=!0,h=0,f=!1,p=!1,d=!1,g=!1,m=!1,y=!1){if(this.reset=(()=>{t.selectAll("*").remove(),this.render(t,e,n,r,i,o,a,s,u,l,h,f,p,d,g,m,y)}),this.updateYScale=function(o,a){t.selectAll("*").remove(),void 0===a&&(a=[]),this.render(t,e,n,r,i,[],o,s,u,l,h,f,p,d,g,m,y)},this.updateXScale=function(i){void 0===i&&console.error("updateXScale called without new X domain"),t.selectAll("*").remove(),this.render(t,e,n,r,i,[],a,s,u,l,h,f,p,d,g,m,y)},void 0===o||0==o.length){let t=[];this.data.forEach(e=>t=t.concat(e.values)),o=v(t)}this.groups=_t().key(t=>t.group).entries(this.data),this.scale={x:Ot().rangeRound([0,e]).domain(i||this.groups.map(t=>t.key)).paddingInner(r),subx:Ot(),y:yn().rangeRound([n,0]).domain(o),z:yn()},this.groups.forEach(e=>{let r=e.key,i=e.values,a=this.groupInfo[r];if(e.index=this.scale.x.domain().indexOf(r),void 0!==a){t.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","center").attr("fill",t=>"pvalue"==t&&parseFloat(a[t])<=parseFloat(a.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(t,e)=>{return`translate(${this.scale.x(r)+this.scale.x.bandwidth()/2}, ${this.scale.y(o[0])+50})`}).text(t=>`${t}: ${parseFloat(parseFloat(a[t]).toPrecision(3)).toExponential()}`)}m&&i.sort((t,e)=>t.label<e.label?-1:t.label>e.label?1:0),this.scale.subx.domain(i.map(t=>t.label)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),i.forEach(n=>{0!=n.values.length&&(n.values=n.values.sort(c),this._drawViolin(t,n,f,e.index,y))});var s=15;if(g){const e=Ot().domain(i.map(t=>void 0==t.size?"(0)":`(${t.size||0})`)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]);t.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${n+s})`).call(ki(e))}if(l){s=5;const e=t.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${n+s})`).call(ki(this.scale.subx));h>0&&e.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${h}, 2, 10)`)}});let b=l?55:0;var w;if(this.xAxis=s?ki(this.scale.x):ki(this.scale.x).tickFormat(""),t.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${n+b})`).call(this.xAxis).selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${u}, -10, 10)`),b=5,this.yAxis=(w=this.scale.y,Si(xi,w)).tickValues(this.scale.y.ticks(5)),t.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${b}, 0)`).call(this.yAxis),t.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${2*b+vt(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(a),t.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),p&&this._addGroupDivider(t),d){const e=t.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");e.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const n=e.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),r=10;n.append("rect").attr("x",(t,e)=>5+60*e+this.scale.x.range()[0]).attr("y",-28).attr("width",r).attr("height",r).style("fill",t=>t.color),n.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,e)=>17+60*e+this.scale.x.range()[0]).attr("y",-20)}}addPlotTitle(t,e){let n=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,r=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${n}, ${r})`).text(e)}createTooltip(t){return 0==$(`#${t}`).length&&$("<div/>").attr("id",t).appendTo($("body")),this.tooltip=new Bo(t),vt(`#${t}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,e){return this.toolbar=new Ro(t,e),this.toolbar}addBrush(t){const e=Lo();e.on("end",()=>{this.zoom(t,e)}),t.append("g").attr("class","brush").call(e)}zoom(t,e){let n,r=st.selection;if(void 0===e)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter((t,e)=>{const n=Math.floor(r[0][0]/this.scale.x.bandwidth()),i=Math.floor(r[1][0]/this.scale.x.bandwidth());return e>=n&&e<=i}));const n=Math.floor(this.scale.y.invert(r[1][1])),i=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([n,i]),t.select(".brush").call(e.move,null)}else{if(!n)return n=setTimeout(function(){n=null},350);this.reset()}let i=t.transition().duration(750);t.select(".axis--x").transition(i).call(this.xAxis),t.select(".axis--y").transition(i).call(this.yAxis),this.groups.forEach((e,n)=>{let r=e.key,o=e.values;this.scale.subx.rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),o.forEach(n=>{if(0==n.values.length)return;this.scale.x.domain().indexOf(r);this.scale.z.range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const o=t.select(`#violin${e.index}-${n.label}`);o.select(".violin").transition(i).attr("d",li().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const a=_(n.values,.25),s=_(n.values,.75);o.select(".violin-ir").transition(i).attr("x",this.scale.z(-.1)).attr("y",this.scale.y(s)).attr("width",Math.abs(this.scale.z(-.1)-this.scale.z(.1))).attr("height",Math.abs(this.scale.y(s)-this.scale.y(a)));const u=T(n.values);o.select(".violin-median").transition(i).attr("x1",this.scale.z(-.1)).attr("x2",this.scale.z(.1)).attr("y1",this.scale.y(u)).attr("y2",this.scale.y(u))})})}_drawViolin(t,e,n,r,i){let o=Xo(Vo.gaussian,this.scale.y.ticks(100),qo.nrd(e.values));const a=v(e.values),s=o(e.values).filter(t=>t[0]>=a[0]&&t[0]<=a[1]);if(s.length&&this._validVertices(s)){let o=M(s,t=>Math.abs(t[1]));this.scale.z.domain([-o,o]).range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);const a=t.append("g").attr("id",`violin${r}-${e.label}`);let u=li().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0]));const l=a.append("path").datum(s).attr("d",u).classed("violin",!0).style("fill",()=>void 0!==e.color?e.color:r%2==0?"#90c1c1":"#94a8b8"),c=_(e.values,.25),h=_(e.values,.75),f=this.scale.z.domain()[1]/3;if(n){const n=Math.abs(h-c),r=M(e.values.filter(t=>t<=h+1.5*n)),i=S(e.values.filter(t=>t>=c-1.5*n));t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(i)).style("stroke","#fff")}a.append("rect").attr("x",this.scale.z(-f)).attr("y",this.scale.y(h)).attr("width",Math.abs(this.scale.z(-f)-this.scale.z(f))).attr("height",Math.abs(this.scale.y(h)-this.scale.y(c))).attr("class","violin-ir");const p=T(e.values);if(a.append("line").attr("x1",this.scale.z(-f)).attr("x2",this.scale.z(f)).attr("y1",this.scale.y(p)).attr("y2",this.scale.y(p)).attr("class","violin-median"),i){const t=Math.abs(h-c),n=M(e.values.filter(e=>e<=h+1.5*t)),r=S(e.values.filter(e=>e>=c-1.5*t)),i=e.values.filter(t=>t<r||t>n);a.append("g").attr("class","violin-outliers").selectAll("circle").data(i).enter().append("circle").attr("cx",()=>this.scale.z(0)).attr("cy",t=>this.scale.y(t)).attr("r",2)}a.on("mouseover",()=>{l.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(e.group+"<br/>"+e.label+"<br/>Median: "+p.toPrecision(4)+"<br/>")}),a.on("mouseout",()=>{l.classed("highlighted",!1)})}}_sanityCheck(t){const e=["group","label","values"];t.forEach(t=>{e.forEach(e=>{if(void 0===t[e])throw"GroupedViolin: input data error."})})}_addGroupDivider(t){const e=this.scale.x.domain(),n=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),r=(t,r)=>r!==e.length-1?this.scale.x(t)+ +this.scale.x.bandwidth()+n/2:0;t.selectAll(".vline").data(e).enter().append("line").classed("vline",!0).attr("x1",r).attr("x2",r).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(t,n)=>n!=e.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}_validVertices(t){return!t.reduce((t,e)=>t.concat(e),[]).filter(t=>isNaN(t)).length}}function Zo(t=50,e=50,n=50,r=50){return{top:t,right:e,bottom:n,left:r}}function Qo(t,e=!0){t.forEach(t=>{t.values=e?t.data.map(t=>Math.log10(+t+1)):t.data,t.median=e?Math.log(T(t.data)+1):T(t.data)})}function Jo(t,e,n,r=!0){const i="geneExpression";if(!t.hasOwnProperty(i))throw"Parse Error: required json attribute is missing: "+i;return t[i].forEach(t=>{["data","tissueSiteDetailId","geneSymbol","gencodeId"].forEach(e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parse Error: required json attribute is missing: "+e}),t.group=void 0===e?t.tissueSiteDetailId:e[t.tissueSiteDetailId],t.label=void 0===t.subsetGroup?t.geneSymbol:t.subsetGroup,t.color=void 0===n?"#90c1c1":void 0===t.subsetGroup?`#${n[t.tissueSiteDetailId]}`:n[t.subsetGroup]}),Qo(t[i],r),t[i]}function Ko(t,e){let n=t.data.map(t=>t.group),r=t.sortData.filter(t=>n.includes(t.group));switch(t.genePlotSort){case e.plotSorts.ascAlphaSort:r.sort((t,e)=>t.group<e.group?-1:t.group>e.group?1:0);break;case e.plotSorts.descAlphaSort:r.sort((t,e)=>t.group<e.group?1:t.group>e.group?-1:0);break;case e.plotSorts.ascSort:r.sort((t,e)=>t.median-e.median);break;case e.plotSorts.descSort:r.sort((t,e)=>e.median-t.median)}let i=r.map(t=>t.group);t.updateXScale(i);let o=vt(`#${e.root} svg g`);t.subset?ea(t,o,t.tissueDict,"bottom"):(vt(`#${e.svg} #violinLegend`).remove(),ta(o)),t.showOutliers||(bt(`#${e.svg} path.violin`).classed("outlined",!0),$(`#${e.svg} .violin-outliers`).hide()),void 0!==t.plotTitle&&t.addPlotTitle(o,t.plotTitle)}function ta(t){const e=t.select(".violin-x-axis");e.attr("transform",`${e.attr("transform")} translate(0, 3)`)}function ea(t,e,n,r="top"){ta(e);const i=e.selectAll(".violin-x-axis text");i.attr("transform",`translate(0, 8) ${i.attr("transform")}`),e.append("g").selectAll(".tcolor").data(t.scale.x.domain()).enter().append("rect").classed("tcolor",!0).attr("x",e=>t.scale.x(e)).attr("y",e=>"top"==r?t.scale.y.range()[1]:t.scale.y.range()[0]).attr("transform","translate(0, 14)").attr("width",e=>t.scale.x.bandwidth()).attr("height",5).style("stroke-width",0).style("fill",t=>`#${n[t].colorHex}`).style("opacity",.9)}return t.launch=function(t,e,n,r="Gene Expression Violin Plot",i=function(){const t="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:t+"association/singleTissueEqtl?format=json&datasetId=gtex_v7&gencodeId=",ld:t+"dataset/ld?format=json&datasetId=gtex_v7&gencodeId=",tissueSummary:t+"dataset/tissueSummary?datasetId=gtex_v7",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v7&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v7&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?datasetId=gtex_v7&boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v7&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v7&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v19&genomeBuild=GRCh37%2Fhg19&geneId=",tissue:t+"metadata/tissueSiteDetail?format=json",tissueSites:t+"metadata/tissueSiteDetail?format=json",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}(),o=Zo(50,75,250,60),a={w:.8*window.innerWidth,h:250}){const s=[l(i.tissue),l(i.geneExp+n)],u={root:t,svg:`${t}-svg`,tooltip:e,toolbar:`${t}-toolbar`,clone:`${t}-svg-clone`,buttons:{download:`${t}-download`,plotOptions:`${t}-option-modal`,filter:`${t}-filter`,ascAlphaSort:`${t}-asc-alphasort`,descAlphaSort:`${t}-desc-alphasort`,ascSort:`${t}-asc-sort`,descSort:`${t}-desc-sort`,logScale:`${t}-log-scale`,linearScale:`${t}-linear-scale`,noDiff:`${t}-no-diff`,sexDiff:`${t}-sex-diff`,outliersOn:`${t}-outliers-on`,outliersOff:`${t}-outliers-off`},plotOptionGroups:{scale:`${t}-option-scale`,sort:`${t}-option-sort`,differentiation:`${t}-option-differentiation`,outliers:`${t}-option-outlier`},plotSorts:{ascAlphaSort:"asc-alphasort",descAlphaSort:"desc-alphasort",ascSort:"asc-sort",descSort:"desc-sort"},tissueFilter:`${t}-filter-modal`},c=o,h=function(t=1200,e=250,n=Zo()){return{width:t,height:e,outerWidth:t+(n.left+n.right),outerHeight:e+(n.top+n.bottom)}}(a.w,a.h,c);if(0==$(`#${u.root}`).length)throw"Violin Plot Error: rootId does not exist.";0==$(`#${u.tooltip}`).length&&$("<div/>").attr("id",u.tooltip).appendTo($("body")),0==$(`#${u.toolbar}`).length&&$("<div/>").attr("id",u.toolbar).appendTo($(`#${u.root}`)),0==$(`#${u.clone}`).length&&$("<div/>").attr("id",u.clone).appendTo($(`#${u.root}`));let f=vt(`#${u.root}`).append("svg").attr("id",u.svg).attr("width",h.outerWidth).attr("height",h.outerHeight).append("g").attr("transform",`translate(${c.left}, ${c.top})`);Promise.all(s).then(function(t){const e={},o={female:"#e67f7b",male:"#70bcd2"},a={};(function(t){const e="tissueSiteDetail";if(!t.hasOwnProperty(e))throw"Parsing Error: required json attr is missing: "+e;const n=t[e];return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach(t=>{if(!n[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t}),n})(t[0]).forEach(t=>{e[t.tissueSiteDetailId]=t.tissueSiteDetail,a[t.tissueSiteDetail]=t,o[t.tissueSiteDetailId]=t.colorHex});const s=Jo(t[1],e,o);let c=new Wo(s);c.data.sort((t,e)=>t.group<e.group?-1:t.group>e.group?1:0);let p=c.createTooltip(u.tooltip);c.sortData=c.data.map(t=>t),c.genePlotSort=u.plotSorts.ascAlphaSort,c.allData=c.data.map(t=>t),c.gencodeId=n,c.tIdNameMap=e,c.groupColorDict=o,c.tissueDict=a,c.scaleView="log",c.subset=!1,c.showOutliers=!1,c.plotTitle=r;const d=h.width,g=h.height,v=c.data.map(t=>t.group);c.render(f,d,g,.2,v,[],"log10(TPM+1)",!0,35,!1,0,!1,!1,!0,!1,!0,!0),void 0!==r&&c.addPlotTitle(f,r),$(`#${u.svg} .violin-outliers`).hide(),bt(`#${u.svg} path.violin`).classed("outlined",!0),vt(`#${u.svg} #violinLegend`).remove(),ta(f),function(t,e,n,r){const i=function(t,e=!1){const n=["Bladder","Cervix_Ectocervix","Cervix_Endocervix","Fallopian_Tube","Kidney_Cortex"],r="tissueSiteDetail";if(!t.hasOwnProperty(r))throw"Parsing Error: required json attribute is missing: "+r;let i=t[r];["tissueSite","tissueSiteDetailId","tissueSiteDetail"].forEach(t=>{if(!i[0].hasOwnProperty(t))throw`parseTissueSites attr error. ${t} is not found`});let o=(i=0==e?i:i.filter(t=>!n.includes(t.tissueSiteDetailId))).reduce((t,e)=>{let n=e.tissueSite,r={id:e.tissueSiteDetailId,name:e.tissueSiteDetail};return t.hasOwnProperty(n)||(t[n]=[]),t[n].push(r),t},{});return Object.keys(o).forEach(t=>{if(1==o[t].length){let e=o[t][0];delete o[t],o[e.name]=[e]}}),o}(r);(function(t,e,n=!1,r=!1,i=4){const o="tissue-group-main-level";vt(`#${e}`).selectAll("*").remove();const a=$("<div/>").attr("class","col-xs-12 col-md-12").appendTo($(`#${e}`));n?$(`<label class=${o}>`+'<input type="radio" name="allTissues" value="reset"> Reset </label><br/>').appendTo(a):$(`<label class=${o}>`+'<input type="radio" name="allTissues" value="all"> All </label> '+`<label class=${o}>`+'<input type="radio" name="allTissues" value="reset"> Reset </label><br/>').appendTo(a),$('input[name="allTissues"]').change(function(){switch($(this).val()){case"all":$(".tissueGroup").prop("checked",!0),$(".tissueSubGroup").prop("checked",!0);break;case"reset":$(".tissueGroup").prop("checked",!1),$(".tissueSubGroup").prop("checked",!1)}});let s=Object.keys(t).sort((t,e)=>"Brain"==t?-1:"Brain"==e?1:t<e?-1:t>e?1:void 0),u=Object.keys(t).reduce((e,n)=>t[n].length>1?e+1+t[n].length:e+t[n].length,0),l=Math.floor(u/i),c=u%i,h=Math.floor(12/i);const f=m(0,i).map(t=>$(`<div id="section${t}" class="col-xs-12 col-md-${h}">`).appendTo($(`#${e}`)));let p=0,d=0;s.forEach(e=>{let n=t[e];const r=e.replace(/ /g,"_");let i=t[e].length;i=1==i?i:i+1,0!=p&&i+p>l+c&&(p=0,d+=1),p+=i;let a=f[d];$(`<label class=${o}>`+`<input type="checkbox" id="${r}" class="tissueGroup"> `+`<span>${e}</span>`+"</label><br/>").appendTo(a),n.length>1&&n.sort((t,e)=>t.id>e.id?1:t.id<e.id?-1:0).forEach(function(t,e){let r=$("<label class=tissue-group-sub-level>"+`<input type="checkbox" id="${t.id}" class="tissueSubGroup"> `+`<span>${t.name}</span>`+"</label><br/>").appendTo(a);e==n.length-1&&r.addClass("last-site"),r.click(function(){$('input[name="allTissues"]').prop("checked",!1)})}),$("#"+r).click(function(){$('input[name="allTissues"]').prop("checked",!1),$("#"+r).is(":checked")?n.forEach(function(t){"id"!=t.id&&$("#"+t.id).prop("checked",!0)}):n.forEach(function(t){"id"!=t.id&&$("#"+t.id).prop("checked",!1)})})}),r&&($('input[name="allTissues"][value="all"]').prop("checked",!0),$(".tissueGroup").prop("checked",!0),$(".tissueSubGroup").prop("checked",!0))})(i,`${e}-body`,!1,!0,3),function(t,e,n,r){$(`#${e}`).on("hidden.bs.modal",i=>{let o=function(t,e,n=!1){let r=[];return $(`#${e}`).find(":input").each(function(){if($(this).is(":checked")){const e=$(this).attr("id");if($(this).hasClass("tissueGroup")){let i=e.replace(/_/g," ");1==t[i].length&&(n?r.push(t[i][0].name):r.push(t[i][0].id))}else n?r.push($($(this).siblings()[0]).text()):r.push(e)}}),r.filter(t=>void 0!==t)}(r,`${e}-body`,!0);!function(t,e,n){let r=t.allData.filter(t=>n.includes(t.group));t.data=r,Ko(t,e)}(t,n,o)})}(t,e,n,i)}(c,u.tissueFilter,u,t[0]),function(t,e,n,r){let i=t.createToolbar(n.toolbar,e);i.createDownloadSvgButton(n.buttons.download,n.svg,"gene-exp-plot.svg",n.clone),$(`#${n.toolbar}`).addClass("row"),$(`#${n.toolbar} .btn-group`).addClass("col-xs-12 col-lg-1 text-nowrap").css("display","flex"),$("<div></div>").appendTo(`#${n.toolbar}`).attr("id",`${n.toolbar}-plot-options`).attr("class","col-lg-11 text-nowrap");let o=$(`#${n.toolbar}-plot-options`);$("<div/>").appendTo(o).attr("id",n.plotOptionGroups.differentiation).attr("class","col-lg-2 col-xl-2").css("margin-right","11px"),$("<span/>").appendTo(`#${n.plotOptionGroups.differentiation}`).attr("class",`${n.root}-option-label`).html("Subset"),$("<div/>").appendTo(`#${n.plotOptionGroups.differentiation}`).attr("class","btn-group btn-group-sm");let a=$(`#${n.plotOptionGroups.differentiation} .btn-group`);$(`<button class="btn btn-default" id="${n.buttons.noDiff}">None</button>`).appendTo(a),$(`<button class="btn btn-default" id="${n.buttons.sexDiff}">Sex</button>`).appendTo(a),$('<span><i id="spinner" class="fas fa-sync fa-spin" style="margin-left: 5px; display:none;"></i></span>').appendTo(`#${n.plotOptionGroups.differentiation}`),$("<div/>").appendTo(o).attr("id",n.plotOptionGroups.scale).attr("class","col-lg-2 col-xl-2"),$("<span/>").appendTo(`#${n.plotOptionGroups.scale}`).attr("class",`${n.root}-option-label`).html("Scale"),$("<div/>").appendTo(`#${n.plotOptionGroups.scale}`).attr("class","btn-group btn-group-sm");let s=$(`#${n.plotOptionGroups.scale} .btn-group`);$(`<button class="btn btn-default" id="${n.buttons.logScale}">Log</button>`).appendTo(s),$(`<button class="btn btn-default" id="${n.buttons.linearScale}">Linear</button>`).appendTo(s),$("<div/>").appendTo(o).attr("class",`${n.plotOptionGroups.sort} col-lg-2 col-xl-2`).attr("id","vplot-alpha-sorts"),$("<span/>").appendTo(`.${n.plotOptionGroups.sort}#vplot-alpha-sorts`).attr("class",`${n.root}-option-label`).html("Tissue Sort"),$("<div/>").appendTo(`.${n.plotOptionGroups.sort}#vplot-alpha-sorts`).attr("class","btn-group btn-group-sm").attr("id",`${n.plotOptionGroups.sort}-alpha`);let u=$(`#${n.plotOptionGroups.sort}-alpha.btn-group`);$(`<button class="btn btn-default fa fa-sort-alpha-down" id="${n.buttons.ascAlphaSort}"></button>`).appendTo(u),$(`<button class="btn btn-default fa fa-sort-alpha-up" id="${n.buttons.descAlphaSort}"></button>`).appendTo(u),$("<div/>").appendTo(o).attr("class",`${n.plotOptionGroups.sort} col-lg-2 col-xl-2`).attr("id","vplot-num-sorts"),$("<span/>").appendTo(`.${n.plotOptionGroups.sort}#vplot-num-sorts`).attr("class",`${n.root}-option-label`).html("Median Sort"),$("<div/>").appendTo(`.${n.plotOptionGroups.sort}#vplot-num-sorts`).attr("class","btn-group btn-group-sm").attr("id",`${n.plotOptionGroups.sort}-num`);let c=$(`#${n.plotOptionGroups.sort}-num.btn-group`);$(`<button class="btn btn-default fa fa-sort-numeric-down" id="${n.buttons.ascSort}"></button>`).appendTo(c),$(`<button class="btn btn-default fa fa-sort-numeric-up" id="${n.buttons.descSort}"></button>`).appendTo(c),$("<div/>").appendTo(o).attr("id",n.plotOptionGroups.outliers).attr("class","col-lg-2 col-xl-2"),$("<span/>").appendTo(`#${n.plotOptionGroups.outliers}`).attr("class",`${n.root}-option-label`).html("Outliers"),$("<div/>").appendTo(`#${n.plotOptionGroups.outliers}`).attr("class","btn-group btn-group-sm");let h=$(`#${n.plotOptionGroups.outliers} .btn-group`);$(`<button class="btn btn-default" id="${n.buttons.outliersOn}">On</button>`).appendTo(h),$(`<button class="btn btn-default" id="${n.buttons.outliersOff}">Off</button>`).appendTo(h),bt(`#${n.plotOptionsModal} .modal-body button`).classed("active",!1),vt(`#${n.buttons.ascAlphaSort}`).classed("active",!0),vt(`#${n.buttons.logScale}`).classed("active",!0),vt(`#${n.buttons.noDiff}`).classed("active",!0),vt(`#${n.buttons.outliersOff}`).classed("active",!0),i.createButton(n.buttons.filter,"fa-filter");let f=vt(`#${n.buttons.filter}`).on("mouseover",()=>{i.tooltip.show("Filter Tissues")}).on("mouseout",()=>{i.tooltip.hide()});$(`.${n.plotOptionGroups.sort} button`).on("click",e=>{$(e.currentTarget).hasClass("active")||(t.genePlotSort=e.target.id.replace(`${n.root}-`,""),bt(`.${n.plotOptionGroups.sort} button`).classed("active",!1),vt(`button#${e.target.id}`).classed("active",!0),Ko(t,n))}),$(`#${n.plotOptionGroups.scale} button`).on("click",e=>{if($(e.currentTarget).hasClass("active"))return;bt(`#${n.plotOptionGroups.scale} button`).classed("active",!1),vt(`button#${e.target.id}`).classed("active",!0),e.target.id==n.buttons.logScale?(Qo(t.data,!0),Qo(t.allData,!0),t.updateYScale("log10(TPM+1)"),t.scaleView="log"):(Qo(t.data,!1),Qo(t.allData,!1),t.updateYScale("TPM"),t.scaleView="linear");let r=vt(`#${n.root} svg g`);void 0!==t.plotTitle&&t.addPlotTitle(r,t.plotTitle),t.subset?ea(t,r,t.tissueDict,"bottom"):(vt(`#${n.svg} #violinLegend`).remove(),ta(r)),t.showOutliers?bt(`#${n.svg} path.violin`).classed("outlined",!1):($(`#${n.svg} .violin-outliers`).hide(),bt(`#${n.svg} path.violin`).classed("outlined",!0))}),$(`#${n.plotOptionGroups.outliers} button`).on("click",e=>{$(e.currentTarget).hasClass("active")||(bt(`#${n.plotOptionGroups.outliers} button`).classed("active",!1),e.target.id==n.buttons.outliersOn?($(`#${n.svg} .violin-outliers`).show(),bt(`#${n.svg} path.violin`).classed("outlined",!1),t.showOutliers=!0):($(`#${n.svg} .violin-outliers`).hide(),bt(`#${n.svg} path.violin`).classed("outlined",!0),t.showOutliers=!1),vt(e.currentTarget).classed("active",!0))}),$(`#${n.plotOptionGroups.differentiation} button`).on("click",e=>{if(!$(e.currentTarget).hasClass("active"))if($(`#${n.toolbar}-plot-options button`).prop("disabled",!0),$(`#${n.toolbar} #spinner`).show(),bt(`#${n.plotOptionGroups.differentiation} button`).classed("active",!1),vt(`button#${e.target.id}`).classed("active",!0),e.target.id==n.buttons.sexDiff){const e=[l(r.geneExp+t.gencodeId+"&attributeSubset=sex")];Promise.all(e).then(function(e){const r="log"==t.scaleView?Jo(e[0],t.tIdNameMap,t.groupColorDict):Jo(e[0],t.tIdNameMap,t.groupColorDict,!1),i=t.data.map(t=>t.group);t.allData=r.map(t=>t),t.data=r.filter(t=>-1!=i.indexOf(t.group)),t.reset(),t.subset=!0;let o=vt(`#${n.root} svg g`);ea(t,o,t.tissueDict,"bottom"),t.showOutliers||($(`#${n.svg} .violin-outliers`).hide(),bt(`#${n.svg} path.violin`).classed("outlined",!0)),void 0!==t.plotTitle&&t.addPlotTitle(o,t.plotTitle),$(`#${n.toolbar}-plot-options button`).prop("disabled",!1),$(`#${n.toolbar} #spinner`).hide()})}else{const e=[l(r.geneExp+t.gencodeId)];Promise.all(e).then(function(e){const r="log"==t.scaleView?Jo(e[0],t.tIdNameMap,t.groupColorDict):Jo(e[0],t.tIdNameMap,t.groupColorDict,!1),i=t.data.map(t=>t.group);t.allData=r.map(t=>t),t.data=r.filter(t=>-1!=i.indexOf(t.group)),t.reset(),t.subset=!1;let o=vt(`#${n.root} svg g`);vt(`#${n.svg} #violinLegend`).remove(),t.showOutliers||($(`#${n.svg} .violin-outliers`).hide(),bt(`#${n.svg} path.violin`).classed("outlined",!0)),void 0!==t.plotTitle&&t.addPlotTitle(o,t.plotTitle),ta(o),$(`#${n.toolbar} button`).prop("disabled",!1),$(`#${n.toolbar} #spinner`).hide()})}}),f.on("click",(t,e,n)=>{$("#gene-expr-vplot-filter-modal").modal("show")})}(c,p,u,i)})},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
